Name
Integer Get_number_of_command_arguments()
Description
Get the number of tokens in the program command-line.
The number of tokens is returned as the function return value.
For some example code, see Command Line-Arguments .
ID = 432


Name
Integer Get_command_argument(Integer i,Text &argument)
Description
Get the i’th token from the command-line.
The token is returned by the Text argument.
The arguments start from 1.
A function return value of zero indicates the i’th argument was successfully returned.
For some example code, see Command Line-Arguments .
ID = 433


Name
void Exit(Integer exit_code)
Description
Immediately exit the program and write the message
macro exited with code exit_code
to the information/error message area of the macro console panel.
ID = 417


Name
void Exit(Text msg)
Description
Immediately exit the program and write the message
macro exited with message msg
to the information/error message area of the macro console panel.
ID = 418


Name
void Destroy_on_exit( )
Description
Destroy current macro console panel when exit the program.
ID = 815


Name
void Retain_on_exit( )
Description
Retain current macro console panel on the screen after exit the macro.
ID = 816


ID = 192


ID = 193


ID = 194


ID = 203


ID = 204


ID = 205


ID = 206


ID = 207


ID = 208


ID = 209


ID = 210


ID = 211


ID = 212


Name
Integer Text_length(Text text)
Description
The function return value is the length of the Text text.
ID = 381


Name
Integer Numchr(Text text)
Description
The function return value is the position of the last non-blank character in the Text text.
If there are no non-blank characters, the return value is zero.
ID = 478


Name
Text Text_upper(Text text)
Description
Create a Text from the Text text that has all the alphabetic characters converted to upper-case.
The function return value is the upper case Text.
ID = 383


Name
Text Text_lower(Text text)
Description
Create a Text from the Text text that has all the alphabetic characters converted to lowercase.
The function return value is the lower case Text.
ID = 384


Name
Text Text_justify(Text text)
Description
Create a Text from the Text text that has all the leading and trailing spaces removed.
The function return value is the justified Text.
ID = 382


Name
Integer Find_text(Text text,Text tofind)
Description
Find the first occurrence of the Text tofind within the Text text.
If tofind exists within text, the start position of tofind is returned as the function return value.
If tofind does not exist within text, a start position of zero is returned as the function return value.
Hence a function return value of zero indicates the Text tofind does not exist within the Text
text.
ID = 380


Name
Text Get_subtext(Text text,Integer start,Integer end)
Description
From the Text text, create a new Text from character position start to character position end
inclusive.
The function return value is the sub-Text.
ID = 379


Name
void Set_subtext(Text &text,Integer start,Text sub)
Description
Set the Text text from character position start to be the Text sub. The existing characters of text
are overwritten by sub.
If required, Text text will be automatically extended to fit sub.
If start is greater than the length of text, text will be extended with spaces and sub inserted at
position start.
There is no function return value.
ID = 389


Name
void Insert_text(Text &text,Integer start,Text sub)
Description
Insert the Text sub into Text text starting at position start. The displaced characters of text are
placed after sub.
The Text text is automatically extended to fit sub and no characters of text are lost.
There is no function return value.
ID = 390


Name
Integer From_text(Text text, Integer &value)
Description
Convert the Text text to an Integer value. The text should only include digits.
The function return value is zero if the conversion is successful.
ID = 30


Name
Integer From_text(Text text, Integer &value,Text format)
Description
Convert the Text text to an Integer value using the Text format as a C++ format string.
The function return value is zero if the conversion is successful.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 387


Name
Integer From_text(Text text, Real &value)
Description
Convert the Text text to a Real value.
The function return value is zero if the conversion is successful.
ID = 31


Name
Integer From_text(Text text, Real &value,Text format)
Description
Convert the Text text to a Real value using the Text format as a C++ format string.
The function return value is zero if the conversion is successful.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 388


Name
Integer From_text(Text text,Text &value,Text format)
Description
Convert the Text text to a Text value using the Text format as a C++ format.
The function return value is zero if the conversion is successful.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 392


Name
Integer From_text(Text text,Dynamic_Text &dtext)
Description
Break the Text text into separate words (tokens) and add the individual words to the
Dynamic_Text dtext.
Free format is used to break text up individual words EXCEPT for characters between matching
double quotes ".
Hence any characters (including blanks) between matching double quotes are considered to be
one word, and one or more spaces are the separators between individual words.
For example, in
This is "an example"
there are three words - "This", "is", and "an example".
Note that there is more than one space between "This" and "is" but they are ignored and taken to
be only one space.
The function return value is the number of words returned in dtext.
ID = 377


Name
Integer From_text(Text text,Integer delimiter,Integer separator,Dynamic_Text &text)
Description
Break the Text text into separate words (tokens) and add the individual words to the
Dynamic_Text dtext.
The character used to break up the text into individual words is given by the Integer separator.
Any characters between matching the character given by the Integer delimiter (including any
characters equal to separator) are considered to be one word.
For example, if the delimiter is double quotes " and the separator is a semi-colon ; then
This;is;"an;example"
has three words - "this", "is", and "an;example".
Note: delimiter and separator are Integers and can be specified by the actual number of a
character or by giving the actual character between single quotes.
For example,
separator = 32 is the number for a space
separator = ’ ’ is the number for a space
separator = ’a’

will be the number for the letter a

separator = ’\t’

will be the number for a tab

The function return value is the number of words returned in dtext.
ID = 2105


Name
Text To_text(Integer value)
Description
Convert the Integer value to text.
The function return value is the converted value.
ID = 32


Name
Text To_text(Integer value,Text format)
Description
Convert the Integer value to text using the Text format as a C++ format string.
The function return value is the converted value.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 385


Name
Text To_text(Real value,Integer no_dec)
Description
Convert the Real value to text with no_dec decimal places.
If the Integer argument no_dec is missing, the number of decimal places defaults to zero.
The function return value is the converted value.
ID = 33


Name
Text To_text(Real value,Text format)
Description
Convert the Real value to text using the Text format as a C++ format string.
The function return value is the converted value.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 386


Name
Text To_text(Text text,Text format)
Description
Convert the Text text to text using the Text format as a C++ format string.
The function return value is the converted value.
Warning
The user is responsible for ensuring that the format string is sensible.
ID = 391


Name
Integer Get_char(Text t,Integer pos,Integer &c)
Description
Get a character from Text t. The position of the character is pos.
The character is returned in the Integer c.
The function return value of zero indicates the character returned successfully.
ID = 829


Name
Integer Set_char(Text &t,Integer n,Integer c)
Description
Set the nth position (where position starts at 1 for the first character) in the Text t to the character
given by integer c. Note that ’c’ can be used to specify the number corresponding to the letter c.
A function return value of zero indicates the Text character is successfully set.
ID = 830


Name
Integer Null(Textstyle_Data textdata)
Description
Set the Textstyle_Data textdata to null.
A function return value of zero indicates the textdata was successfully nulled.
ID = 1639


Name
Integer Null(Textstyle_Data textdata,Integer mode)
Description
Various fields of a Textstyle_Data can be turned of so they won’t display (and so can’t be set) in a
Textstyle_Data pop-up.
To turn off the Textstyle_Data fields, the Null(Textstyle_Data textdata,Integer mode) call is made with
mode giving what fields are to be turned off.
The values of mode and the Textstyle_Data field that they turn off are:
Textstyle_Data_Textstyle = 0x00001,
Textstyle_Data_Colour = 0x00002,
Textstyle_Data_Type = 0x00004,
Textstyle_Data_Size = 0x00008,

Textstyle_Data_Offset

= 0x00010,

Textstyle_Data_Raise

= 0x00020,

Textstyle_Data_Justify_X = 0x00040,
Textstyle_Data_Justify_Y = 0x00080,
Textstyle_Data_Angle

= 0x00100,

Textstyle_Data_Slant

= 0x00200,

Textstyle_Data_X_Factor = 0x00400,
Textstyle_Data_Name

= 0x00800,

Textstyle_Data_Underline = 0x01000,
Textstyle_Data_Strikeout = 0x02000,
Textstyle_Data_Italic

= 0x04000,

Textstyle_Data_Weight
Textstyle_Data_Whiteout
Textstyle_Data_Border
Textstyle_Data_All

= 0x08000,
= 0x10000,
= 0x20000,

= 0xfffff,

Note: the fields can be turned off one at a time by calling Null(Textstyle_Data textdata,Integer mode)
a number of times, and/or more that one can be turned off at the one time by combining them
with the logical OR operator "|".
For example,
Textstyle_Data_Offset | Textstyle_Data_Raise
will turn off both the fields Textstyle_Data_Offset and Textstyle_Data_Raise.
LJG? Please add to Set_up.h

Textstyle Data

Page 85

12d Model Programming Language Manual

A function return value of zero indicates the parts of the Textstyle_Data were successfully nulled.
ID = 1640


Name
Integer Set_data(Textstyle_Data textdata,Text text_data)
Description
Set the data of type Text for the Textstyle_Data text to text_data.
A function return value of zero indicates the data was successfully set.
ID = 2163


Name
Integer Get_data(Textstyle_Data textstyle,Text &text_data)
Description
Get the data of type Text from the Textstyle_Data textstyle and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 2162


Name
Integer Set_textstyle(Textstyle_Data textdata,Text style)
Description
For the Textstyle_Data textdata, set the textstyle to style.
A function return value of zero indicates the textstyle was successfully set.
ID = 1652


Name
Integer Get_textstyle(Textstyle_Data textdata,Text &style)
Description
From the Textstyle_Data textdata, get the style and return it in style.
A function return value of zero indicates the style was successfully returned.
ID = 1641


Name
Integer Set_colour(Textstyle_Data textdata,Integer colour_num)
Description

Page 86

Textstyle Data

Chapter 5 12dPL Library Calls

For the Textstyle_Data textdata, set the colour number to be colour_num.
A function return value of zero indicates the colour number was successfully set.
ID = 1653


Name
Integer Get_colour(Textstyle_Data textdata,Integer &colour_num)
Description
From the Textstyle_Data textdata, get the colour number and return it in colour_num.
A function return value of zero indicates the colour number was successfully returned.
ID = 1642


Name
Integer Set_text_type(Textstyle_Data textdata,Integer type)
Description
For the Textstyle_Data textdata, set the units (pixel, world, paper) of the Textstyle_Data to be
given by the Integer type.
For the value for each type of units, see Textstyle Data . The default units is pixel (type = 0).
A function return value of zero indicates the text units was successfully set.
ID = 1654


Name
Integer Get_text_type(Textstyle_Data textdata,Integer &type)
Description
For the Textstyle_Data textdata, get the units (pixel, world, paper) of the Textstyle_Data and
return the value in type.
For the values of type, see Textstyle Data . The default units is pixel (type = 0).
If the field is not set then the function return value is 1.
A function return value of zero indicates the text units was successfully returned.
ID = 1643


Name
Integer Set_size(Textstyle_Data textdata,Real height)
Description
For the Textstyle_Data textdata, set the height to be height.
A function return value of zero indicates the height was successfully set.
ID = 1655


Name
Integer Get_size(Textstyle_Data textdata,Real &height)
Description
From the Textstyle_Data textdata, get the height and return it in height.
A function return value of zero indicates the height was successfully returned.
ID = 1644


Name
Integer Set_offset(Textstyle_Data textdata,Real offset)
Description
For the Textstyle_Data textdata, set the offset to be offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the offset was successfully set.
ID = 1656


Name
Integer Get_offset(Textstyle_Data textdata,Real &offset)
Description
From the Textstyle_Data textdata, get the offset and return it in offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the offset was successfully returned.
ID = 1645


Name
Integer Set_raise(Textstyle_Data textdata,Real raise)
Description
For the Textstyle_Data textdata, set the raise to be raise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the raise was successfully set.
ID = 1657


Name
Integer Get_raise(Textstyle_Data textdata,Real &raise)

Page 88

Textstyle Data

Chapter 5 12dPL Library Calls

Description
From the Textstyle_Data textdata, get the raise and return it in raise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the raise was successfully returned.
ID = 1646


Name
Integer Set_justify(Textstyle_Data textdata,Integer justify)
Description
For the Textstyle_Data textdata, set the justification number to be justify.
justify can have the value 1 to 9. For the meaning of the values for justify, see Textstyle Data .
A function return value of zero indicates the justification number was successfully set.
ID = 1658


Name
Integer Get_justify(Textstyle_Data textdata,Integer &justify)
Description
From the Textstyle_Data textdata, get the justification number and return it in justify.
justify can have the value 1 to 9. For the meaning of the values for justify, see Textstyle Data .
A function return value of zero indicates the justification number was successfully returned.
ID = 1647


Name
Integer Set_angle(Textstyle_Data textdata,Real angle)
Description
For the Textstyle_Data textdata, set the angle to be angle.
angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
For a diagram, see Textstyle Data .
A function return value of zero indicates the angle was successfully set.
ID = 1659


Name
Integer Get_angle(Textstyle_Data textdata,Real &angle)
Description
From the Textstyle_Data textdata, get the angle and return it in angle.

Textstyle Data

Page 89

12d Model Programming Language Manual

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
For a diagram, see Textstyle Data .
A function return value of zero indicates the angle was successfully returned.
ID = 1648


Name
Integer Set_slant(Textstyle_Data textdata,Real slant)
Description
For the Textstyle_Data textdata, set the slant to be slant.
A function return value of zero indicates the slant was successfully set.
ID = 1660


Name
Integer Get_slant(Textstyle_Data textdata,Real &slant)
Description
From the Textstyle_Data textdata, get the slant of the textstyle and return it in slant.
A function return value of zero indicates the textstyle was successfully returned.
ID = 1649


Name
Integer Set_x_factor(Textstyle_Data textdata,Real xfactor)
Description
For the Textstyle_Data textdata, set the xfactor to be xfactor.
A function return value of zero indicates the xfactor was successfully set.
ID = 1661


Name
Integer Get_x_factor(Textstyle_Data textdata,Real &xfactor)
Description
From the Textstyle_Data textdata, get the xfactor and return it in xfactor.
A function return value of zero indicates the xfactor was successfully returned.
ID = 1650


Name

Page 90

Textstyle Data

Chapter 5 12dPL Library Calls

Integer Set_name(Textstyle_Data textdata,Text name)
Description
For the Textstyle_Data textdata, set the name to be name.
A function return value of zero indicates the name was successfully set.
ID = 1662


Name
Integer Get_name(Textstyle_Data textdata,Text &name)
Description
From the Textstyle_Data textdata, get the name of the Textstyle_Data and return it in name.
A function return value of zero indicates the name was successfully returned.
ID = 1651


Name
Integer Set_whiteout(Textstyle_Data textdata,Integer colour)
Description
For the Textstyle_Data textdata, set the colour number of the colour used for the whiteout box
around the text, to be colour.
If no text whiteout is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2753


Name
Integer Get_whiteout(Textstyle_Data textdata,Integer &colour)
Description
For the Textstyle_Data textdata, get the colour number that is used for the whiteout box around
the text. The whiteout colour is returned as Integer colour.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2754


Name

Textstyle Data

Page 91

12d Model Programming Language Manual

Integer Set_border(Textstyle_Data textdata,Integer colour)
Description
For the Textstyle_Data textdata, set the colour number of the colour used for the border of the
whiteout box around the text, to be colour.
If no whiteout border is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2763


Name
Integer Get_border(Textstyle_Data textdata,Integer &colour)
Description
For the Textstyle_Data textdata, get the colour number that is used for the border of the whiteout
box around the text. The whiteout border colour is returned as Integer colour.
NO_COLOUR is the returned as the colour number if there is no whiteout border.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2764


Name
Integer Set_ttf_underline(Textstyle_Data textdata,Integer underline)
Description
For the Textstyle_Data textdata, set the underline state to underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
A function return value of zero indicates underline was successfully set.
ID = 2620


Name
Integer Get_ttf_underline(Textstyle_Data textdata,Integer &underline)
Description
For the Textstyle_Data textdata, get the underline state and return it in underline.
If underline = 1, then for a true type font, the text will be underlined.
If underline = 0, then text will not be underlined.

Page 92

Textstyle Data

Chapter 5 12dPL Library Calls

For a diagram, see Textstyle Data .
A function return value of zero indicates underlined was successfully returned.
ID = 2616


Name
Integer Set_ttf_strikeout(Textstyle_Data textdata,Integer strikeout)
Description
For the Textstyle_Data textdata, set the strikeout state to strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
A function return value of zero indicates strikeout was successfully set.
ID = 2621


Name
Integer Get_ttf_strikeout(Textstyle_Data textdata,Integer &strikeout)
Description
For the Textstyle_Data textdata, get the strikeout state and return it in strikeout.
If strikeout = 1, then for a true type font, the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
A function return value of zero indicates strikeout was successfully returned.
ID = 2617


Name
Integer Set_ttf_italic(Textstyle_Data textdata,Integer italic)
Description
For the Textstyle_Data textdata, set the italic state to italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A function return value of zero indicates italic was successfully set.
ID = 2622


Name
Integer Get_ttf_italic(Textstyle_Data textdata,Integer &italic)

Textstyle Data

Page 93

12d Model Programming Language Manual

Description
For the Textstyle_Data textdata, get the italic state and return it in italic.
If italic = 1, then for a true type font, the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A function return value of zero indicates italic was successfully returned.
ID = 2618


Name
Integer Set_ttf_outline(Textstyle_Data textdata,Integer outline)
Description
For the Textstyle_Data textdata, set the outline state to outline.
For the Element elt of type Text, set the outline state to outline.
If outline = 1, then for a true type font the text will be only shown in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A function return value of zero indicates outline was successfully set.
ID = 2773


Name
Integer Get_ttf_outline(Textstyle_Data textdata,Integer &outline)
Description
For the Textstyle_Data textdata, get the outline state and return it in outline.
If outline = 1, then for a true type font the text will be shown only in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A function return value of zero indicates outline was successfully returned.
ID = 2774


Name
Integer Set_ttf_weight(Textstyle_Data textdata,Integer weight)
Description
For the Textstyle_Data textdata, set the font weight to weight.
For the list of allowable weights, go to Allowable Weights
A function return value of zero indicates weight was successfully set.
ID = 2623


Name
Integer Get_ttf_weight(Textstyle_Data textdata,Integer &weight)
Description
For the Textstyle_Data textdata, get the font weight and return it in weight.
For the list of allowable weights, go to Allowable Weights
A function return value of zero indicates weight was successfully returned.
ID = 2619


ID = 1


ID = 2


ID = 3


ID = 5


ID = 4


ID = 6


ID = 7


ID = 8


ID = 9


ID = 10


ID = 11


ID = 12


ID = 13


ID = 14


ID = 15


ID = 16


ID = 17


ID = 18


ID = 330


ID = 19


ID = 20


Name
void Set_random_number(Integer seed,Integer method)
Description
Set up the random number generator with the Integer seed, seed (the current time in seconds is
a good seed).
If method is any value other than 1, the standard c library random number generator is used.
If method is 1, then a far more random seed generator than the standard c library one is used.
Once the random number generator is set with a seed, calling Get_Random_number will return a
random number.
There is no function return value.
ID = 1900


Name
Integer Get_random_number()
Description
Generate the next random number as an Integer and return it as the function return value.
Note: the random number generator is initially set using Set_random_number.
ID = 1901


Name
Real Get_random_number_closed()
Description
Generate the next random number as a number between 0 and 1 inclusive, and return it as the
function return value.
Note: this function is only applicable is the random number generator is initially set using
Set_random_number with method = 1.
ID = 1933


Name
Real Get_random_number_open()
Description
Generate the next random number as a number between 0 (included) and 1 (not included), and
return it as the function return value.
Note: this function is only applicable is the random number generator is initially set using

Page 98

Random Numbers

Chapter 5 12dPL Library Calls

Set_random_number with method = 1.
ID = 1934


Name
Integer Set_vector(Vector2 &vect,Real value)
Description
Set the two components of the two dimensional vector vect to the same Real value, value.
A function return value of zero indicates the values were successfully set.
ID = 2306


Name
Integer Set_vector(Vector3 &vect,Real value)
Description
Set the three components of the three dimensional vector vect to the same Real value, value.
A function return value of zero indicates the values were successfully set.
ID = 2307


Name
Integer Set_vector(Vector4 &vect,Real value)
Description
Set the four components of the four dimensional vector vect to the same Real value, value.
A function return value of zero indicates the values were successfully set.
ID = 2308


Name
Integer Set_vector(Vector2 &vect,Real x,Real y)
Description
Set the first component of the two dimensional vector vect to the value x.
Set the second component of the two dimensional vector vect to the value y.
A function return value of zero indicates the values were successfully set.
ID = 2309


Name
Integer Set_vector(Vector3 &vect,Real x,Real y,Real z)
Description

Page 100

Vectors and Matrices

Chapter 5 12dPL Library Calls

Set the first component of the three dimensional vector vect to the value x.
Set the second component of the three dimensional vector vect to the value y.
Set the third component of the three dimensional vector vect to the value z.
A function return value of zero indicates the values were successfully set.
ID = 2310


Name
Integer Set_vector(Vector4 &vect,Real x,Real y,Real z,Real w)
Description
Set the first component of the four dimensional vector vect to the value x.
Set the second component of the four dimensional vector vect to the value y.
Set the third component of the four dimensional vector vect to the value z.
Set the fourth component of the four dimensional vector vect to the value w.
A function return value of zero indicates the values were successfully set.
ID = 2311


Name
Integer Get_vector(Vector2 &vect,Real &x,Real &y)
Description
For the two dimensional vector vect:
return the first component of vect in x.
return the second component of vect in y
A function return value of zero indicates the components were successfully returned.
ID = 2312


Name
Integer Get_vector(Vector3 &vect,Real &x,Real &y,Real &z)
Description
For the three dimensional vector vect:
return the first component of vect in x.
return the second component of vect in y
return the third component of vect in z
A function return value of zero indicates the components were successfully returned.
ID = 2313


Name

Vectors and Matrices

Page 101

12d Model Programming Language Manual

Integer Get_vector(Vector4 &vect,Real &x,Real &y,Real &z,Real &w)
Description
For the four dimensional vector vect:
return the first component of vect in x.
return the second component of vect in y
return the third component of vect in z
return the fourth component of vect in w
A function return value of zero indicates the components were successfully returned.
ID = 2314


Name
Integer Set_vector(Vector2 &vect,Integer index,Real value)
Description
Set component number index of the two dimensional vector vect to the value value.
A function return value of zero indicates the component was successfully set.
ID = 2315


Name
Integer Set_vector(Vector3 &vect,Integer index,Real value)
Description
Set component number index of the three dimensional vector vect to the value value.
A function return value of zero indicates the component was successfully set.
ID = 2316


Name
Integer Set_vector(Vector4 &vect,Integer index,Real value)
Description
Set component number index of the four dimensional vector vect to the value value.
A function return value of zero indicates the component was successfully set.
ID = 2317


Name
Integer Get_vector(Vector2 &vect,Integer index,Real &value)
For the two dimensional vector vect return the component number index in value.
A function return value of zero indicates the component was successfully returned.
Description

Page 102

Vectors and Matrices

Chapter 5 12dPL Library Calls

ID = 2318


Name
Integer Get_vector(Vector3 &vect,Integer index,Real &value)
Description
For the three dimensional vector vect return the component number index in value.
A function return value of zero indicates the component was successfully returned.
ID = 2319


Name
Integer Get_vector(Vector4 &vect,Integer index,Real &value)
Description
For the four dimensional vector vect return the component number index in value.
A function return value of zero indicates the component was successfully returned.
ID = 2320


Name
Real Get_vector(Vector2 &vect,Integer index)
Description
For the two dimensional vector vect, return the component number index as the return value of
the function.
ID = 2321


Name
Real Get_vector(Vector3 &vect,Integer index)
Description
For the three dimensional vector vect, return the component number index as the return value of
the function.
ID = 2322


Name
Real Get_vector(Vector4 &vect,Integer index)
Description
For the four dimensional vector vect, return the component number index as the return value of
the function.

Vectors and Matrices

Page 103

12d Model Programming Language Manual

ID = 2323


Name
Integer Get_vector_length(Vector2 &vect,Real &value)
Description
For the two dimensional vector vect, return the length of the vector in value.
Note: for V(x,y), length = square root of (x*x + y*y)
A function return value of zero indicates the length was successfully returned.
ID = 2324


Name
Integer Get_vector_length(Vector3 &vect,Real &value)
Description
For the three dimensional vector vect, return the length of the vector in value.
Note: for V(x,y,z), length = square root of (x*x + y*y +z*z)
A function return value of zero indicates the length was successfully returned.
ID = 2325


Name
Integer Get_vector_length(Vector4 &vect,Real &value)
Description
For the four dimensional vector vect, return the length of the vector in value.
Note: for V(x,y,z,w), length = square root of (x*x + y*y +z*z + w*w)
A function return value of zero indicates the length was successfully returned.
ID = 2326


Name
Real Get_vector_length(Vector2 &vect)
Description
Standard vector length and return it as return value
For the two dimensional vector vect, return the length of the vector as the return value of the
function.
Note: for V(x,y), length = square root of (x*x + y*y)
ID = 2327


Name
Real Get_vector_length(Vector3 &vect)
Description
For the three dimensional vector vect, return the length of the vector as the return value of the
function.
Note: for V(x,y,z), length = square root of (x*x + y*y +z*z)
ID = 2328


Name
Real Get_vector_length(Vector4 &vect)
Description
For the four dimensional vector vect, return the length of the vector as the return value of the
function.
Note: for V(x,y,z,w), length = square root of (x*x + y*y +z*z + w*w)
ID = 2329


Name
Integer Get_vector_length_squared(Vector2 &vect,Real &value)
Description
For the two dimensional vector vect, return the square of the length of the vector in value.
Note: for V(x,y), length squared = x*x + y*y
A function return value of zero indicates the length squared was successfully returned.
ID = 2330


Name
Integer Get_vector_length_squared(Vector3 &vect,Real &value)
Description
For the three dimensional vector vect, return the square of the length of the vector in value.
Note: for V(x,y,z), length squared = x*x + y*y + z*z
A function return value of zero indicates the length squared was successfully returned.
ID = 2331


Name
Integer Get_vector_length_squared(Vector4 &vect,Real &value)
Description

Vectors and Matrices

Page 105

12d Model Programming Language Manual

For the four dimensional vector vect, return the square of the length of the vector in value.
Note: for V(x,y,z,w), length squared = x*x + y*y + z*z + w*w
A function return value of zero indicates the length squared was successfully returned.
ID = 2332


Name
Real Get_vector_length_squared(Vector2 &vect)
Description
For the two dimensional vector vect, return the square of the length of the vector as the function
return value.
Note: for V(x,y), length squared = x*x + y*y
ID = 2333


Name
Real Get_vector_length_squared(Vector3 &vect)
Description
For the three dimensional vector vect, return the square of the length of the vector as the
function return value.
Note: for V(x,y,z), length squared = x*x + y*y + z*z
ID = 2334


Name
Real Get_vector_length_squared(Vector4 &vect)
Description
For the four dimensional vector vect, return the square of the length of the vector as the function
return value.
Note: for V(x,y,z,w), length squared = x*x + y*y + z*z + w*w
ID = 2335


Name
Integer Get_vector_normalize(Vector2 &vect,Vector2 &normalised)
Description
For the two dimensional vector vect, return the normalised vector of vect in the Vector2
normalised.
Note: for a normalised vector, length = 1 and for the vector V(x,y), the normalised vector
N(a,b) is:
N(a,b) = (x/length(V),y/length(V))

Page 106

Vectors and Matrices

Chapter 5 12dPL Library Calls

A function return value of zero indicates the normalised vector was successfully returned.
ID = 2336


Name
Integer Get_vector_normalize(Vector3 &vect,Vector3 &normalised)
Description
For the three dimensional vector vect, return the normalised vector of vect in the Vector3
normalised.
Note: for a normalised vector, length = 1 and for the vector V(x,y,z), the normalised vector
N(a,b,c) is:
N(a,b,c) = (x/length(V),y/length(V),z/length(V))
A function return value of zero indicates the normalised vector was successfully returned.
ID = 2337


Name
Integer Get_vector_normalize(Vector4 &vect,Vector4 &normalised)
Description
For the four dimensional vector vect, return the normalised vector of vect in the Vector4
normalised.
Note: for a normalised vector, length = 1 and for the vector V(x,y,z,w), the normalised vector
N(a,b,c,d) is:
N(a,b,c,d) = (x/length(V),y/length(V),z/length(V),w/length(V))
A function return value of zero indicates the normalised vector was successfully returned.
ID = 2338


Name
Vector2 Get_vector_normalize(Vector2 &vect)
Description
For the two dimensional vector vect, return the normalised vector of vect as the function return
value.
Note: for a normalised vector, length = 1 and for the vector V(x,y), the normalised vector
N(a,b) is:
N(a,b) = (x/length(V),y/length(V))
ID = 2339


Name
Vector3 Get_vector_normalize(Vector3 &vect)

Vectors and Matrices

Page 107

12d Model Programming Language Manual

Description
For the three dimensional vector vect, return the normalised vector as the function return value.
Note: for a normalised vector, length = 1 and for the vector V(x,y,z), the normalised vector
N(a,b,c) is:
N(a,b,c) = (x/length(V),y/length(V),z/length(V))
ID = 2340


Name
Vector4 Get_vector_normalize(Vector4 &vect)
Description
For the four dimensional vector vect, return the normalised vector as the function return value.
Note: for a normalised vector, length = 1 and for the vector V(x,y,z,w), the normalised vector
N(a,b,c,d) is:
N(a,b,c,d) = (x/length(V),y/length(V),z/length(V),w/length(V))
ID = 2341


Name
Integer Get_vector_homogenize(Vector3 &vect,Vector3 &homogenized)
Description
For the three dimensional vector vect, return the homogenized vector of vect in the Vector3
homogenized.
Note: for a homogenized vector, the third component = 1 and for the vector V(x,y,z), the
homogenized vector H(a,b,c) is:
H(a,b,c) = (x/z,y/z,1)
A function return value of zero indicates the homogenized vector was successfully returned.
ID = 2342


Name
Integer Get_vector_homogenize(Vector4 &vect,Vector4 &homogenized)
Description
For the four dimensional vector vect, return the homogenized vector of vect in the Vector4
homogenized.
Note: for a homogenized vector, the fourth component = 1 and for the vector V(x,y,z,w), the
homogenized vector H(a,b,c,d) is:
H(a,b,c,d) = (x/z,y/w,z/w,1)
A function return value of zero indicates the homogenized vector was successfully returned.
ID = 2343


Name
Vector3 Get_vector_homogenize(Vector3 &vect)
Description
For the three dimensional vector vect, return the homogenized vector of vect as the function
return value.
Note: for a homogenized vector, the third component = 1 and for the vector V(x,y,z), the
homogenized vector H(a,b,c) is:
H(a,b,c) = (x/z,y/z,1)
ID = 2344


Name
Vector4 Get_vector_homogenize(Vector4 &vect)
Description
For the four dimensional vector vect, return the homogenized vector of vect as the function
return value.
Note: for a homogenized vector, the fourth component = 1 and for the vector V(x,y,z,w), the
homogenized vector H(a,b,c,d) is:
H(a,b,c,d) = (x/z,y/w,z/w,1)
ID = 2345


Name
Integer Set_matrix_zero(Matrix3 &matrix)
Description
For the three by three Matrix3 matrix, set all the values in the matrix to zero.
A function return value of zero indicates the matrix was successfully zero’d.
ID = 2346


Name
Integer Set_matrix_zero(Matrix4 &matrix)
Description
For the four by four Matrix4 matrix, set all the values in the matrix to zero.
A function return value of zero indicates the matrix was successfully zero’d.
ID = 2347


Name
Integer Set_matrix_identity(Matrix3 &matrix)
Vectors and Matrices

Page 109

12d Model Programming Language Manual

Description
For the three by three Matrix3 matrix, set matrix to the identity matrix.
That is, for the matrix (row,column) values are:
matrix(1,1) = 1

matrix (1,2) = 0

matrix(1,3) = 0

matrix(2,1) = 0

matrix (2,2) = 1

matrix(2,3) = 0

matrix(3,1) = 0

matrix (3,2) = 0

matrix(3,3) = 1

A function return value of zero indicates the matrix was successfully set to the identity matrix.
ID = 2348


Name
Integer Set_matrix_identity(Matrix4 &matrix)
Description
For the four by four Matrix4 matrix, set matrix to the identity matrix.
That is, for the matrix (row,column) values are:
matrix(1,1) = 1

matrix (1,2) = 0

matrix(1,3) = 0

matrix(1,4) = 0

matrix(2,1) = 0

matrix (2,2) = 1

matrix(2,3) = 0

matrix(2,4) = 0

matrix(3,1) = 0

matrix (3,2) = 0

matrix(3,3) = 1

matrix(3,4) = 0

matrix(4,1) = 0

matrix (4,2) = 0

matrix(4,3) = 0

matrix(4,4) = 1

A function return value of zero indicates the matrix was successfully set to the identity matrix.
ID = 2349


Name
Integer Set_matrix(Matrix3 &matrix,Real value)
Description
For the three by three Matrix4 matrix, set all the values in the rows and columns of matrix to
value.
A function return value of zero indicates the matrix was successfully set to value.
ID = 2350


Name
Integer Set_matrix(Matrix4 &matrix,Real value)
Description
For the four by four Matrix4 matrix, set all the values in the rows and columns of matrix to value.
A function return value of zero indicates the matrix was successfully set to value.
ID = 2351


Name
Integer Set_matrix(Matrix3 &matrix,Integer row,Integer col,Real value)
Description
For the three by three Matrix3 matrix, set the value of matrix(row,col) to value.
A function return value of zero indicates the matrix(row,col) was successfully set to value.
ID = 2352


Name
Integer Set_matrix(Matrix4 &matrix,Integer row,Integer col,Real value)
Description
For the four by four Matrix4 matrix, set the value of matrix(row,col) to value.
A function return value of zero indicates the matrix(row,col) was successfully set to value.
ID = 2353


Name
Integer Get_matrix(Matrix3 &matrix,Integer row,Integer col,Real &value)
Description
For the three by three Matrix3 matrix, get the value of matrix(row,col) and return it in value.
A function return value of zero indicates the matrix(row,col) was successfully returned.
ID = 2354


Name
Integer Get_matrix(Matrix4 &matrix,Integer row,Integer col,Real &value)
Description
For the four by four Matrix4 matrix, get the value of matrix(row,col) and return it in value.
A function return value of zero indicates the matrix(row,col) was successfully returned.
ID = 2355


Name
Real Get_matrix(Matrix3 &matrix,Integer row,Integer col)
Description
For the three by three Matrix3 matrix, the value of matrix(row,col) is returned as the function
return value.
ID = 2356


Name
Real Get_matrix(Matrix4 &matrix,Integer row,Integer col)
Description
For the four by four Matrix3 matrix, the value of matrix(row,col) /.
ID = 2357


Name
Integer Set_matrix_row(Matrix3 &matrix,Integer row,Vector3 &vect)
Description
For the three by three Matrix3 matrix, set the values of row row to the values of the components
of the Vector3 vect. That is:
matrix(row,1) = vect(1)

matrix(row,2) = vect(2)

matrix(row,3) = vect(3).

A function return value of zero indicates that the row of matrix was successfully set.
ID = 2358


Name
Integer Set_matrix_row(Matrix4 &matrix,Integer row,Vector4 &vect)
Description
For the four by four Matrix4 matrix, set the values of row row to the values of the components of
the Vector4 vect. That is:
matrix(row,1)=vect(1) matrix(row,2)=vect(2) matrix(row,3)=vect(3) matrix(row,4)=vect(4).
A function return value of zero indicates the row of matrix was successfully set.
ID = 2359


Name
Integer Get_matrix_row(Matrix3 &matrix,Integer row,Vector3 &vect)
Description
For the three dimensional vector vect, set the values of vect to the values of row row of the
three by three Matrix3 matrix. That is:
vect(1) = matrix(row,1)

vect(2) = matrix(row,2)

vect(3) = matrix(row,3).

A function return value of zero indicates that the components of vect were successfully set.
ID = 2360


Name
Integer Get_matrix_row(Matrix4 &matrix,Integer row,Vector4 &vect)

Page 112

Vectors and Matrices

Chapter 5 12dPL Library Calls

Description
For the four dimensional vector vect, set the values of vect to the values of row row of the four
by four Matrix4 matrix. That is:
vect(1)=matrix(row,1) vect(2)=matrix(row,2) vect(3)=matrix(row,3) vect(4)=matrix(row,4).
A function return value of zero indicates that the components of vect were successfully set.
ID = 2361


Name
Vector3 Get_matrix_row(Matrix3 &matrix,Integer row)
Description
For the three by three Matrix3 matrix, the values of row row of matrix are returned as the
Vector3 function return value.
ID = 2362


Name
Vector4 Get_matrix_row(Matrix4 &matrix,Integer row)
Description
For the four by four Matrix4 matrix, the values of row row of matrix are returned as the Vector4
function return value.
ID = 2363


Name
Integer Get_matrix_transpose(Matrix3 &source,Matrix3 &target)
Description
For the three by three Matrix3 matrix, return the transpose of matrix as Matrix3 target.
That is, target(row,column) = matrix(column,row).
A function return value of zero indicates the matrix transpose was successfully returned.
ID = 2364


Name
Integer Get_matrix_transpose(Matrix4 &source,Matrix4 &target)
Description
For the four by four Matrix3 matrix, return the transpose of matrix as Matrix4 target.
That is, target(row,column) = matrix(column,row).
A function return value of zero indicates the matrix transpose was successfully returned.
ID = 2365


Name
Matrix3 Get_matrix_transpose(Matrix3 &source)
Description
For the three by three Matrix3 source, return the transpose of matrix as the function return value.
ID = 2366


Name
Matrix4 Get_matrix_transpose(Matrix4 &source)
Description
For the four by four Matrix4 source, return the transpose of matrix as the function return value.
ID = 2367


Name
Integer Get_matrix_inverse(Matrix3 &source,Matrix3 &target)
Description
For the three by three Matrix3 source, return the inverse of the matrix as Matrix3 target.
A function return value of zero indicates the matrix inverse was successfully returned.
ID = 2368


Name
Integer Get_matrix_inverse(Matrix4 &source,Matrix4 &target)
Description
For the four by four Matrix4 source, return the inverse of the matrix as Matrix4 target.
A function return value of zero indicates the matrix inverse was successfully returned.
ID = 2369


Name
Matrix3 Get_matrix_inverse(Matrix3 &source)
Description
For the three by three Matrix3 source, return the inverse of the matrix as the function return
value.
ID = 2370


Name
Matrix4 Get_matrix_inverse(Matrix4 &source)
Description
For the four by four Matrix4 source, return the inverse of the matrix as the function return value.
ID = 2371


Name
Integer Swap_matrix_rows(Matrix3 &matrix,Integer row1,Integer row2)
Description
For the three by three Matrix3 matrix, swap row row1 with row row2.
A function return value of zero indicates the swapped matrix was successfully returned.
ID = 2372


Name
Integer Swap_matrix_cols(Matrix4 &matrix,Integer Swap_matrix_rows(Matrix4 &matrix,Integer
row1,Integer row2)
Description
For the four by four Matrix4 matrix, swap row row1 with row row2.
A function return value of zero indicates the swapped matrix was successfully returned.
ID = 2373


Name
Integer Swap_matrix_cols(Matrix3 &matrix,Integer col1,Integer col2)
Description
For the three by three Matrix3 matrix, swap column col1 with column col2.
A function return value of zero indicates the swapped matrix was successfully returned.
ID = 2374


Name
Integer Swap_matrix_cols(Matrix4 &matrix,Integer col1,Integer col2)
Description
For the four by four Matrix4 matrix, swap column col1 with column col2.
A function return value of zero indicates the swapped matrix was successfully returned.
ID = 2375


Name
Integer Get_translation_matrix(Vector2 &vect,Matrix3 &matrix)
Description
From the two dimension vector vect, create the three by three matrix representing the vector as
a translation and return it as matrix.
That is, for vect(x,y), the matrix(row,column) values are:
matrix(1,1) = 1

matrix(1,2) = 0

matrix(1,3) = x

matrix(2,1) = 0

matrix(2,2) = 1

matrix(2,3) = y

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

A function return value of zero indicates the translation matrix was successfully returned.
ID = 2376


Name
Integer Get_translation_matrix(Vector3 &vect,Matrix4 &matrix)
Description
From the three dimension vector vect, create the four by four Matrix4 matrix representing the
vector as a translation and return it as matrix.
That is, for vect(x,y,z), the matrix(row,column) values are:
matrix(1,1) = 1

matrix(1,2) = 0

matrix(1,3) = 0

matrix(1,4) = x

matrix(2,1) = 0

matrix(2,2) = 1

matrix(2,3) = 0

matrix(2,4) = y

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

matrix(3,4) = z

matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 0

matrix(4,4) = 1

A function return value of zero indicates the translation matrix was successfully returned.
ID = 2377


Name
Matrix3 Get_translation_matrix(Vector2 &vect)
Description
For the two dimension vector vect, the three by three Matrix3 representing the vector as a
translation is returned as the function return value.
ID = 2378


Name
Matrix4 Get_translation_matrix(Vector3 &vect)
Description
For the three dimension vector vect, the four by four Matrix4 representing the vector as a
translation is returned as the function return value.

Page 116

Vectors and Matrices

Chapter 5 12dPL Library Calls

ID = 2379


Name
Integer Get_rotation_matrix(Vector2 &centre,Real angle,Matrix3 &matrix)
Description
From the Vector2 centre and Real angle, construct the three by three Matrix3 matrix given
below.
If centre is (x,y), C = cos(angle) and S = sin(angle).
the matrix(row,column) values are:
matrix(1,1) = C

matrix(1,2) = -S

matrix(1,3) = x*(1 - C) + y*S

matrix(2,1) = S

matrix(2,2) = C

matrix(2,3) = y*(1 - C) - x*S

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
A function return value of zero indicates the matrix was successfully returned.
ID = 2380


Name
Integer Get_rotation_matrix(Vector3 &axis,Real angle,Matrix4 &matrix)
Description
From the Vector3 axis and Real angle, construct the four by four Matrix4 matrix given below.
If Naxis is axis normalised and Naxis = (X,Y,Z), C = cos(angle), S = sin(angle) and T = 1 - C
the matrix(row,column) values are:
matrix(1,1) = T*X*X+C

matrix(1,2) = T*X*Y-SZ

matrix(1,3) = T*X*Z+S*Y matrix(1,4) = 0

matrix(2,1) = T*X*Y+S*Z matrix(2,2) = T*Y*Y+C

matrix(2,3) = T*Y*Z-S*X matrix(1,4) = 0

matrix(3,1) = T*X*Z-S*Y matrix(3,2) = T*Y*Z+S*X matrix(3,3) = T*Z*Z+C
matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 0

matrix(1,4) = 0
matrix(4,1) = 1

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
A function return value of zero indicates the matrix was successfully returned.
ID = 2381


Name
Matrix3 Get_rotation_matrix(Vector2 &centre,Real angle)
Description
From the Vector2 centre and Real angle, construct the three by three Matrix3 matrix given
below and return it as the function return value.
If centre is (X,Y), C = cos(angle) and S = sin(angle) and Matrix3 matrix.
the matrix(row,column) values are:

Vectors and Matrices

Page 117

12d Model Programming Language Manual

matrix(1,1) = C

matrix(1,2) = -S

matrix(1,3) = X*(1 - C) + Y*S

matrix(2,1) = S

matrix(2,2) = C

matrix(2,3) = Y*(1 - C) - X*S

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
ID = 2382


Name
Matrix4 Get_rotation_matrix(Vector3 &axis,Real angle)
Description
From the Vector3 axis and Real angle, construct the four by four Matrix4 matrix given below
and return it as the function return value.
If Naxis is axis normalised and Naxis = (X,Y,Z), C = cos(angle), S = sin(angle), T = 1 - C and
Matrix4 matrix
the matrix(row,column) values are:
matrix(1,1) = T*X*X+C

matrix(1,2) = T*X*Y-SZ

matrix(1,3) = T*X*Z+S*Y matrix(1,4) = 0

matrix(2,1) = T*X*Y+S*Z matrix(2,2) = T*Y*Y+C

matrix(2,3) = T*Y*Z-S*X matrix(1,4) = 0

matrix(3,1) = T*X*Z-S*Y matrix(3,2) = T*Y*Z+S*X matrix(3,3) = T*Z*Z+C

matrix(1,4) = 0

matrix(4,1) = 0

matrix(4,1) = 1

matrix(4,2) = 0

matrix(4,3) = 0

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
ID = 2383


Name
Integer Get_scaling_matrix(Vector2 &scale,Matrix3 &matrix)
Description
From the two dimension vector scale, create the three by three Matrix3 representing the vector
as a scaling matrix and return it as matrix.
That is, for scale(S,T), the matrix(row,column) values are:
matrix(1,1) = S

matrix(1,2) = 0

matrix(1,3) = 0

matrix(2,1) = 0

matrix(2,2) = T

matrix(2,3) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

A function return value of zero indicates the translation matrix was successfully returned.
ID = 2384


Name
Integer Get_scaling_matrix(Vector3 &scale,Matrix4 &matrix)
Description
From the three dimension vector scale, create the four by four Matrix4 representing the vector as
a scaling matrix and return it as matrix.

Page 118

Vectors and Matrices

Chapter 5 12dPL Library Calls

That is, for scale(S,T,U), the matrix(row,column) values are:
matrix(1,1) = S

matrix(1,2) = 0

matrix(1,3) = 0

matrix(1,4) = 0

matrix(2,1) = 0

matrix(2,2) = T

matrix(2,3) = 0

matrix(2,4) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = U

matrix(3,4) = 0

matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 0

matrix(4,4) = 1

A function return value of zero indicates the scaling matrix was successfully returned.
ID = 2385


Name
Matrix3 Get_scaling_matrix(Vector2 &scale)
Description
From the two dimension vector scale, create the three by three Matrix3 matrix as given below.
The matrix represents the vector as a scaling and it is return as the function return value.
That is, for scale(S,T), the returned matrix(row,column) values are:
matrix(1,1) = S

matrix(1,2) = 0

matrix(1,3) = 0

matrix(2,1) = 0

matrix(2,2) = T

matrix(2,3) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

ID = 2386


Name
Matrix4 Get_scaling_matrix(Vector3 &scale)
Description
From the three dimension vector scale, create the four by four Matrix4 matrix as given below.
The matrix represents the vector as a scaling and it is return as the function return value.
That is, for scale(S,T,U), the returned matrix(row,column) values are:
matrix(1,1) = S

matrix(1,2) = 0

matrix(1,3) = 0

matrix(1,4) = 0

matrix(2,1) = 0

matrix(2,2) = T

matrix(2,3) = 0

matrix(2,4) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = U

matrix(3,4) = 0

matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 0

matrix(4,4) = 1

ID = 2387


Name
Integer Get_perspective_matrix(Real d,Matrix4 &matrix)
Description
For the distance d, create the four by four Matrix4 and return it as matrix.
That is, for Real d, the matrix(row,column) values are:
matrix(1,1) = 1

matrix(1,2) = 0

matrix(1,3) = 0

Vectors and Matrices

matrix(1,4) = 0

Page 119

12d Model Programming Language Manual

matrix(2,1) = 0

matrix(2,2) = 1

matrix(2,3) = 0

matrix(2,4) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

matrix(3,4) = 0

matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 1/d

matrix(4,4) = 0

A function return value of zero indicates the matrix was successfully returned.
ID = 2388


Name
Matrix4 Get_perspective_matrix(Real d)
Description
For the distance d, create the four by four Matrix4 and return it as the function return value.
That is, for Real d, the matrix(row,column) values are:
matrix(1,1) = 1

matrix(1,2) = 0

matrix(1,3) = 0

matrix(1,4) = 0

matrix(2,1) = 0

matrix(2,2) = 1

matrix(2,3) = 0

matrix(2,4) = 0

matrix(3,1) = 0

matrix(3,2) = 0

matrix(3,3) = 1

matrix(3,4) = 0

matrix(4,1) = 0

matrix(4,2) = 0

matrix(4,3) = 1/d

matrix is returned as the function return value.
ID = 2389


Name
Integer Triangle_normal(Real xarray[],Real yarray[],Real zarray[],Real Normal[])
Description
Calculate the normal vector to the triangle given by the coordinates in the arrays xarray[],
yarray[], zarray[] (the arrays are of dimension 3).
The normal vector is returned in Normal[1], Normal [2] and Normal[3].
A function return value of zero indicates the function was successful.
ID = 1737


Name
Integer Triangle_normal(Real x1,Real y1,Real z1,Real x2,Real y2,Real z2,Real x3,Real y3,Real z3,Real
&xn,Real &yn,Real &zn)
Description
Calculate the normal vector to the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and
(x3,y3,z3).
The normal vector is returned in (xn,yx,zn).
A function return value of zero indicates the function was successful.
ID = 1738


Name
Integer Triangle_slope(Real xarray[],Real yarray[],Real zarray[],Real &slope)
Description
Calculate the slope of the triangle given by the coordinates in the arrays xarray[], yarray[],
zarray[] (the arrays are of dimension 3), and return the value as slope.
The units for slope is an angle in radians measured from the horizontal plane.
A function return value of zero indicates the function was successful.
ID = 1739


Name
Integer Triangle_slope(Real x1,Real y1,Real z1,Real x2,Real y2,Real z2,Real x3,Real y3,Real z3,Real
&slope)
Description
Calculate the slope of the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and (x3,y3,z3),
and return the value as slope.

Triangles

Page 121

12d Model Programming Language Manual

The units for slope is an angle in radians measured from the horizontal plane.
A function return value of zero indicates the function was successful.
ID = 1740


Name
Integer Triangle_aspect(Real xarray[],Real yarray[],Real zarray[],Real &aspect)
Description
Calculate the aspect of the triangle given by the coordinates in the arrays xarray[], yarray[],
zarray[] (the arrays are of dimension 3), and return the value as aspect.
The units for aspect is a bearing in radians. That is, aspect is given as a clockwise angle
measured from the positive y-axis (North).
A function return value of zero indicates the function was successful.
ID = 1741


Name
Integer Triangle_aspect(Real x1,Real y1,Real z1,Real x2,Real y2,Real z2,Real x3,Real y3,Real z3,Real
&aspect)
Description
Calculate the aspect of the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and
(x3,y3,z3), and return the value as aspect.
The units for aspect is a bearing in radians. That is, aspect is given as a clockwise angle
measured from the positive y-axis (North).
A function return value of zero indicates the function was successful.
ID = 1742


Name
Integer System(Text msg)
Description
Make a system call.
The message passed to the system call is given by Text msg.
For example,
system ("ls *.tmp>fred")
A function return value of zero indicates success.
Note
The types of system calls that can be made is operating system dependant.
ID = 21


Name
Integer Date(Text &date)
Description
Get the current date.
The date is returned in Text date with the format
DDD MMM dd yyyy
where DDD is three characters for the day, MMM is three characters for the month
dd is two numbers for the day of the month and yyyy is four numbers for the year, and each is
separated by one space.
For example,
Sun Mar 17 1996
A function return value of zero indicates the date was returned successfully.
ID = 658


Name
Integer Date(Integer &d,Integer &m,Integer &y)
Description
Get the current date as the day of the month, month & year.
The day of the month value is returned in Integer d.
The month value is returned in Integer m.
The year value is returned in Integer y (fours digits).
A function return value of zero indicates the date was returned successfully.
ID = 659


Name
Integer Time(Integer &time)
Description
Get the current time as seconds since January 1 1970.
The time value is returned in Integer time.
A function return value of zero indicates the time was returned successfully.
ID = 660


Name
Integer Time(Real &time)
Description
Get the current time as the number of seconds since January 1st 1601 down to precision of 10-7
(100 nanoseconds) and return it as time.
A function return value of zero indicates the time was returned successfully.
ID = 661


Name
Integer Time(Text &time)
Description
Get the current time.
The time is returned in Text time with the format (known as the ctime format)
DDD MMM dd hh:mm:ss yyyy where
where DDD is three characters for the day, MMM is three characters for the month
dd two digits for the day of the month, hh two digits for the hour, mm two digits for the hour (in
twenty four hour format), ss two digits for seconds and yyyy is four digits for the year.
For example,
Sun Mar 17 23:19:24 1996
A function return value of zero indicates the time was returned successfully.
ID = 662


Name
Integer Time(Integer &h,Integer &m,Real &sec)
Description
Get the current time in hours, minutes & seconds.
The hours value is returned in Integer h.

Page 124

System

Chapter 5 12dPL Library Calls

The minutes value is returned in Integer m.
The seconds value is returned in Real s.
A function return value of zero indicates the time was returned successfully.
ID = 663


Name
Integer Convert_time(Integer t1,Text &t2)
Description
Convert the time in seconds since January 1 1970, to the standard ctime format given in an
earlier Time function.
The time in seconds is given by Integer t1 and the Text t2 returns the time in ctime format.
ID = 671


Name
Integer Convert_time(Text &t1,Integer t2)
Description
Convert the time in ctime format to the time in seconds since January, 1 1970.
The time in ctime format is given by Text t1 and the time in seconds is returned as Integer t2.
Note
Not yet implemented.
LJG?
ID = 672


Name
Integer Convert_time(Integer t1,Text format,Text &t2)
Description
Convert the time in seconds since January 1 1970, to the Text format (as defined in the section
on Title Blocks in the 12d Model Reference Manual).
The time in seconds is given by Integer t1 and the Text t2 returns the time in the specified format.
ID = 683


Name
Text Get_macro_name()
Description
Get the name of the macro file.
The function return value is the macro file name.

System

Page 125

12d Model Programming Language Manual

ID = 1093


Name
Integer Get_user_name(Text &name)
Description
Get user’s name, the name currently logged onto the system.
The name is returned in Text name.
A function return value of zero indicates the name was returned successfully.
ID = 814


Name
Text Get_host_id()
Description
For the current 12d Model session, get the 12d dongle number of the 12d dongle being used to
provide the 12d Model license for the session.
The dongle number, which is alphanumeric, is returned as Text as the function return value.
ID = 2678


Name
Integer Get_module_license(Text module_name)
Description
Get the status of each module license.
If the module_name is:
points_limit
tins_limit
remaining_days
warned
the function returns number of available units.
If the module_name is:
ok
drainage
pipeline
sewer
tin_analysis
volumesII
vehicle_path
cartographic
genio
geocomp
civilcad
arcview

Page 126

lite
digitizer
survey
volumes
trarr
sight_distance
dxf
keays
dgn
mapinfo
alignment

System

Chapter 5 12dPL Library Calls

The function returns 1 if the module is licensed, 0 if it is not licensed.
ID = 1094


Name
Text Getenv(Text env)
Description
Get the temporary directory for Windows.
LJG? what is env?
<no description>
ID = 1087


Name
Text Find_system_file(Text new_file_name,Text old_file_name,Text env)
Description
Returns the path to the setup file new_file_name as the function return value.
If old_file_name is not blank, it also looks for the old file names for the set ups files that were
used in the Unix version of 12d Model.
So if you want to support the legacy file names then you pass in new_file_name and
old_file_name. If you are only looking for the post Unix names for the set up files, pass
old_file_name = "".
env is the name of the environment variable that can also point to the set up file.
The search order is
1. If not blank, search for the file given by the environment variable env
2. If new_file_name is not blank, next search for a file with the name new_file_name in the normal Set Ups files search order.
3. Finally if the no file has yet been found, if old_file_name is not blank, search for old_file_name
in the normal Set Ups files search order.
If no file is found then the function return value is a blank Text (i.e. "").
For example,
Find_system_file("colours.4d", "colour_map.def", "COLOURS_4D)
will find the colours set up file which may be pointed to by the environment variable
COLOURS_4D (if non zero), or may have the name "colours.4d", or finally may have the name
"colour_map.def".
ID = 1088


Name
void Get_4dmodel_version(Integer &major,Integer &minor,Text &patch)
Description
Get information about the 12d Model build.

System

Page 127

12d Model Programming Language Manual

The function return value is a special patch version description for pre-release versions and it is
written after the 12d Model version information. It is blank for release versions.
major - is the major number for 12d Model. The is, the number before the ".".
For example 9 for 12d Model 9.00
minor - is the minor number for 12d Model. That is, the number after the ".".
For example 00 for 12d Model 9.00
patch - special patch description for pre-release versions. It is written after the 12d Model version
information. It is blank for release versions.
For example "Alpha 274 SLF,SLX,Image Dump - Not For Production"
A function return value of zero indicates the function was successful.
ID = 1089


Name
Integer Is_practise_version()
Description
Check if the current 12d Model is a practise version.
A non-zero function return value indicates that 12d Model is a practise version.
A zero function return value indicates that 12d Model is not a practise version.
Warning this is the opposite of most 12dPL function return values
ID = 1090


Name
Integer Create_process(Text program_name,Text command_line,Text start_directory,Integer flags,Integer
wait,Integer inherit)
Description
This function basically calls the Microsoft CreateProcess function as defined in
http://msdn.microsoft.com/en-us/library/ms682425%28v=vs.85%29.aspx.
The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (and
also do not have a // in front of them):
BOOL WINAPI CreateProcess(

//
//
//
//
//

Page 128

__in_opt
__inout_opt
__in_opt
__in_opt
__in
__in
__in_opt
__in_opt
__in
__out

LPCTSTR lpApplicationName,
LPTSTR lpCommandLine,
LPSECURITY_ATTRIBUTES lpProcessAttributes,
LPSECURITY_ATTRIBUTES lpThreadAttributes,
BOOL bInheritHandles,
DWORD dwCreationFlags,
LPVOID lpEnvironment,
LPCTSTR lpCurrentDirectory,
LPSTARTUPINFO lpStartupInfo,
LPPROCESS_INFORMATION lpProcessInformation

System

Chapter 5 12dPL Library Calls

);
where program_name is passed as lpApplicationName, command_line is passed as
dwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags is
passed as dwCreationFlags and inherit is passed as bInheritHandles.
If wait = 1, the macro will wait until the process finishes before continuing.
If wait = 0, the macro won’t wait until the process finishes before continuing.
A function return value of zero indicates the function was successful.
Note: Create_process can not be called from the 12d Model the Practise version.
ID = 1620


Name
Integer Create_process(Text program_name,Text command_line,Text start_directory,Integer flags,Integer
inherit,Unknown &handle)
Description
This function calls the Microsoft CreateProcess function as defined in
http://msdn.microsoft.com/en-us/library/ms682425%28v=vs.85%29.aspx.
The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (and
also not have a // in front of them):
BOOL WINAPI CreateProcess(
__in_opt
__inout_opt
// __in_opt
// __in_opt
__in
__in
// __in_opt
__in_opt
// __in
// __out
);

LPCTSTR lpApplicationName,
LPTSTR lpCommandLine,
LPSECURITY_ATTRIBUTES lpProcessAttributes,
LPSECURITY_ATTRIBUTES lpThreadAttributes,
BOOL bInheritHandles,
DWORD dwCreationFlags,
LPVOID lpEnvironment,
LPCTSTR lpCurrentDirectory,
LPSTARTUPINFO lpStartupInfo,
LPPROCESS_INFORMATION lpProcessInformation

where program_name is passed as lpApplicationName, command_line is passed as
dwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags is
passed as dwCreationFlags and inherit is passed as bInheritHandles.
The handle to the created process is returned in Unknown handle.
The macro can check if the process is still running by calling Process_exists.
A function return value of zero indicates the function was successful.
Note: The difference between this function and Create_process(Text program_name,Text
command_line,Text start_directory,Integer flags,Integer wait,Integer inherit) is that a handle to the
process is created and returned as handle and this can be checked to see if the process is still
running. So there is no wait flag but there is more flexibility since the macro can check with
Process_exists and decide when, and when not to wait.
Note: Create_process can not be called from 12d Model the Practise version.
ID = 2635


Name
Integer Process_exists(Unknown handle)
Description
Check to see if the process given by handle exists. That is, check that the process created by
Create_process(Text program_name,Text command_line,Text start_directory,Integer flags,Integer
inherit,Unknown &handle) is still running.
A non-zero function return value indicates that the process handle is still running (i.e. the process
exists).
A zero function return value indicates that the process does not exist.
Warning this is the opposite of most 12dPL function return values
ID = 2636


Name
Integer Shell_execute(Widget widget,Text operation,Text file,Text parameters,Text directory,Integer
showcmd)
Description
This function calls the Microsoft ShellExecute function as defined in
http://msdn.microsoft.com/en-us/library/bb762153%28v=vs.85%29.aspx
This Microsoft call executes an operation on a file.
The 12d function gives access to the Microsoft ShellExecute arguments that are in bold (and also
not have a // in front of them):
HINSTANCE ShellExecute(
__in_opt HWND hwnd,
__in_opt LPCTSTR lpOperation,
__in LPCTSTR lpFile,
__in_opt LPCTSTR lpParameters,
__in_opt LPCTSTR lpDirectory,
__in INT nShowCmd);
where operation is passed as lpOperation, file is passed as lp, parameters is passed as
lpParameters, directory is passed as lpDirectory and showcmd is passed as ShowCmd.
The handle to the created process is returned in Unknown handle.
The macro can check if the process is still running by calling Process_exists.
A function return value of zero indicates the function was successful.
LJG? what is widget? Is it a message box?
Note: Create_process can not be called from 12d Model the Practise version.
ID = 1623


Name
Uid Get_next_uid()
Description
Get the next available Uid and return it as the function return value.
This is often used in Undo’s.
ID = 1920


Name
Integer Get_next_id()
Description
Get the next available Id and return it as the function return value.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Uid Get_next_uid() instead.
ID = 1892


Name
Uid Get_last_uid()
Description
Get the last used Uid (that is the one from the last created Element) and return it as the function
return value.

Page 132

Uid’s

Chapter 5 12dPL Library Calls

ID = 2072


Name
Integer Get_last_id()
Description
Get the last used Id (that is the one from the last created Element) and return it as the function
return value.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_last_uid instead (see Get_last_uid() .
ID = 2071


Name
void Print(Uid uid)
Description
Prints a text conversion of the UID uid to the Output Window.
Three is no function return value.
ID = 2052


Name
Integer Convert_uid(Uid uid,Text &txt)
Description
Convert the UID uid to a Text. The Text is returned in txt.
A function return value of zero indicates the Uid was successfully converted to text.
ID = 2053


Name
Integer Convert_uid(Uid uid,Integer &id)
Description
Convert the UID uid to an Integer The Integer is returned in id.
Note - this in only possible if the uid can be expressed as an Integer,
A function return value of zero indicates the Uid was successfully converted. to an Integer.
ID = 2054


Name
Integer Convert_uid(Text txt,Uid &uid)

Uid’s

Page 133

12d Model Programming Language Manual

Description
Convert the Text txt to an UID. The Uid is returned in uid.
Note - this in only possible if txt is in the correct form of an Uid.
A function return value of zero indicates the Text was successfully converted to a Uid.
ID = 2055


Name
Integer Convert_uid(Integer id,Uid &uid)
Description
Convert the Integer id to an UID. The Uid is returned in uid.
Note - this in only possible if the Integer id can be expressed as an Uid.
A function return value of zero indicates the Integer was successfully converted to a Uid.
ID = 2056


Name
Text To_text(Uid uid)
Description
Convert the UID uid to a Text.
The Text is returned as the function return value.
ID = 2057


Name
Integer From_text(Text txt,Uid &uid)
Description
Convert the Text txt to a Uid and the Uid is returned in uid.
A function return value of zero indicates the txt was successfully converted to a Uid.
ID = 2063


Name
void Null(Uid &uid)
Description
Set the UID uid to be a null Uid.
There is no function return value.
ID = 2058


Name
Integer Is_null(Uid uid) \
Description
Check to see if the UID uid is a null Uid.
A non-zero function return value indicates that uid is null.
A zero function return value indicates that uid is not null.
Warning this is the opposite of most 12dPL function return values
ID = 2059


Name
Integer Is_contour(Uid uid)
Description
Check to see if the UID uid is the Uid of a string created by a 12d Model Contour option.
Note - such strings are ignored in 12d Model number counts for Base size.
A non-zero function return value indicates that the uid is of a string created by a 12d Model
Contour option.
A zero function return value indicates that the uid is not the uid of a string created by a 12d Model
Contour option.
Warning this is the opposite of most 12dPL function return values
ID = 2064


Name
Integer Is_plot(Uid uid)
Description
Check to see if the UID uid is the Uid of a string created by a 12d Model Plot option.
Note - such strings are ignored in 12d Model number counts for Base size.
A non-zero function return value indicates that the uid is of a string created by a 12d Model Plot
option.
A zero function return value indicates that the uid is not the uid of a string created by a 12d Model
Plot option.
Warning this is the opposite of most 12dPL function return values
ID = 2065


Name
Integer Is_function(Uid uid)
Description
Check to see if the UID 12d Model is the Uid of a 12d Model Function/Macro_Function.

Uid’s

Page 135

12d Model Programming Language Manual

A non-zero function return value indicates that the uid is of a 12d Model Function/
Macro_Function
A zero function return value indicates that the uid is not the uid of a 12d Model Function/
Macro_Function.
Warning this is the opposite of most 12dPL function return values
ID = 2066


Name
Integer Function_exists(Integer id)
Description
Check to see if id is the Id of a 12d Function.
1 for yes
A non-zero function return value indicates that id is the Id of a 12d Model Function/
Macro_Function
A zero function return value indicates that id is not the Id of a 12d Model Function/
Macro_Function.
Warning this is the opposite of most 12dPL function return values
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Integer Is_function(Uid uid) instead.
ID = 1187


Name
Integer Is_valid(Uid uid)
Description
Check to see if the UID uid is a valid Uid.
A non-zero function return value indicates that uid is a valid Uid.
Warning this is the opposite of most 12dPL function return values
ID = 2060


Name
Integer Is_unknown(Uid uid)
Description
Check to see if the UID uid is a valid Uid.
A non-zero function return value indicates that uid is not a valid Uid.
Warning this is the opposite of most 12dPL function return values
ID = 2061


Name
Integer Is_global(Uid uid)
Description
Check to see if the UID uid is of a shared element. That is, the element has not been created in
this project but has been shared in from another project.
A non-zero function return value indicates that uid is of a shared element.
Warning this is the opposite of most 12dPL function return values
ID = 2062


Name
void Print(Text msg)
Description
Print the Text msg to the Output Window.
ID = 24


Name
void Print(Integer value)
Description
Print the Integer value out in text to the Output Window.
ID = 22


Name
void Print(Real value)
Description
Print the Real value out in text to the Output Window.
ID = 23


Name
void Print()
Description
Print the text "\n" (a new line) to the Output Window.
ID = 25


Name
void Clear_console()
Description
Clear the Output Window of any previous information.
Warning: This function work on the Output Window, not the Macro Console.

Page 138

Input/Output

Chapter 5 12dPL Library Calls

ID = 1295


Name
Integer Show_console(Integer show)
Description
If show = 0, the Output Window is hidden.
If show = 1, the Output Window is shown.
Warning: This function works on the Output Window, not the Macro Console.
A function return value of zero indicates the function was successful.
Note: the Output Window can also be turned on/off with the 12d Model toggle option
Window =>Output Window.
ID = 1728


Name
Integer Is_console_visible()
Description
The function return value indicates if the Output Window is visible or hidden.
If the Integer return value is 0 then the Output Window is hidden.
If the Integer return value is 1 then the Output Window is visible (not hidden).
Warning: This function works on the Output Window, not the Macro Console.
ID = 1729


Name
Integer Is_console_floating()
Description
The function return value indicates if the Output Window is floating or not floating.
If the Integer return value is 1 then the Output Window is floating.
If the Integer return value is 0 then the Output Window is either not floating or not visible.
Warning: This function works on the Output Window, not the Macro Console.
ID = 1731


Name

Input/Output

Page 139

12d Model Programming Language Manual

Integer Console_to_clipboard()
Description
Copy the highlighted contents of the Output Window to the clip board.
Warning: This function works on the Output Window, not the Macro Console.
A function return value of zero indicates the copy was successful.
ID = 1736


Name
Integer Set_clipboard_text(Text txt)
Description
Write the Text txt to the clip board.
A function return value of zero indicates the write was successful.
ID = 1521


Name
Integer Get_clipboard_text(Text &txt)
Description
<no description>
A function return value of zero indicates the read was successful.
ID = 1522


Name
Integer File_exists(Text file_name)
Description
Checks to see if a file of name file_name exists.
A non-zero function return value indicates the file exists.
A zero function return value indicates the file does not exist.
Warning - this is the opposite to most 12dPL function return values
ID = 202


Name
Integer File_open(Text file_name,Text mode,Text ccs_text,File &file)
Description
Opens a file of name file_name with open type mode. The file unit is returned as File file.
The file can be opened as a Unicode file with a specified encoding or as an ANSI file by using a
non-blank value for the ccs_text parameter.
The available modes are
r
r+
rb
w
w+
wb
a
a+

open for reading. If the file does not exist then it fails.
open for update, that is for reading and writing. The file must exist.
read binary
opens a file for writing. If the files exists, its current contents are destroyed.
opens a file for reading and writing. If the files exists, its current contents are
destroyed
write binary
open for writing at the end of file (before the end of file marker). 
If the file does not exist then it is created.
opens for reading and writing to the end of the file (before the end of file marker).
If the file does not exist then it is created.

When a file is open for append (i.e. a or a+), it is impossible to overwrite information that is
already in the file. Any writes are automatically added to the end of the file.
ccs_text specifies the coded character set to use and can have the values:
ccs_text = "ccs = UTF-8"

Input/Output

Page 141

12d Model Programming Language Manual

ccs_text = "ccs = UTF-16LE"
ccs_text = "ccs = UNICODE"
or ccs_text = "" (leave it blank) if ANSI encoding is required.
For example
File_open("test file", "w","ccs=UNICODE",file_handle);
Note: BOM detection only applies to files that are opened in Unicode mode (that is, by passing a
non blank ccs parameter).
If the file already exists and is opened for reading or appending, the Byte Order Mark (BOM), if it
present in the file, determines the encoding. The BOM encoding takes precedence over the
encoding that is specified by the ccs flag. The ccs encoding is only used when no BOM is
present or the file is a new file.
The following table summarises the use of Byte Order Marks (BOM’s) for the various ccs flags
given to File_open and what happens when there is a BOM in an existing file.

Encodings Used When Opening a File Based on non blank ccs Flag and BOM

ccs flag
UNICODE
UTF-8
UTF-16LE

No BOM (or new file)
UTF-16LE
UTF-8
UTF-16LE

BOM: UTF-8
UTF-8
UTF-8
UTF-8

BOM: UTF-16
UTF-16LE
UTF-16LE
UTF-16LE

Files opened for writing in Unicode mode (non-blank ccs) automatically have a BOM written to
them.
When a file that begins with a Byte Order Mark (BOM) is opened, the file pointer is positioned
after the BOM (that is, at the start of the file's actual content).
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the file was opened successfully.
ID = 2076


Name
Integer File_open(Text file_name,Text mode,File &file)
Description
Note: this option now only creates UNICODE files. To open a ANSI file, use File_open(Text
file_name,Text mode,Text ccs_text,File &file) with ccs_text = "" instead.
Opens a file of name file_name with open type mode. The file unit is returned as File file.
The available modes are
r
r+
rb
w
w+
wb

Page 142

open for reading
open for update, reading and writing
read binary
truncate or create for writing
truncate or create for update
write binary

Input/Output

Chapter 5 12dPL Library Calls

a
a+

append open for writing at the end of file or create for writing
open for update at end of file or create for update

When a file is open for append (i.e. a or a+), it is impossible to overwrite information that is
already in the file.
A function return value of zero indicates the file was opened successfully.
ID = 335


Name
Integer File_read_line(File file,Text &text_in)
Description
Read a line of text from the File file. The text is read into the Text text_in.
A function return value of -1 indicates the end of the file.
A function return value of zero indicates the text was successfully read in.
ID = 337


Name
Integer File_write_line(File file,Text text_out)
Description
Write a line of text to the File file. The text to write out is Text text_out.
A function return value of zero indicates the text was successfully written out.
ID = 338


Name
Integer File_tell(File file,Integer &pos)
Description
Get the current position in the File file.
A function return value of zero indicates the file position was successfully found.
ID = 341


Name
Integer File_seek(File file,Integer pos)
Description
Go to the position pos in the File file.
Position pos has normally been found by a previous File_tell call.
If the file open type was a or a+, then a File_seek cannot be used to position for a write in any
part of the file that existed when the file was opened.

Input/Output

Page 143

12d Model Programming Language Manual

If you have to File_seek to the beginning of the file, use File_tell to get the initial position and
File_seek to it rather than to position 0.
So for a Unicode file, if you have to File_seek to the beginning of the file but after the BOM you
need to first have used a File_tell to get and record the position of the initial start of the file when
it is opened (for a Unicode file, File_open positions after the BOM) and then to File_seek to that
recorded beginning of the file rather than to File_seek to position 0.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the file position was successfully found.
ID = 342


Name
Integer File_flush(File file)
Description
Make sure the File file is up to date with what has been written out.
A function return value of zero indicates the file was successfully flushed.
ID = 340


Name
Integer File_rewind(File file)
Description
Rewind the File file to its beginning.
WARNING: This function is not to be used with a Unicode file.
If the file is a Unicode file then File_rewind will rewind to BEFORE the BOM. Then writing out
any information will overwrite the BOM.
So for a Unicode file, to correctly position to the beginning of the file but after the BOM you need
to first have used a File_tell when opening the file to get and record position of the initial start of
the file (for a Unicode file, File_open positions after the BOM) and then to File_seek to that
recorded beginning of the file rather than to File_seek to position 0.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the file was successfully rewound.
ID = 339


Name
Integer File_read(File file,Integer &value)
Description
Read four bytes from the binary file file and return it as an Integer in value.
A function return value of zero indicates the Integer was successfully returned.

Page 144

Input/Output

Chapter 5 12dPL Library Calls

ID = 1710


Name
Integer File_write(File file,Integer value)
Description
Write out value as a four byte integer to the binary file file.
A function return value of zero indicates the Integer was successfully written.
ID = 1713


Name
Integer File_read(File file,Real &value)
Description
Read eight bytes from the binary file file and return it as a Real in value.
A function return value of zero indicates the Real was successfully returned.
ID = 1711


Name
Integer File_write(File file,Real value)
Description
Write out value as an eight byte real to the binary file file.
A function return value of zero indicates the Real was successfully written.
ID = 1714


Name
Integer File_read_unicode(File file,Integer length,Text &value)
Description
Read length bytes from the binary file file and return it as Text in value.
Note - this works for UNICODE files.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the Text was successfully returned.
ID = 2676


Name

Input/Output

Page 145

12d Model Programming Language Manual

Integer File_write_unicode(File file,Integer length,Text value)
Description
Write out value as length lots of two byte Unicode characters to the binary file file.
If there is less than length characters in Text then the number of characters is brought up to
length by writing out null padding.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the Text was successfully written.
ID = 2677


Name
Integer File_read(File file,Integer length,Text &value)
Description
Read length bytes from the binary file file and return it as Text in value.
Note - this only works for ANSI Text.
If any of the characters of Text is not ANSI, then a non-zero function return value is returned.
WARNING: This function is not to be used for Unicode files. For Unicode files, use
File_read_unicode(File file,Integer length,Text &value) instead.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the Text was successfully returned.
ID = 1712


Name
Integer File_write(File file,Integer length,Text value)
Description
Write out value as length lots of one byte ANSI characters to the binary file file.
If any of the characters of Text is not ANSI, then no data is written out and a non-zero function
return value is returned.
If there is less than length characters in Text then the number of characters is brought up to
length by writing out null padding.
WARNING: This function is not to be used for Unicode files. For Unicode files, use
File_write_unicode(File file,Integer length,Text value) instead.
For more information on ANSI, ASCII, Unicode, UTF’s and BOM’s, please see Set Ups.h which
is a copy of the information from the 12d Model Reference manual.
A function return value of zero indicates the Text was successfully written.
ID = 1715


Name
Integer File_read(File file,Integer length,Integer array[])
Description
Read the next length lots of four bytes from the binary file file and return them as an Integer
array in array[].
A function return value of zero indicates the Integer array was successfully returned.
ID = 1716


Name
Integer File_write(File file,Integer length,Integer array[])
Description
Write out the Integer array array[] as length lots of four byte integers to the binary file file.
A function return value of zero indicates the Integer array was successfully written.
ID = 1718


Name
Integer File_read(File file,Integer length,Real array[])
Description
Read the next length lots of eight bytes from the binary file file and return them as a Real array
in array[].
A function return value of zero indicates the Real array was successfully returned.
ID = 1717


Name
Integer File_write(File file,Integer length,Real array[])
Description
Write out the Integer array array[] as length lots of eight byte reals to the binary file file.
A function return value of zero indicates the Real array was successfully written.
ID = 1719


Name
Integer File_read_short(File file,Integer &value)
Description
Read two bytes from the binary file file and return it as an Integer in value.
A function return value of zero indicates the Integer was successfully returned.
ID = 1720


Name
Integer File_write_short(File file,Integer value)
Description
Write out value as a two byte integer to the binary file file.
Because it is only a two byte integer, value must be between -2 to the power of 32, and +2 to the
power 32.
A function return value of zero indicates the Integer was successfully written.
ID = 1722


Name
Integer File_read_short(File file,Real &value)
Description
Read four bytes from the binary file file and return it as a Real in value.
Note - value can only be in the range -32,768 and 32,767.
A function return value of zero indicates the Real was successfully returned.
ID = 1721


Name
Integer File_write_short(File file,Real value)
Description
Write out value as a four byte real to the binary file file.
Because it is only a four byte real, only seven significant figures can be written out.
A function return value of zero indicates the Real was successfully written.
ID = 1723


Name
Integer File_close(File file)
Description
Close the File file.
A function return value of zero indicates file was closed successfully.
ID = 336


Name

Page 148

Input/Output

Chapter 5 12dPL Library Calls

Integer File_delete(Text file_name)
Description
Delete a file from the disk
A function return value of zero indicates the file was deleted.
ID = 213


Name
Integer File_set_endian(File file,Integer big)
Description
<not implemented>
ID = 1708


Name
Integer File_get_endian(File file,Integer &big)
Description
<not implemented>
ID = 1709


Name
Integer Read_4d_ascii(Text filename,Text prefix)
Description
Read in and process the file called filename as a 12d Ascii file. The post-prefix for models is
given in prefix.
A function return value of zero indicates the file was successfully read.
ID = 1166


Name
Integer Read_4d_ascii(Text filename,Dynamic_Element &list)
Description
Read the data from the 12d Ascii file called filename and load all the created Elements into the
Dynamic_Element list.
A function return value of zero indicates the file was successfully read.
ID = 2073


Name
Integer Write_4d_ascii(Element elt,Text filename,Integer precision,Integer output_model_name)
Description
Open the file called filename, and append the 12d Ascii of the Element elt to the file. Any
coordinates and Reals are written out to precision decimal places.
If output_model_name = 1 then write the name of the Model containing elt to the file before
writing out elt.
If output_model_name = 0 then don’t write out the Model name.
A function return value of zero indicates the data was successfully written.
ID = 1630


Name
Integer Write_4d_ascii(Dynamic_Element list,Text filename,Integer precision,Integer
output_model_name)
Description
Open the file called filename, and append the 12d Ascii of all the Elements in the
Dynamic_Element list to the file. Any coordinates and Reals are written out to precision decimal

Page 150

Input/Output

Chapter 5 12dPL Library Calls

places.
If output_model_name = 1 then if write the name of the Model containing each Element to the
file before writing out the Element. The Model name is not repeated if is the same as the previous
Element).
If output_model_name = 0 then don’t write out the Model names.
A function return value of zero indicates the data was successfully written.
ID = 1631


Name
Integer Write_4d_ascii(Model model,Text filename,Integer precision,Integer output_model_name)
Description
Open the file called filename, and append the 12d Ascii of all the Elements in the Model model
to the file. Any coordinates and Reals are written out to precision decimal places.
If output_model_name = 1 then write the name of model out to the file before the Elements.
If output_model_name = 0 then don’t write out the Model name.
A function return value of zero indicates the data was successfully written.
ID = 1632


Name
Integer Write_4d_ascii(Element elt,File file,Integer precision,Integer indent_level)
Description
Write the 12d Ascii of the Element elt to the File file. Any coordinates and Reals are written out
to precision decimal places. The information written to the file is indented by indent_level
spaces.
A function return value of zero indicates the data was successfully written.
ID = 1928


Name
Integer Write_4d_ascii(Element elt,File file,Integer precision,Integer indent_level,Text header)
Description
Write the Text header to the File file and then write the 12d Ascii of the Element elt to the
File file. Any coordinates and Reals are written out to precision decimal places. The information
written to the file is indented by indent_level spaces.
A function return value of zero indicates the data was successfully written.
ID = 1929


Name
Menu Create_menu(Text menu_title)
Description
A Menu is created which is used when referring to this particular menu. The menu title is defined
when the menu variable is created and is the Text menu_title.
The function return value is the required Menu variable.
(To represent menus, 12dPL has this special variable type called Menu.)
ID = 171


Name
Integer Menu_delete(Menu menu)
Description
Delete the menu defined by Menu menu.
A function return value of zero indicates the menu was deleted successfully.
ID = 588


Name
Integer Create_button(Menu menu,Text button_text,Text button_reply)
Description
This function adds buttons to the menu with button_text as the text for the button.
The button is also supplied with a Text button_reply which is returned to the macro through the
function Display or Display_relative when the button is selected.

Page 152

Menus

Chapter 5 12dPL Library Calls

The menu buttons will appear in the Menu in the order that they are added to the menu structure
by the Create_button function.
A function return value of zero indicates that the button was created successfully.
ID = 172


Name
Integer Display(Menu menu,Integer &across_pos,Integer &down_pos,Text &reply)
Description
When called, the Menu menu is displayed on the screen with screen co-ordinates
(across_pos,down_pos).
The menu remains displayed on the screen until a menu button is selected by the user.
When a menu button is selected, the menu is removed from the screen and the appropriate
button return code returned in the Text variable reply.
Whilst displayed on the screen, the menu can be moved around the 12d Model window by using
the mouse. When a menu selection is finally made, the actual position of the menu at selection
time is returned as (across_pos,down_pos).
A function return value of zero indicates that a successful menu selection was made.
Note
An (across_pos,down_pos) of (-1,-1) indicates the current cursor position.
ID = 173


Name
Integer Display_relative(Menu menu,Integer &across_rel,Integer &down_rel,Text &reply)
Description
When called, the Menu menu is displayed on the screen with screen co-ordinates of
(across_rel,down_rel) relative to the cursor position.
The menu remains displayed until a menu button is selected.
When a menu button is selected, the menu is removed from the screen and the appropriate
button return code returned in the Text variable reply.
Whilst displayed, the menu can be moved in 12d Model by using the mouse. When the selection
is made, the final absolute position of the menu is returned as (across_rel,down_rel).
A function return value of zero indicates that a successful menu selection was made.
Thus the sequence used to define and display a menu and the relevant functions used are:
(a) a Menu variable is created which is used when referring to this particular menu. The menu
title is defined when the menu variable is created. Use:
Create_menu(Text menu_title)
For example
Menu menu = Create_menu("Test");
(b) the menu buttons are added to the menu structure in the order that they will appear in the
menu. The button text and the text that will be returned to the macro if the button is selected
are both supplied. Use:
Create_button(Menu menu,Text button_text,Text reply)

Menus

Page 153

12d Model Programming Language Manual

For example
Create_button(menu,"First options","Op1");
Create_button(menu,"Second options","Op2");
Create_button(menu,"Finish","Fin");
(c) the menu is displayed on the screen. The menu will continued to be displayed until a menu
button is selected. When the menu button is selected, the menu is removed from the screen
and the appropriate button return code returned to the macro.
Use:
Display(Menu menu,Integer row_pos,Integer col_pos,
Text &reply)
Display_relative(Menu menu,Integer row_pos,Integer col_pos,
Text &reply)
For example
Display(menu,5,10,reply);
A more complete example of defining and using a menu is:
void main()
{
// create a menu with title "Silly Menu"
Menu menu = Create_menu("Silly Menu");
/* add menu button with titles "Read", "Write", "Draw"
and "Quit". The returns codes for the buttons are
the same as the button titles
*/
Create_button(menu,"Read","Read");
Create_button(menu,"Write","Write");
Create_button(menu,"Draw","Draw");
Create_button(menu,"Quit","Quit");
/* display the menu on the screen at the current cursor
position and wait for a button to selected.
When a button is selected, print out its return code
If the return code isn't "Quit", redisplay the menu.
*/
Text reply;
do {
Display(menu,-1,-1,reply);
Print(reply); Print("\n");
} while(reply != "Quit");
}
ID = 364


Name
Integer Append(Dynamic_Element from_de,Dynamic_Element &to_de)
Description
Append the contents of the Dynamic_Element from_de to the Dynamic_Element to_de.
A function return value of zero indicates the append was successful.
ID = 220


Name
Integer Null(Dynamic_Element &delt)
Description
Removes and nulls all the Elements from the Dynamic_Element delt and sets the number of
items to zero.
A function return value of zero indicates that delt was successfully nulled.
ID = 127


Name
Integer Get_number_of_items(Dynamic_Element &delt,Integer &no_items)
Description
Get the number of Elements currently in the Dynamic_Element delt.
The number of Elements is returned in Integer no_items.
A function return value of zero indicates the number of Elements was returned successfully.
ID = 128


Name
Integer Get_item(Dynamic_Element &delt,Integer i,Element &elt)

Page 156

Dynamic Arrays

Chapter 5 12dPL Library Calls

Description
Get the ith Element from the Dynamic_Element delt.
The Element is returned in elt.
A function return value of zero indicates the ith Element was returned successfully.
ID = 129


Name
Integer Set_item(Dynamic_Element &delt,Integer i,Element elt)
Description
Set the ith Element in the Dynamic_Element delt to the Element elt.
If the position i is greater or equal to the total number of Elements in the Dynamic_Element, then
the Dynamic_Element will automatically be extended so that the number of Elements is i. Any
extra Elements that are added will be set to null.
A function return value of zero indicates the Element was successfully set.
ID = 130


Name
Integer Null_item(Dynamic_Element &delt,Integer i)
Description
Set the ith Element to null.
A function return value of zero indicates the Element was successfully set to null.
ID = 131


Name
Integer Append(Text text,Dynamic_Text &dt)
Description
Append the Text text to the end of the contents of the Dynamic_Text dt. This will increase the
size of the Dynamic_Text by one.
A function return value of zero indicates the append was successful.
ID = 434


Name
Integer Append(Dynamic_Text from_dt,Dynamic_Text &to_dt)
Description
Append the contents of the Dynamic_Text from_dt to the Dynamic_Text to_dt.
A function return value of zero indicates the append was successful.
ID = 230


Name
Integer Null(Dynamic_Text &dt)
Description
Removes and deletes all the Texts from the Dynamic_Text dt and sets the number of items to
zero.
A function return value of zero indicates that dt was successfully nulled.
ID = 226


Name
Integer Get_number_of_items(Dynamic_Text &dt,Integer &no_items)
Description
Get the number of Texts currently in the Dynamic_Text dt.

Page 158

Dynamic Arrays

Chapter 5 12dPL Library Calls

The number of Texts is returned by Integer no_items.
A function return value of zero indicates the number of Texts was successfully returned.
ID = 227


Name
Integer Get_item(Dynamic_Text &dt,Integer i,Text &text)
Description
Get the ith Text from the Dynamic_Text dt.
The Text is returned by text.
A function return value of zero indicates the ith Text was returned successfully.
ID = 228


Name
Integer Set_item(Dynamic_Text &dt,Integer i,Text text)
Description
Set the ith Text in the Dynamic_Text dt to the Text text.
A function return value of zero indicates success.
ID = 229


Name
Integer Get_all_linestyles(Dynamic_Text &linestyles)
Description
Get all linestyle names defined in the Linestyles pop-up for the current project,
and return the list in the Dynamic_Text linestyles.
A function return value of zero indicates the linestyle names were returned successfully.
ID = 688


Name
Integer Get_all_textstyles(Dynamic_Text &textstyles)
Description
Get all textstyle names defined in the Textstyles pop-up for the current project,
and return the list in the Dynamic_Text textstyles.
A function return value of zero indicates the textstyle names are returned successfully.
ID = 689


Name
Integer Get_all_symbols(Dynamic_Text &symbols)
Description
Get all symbol names defined in the Symbols pop-up for the current project, and return the list in
the Dynamic_Text symbols.
A function return value of zero indicates the symbol names were returned successfully.
ID = 1724


Name
Integer Get_all_patterns(Dynamic_Text &patterns)
Description
Get all pattern names defined in the Patterns pop-up for the current project, and return the list in
the Dynamic_Text patterns.
A function return value of zero indicates the function was successful.
ID = 1725


Name
Integer Append(Real value,Dynamic_Real &real_list)
Description
Append the Real value to the end of the contents of the Dynamic_Real real_list. This will
increase the size of the Dynamic_Real by one.
A function return value of zero indicates the append was successful.
ID = 1795


Name
Integer Append(Dynamic_Real from_dr,Dynamic_Real &to_dr)
Description
Append the contents of the Dynamic_Real from_dr to the Dynamic_Real to_dr.
A function return value of zero indicates the append was successful.
ID = 1794


Name
Integer Null(Dynamic_Real &real_list)
Description
Removes all the Reals from the Dynamic_Real real_list and sets the number of items to zero.
A function return value of zero indicates that real_list was successfully nulled.
ID = 1790


Name
Integer Get_number_of_items(Dynamic_Real &real_list,Integer &no_items)
Description
Get the number of Reals currently in the Dynamic_Real real_list.

Dynamic Arrays

Page 161

12d Model Programming Language Manual

The number of Reals is returned in Integer no_items.
A function return value of zero indicates the number of Reals was returned successfully.
ID = 1791


Name
Integer Set_item(Dynamic_Real &real_list,Integer i,Real value)
Description
Set the ith Real in the Dynamic_Real real_list to the Real value.
If the position i is greater or equal to the total number of Real in the Dynamic_Real, then the
Dynamic_Real will automatically be extended so that the number of Reals is i. Any extra Real
values that are added will be set to null (LJG? or zero?).
A function return value of zero indicates the Real was successfully set.
ID = 1793


Name
Integer Get_item(Dynamic_Real &real_list,Integer index,Real &value)
Description
Get the i’th Real from the Dynamic_Real real_list.
The Real is returned in value.
A function return value of zero indicates the i’th Real was returned successfully.
ID = 1792


Name
Integer Append(Integer value,Dynamic_Integer &integer_list)
Description
Append the Integer value to the end of the contents of the Dynamic_Integer integer_list. This
will increase the size of the Dynamic_Integer by one.
A function return value of zero indicates the append was successful.
ID = 1785


Name
Integer Append(Dynamic_Integer from_di,Dynamic_Integer &to_di)
Description
Append the contents of the Dynamic_Integer from_di to the Dynamic_Integer to_di.
A function return value of zero indicates the append was successful.
ID = 1784


Name
Integer Null(Dynamic_Integer &integer_list)
Description
Removes all the Integers from the Dynamic_Integer integer_list and sets the number of items to
zero.
A function return value of zero indicates that integer_list was successfully nulled.
ID = 1780


Name
Integer Get_number_of_items(Dynamic_Integer &integer_list,Integer &count)
Description
Get the number of Integers currently in the Dynamic_Integer integer_list.

Dynamic Arrays

Page 163

12d Model Programming Language Manual

The number of Integers is returned in Integer no_items.
A function return value of zero indicates the number of Integers was returned successfully.
ID = 1781


Name
Integer Set_item(Dynamic_Integer &integer_list,Integer i,Integer value)
Description
Set the ith Integer in the Dynamic_Integer integer_list to the Integer value.
If the position i is greater or equal the total number of Integer in the Dynamic_Integer, then the
Dynamic_Integer will automatically be extended so that the number of Integers is i. Any extra
Integer values that are added will be set to zero (LJG? or zero?).
A function return value of zero indicates the Integer was successfully set.
ID = 1783


Name
Integer Get_item(Dynamic_Integer &integer_list,Integer i,Integer &value)
Description
Get the i’th Integer from the Dynamic_Integer integer_list.
The Integer is returned in value.
A function return value of zero indicates the i’th Integer was returned successfully.
ID = 1782


Name
Real Get_x(Point pt)
Description
Get the x co-ordinate of the Point pt.
The function return value is the x co-ordinate value of pt.
ID = 241


Name
Real Get_y(Point pt)
Description
Get the y co-ordinate of the Point pt.
The function return value is the y co-ordinate value of pt.
ID = 242


Name
Real Get_z(Point pt)
Description
Get the z co-ordinate of the Point pt.
The function return value is the z co-ordinate value of pt.
ID = 243


Name
Real Set_x(Point &pt,Real x)
Description
Set the x co-ordinate of the Point pt to the value x.
The function return value is the x co-ordinate value of pt.
ID = 244


Name
Real Set_y(Point &pt,Real y)
Description
Set the y co-ordinate of the Point pt to the value y.
The function return value is the y co-ordinate value of pt.
ID = 245


Name
Real Set_z(Point &pt,Real z)
Description
Set the z co-ordinate of the Point pt to the value z.
The function return value is the z co-ordinate value of pt.
ID = 246


Name
Point Get_start(Line line)
Description
Get the start Point of the Line line.
The function return value is the start Point of line.
ID = 251


Name
Point Get_end(Line line)
Description
Get the end Point of the Line line.
The function return value is the start Point of line.
ID = 252


Name
Point Set_start(Line &line, Point pt)
Description
Set the start Point of the Line line to be the Point pt.
The function return value is also the start Point of line.
ID = 253


Name
Point Set_end(Line &line, Point pt)
Description
Set the end Point of the Line line to be the Point pt.

Lines

Page 167

12d Model Programming Language Manual

The function return value is also the end Point of line.
ID = 254


Name
Line Reverse(Line line)
Description
Reverse the direction of the Line line.
That is, Reverse swaps the start and end Points of the Line line.
The unary operator "-" will also reverse a Line.
The function return value is the reversed Line.
ID = 255


Name
Point Get_centre(Arc arc)
Description
Get the centre point of the Arc arc.
The function return value is the centre point of the arc.
ID = 260


Name
Real Get_radius(Arc arc)
Description
Get the radius of the Arc arc.
The function return value is the radius of the arc.

Arcs

Page 169

12d Model Programming Language Manual

ID = 261


Name
Point Get_start(Arc arc)
Description
Get the start point of the Arc arc.
The function return value is the start point of the arc.
ID = 262


Name
Point Get_end(Arc arc)
Description
Get the end point of the Arc arc.
The function return value is the end point of the arc.
ID = 263


Name
Point Set_centre(Arc &arc,Point pt)
Description
Set the centre point of the Arc arc to be the Point pt. The start and end points are also translated
by the vector between the new and old arc centres.
The function return value is the centre point of the arc.
ID = 264


Name
Real Set_radius(Arc &arc,Real rad)
Description
Set the radius of the Arc arc to the value rad. The start and end points are projected radially onto
the new arc.
The function return value is the radius of the arc.
ID = 265


Name
Point Set_start(Arc &arc,Point start)
Description
Page 170

Arcs

Chapter 5 12dPL Library Calls

Set the start point of the Arc arc to be the Point start. If the start point is not on the Arc, the point
is dropped perpendicularly onto the Arc to define the actual start point that lies on the Arc.
The function return value is the actual start point on the arc.
ID = 266


Name
Point Set_end(Arc &arc,Point end)
Description
Set the end point of the Arc arc to be the Point end. If the end point is not on the Arc, the point is
dropped perpendicularly onto the Arc to define the actual end point that lies on the Arc.
The function return value is the actual end point on the arc.
ID = 267


Name
Arc Reverse(Arc arc)
Description
Reverse the sign of the radius and swap the start and end points of the Arc arc. Hence the
direction of travel for the Arc is reversed.
The unary operator "-" will also reverse an Arc.
The function return value is the Arc arc.
ID = 268


Name
Integer Set_type(Spiral spiral,Integer type)
Description
LJG - this could have problems with changes. This is broken for V8, V9, V10
V7? depends on file Spirals.4d; type = 0 clothoid, 1 westrail cubic, 2 cubic spiral 3 natural
clothoid (LandXML) 4 NSW cubic parabola
V9? type = 1 clothoid, 2 westrail cubic, 3 clothoid LandXML 4 Cubic spiral 5 Natural clothoid 6
Cubic parabola
ID = 1805


Name
Integer Set_leading(Spiral transition,Integer leading)
Description
Set whether transition is a leading transition (radius decreases along the transition) or a trailing
transition (radius increases along the transition).
If leading is non-zero then it is a leading transition.
If leading is zero then it is a trailing transition.
A function return value of zero indicates that the function call was successful.
ID = 1806


Name
Integer Set_length(Spiral transition,Real length)
Description
Set the length of the full length transition to length.
A function return value of zero indicates that the function call was successful.
Note - the length of the transition is defined from the position on the transition where the radius is
infinity (i.e. is a straight) to the other end of the transition.
For a leading transition, the radius is infinity at the start of the transition.
For a trailing transition, the radius is infinity at the end of the transition.
ID = 1807


Name
Integer Set_radius(Spiral trans,Real radius)
Description
Sign of radius.
For a leading transition, set the end radius of the transition trans to radius.
For a trailing transition, set the start radius of the transition trans to radius.

Page 176

Spirals and Transitions

Chapter 5 12dPL Library Calls

Note - the radius is a signed value. 
If radius > 0 the transition curves to the right.
If radius <0, the transition curves to the left.
A function return value of zero indicates that the function call was successful.
ID = 1808


Name
Integer Set_direction(Spiral trans,Real angle)
Description
For the end of the transition trans where the radius is infinity, set the angle of the tangent at that
position to angle. angle is in radians and is measured in a counterclockwise direction from the
positive x-axis.
For a leading transition, set the angle of the tangent at the start of trans to angle.
For a trailing transition, set the angle of the tangent at the end of trans to angle.
A function return value of zero indicates that the function call was successful.
ID = 1809


Name
Integer Set_anchor(Spiral trans,Real point)
Description
For the end of the transition trans where the radius is infinity, set the co-ordinates of that position
to point.
For a leading transition, the anchor point is the start of trans.
For a trailing transition, the anchor point is the end of trans.
A function return value of zero indicates that the function call was successful.
ID = 1810


Name
Integer Set_start_length(Spiral trans,Real start_length)
Description
Set the start length of the transition trans to start_length.
A function return value of zero indicates that the function call was successful.
Note - the start length is the distance from the position on the full transition where the radius is
infinity (anchor point) to the start of the transition. If the start_length is non-zero then it is not a full
transition but a partial transition.
ID = 1811


Name

Spirals and Transitions

Page 177

12d Model Programming Language Manual

Integer Set_end_length(Spiral trans,Real end_length)
Description
Set the end length of the transition trans to end_length.
The end length is the distance from the position on the full transition where the radius is infinity to
the point on the transition where no more of the transition is used.
A function return value of zero indicates that the function call was successful.
Note: even through the full transition has a length of L say, the part of the transition that is
actually used is only from the start length to the end length.
ID = 1812


Name
Integer Set_start_height(Spiral trans,Real height)
Description
For the transition trans, set the z-value at the position start length along the transition to height.
A function return value of zero indicates that the function call was successful.
ID = 1813


Name
Integer Set_end_height(Spiral trans,Real height)
Description
For the transition trans, set the z-value at the position end length along the transition to height.
A function return value of zero indicates that the function call was successful.
ID = 1814


Name
Integer Get_valid(Spiral trans)
Description
If trans is a valid transition, then the function return value is zero.
If trans is not a valid transition, then the function return value is non-zero.
Note - the parameters given to define the transition may be inconsistent and not be able to define
an actual transition.
ID = 1815


Name
Integer Get_type(Spiral trans)

Page 178

Spirals and Transitions

Chapter 5 12dPL Library Calls

Description
LJG? yes what are they?
ID = 1816


Name
Integer Get_leading(Spiral trans)
Description
A transition is a leading transition if the radius decreases along the transition, or a trailing
transition if the radius increases along the transition.
If trans is a leading transition then return a non-zero function return value.
If trans is a trailing transition then return zero as the function return value.
ID = 1817


Name
Real Get_length(Spiral trans)
Description
For the full transition of trans, return the length to the end of the full transition as the function
return value.
ID = 1818


Name
Real Get_radius(Spiral trans)
Description
For a leading transition trans, get the radius at the end of the full transition and return it as the
function return value.
For a trailing transition trans, get the radius at the start of the full transition and return it as the
function return value.
ID = 1819


Name
Real Get_direction(Spiral trans)
Description
Get the angle of the tangent at the anchor point (the end of the transition trans where the radius
is infinity), and return it as the function return value.
angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
For a leading transition trans, it is the angle of the tangent at the start of the full transition.
For a trailing transition trans, it is the angle of the tangent at the end of the full transition.
ID = 1820


Name
Point Get_anchor(Spiral trans)
Description
Get the co-ordinates of the anchor point (the end of the full transition where the radius is infinity),
and return them as the function return value.
For a leading transition trans, the anchor point is the start of the full transition.
For a trailing transition trans, the anchor point is the end of the full transition.
ID = 1821


Name
Real Get_start_length(Spiral trans)
Description
Get the start length of the transition trans and return it as the function return value.
ID = 1822


Name
Real Get_end_length(Spiral trans)
Description
Get the end length of the transition trans and return it as the function return value.
ID = 1823


Name
Real Get_start_height(Spiral trans)
Description
For the transition trans, get the height at the position start length along the transition and return
it as the function return value.
ID = 1824


Name
Real Get_end_height(Spiral trans)
Description
For the transition trans, get the height at the position end length along the transition and return
it as the function return value.

Page 180

Spirals and Transitions

Chapter 5 12dPL Library Calls

ID = 1825


Name
Point Get_start_point(Spiral trans)
Description
For the transition trans, get the Point at the position start length along the transition and return
it as the function return value.
ID = 1826


Name
Point Get_end_point(Spiral trans)
Description
For the transition trans, get the Point at the position end length along the transition and return it
as the function return value.
ID = 1827


Name
Point Get_local_point(Spiral trans,Real len)
Description
For the transition trans, get the local co-ordinates (as a Point) of the position at length len from
the start of the full transition and return it as the function return value.
Note - the transition is in world coordinates and needs to be translated and rotated before getting
the local coordinates of the position at length len along the transition.
ID = 1828


Name
Point Get_point(Spiral trans,Real len)
Description
For the transition trans, get the co-ordinates of the position (as a Point) at length len from the
start of the full transition, and return it as the function return value.
ID = 1829


Name
Real Get_local_angle(Spiral trans,Real len)
Description
For the transition trans, get the local angle of the tangent at the position at length len from the
start of the full transition, and return it as the function return value.

Spirals and Transitions

Page 181

12d Model Programming Language Manual

angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
Note - the transition is in world coordinates and needs to be translated and rotated before getting
the angle of the tangent of the position at length len along the transition.
ID = 1830


Name
Real Get_angle(Spiral trans,Real len)
Description
For the transition trans, get the angle of the tangent of the position at length len from the start of
the full transition, and return it as the function return value.
angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
ID = 1831


Name
Real Get_radius(Spiral trans,Real len)
Description
For the transition trans, get the radius at the position at length len from the start of the full
transition, and return it as the function return value.
ID = 1832


Name
Real Get_shift_x(Spiral trans)
Description
shift at end point of transition trans (what is x/y which is offset, which is along tangent)
ID = 1833


Name
Real Get_shift_y(Spiral trans)
Description
shift at end point of transition trans
ID = 1834


Name
Real Get_shift(Spiral trans)
Description

Page 182

Spirals and Transitions

Chapter 5 12dPL Library Calls

shift
ID = 1835


Name
Spiral Reverse(Spiral trans)
Description
Create a Spiral that is the same as transition trans but has the reverse travel direction. The
created transition is returned as the function return value.
So a leading transition becomes a trailing transition and a trailing transition becomes a leading
transition.
The unary operator "-" will also reverse a Spiral.
The function return value is the reversed Spiral.
ID = 1803


Name
Integer Get_type(Segment segment)
Description
Get the type of the Segment segment.
A Segment type of
1
2
3
4

denotes a Point
denotes a Line
denotes an Arc
denotes a Spiral

The function return value is the Segment type.
ID = 273


Name
Integer Get_point(Segment segment,Point &point)
Description
If the Segment is of type 1, the Point of the Segment is returned as point, otherwise it is an error.
A function return value of zero indicates the Segment was a Point Segment and that the Point
was returned successfully.
ID = 274


Name
Integer Get_line(Segment segment,Line &line)
Description
If the Segment is of type 2, the Line of the Segment is returned as line, otherwise it is an error.
A function return value of zero indicates the Segment was a Line Segment and that the Line was
returned successfully.
ID = 275


Name
Integer Get_arc(Segment segment,Arc &arc)
Description
If the Segment is of type 3, the Arc of the Segment is returned as arc, otherwise it is an error.

Segments

Page 185

12d Model Programming Language Manual

A function return value of zero indicates the Segment was an Arc Segment and that the Arc was
returned successfully.
ID = 276


Name
Integer Get_spiral(Segment segment,Spiral &trans)
Description
If the Segment is of type 4, the Spiral of the Segment is returned as transition trans, otherwise it
is an error.
A function return value of zero indicates the Segment was an Spiral Segment and that the Spiral
was returned successfully.
ID = 1837


Name
Integer Get_start(Segment segment,Point &point)
Description
Get the start Point of the Segment segment.
The start value is returned by Point point.
A function return value of zero indicates the start point was successfully returned.
ID = 550


Name
Integer Get_end(Segment segment,Point &point)
Description
Get the end Point of the Segment segment.
The end value is returned by Point point.
A function return value of zero indicates the end point was successfully returned.
ID = 551


Name
Integer Set_point(Segment &segment,Point point)
Description
Sets the Segment type to 1 and the Point of the Segment to point.
A function return value of zero indicates the Segment was successfully set.
ID = 277


Name
Integer Set_line(Segment &segment,Line line)
Description
Sets the Segment type to 2 and the Line of the Segment to line.
A function return value of zero indicates the Segment was successfully set.
ID = 278


Name
Integer Set_arc(Segment &segment,Arc arc)
Description
Sets the Segment type to 3 and the Arc of the Segment to arc.
A function return value of zero indicates the Segment was successfully set.
ID = 279


Name
Integer Set_spiral(Segment &segment,Spiral trans)
Description
Sets the Segment type to 4 and the Spiral of the Segment to transition trans.
A function return value of zero indicates the Segment was successfully set.
ID = 1836


Name
Integer Set_start(Segment &segment,Point point)
Description
Set the start Point of the Segment segment.
The start value is defined by Point point.
A function return value of zero indicates the start point was successfully set.
ID = 552


Name
Integer Set_end(Segment &segment,Point point)
Description
Set the end Point of the Segment segment.
The end value is defined by Point point.

Segments

Page 187

12d Model Programming Language Manual

A function return value of zero indicates the end point was successfully set.
ID = 553


Name
Segment Reverse(Segment segment)
Description
Reverse the direction of the Segment segment.
Note that the reverse of a segment of type 1 (a Point segment) is simply a point of exactly the
same co-ordinates.
The unary operator "-" will also reverse a Segment.
The function return value is the reversed Segment.
ID = 280


Name
Integer Get_segments(Element elt,Integer &nsegs)
Description
Get the number of segments for a string Element elt.
The number of segments is returned as nsegs
A function return value of zero indicates the data was successfully returned.
Note
If a string has n points, then it has n-1 segments.
For example, a seven point string consists of six segments.
ID = 545


Name
Integer Get_segment(Element elt,Integer i,Segment &seg)
Description
Get the segment for the ith segment on the string.
The segment is returned as seg.
The types of segments returned are Line, or Arc.
A function return value of zero indicates the data was successfully returned.
ID = 546


Name
Integer Get_length(Segment segment,Real &length)
Description
Get the plan length of the Segment segment.
A function return value of zero indicates the plan length was successfully returned.
ID = 361


Name
Integer Get_length_3d(Segment segment,Real &length)
Description
Get the 3d length of the Segment segment.
A function return value of zero indicates the 3d length was successfully returned.
ID = 362


Name
Integer Plan_area(Segment segment,Real &plan_area)
Description
Calculate the plan area of the Segment segment. For an Arc, the plan area of the sector is
returned. For a Line and a Point, zero area is returned.
The area is returned in the Real plan_area.
A function return value of zero indicates the plan area was successfully returned.
ID = 360


Name
Integer Parallel(Line line,Real distance,Line &parallelled)
Description
Plan parallel the Line line by the distance distance.
The parallelled Line is returned as the Line parallelled. The z-values are not modified, i.e. they
are the same as for line.
A function return value of zero indicates the parallel was successful.
ID = 284


Name
Integer Parallel(Arc arc,Real distance,Arc &parallelled)
Description
Plan parallel the Arc arc by the distance distance.
The parallelled Arc is returned as the Arc parallelled. The z-values are not modified, i.e. they are
the same as for arc.
A function return value of zero indicates the parallel was successful.
ID = 285


Name
Integer Parallel(Segment segment,Real dist,Segment &parallelled)
Description
Plan parallel the Segment segment by the distance dist.
The parallelled Segment is returned as the Segment parallelled. The z-values are not modified,
i.e. they are the same as for segment.
If the Segment is of type Point, a Segment is not returned and the function return value is set to
non-zero.
A function return value of zero indicates the parallel was successful.
ID = 286


Name
Integer Fitarc(Point pt_1,Point pt_2,Point pt_3,Arc &fillet)
Description
Fit a plan arc through the (x,y) co-ordinates of the three Points pt_1, pt_2 and pt_3.
The arc is returned as Arc fillet and the z-values of its start and end points are zero.
A function return value of zero indicates success.
A non-zero return value indicates no arc exists.
ID = 289


Name
Integer Fitarc(Segment seg_1,Segment seg_2,Real rad,Point cpt,Arc &fillet)
Description
Create an plan arc from Segment seg_1 to Segment seg_2 with radius rad.
The arc start point is on the extended Segment seg_1 with start direction the same as the
direction of seg_1.
The arc end point is on the extended Segment seg_2 with end direction the same as the
direction of seg_1.
If more than one arc satisfies the above conditions, then the arc with centre closest to the Point
cpt will be selected.
The arc is returned as Arc fillet and the z-values of its start and end points are zero.
A function return value of zero indicates an arc exists.
A non-zero return value indicates no arc exists.
ID = 287


Name
Integer Fitarc(Segment seg_1,Segment seg_2,Point start_tp,Arc &fillet)
Description
Create a plan arc from Segment seg_1 to Segment seg_2.
The arc start point is the perpendicular projection of the Point start_tp onto the extended
Segment seg_1. The start direction of the arc is the same as the direction of seg_1.
The arc end point is be on the extended Segment seg_2 with end direction the same as the
direction of seg_1.
There is at most one arc that satisfies the above conditions.
The arc is returned as Arc fillet and the z-values of its start and end points are zero.
A function return value of zero indicates success.
A non-zero return value indicates no arc exists.
ID = 288


Name
Integer Tangent(Segment seg_1,Segment seg_2,Line &line)
Description
Create the plan tangent line from the extended Segment seg_1 to the extended Segment set_2.
The direction of the Segments seg_1 and seg_2 is used to select a unique tangent line.
The tangent line is returned as the Line line with z-values of zero.
A function return value of zero indicates there were no errors in the calculations.
ID = 290


Name
Integer Intersect(Segment seg_1,Segment seg_2,Integer &no_intersects,Point &p1,Point &p2)
Description
Find the internal intersection between the Segments seg_1 and seg_2. That is, only find the
intersections of the two Segments that occur between the start and end points of the Segments.
The number of intersections is given by no_intersects and the possible intersections are given
in Points p1 and p2. The z-values of p1 and p2 are set to zero.
There may be zero, one or two intersection points.
A function return value of zero indicates there were no errors in the calculations.
ID = 291


Name
Integer Intersect_extended(Segment seg_1,Segment seg_2,Integer &no_intersects,Point &p1,Point &p2)
Description
Find the intersection between the extended Segments seg_1 and seg_2.
The number of intersections is given by no_intersects and the possible intersections are given
in Points p1 and p2. The z-values of p1 and p2 are set to zero.
There may be zero, one or two intersection points.
A function return value of zero indicates there were no errors in the calculations.
ID = 303


Name
Integer Offset_intersect(Segment seg_1,Real off_1,Segment seg_2,Real off_2,Integer &no_intersects,Point
&p1,Point &p2)
Description
Find the internal intersection between the Segments seg_1 and seg_2 that have been
perpendicularly offset by the amounts off_1 and off_2 respectively.
The number of intersections is given by no_intersects and the possible intersections are given
in Points p1 and p2.
The z-values of p1 and p2 are set to zero.
There may be zero, one or two intersection points.
A function return value of zero indicates there were no errors in the calculations.
ID = 292


Name
Integer Offset_intersect_extended(Segment seg_1,Real off_1,Segment seg_2,Real off_2,Integer
&no_intersects,Point &p1,Point &p2)
Description
Find the intersection between the extended Segments seg_1 and seg_2 that have been
perpendicularly offset by the amounts off_1 and off_2 respectively.
The number of intersections is given by no_intersects and the possible intersections are given
in Points p1 and p2. The z-values of p1 and p2 are set to zero.
There may be zero, one or two intersection points.
A function return value of zero indicates there were no errors in the calculations.
ID = 304


Name
Integer Angle_intersect(Point pt_1,Real ang_1,Point pt_2,Real ang_2,Point &p)
Description
Find the point of intersection of the line going through the Point pt_1 with angle ang_1 and the
line going through the Point pt_2 with angle ang_2.
The intersection point is returned as Point p. The z-values of p1 and p2 are set to zero.
A function return value of zero indicates that the two lines intersect.
A function return value of zero indicates there were no errors in the calculations.
ID = 293


Name
Real Get_distance(Point p1,Point p2)
Description
Calculate the plan distance between the Points p1 and p2.
The function return value is the plan distance.
ID = 297


Name
Real Get_distance_3d(Point p1,Point p2)
Description
Calculate the 3d distance between the Points p1 and p2.
The function return value is the 3d distance.
ID = 363


Name
Integer Locate_point(Point from,Real ang,Real dist,Point &to)
Description
Create the Point to which is a plan distance dist along the line of angle ang which goes through
the Point from. The z-value of to is the same as the z-value of from.
A function return value of zero indicates there were no errors in the calculations.
ID = 298


Name
Integer Drop_point(Segment segment,Point pt_to_drop,Point &dropped_pt)
Description
Drop a Point pt_to_drop perpendicularly in plan onto the Segment segment.
The position of the dropped point on the Segment in returned in the Point dropped_pt.
If the point cannot be dropped perpendicularly onto the Segment, then the point is dropped onto
the closest end point of the Segment. A z-value for dropped_pt is created by interpolation.
A function return value of zero indicates the point was dropped successfully.
ID = 299


Name
Integer Drop_point(Segment segment,Point pt_to_drop,Point &dropped_pt,Real &dist)
Description
Drop a Point pt_to_drop onto the Segment segment.
The position of the dropped point on the Segment in returned in the Point dropped_pt.
The plan distance from pt_to_drop to dropped_pt is returned as dist.
If the point cannot be dropped perpendicularly onto the Segment, then the point is dropped onto
the closest end point of the Segment. A z-value for dropped_pt is created by interpolation.
A function return value of zero indicates the point was dropped successfully.
ID = 306


Name
Integer Projection(Segment segment,Real dist,Point &projected_pt)
Description
Create the Point projected_pt that is a plan distance of dist along from the start of the extended
Segment segment.
The z-value for projected_pt is calculated by linear interpolation. Note that for an Arc, the zvalue is interpolated for one full circuit of the arc beginning at the start point and the one circuit is
used for z-values for distances greater than the length of one circuit.
A function return value of zero indicates the projection was successful.
ID = 300


Name
Integer Projection(Segment segment,Point start_point,Real dist,Point &projected_pt)
Description
Create the Point projected_pt that is a plan distance of dist along the extended Segment
segment where distance is measured from the Point start_point.
If start_point does not lie on the extended Segment, then start_point is automatically dropped
onto the extended Segment to create the start point for distance measurement.
The z-value for projected_pt is calculated by linear interpolation. Note that for an Arc, the zvalue is interpolated for one full circuit of the arc beginning at the start point and the one circuit is
used for z-values for distances greater than the length of one circuit.
A function return value of zero indicates the projection was successful.
ID = 301


Name
Integer Change_of_angle(Real x1,Real y1,Real x2,Real y2,Real x3,Real y3,Real &angle)
Description
Calculate the deflection angle between the directed line going from (x1,y1) to (x2,y2) and the
directed line going from (x2,x2) and (x3,y3) where the deflection angle is measured in radians
and in a CLOCKWISE direction. The deflection angle is returned in angle.
(x3,y3)

deflection angle

directed line from
(x2,y2) to (x3,y3)
(x2,y2)
directed line from
x1,y1) to (x2,y2)

(x1,y1)

The use of clockwise fits in with the definition of travelling along a road where going to the right is
considered positive and going to the left is considered negative.
WARNING: This is not the normal mathematical angle between the two vectors which is
measured in the counter clockwise direction and would be the negative of this value.
A function return value of zero indicates the angle was returned successfully.
ID = 656


Name
Integer Change_of_angle(Line L1,Line L2,Real &angle)
Description
Calculate the deflection angle between the line L1 and the line L2 where the deflection angle is
measured in radians and in a CLOCKWISE direction. The deflection angle is returned in angle.
end of line L2

deflection angle

line L2

start of line L2
end of line L1
line L1

start of line L1

The use of clockwise fits in with the definition of travelling along a road where going to the right is
considered positive and going to the left is considered negative.
WARNING: This is not the normal mathematical angle between the two vectors which is
measured in the counter clockwise direction and would be the negative of this value.
A function return value of zero indicates the angle was returned successfully.
ID = 657


Name
Integer Colour_exists(Text col_name)
Description
Checks if a colour of name col_name exists in 12dPL.
The colour name to check for is given by Text col_name.
A non-zero function return value indicates the colour exist.
A zero function return value indicates the colour does not exist.
Warning - this is the opposite to most 12dPL function return values
ID = 66


Name
Integer Colour_exists(Integer col_number)
Description
Checks if a number is a valid colour number.
The number to check for is given by Integer col_number.
A non-zero function return value indicates the number is a valid colour number.
A zero function return value indicates the number is not a valid colour number.
Warning - this is the opposite of most 12dPL function return values
ID = 65


Name
Integer Convert_colour(Text col_name,Integer &col_number)
Description
Tries to convert the Text col_name to a colour number.
If successful, the colour number is returned in Integer col_number.
A function return value of zero indicates the conversion was successful.
ID = 67


Name
Integer Convert_colour(Integer col_number,Text &col_name)
Description
Tries to convert the Integer col_number to a colour name.
If successful, the colour name is returned in Text col_name.
A function return value of zero indicates the conversion was successful.
ID = 68


Name
Integer Convert_colour(Integer value,Integer &red,Integer &green,Integer &blue)
Description
Convert the colour number value to its red, green and blue components (0-255) and return them
in red, green and blue respectively.
A function return value of zero indicates the colour was successfully converted.
ID = 2138


Name
Integer Get_project_colours(Dynamic_Text &colours)
Description
Get a Dynamic_Text of all the colour names defined for the project.
The colour names are returned in the Dynamic_Text colours.
A function return value of zero indicates the colours were returned successfully.
ID = 235


Name
Integer Attribute_exists(Attributes attr,Text att_name)
Description
Checks to see if an attribute with the name att_name exists in the Attributes attr.
att_name can have a full path name of the attribute. Attribute names are case sensitive.
A non-zero function return value indicates that the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1939


Name

User Defined Attributes

Page 203

12d Model Programming Language Manual

Integer Attribute_exists(Attributes attr,Text name,Integer &no)
Description
Checks to see if an attribute with the name att_name exists in the Attributes attr.
att_name can have a full path name of the attribute. Attribute names are case sensitive.
If the attribute exists, its position is returned in Integer no.
This position can be used in other Attribute functions.
A non-zero function return value indicates the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1940


Name
Integer Attribute_delete(Attributes attr,Text att_name)
Description
Deletes the attribute with the name att_name from the Attributes attr.
A function return value of zero indicates the attribute was deleted.
ID = 1941


Name
Integer Attribute_delete(Attributes attr,Integer att_no)
Description
Delete the attribute with the attribute number att_no from the Attributes attr.
A function return value of zero indicates the attribute was deleted.
ID = 1942


Name
Integer Attribute_delete_all(Attributes attr)
Description
Delete all attributes from the Attributes attr.
A function return value of zero indicates all the attribute were deleted.
ID = 1943


Name
Integer Get_number_of_attributes(Attributes attr,Integer &no_atts)

Page 204

User Defined Attributes

Chapter 5 12dPL Library Calls

Description
Get the number of top level attributes in the Attributes attr. The number is returned in no_atts.
A function return value of zero indicates the number is successfully returned.
ID = 1944


Name
Integer Get_attribute(Attributes attr,Text att_name,Text &att)
Description
From the Attributes attr, get the attribute called att_name and return the attribute value in att.
The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1945


Name
Integer Get_attribute(Attributes attr,Text att_name,Integer &att)
Description
From the Attributes attr, get the attribute called att_name and return the attribute value in att.
The attribute must be of type Integer.
If the attribute is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1946


Name
Integer Get_attribute(Attributes attr,Text att_name,Real &att)
Description
From the Attributes attr, get the attribute called att_name and return the attribute value in att.
The attribute must be of type Real.
If the attribute is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1947


Name
Integer Get_attribute(Attributes attr,Text att_name,Uid &att)
Description
From the Attributes attr, get the attribute called att_name and return the attribute value in att.
The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1948


Name
Integer Get_attribute(Attributes attr,Text att_name,Attributes &att)
Description
From the Attributes attr, get the attribute called att_name and return the attribute value in att.
The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attributes value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1949


Name
Integer Get_attribute(Attributes attr,Integer att_no,Text &att)
Description
From the Attributes attr, get the attribute with number att_no and return the attribute value in att.
The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1950


Name
Integer Get_attribute(Attributes attr,Integer att_no,Integer &att)
Description

Page 206

User Defined Attributes

Chapter 5 12dPL Library Calls

From the Attributes attr, get the attribute with number att_no and return the attribute value in att.
The attribute must be of type Integer.
If the attribute is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1951


Name
Integer Get_attribute(Attributes attr,Integer att_no,Real &att)
Description
From the Attributes attr, get the attribute with number att_no and return the attribute value in att.
The attribute must be of type Real.
If the attribute is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1952


Name
Integer Get_attribute(Attributes attr,Integer att_no,Uid &att)
Description
From the Attributes attr, get the attribute with number att_no and return the attribute value in att.
The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1953


Name
Integer Get_attribute(Attributes attr,Integer att_no,Attributes &att)
Description
From the Attributes attr, get the Attribute with number att_no and return the Attributes value in
att. The attribute must be of type Attributes.

User Defined Attributes

Page 207

12d Model Programming Language Manual

If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1954


Name
Integer Get_attribute_name(Attributes attr,Integer att_no,Text &name)
Description
From the Attributes attr, get the attribute with number att_no and return the Text value in name.
The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1955


Name
Integer Get_attribute_type(Attributes attr,Text att_name,Integer &att_type)
Description
Get the type of the attribute with the name att_name from the Attribute attr. The type is returned
in att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 1956


Name
Integer Get_attribute_type(Attributes attr,Integer att_num,Integer &att_type)
Description
Get the type of the attribute with the number att_num from the Attribute attr. The type is returned
in att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type is successfully returned.
ID = 1957


Name
Integer Get_attribute_length(Attributes attr,Text att_name,Integer &att_len)
Description
For the Attributes attr, get the length in bytes of the attribute of name att_name. The number of
bytes is returned in att_len.
This is mainly for use with attributes of types Text and Binary (blobs)
A function return value of zero indicates the attribute length is successfully returned.
ID = 1958


Name
Integer Get_attribute_length(Attributes attr,Integer att_no,Integer &att_len)
Description
For the Attributes attr, get the length in bytes of the attribute with number att_no. The number of
bytes is returned in att_len.
This is mainly for use with attributes of types Text and Binary (blobs)
A function return value of zero indicates the attribute length is successfully returned.
ID = 1959


Name
Integer Set_attribute(Attributes attr,Text att_name,Text att)
Description
For the Attributes attr,
if the attribute called att_name does not exist then create it as type Text and give it the value
att.
if the attribute called att_name does exist and it is type Text, then set its value to att.
If the attribute exists and is not of type Text, then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1960


Name
Integer Set_attribute(Attributes attr,Text att_name,Integer att)
Description
For the Attributes attr,
if the attribute called att_name does not exist then create it as type Integer and give it the value
User Defined Attributes

Page 209

12d Model Programming Language Manual

att.
if the attribute called att_name does exist and it is type Integer, then set its value to att.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1961


Name
Integer Set_attribute(Attributes attr,Text att_name,Real att)
Description
For the Attributes attr,
if the attribute called att_name does not exist then create it as type Real and give it the value
att.
if the attribute called att_name does exist and it is type Real, then set its value to att.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1962


Name
Integer Set_attribute(Attributes attr,Text att_name,Uid att)
Description
For the Attributes attr,
if the attribute called att_name does not exist then create it as type Uid and give it the value
att.
if the attribute called att_name does exist and it is type Uid, then set its value to att.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1963


Name
Integer Set_attribute(Attributes attr,Text att_name,Attributes att)
Description
For the Attributes attr,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.

Page 210

User Defined Attributes

Chapter 5 12dPL Library Calls

Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1964


Name
Integer Set_attribute(Attributes attr,Integer att_no,Text att)
Description
For the Attributes attr, if the attribute number att_no exists and it is of type Text, then its value is
set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Text then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1965


Name
Integer Set_attribute(Attributes attr,Integer att_no,Integer att)
Description
For the Attributes attr, if the attribute number att_no exists and it is of type Integer, then its value
is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Integer then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1966


Name
Integer Set_attribute(Attributes attr,Integer att_no,Real att)
Description
For the Attributes attr, if the attribute number att_no exists and it is of type Real, then its value is
set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Real then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
User Defined Attributes

Page 211

12d Model Programming Language Manual

ID = 1967


Name
Integer Set_attribute(Attributes attr,Integer att_no,Uid att)
Description
For the Attributes attr, if the attribute number att_no exists and it is of type Uid, then its value is
set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1968


Name
Integer Set_attribute(Attributes attr,Integer att_no,Attributes att)
Description
For the Attributes attr, if the attribute number att_no exists and it is of type Attributes, then its
value is set to att.
If there is no Attributes with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1969


Name
Integer Attribute_debug(Attributes attr)
Description
For internal 12d Solutions use only.
Write out even more information about the Attributes attr to the Output Window.
A function return value of zero indicates the function was successful.
ID = 1971


Name
Integer Directory_exists(Text folder_name)
Description
Check if a folder of name folder_name exists.
If folder_name is a relative path, the folder is created in the current working folder of the project.
If folder_name is an absolute (starts with say C:, \\, //), then the folder is created in the absolute
path.
A non-zero function return value indicates that the folder was created.
A zero function return value indicates that there is an error and the folder was not created.
Warning - this is the opposite of most 12dPL function return values
ID = 2468


Name
Integer Get_file_size(Text file_name,Integer &size)
Description
Get the size in bytes of the file named file_name and returns the number of bytes in Integer size.
Note that the file needs to be a file of size less than 2 Gigabytes.
A function return value of zero indicates the function was successful.
ID = 2407


Name
Integer Directory_create(Text folder_name)
Description
Create the folder folder_name in the current working folder (the folder name can not contain any
paths)
Note - Directory_create_recursive will create a folder tree.
A function return value of zero indicates the function was successful.
ID = 2470


Name
Integer Directory_create_recursive(Text folder_name)
Description
Create the folder folder_name. The folder name can contain paths and if any of the folders along
the path do not exist, then they will also be created.
If folder_name does not contain any path then the folder is created in the current working folder.

Folders

Page 213

12d Model Programming Language Manual

A function return value of zero indicates the function was successful.
ID = 2471


Name
Integer Directory_delete(Text folder_name)
Description
If the folder named folder_name is empty, delete the folder folder_name.
Note - Directory_delete_recursive will delete a non-empty folder and all of its sub-folders.
A function return value of zero indicates the function was successful.
ID = 2469


Name
Integer Directory_delete_recursive(Text folder_name)
Description
Delete the folder named folder_name, and all the sub-folders of folder_name.
A function return value of zero indicates the function was successful.
WARNING Using a folder name of d: will delete the entire d drive.
You have been warned.
ID = 2472


Name
Integer Get_program_version_number()
Description
The function return value is the 12d Model version number.
For example, 10 for 12d Model 10C1c
ID = 2291


Name
Integer Get_program_major_version_number()
Description
The function return value is the 12d Model major version number. That is 1 for C1, 2 for C2 etc, 0
for Alpha or Beta.
For example, 1 for 12d Model 10C1c
ID = 2292


Name
Integer Get_program_minor_version_number()
Description
The function return value is the 12d Model minor version number. That is 1 for a, 2 for b, 3 of c
etc.
For example, 3 for 12d Model 10C1c
ID = 2293


Name
Integer Get_program_folder_version_number()
Description
The function return value is the 12d Model folder version number.
For example, 00 in "Program Files\12dModel\10.00
ID = 2294


Name
Integer Get_program_build_number()
Description

12d Model Program and Folders

Page 215

12d Model Programming Language Manual

The function return value is the 12d Model build number.
This is for internal use only and for minidumps.
ID = 2295


Name
Text Get_program_special_build_name()
<no description>
ID = 2296


Name
Text Get_program_patch_version_name()
Description
The function return value is a special patch version description for pre-release versions and it is
written after the 12d Model version information. It is blank for release versions.
For example "Alpha 274 SLF,SLX,Image Dump - Not For Production"
ID = 2297


Name
Text Get_program_full_title_name()
Description
The function return value is the full name that is written out after 12d Model on the top of the 12d
Model Window.
For example "10.0 Alpha 274 SLF,SLX,Image Dump - Not For Production"
ID = 2298


Name
Text Get_program()
Description
The function return value is the full path to where the 12d.exe is on disk. It includes the
"12d.exe".
For example "C:\Program Files\12d\12dmodel\10.00\nt.x86\12d.exe"
ID = 2299


Name
Text Get_program_name()

Page 216

12d Model Program and Folders

Chapter 5 12dPL Library Calls

Description
The function return value is the name of the 12d Model executable without the ".exe".
That is, "12d".
ID = 2300


Name
Text Get_program_folder()
Description
The function return value is the full path to the folder where the 12d Model executable (12d.exe)
is on disk.
For example "C:\Program Files\12d\12dmodel\10.00\nt.x86"
ID = 2301


Name
Text Get_program_parent_folder()
Description
The function return value is the full path to the folder above where the 12d Model executable
(12d.exe) is on disk.
For example "C:\Program Files\12d\12dmodel\10.00"
ID = 2302


Name
Integer Get_project_folder(Text &name)
Description
Get the path to the working folder (the folder containing the current project) and return it in name.
A function return value of zero indicates the function was successful.
ID = 1891


Name
Integer Get_temporary_directory(Text &folder_name)
Description
Get the name of the Windows temporary folder %TEMP% and return it as folder_name.
A function return value of zero indicates the function was successful.
ID = 2473


Name
Integer Get_temporary_12d_directory(Text &folder_name)
Description
Get the name of the 12d Model temporary folder "%TEMP%\12d", and return it as folder_name.
A function return value of zero indicates the function was successful.
ID = 2474


Name
Integer Get_temporary_project_directory(Text &folder_name)
Description
Get the name of the current 12d Model Project temporary folder "%TEMP%\12d\process-id"
(where process-id is the process id of the current running 12d.exe), and return it as folder_name
A function return value of zero indicates the function was successful.
Note - Every 12d project has a independent temporary folder.
ID = 2475


Name
Integer Get_project_name(Text &name)
Description
Get the names of the current project.
The names is returned in the Text name.
A function return value of zero indicates the function names were successfully returned.
ID = 813


Name
Integer Project_save()
Description
Save the Project to the disk.
A function return value of zero indicates the Project was successfully saved.
ID = 1570


Name
Integer Program_exit(Integer ignore_save)
Description
Exit the 12d Model program.
If ignore_save is non-zero then the project is closed without saving and 12d Model then stops.
If ignore_save is zero then a save of the project is done and 12d Model then stops.
ID = 1571


Name
Integer Get_project_functions(Dynamic_Text &function_names)
Description
Get the names of all the functions in the project.
The dynamic array of function names is returned in the Dynamic_Text function_names.
A function return value of zero indicates the function names were successfully returned.
ID = 236


Name
Integer Sleep(Integer milli)
Description
Send 12d Model to sleep for milli milliseconds
A function return value of zero indicates the function was successful.
ID = 2476


Name
Integer Set_project_attributes(Attributes att)
Description
For the Project, set the Attributes to att.
A function return value of zero indicates the Attributes was successfully set.
ID = 1982


Name
Integer Get_project_attributes(Attributes &att)
Description
For the Project, return the Attributes for the Project as att.
If the Project has no attribute then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 1983


Name
Integer Get_project_attribute(Text att_name,Uid &att)
Description
For the Project, get the attribute called att_name and return the attribute value in uid. The
attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1984


Name

Page 220

Project

Chapter 5 12dPL Library Calls

Integer Get_project_attribute(Text att_name,Attributes &att)
Description
For the Project, get the attribute called att_name and return the attribute value in att. The
attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1985


Name
Integer Get_project_attribute(Integer att_no,Uid &att)
Description
For the Project, get the attribute with number att_no and return the attribute value in uid. The
attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1986


Name
Integer Get_project_attribute(Integer att_no,Attributes &att)
Description
For the Project, get the attribute with number att_no and return the attribute value in att. The
attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1987


Name
Integer Set_project_attribute(Text att_name,Uid uid)
Description
For the Project,
if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to uid.
If the attribute exists and is not of type Uid then a non-zero return value is returned.

Project

Page 221

12d Model Programming Language Manual

A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1988


Name
Integer Set_project_attribute(Text att_name,Attributes att)
Description
For the Project,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1989


Name
Integer Set_project_attribute(Integer att_no,Uid uid)
Description
For Project, if the attribute number att_no exists and it is of type Uid, then its value is set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1990


Name
Integer Set_project_attribute(Integer att_no,Attributes att)
Description
For Project, if the attribute number att_no exists and it is of type Attributes, then its value is set to
att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.

Page 222

Project

Chapter 5 12dPL Library Calls

ID = 1991


Name
Integer Project_attribute_exists(Text att_name)
Description
Checks to see if a Project attribute with the name att_name exists in current project.
A non-zero function return value indicates that the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1378


Name
Integer Project_attribute_exists(Text name,Integer &no)
Description
Checks to see if a project attribute with the name name exists in current project.
If the attribute exists, its position is returned in Integer no.
This position can be used in other Attribute functions described below.
A non-zero function return value indicates the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1379


Name
Integer Project_attribute_delete(Text att_name)
Description
Delete the project attribute with the name att_name in current project.
A function return value of zero indicates the attribute was deleted.
ID = 1380


Name
Integer Project_attribute_delete(Integer att_no)
Description
Delete the project attribute with the Integer att_no in current project.
A function return value of zero indicates the attribute was deleted.
ID = 1381


Name
Integer Project_attribute_delete_all(Element elt)
Description
Delete all the attributes for Project.
Element elt has nothing to do with this call and is ignored.
A function return value of zero indicates all the attributes were deleted.
ID = 1382


Name
Integer Project_attribute_dump()
Description
Write out information about the Project attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 1383


ID = 1384


Name
Integer Get_project_number_of_attributes(Integer &no_atts)
Description
Get number of attributes Integer no_atts in current project.
A function return value of zero indicates the number is successfully returned.
ID = 1385


Name
Integer Get_project_attribute_name(Integer att_no,Text &name)
Description
Get project attribute name Text name with attribute number Integer att_no in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1392


Name
Integer Get_project_attribute_length(Integer att_no,Integer &att_len)
Description

Page 224

Project

Chapter 5 12dPL Library Calls

Get the length of the project attribute at position att_no.
The project attribute length is returned in att_len.
A function return value of zero indicates the attribute type was successfully returned.
Note
The length is useful for user attributes of type Text and Binary (Blobs).
ID = 1396


Name
Integer Get_project_attribute_length(Text att_name,Integer &att_len)
Description
Get the length of the project attribute with the name att_name for the current project.
The project attribute length is returned in att_len.
A function return value of zero indicates the attribute type was successfully returned.
Note
The length is useful for user attributes of type Text and Binary (Blobs).
ID = 1395


Name
Integer Get_project_attribute_type(Text att_name,Integer &att_type)
Description
Get the type of the project attribute with the name att_name from the current project.
The project attribute type is returned in Integer att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 1393


Name
Integer Get_project_attribute_type(Integer att_no,Integer &att_type)
Description
Get the type of the project attribute at position att_no for the current project.
The project attribute type is returned in att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 1394


Name
Integer Get_project_attribute(Text att_name,Real &att)
Description

Project

Page 225

12d Model Programming Language Manual

Get project attribute Real att with attribute name Text att_name in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1388


Name
Integer Set_project_attribute(Text att_name,Real att)
Description
Set the project attribute with name att_name to the Real att.
The project attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.
ID = 1399


Name
Integer Get_project_attribute(Text att_name,Integer &att)
Description
Get project attribute Integer att with attribute name Text att_name in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1387


Name
Integer Set_project_attribute(Text att_name,Integer att)
Description
Set the project attribute with name att_name to the Integer att.
The project attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 1398


Name
Integer Get_project_attribute(Integer att_no,Text &att)
Description
Get project attribute Text att with attribute number Integer att_no in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1389


Name

Page 226

Project

Chapter 5 12dPL Library Calls

Integer Set_project_attribute(Integer att_no,Text att)
Description
Set the project attribute at position att_no to the Text att.
The project attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 1400


Name
Integer Get_project_attribute(Integer att_no,Integer &att)
Description
Get project attribute Integer att with attribute number Integer att_no in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1390


Name
Integer Set_project_attribute(Integer att_no,Integer att)
Description
Set the project attribute at position att_no to the Integer att.
The project attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 1401


Name
Integer Get_project_attribute(Integer att_no,Real &att)
Description
Get project attribute Real att with attribute number Integer att_no in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1391


Name
Integer Set_project_attribute(Integer att_no,Real att)
Description
Set the project attribute at position att_no to the Real att.
The project attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.

Project

Page 227

12d Model Programming Language Manual

ID = 1402


Name
Integer Get_project_attribute(Text att_name,Text &att)
Description
Get project attribute Text att with attribute name Text att_name in current project.
A function return value of zero indicates the name is successfully returned.
ID = 1386


Name
Integer Set_project_attribute(Text att_name,Text att)
Description
Set the project attribute with name att_name to the Text att.
The project attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 1397


Name
Integer Project_attribute_delete_all()
Description
Delete all the project attributes.
A function return value of zero indicates all the attribute were successfully deleted.
ID = 2679


Name
Model Create_model(Text model_name)
Description
Create a Model with the name model_name.
If the model is created, its handle is returned as the function return value.
If no model can be created, a null Model is returned as the function return value.
ID = 59


Name
Model Get_model_create(Text model_name)
Description
Get a handle to the model with name model_name.
If the model exists, its handle is returned as the function return value.
If no such model exists, then a new model with the name model_name is created, and its handle
returned as the function return value.
If no model exists and the creation fails, a null Model is returned as the function return value.
ID = 60


Name
Integer Get_number_of_items(Model model,Integer &num)
Description
Get the number of items (Elements) in the Model model.
The number of Elements is returned as the Integer num.
A function return value of zero indicates success.
ID = 452


Name
Integer Get_elements(Model model,Dynamic_Element &de,Integer &total_no)
Description
Get all the Elements from the Model model and add them to the Dynamic_Element array, de.
The total number of Elements in de is returned by total_no.
Note: whilst this Dynamic_Element exists, all of the elements with handles in the
Dynamic_Element are locked.
A function return value of zero indicates success.
ID = 132


Name
Integer Model_exists(Text model_name)
Description
Checks to see if a model with the name model_name exists.
A non-zero function return value indicates a model does exist.
A zero function return value indicates that no model of name model_name exists.
Warning - this is the opposite of most 12dPL function return values
ID = 63


Name
Integer Model_exists(Model model)
Description
Checks if the Model model is valid (that is, not null).
A non-zero function return value indicates model is not null.
A zero function return value indicates that model is null.
Warning - this is the opposite of most 12dPL function return values

Page 230

Models

Chapter 5 12dPL Library Calls

ID = 62


Name
Integer Get_project_models(Dynamic_Text &model_names)
Description
Get the names of all the models in the project.
The dynamic array of model names is returned in the Dynamic_Text model_names.
A function return value of zero indicates the model names are returned successfully.
ID = 231


Name
Model Get_model(Text model_name)
Description
Get the Model model with the name model_name.
If the model exists, its handle is returned as the function return value.
If no model of name model_name exists, a null Model is returned as the function return value.
ID = 58


Name
Integer Get_name(Model model,Text &model_name)
Description
Get the name of the Model model.
The model name is returned in the Text model_name.
A function return value of zero indicates the model name was successfully returned.
If model is null, the function return value is non-zero.
ID = 57


Name
Integer Get_time_created(Model model,Integer &time)
Description
Get the time that the Model model was created and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2111


Name
Integer Get_time_updated(Model model,Integer &time)
Description
Get the time that the Model model was last updated and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2112


Name
Integer Set_time_updated(Model model,Integer time)
Description
Set the update time for the Model model to time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully set.
ID = 2113


Name
Integer Get_id(Model model,Uid &id)
Description
Get the Uid of the Model model and return it in id.
A function return value of zero indicates the Uid was successfully returned.
ID = 1914


Name
Integer Get_id(Model model,Integer &id)
Description
Get the id of the Model model and return it in id.
A function return value of zero indicates the id was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_id(Model model,Uid &id) instead.
ID = 1182


Name
Integer Get_model(Uid model_id,Model &model)
Description
Page 232

Models

Chapter 5 12dPL Library Calls

Get the model in the Project that has the Uid model_id and return it in model.
If the model does not exist then a non-zero function return value is returned.
A function return value of zero indicates the model was successfully returned.
ID = 1912


Name
Integer Get_model(Integer model_id,Model &model)
Description
Get the model in the Project that has the id model_id and return it in model.
If the model does not exist then a non-zero function return value is returned.
A function return value of zero indicates the model was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_model(Uid model_id,Model &model) instead.
ID = 1180


Name
Integer Get_element(Uid model_id,Uid element_id,Element &elt)
Description
Get the Element with Uid element_id from the model that has the Uid model_id and return it in
elt.
If the Element does not exist in the model with Uid model_id then a non-zero function return
value is returned.
A function return value of zero indicates the Element was successfully returned.
ID = 1913


Name
Integer Get_element(Integer model_id,Integer element_id,Element &elt)
Description
Get the Element with id element_id from the model that has the id model_id and return it in elt.
If the Element does not exist in the model with model_id then a non-zero function return value is
returned.
A function return value of zero indicates the Element was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_element(Uid model_id,Uid element_id,Element &elt)
instead.
ID = 1181


Name
Integer Get_extent_x(Model model,Real &xmin,Real &xmax)
Description
Gets the x-extents of the Model model.
The minimum x extent is returned by the Real xmin.
The maximum x extent is returned by the Real xmax.
A function return value of zero indicates the x-extents were returned successfully.
ID = 163


Name
Integer Get_extent_y(Model model,Real &ymin,Real &ymax)
Description
Gets the y-extents of the Model model.
The minimum y extent is returned by the Real ymin.
The maximum y extent is returned by the Real ymax.
A function return value of zero indicates the y-extents were returned successfully.
ID = 164


Name
Integer Get_extent_z(Model model,Real &zmin,Real &zmax)
Description
Gets the z-extents of the Model model.
The minimum z extent is returned by the Real zmin.
The maximum z extent is returned by the Real zmax.
A function return value of zero indicates the z-extents were returned successfully.
ID = 165


Name
Integer Calc_extent(Model model)
Description
Calculate the extents of the Model model. This is necessary when Elements have been deleted
from a model.
A function return value of zero indicates the extent calculation was successful.
ID = 166


Name

Page 234

Models

Chapter 5 12dPL Library Calls

Integer Model_duplicate(Model model,Text dup_name)
Description
Create a new Model with the name dup_name and add duplicates of all the elements in model to
it.
It is an error if a Model called dup_name already exists.
A function return value of zero indicates the duplication was successful.
ID = 428


Name
Integer Model_rename(Text original_name,Text new_name)
Description
Change the name of the Model original_name to the new name new_name.
A function return value of zero indicates the rename was successful.
ID = 423


Name
Integer Model_draw(Model model)
Description
Draw each element in the Model model for each view that the model is on. The elements are
drawn in their own colour.
A function return value of zero indicates the draw was successful.
ID = 415


Name
Integer Model_draw(Model model,Integer col_num)
Description
Draw, in the colour number col_num, each element in the Model model for each view that the
model is on.
A function return value of zero indicates the draw was successful.
ID = 416


Name
Integer Null(Model model)
Description
Set the Model handle model to null. This does not affect the 12d Model model that the handle
pointed to.
A function return value of zero indicates model was successfully nulled.

Models

Page 235

12d Model Programming Language Manual

ID = 134


Name
Integer Model_delete(Model model)
Description
Delete from the project and the disk, the 12d Model model pointed to by the Model model. The
handle model is then set to null.
A function return value of zero indicates the model was successfully deleted.
ID = 61


Name
Integer Get_model_attributes(Model model,Attributes &att)
Description
For the Model model, return the Attributes for the Model as att.
If the Model has no Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 2042


Name
Integer Set_model_attributes(Model model,Attributes att)
Description
For the Model model, set the Attributes for the Model to att.
A function return value of zero indicates the attribute is successfully set.
ID = 2043


Name
Integer Get_model_attribute(Model model,Text att_name,Uid &uid)
Description
From the Model model, get the attribute called att_name and return the attribute value in uid.
The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2044


Name
Integer Get_model_attribute(Model model,Text att_name,Attributes &att)
Description
From the Model model, get the attribute called att_name from model and return the attribute
value in att. The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - this function is more efficient than getting the Attributes from the Model and then getting
the data from that Attributes.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2045


Name
Integer Get_model_attribute(Model model,Integer att_no,Uid &uid)
Description
From the Model model, get the attribute with number att_no and return the attribute value in uid.
The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2046


Name
Integer Get_model_attribute(Model model,Integer att_no,Attributes &att)
Description
From the Model model, get the attribute with number att_no and return the Attribute value in att.
The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2047


Name
Integer Set_model_attribute(Model model,Text att_name,Uid att)
Description
For the Model model,
if the attribute called att_name does not exist then create it as type Uid and give it the value

Models

Page 237

12d Model Programming Language Manual

att.
if the attribute called att_name does exist and it is type Uid, then set its value to att.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2048


Name
Integer Set_model_attribute(Model model,Text att_name,Attributes att)
Description
For the Model model,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2049


Name
Integer Set_model_attribute(Model model,Integer att_no,Uid uid)
Description
For the Model model, if the attribute number att_no exists and it is of type Uid, then its value is
set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2050


Name
Integer Set_model_attribute(Model model,Integer att_no,Attributes att)
Description
For the Model model, if the attribute number att_no exists and it is of type Attributes, then its
value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
Page 238

Models

Chapter 5 12dPL Library Calls

is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2051


Name
Integer Model_attribute_exists(Model model,Text att_name)
Description
Checks to see if a model attribute with the name att_name exists in the Model model.
A non-zero function return value indicates that the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1403


Name
Integer Model_attribute_exists(Model model,Text name,Integer &no)
Description
Checks to see if a model attribute with the name name exists in the Model model.
If the attribute exists, its position is returned in Integer no.
This position can be used in other Attribute functions described below.
A non-zero function return value indicates the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1404


Name
Integer Model_attribute_delete(Model model,Text att_name)
Description
Delete the model attribute with the name att_name for Model model.
A function return value of zero indicates the attribute was deleted.
ID = 1405


Name
Integer Model_attribute_delete(Model model,Integer att_no)
Description

Models

Page 239

12d Model Programming Language Manual

Delete the model attribute at the position att_no for Model model.
A function return value of zero indicates the attribute was deleted.
ID = 1406


Name
Integer Model_attribute_delete_all(Model model,Element elt)
Description
Delete all the model attributes for Model model.
A function return value of zero indicates all the attributes were deleted.
ID = 1407


Name
Integer Model_attribute_dump(Model model)
Description
Write out information about the Model attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 1408


Name
Integer Model_attribute_debug(Model model)
Description
Write out even more information about the Model attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 1409


Name
Integer Get_model_attribute(Model model,Text att_name,Text &att)
Description
Get the data for the model attribute with the name att_name for Model model.
The model attribute must be of type Text and is returned in Text att.
A function return value of zero indicates the attribute was successfully returned.
ID = 1411


Name

Page 240

Models

Chapter 5 12dPL Library Calls

Integer Get_model_attribute(Model model,Text att_name,Integer &att)
Description
Get the data for the model attribute with the name att_name for Model model.
The model attribute must be of type Integer and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 1412


Name
Integer Get_model_attribute(Model model,Text att_name,Real &att)
Description
Get the data for the model attribute with the name att_name for Model model.
The model attribute must be of type Real and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 1413


Name
Integer Get_model_attribute(Model model,Integer att_no,Text &att)
Description
Get the data for the model attribute at the position att_no for Model model.
The model attribute must be of type Text and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 1414


Name
Integer Get_model_attribute(Model model,Integer att_no,Integer &att)
Description
Get the data for the model attribute at the position att_no for Model model.
The model attribute must be of type Integer and is returned in Integer att.
A function return value of zero indicates the attribute was successfully returned.
ID = 1415


Name
Integer Get_model_attribute(Model model,Integer att_no,Real &att)
Description
Get the data for the model attribute at the position att_no for Model model.
The model attribute must be of type Real and is returned in Real att.
A function return value of zero indicates the attribute was successfully returned.

Models

Page 241

12d Model Programming Language Manual

ID = 1416


Name
Integer Set_model_attribute(Model model,Integer att_no,Real att)
Description
For the Model model, set the model attribute at position att_no to the Real att.
The model attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.
ID = 1427


Name
Integer Set_model_attribute(Model model,Integer att_no,Integer att)
Description
For the Model model, set the model attribute at position att_no to the Integer att.
The model attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 1426


Name
Integer Set_model_attribute(Model model,Integer att_no,Text att)
Description
For the Model model, set the model attribute at position att_no to the Text att.
The model attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 1425


Name
Integer Set_model_attribute(Model model,Text att_name,Real att)
Description
For the Model model, set the model attribute with name att_name to the Real att.
The model attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.
ID = 1424


Name

Page 242

Models

Chapter 5 12dPL Library Calls

Integer Set_model_attribute(Model model,Text att_name,Integer att)
Description
For the Model model, set the model attribute with name att_name to the Integer att.
The model attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 1423


Name
Integer Set_model_attribute(Model model,Text att_name,Text att)
Description
For the Model model, set the model attribute with name att_name to the Text att.
The model attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 1422


Name
Integer Get_model_attribute_name(Model model,Integer att_no,Text &name)
Description
Get the name for the model attribute at the position att_no for Model model.
The model attribute name found is returned in Text name.
A function return value of zero indicates the attribute name was successfully returned.
ID = 1417


Name
Integer Get_model_attribute_type(Model model,Text att_name,Integer &att_type)
Description
Get the type of the model attribute with the name att_name from the Model model.
The model attribute type is returned in Integer att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 1418


Name
Integer Get_model_attribute_type(Model model,Integer att_name,Integer &att_type)
Description
Get the type of the model attribute at position att_no for the Model model.

Models

Page 243

12d Model Programming Language Manual

The model attribute type is returned in att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 1419


Name
Integer Get_model_attribute_length(Model model,Text att_name,Integer &att_len)
Description
Get the length of the model attribute with the name att_name for Model model.
The model attribute length is returned in att_len.
A function return value of zero indicates the attribute type was successfully returned.
Note - the length is useful for user attributes of type Text and Binary (Blobs).
ID = 1420


Name
Integer Get_model_attribute_length(Model model,Integer att_no,Integer &att_len)
Description
Get the length of the model attribute at position att_no for Model model.
The model attribute length is returned in att_len.
A function return value of zero indicates the attribute type was successfully returned.
Note - the length is useful for user attributes of type Text and Binary (Blobs).
ID = 1421


Name
Integer Get_model_number_of_attributes(Model model,Integer &no_atts)
Description
Get the total number of model attributes for Model model.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the attribute was successfully returned.
ID = 1410


Name
Integer View_exists(Text view_name)
Description
Checks to see if a view with the name view_name exists.
A non-zero function return value indicates a view does exist.
A zero function return value indicates value that no view of that name exists.
Warning - this is the opposite of most 12dPL function return values
ID = 373


Name
Integer View_exists(View view)
Description
Checks if the View view is valid (that is, not null).
A non-zero function return value indicates view is not null.
A zero function return value indicates that view is null.
Warning - this is the opposite of most 12dPL function return values
ID = 374


Name
Integer Get_name(View view,Text &view_name)
Description
Get the name of the View view.
The view name is returned in the Text view_name.
If view is null, the function return value is non-zero.
A function return value of zero indicates the view name was returned successfully.
ID = 435


Name
Integer Null(View view)
Description
Set the View handle view to null. This does not affect the 12d Model view that the handle pointed

Views

Page 245

12d Model Programming Language Manual

to.
A function return value of zero indicates view was successfully nulled.
ID = 375


Name
Integer Get_project_views(Dynamic_Text &view_names)
Description
Get the names of all the views in the project.
The dynamic array of view names is returned in the Dynamic_Text view_names.
A function return value of zero indicates the view names were returned successfully.
ID = 234


Name
View Get_view(Text view_name)
Description
Get the View with the name view_name.
If the view exists, its handle is returned as the function return value.
If no view of name view_name, a null View is returned as the function return value.
ID = 347


Name
Integer Get_type(View view,Text &type)
Description
Get the type of the View view as the Text type.
The type is
Plan
if the view is a plan view
Section
section view
Perspective
perspective view or Opengl perspective view
Hidden_perspective hidden perspective view.
A function return value of zero indicates that the view type was returned successfully.
ID = 358


Name
Integer Get_type(View view,Integer &view_num)
Description
For the view view, view_num returns the type of the view.
view_num = 2010 if view is a PLAN VIEW
view_num = 2011 if view is a SECTION VIEW
Page 246

Views

Chapter 5 12dPL Library Calls

view_num = 2012 if view is a PERSP VIEW and OPEN GL 2012
view_num = 2030 if view is a HIDDEN PERSPECTIVE
A function return value of zero indicates the successfully.
ID = 357


Name
Integer Model_get_views(Model model,Dynamic_Text &view_names)
Description
Get the names of all the views that the Model model is on.
The view names are returned in the Dynamic_Text view_names.
A function return value of zero indicates that the view names were returned successfully.
ID = 354


Name
Integer View_get_models(View view,Dynamic_Text &model_names)
Description
Get the names of all the Models on the View view.
The model names are returned in the Dynamic_Text model_names.
A function return value of zero indicates that the model names were returned successfully.
ID = 350


Name
Integer View_add_model(View view,Model model)
Description
Add the Model model to the View view.
A function return value of zero indicates that model was successfully added to the view.
ID = 348


Name
Integer View_remove_model(View view,Model model)
Description
Remove the Model model from the View view.
A function return value of zero indicates that model was successfully removed from the view.
ID = 349


Name
Integer View_redraw(View view)
Description
Redraw the 12d Model View view.
A function return value of zero indicates that the view was successfully redrawn.
ID = 351


Name
Integer View_fit(View view)
Description
Perform a fit on the 12d Model View view.
A function return value of zero indicates that the view was successfully fitted.
ID = 353


Name
Integer Section_view_profile(View view,Element string,Integer fit_view)
Description
Profile the Element string on the View view.
If fit_view = 1 then a fit is also done on the view.
If view is not a Section view, then a non-zero function return value is returned.
A function return value of zero indicates the profile was successful.
ID = 2110


Name
Integer View_get_size(View view,Integer &width,Integer &height)
Description
Find the size in screen units (pixels) of the View view.
The width and height of the view are width and height pixels respectively.
A function return value of zero indicates that the view size was successfully returned.
ID = 352


Name
Integer Calc_extent(View view)
Description
Calculate the extents of the View view. This is necessary when Elements have been deleted
from a model on a view.

Page 248

Views

Chapter 5 12dPL Library Calls

A function return value of zero indicates the extent calculation was successful.
ID = 477


Name
Integer Element_exists(Element elt)
Description
Checks the validity of an Element elt. That is, it checks that elt has not been set to null.
A non-zero function return value indicates elt is not null.
A zero function return value indicates that elt is null.
ID = 56


Name
Integer Get_points(Element elt,Integer &num_verts)
Description
Get the number of vertices in the Element elt.
The number of vertices is returned as the Integer num_verts.
For Elements of type Alignment, Arc and Circle, Get_points gives the number of vertices when
the Element is approximated using the 12d Model cord-to-arc tolerance.
A function return value of zero indicates the number of vertices was successfully returned.
ID = 43


Name
Integer Get_data(Element elt,Integer i,Real &x,Real &y,Real &z)
Description
Get the (x,y,z) data for the ith vertex of the string Element elt.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
A function return value of zero indicates the data was successfully returned.
NOTE: The functions to set the data arrays are given in the sections of each string type. For

Page 254

Elements

Chapter 5 12dPL Library Calls

example Super String Create Functions .
ID = 653


Name
Integer Set_name(Element elt,Text elt_name)
Description
Set the name of the Element elt to the Text elt_name.
A function return value of zero indicates the Element name was successfully set.
Note
This will not set the name of an Element of type Tin.
ID = 45


Name
Integer Get_name(Element elt,Text &elt_name)
Description
Get the name of the Element elt.
The name is returned by the Text elt_name.
A function return value of zero indicates the name was returned successfully.
If elt is null, the function return value is non-zero.
ID = 44


Name
Integer Set_colour(Element elt,Integer colour)
Description
Set the colour of the Element elt. The colour is given by the Integer colour.
A function return value of zero indicates that the colour was successfully set.
Notes
(a) For an Interface string, the colour is only used when the string is converted to a different
string type.
(b) There are supplied functions to convert the colour number to a colour name and vice-versa.
ID = 47


Name
Integer Get_colour(Element elt,Integer &colour)
Description
Get the colour of the Element elt.

Elements

Page 255

12d Model Programming Language Manual

The colour (as a number) is returned as the Integer colour.
A function return value of zero indicates the Element colour was successfully returned.
Note
There are 12dPL functions to convert the colour number to a colour name and vice-versa.
ID = 46


Name
Integer Set_model(Element elt,Model model)
Description
Sets the 12d Model model of the Element elt to be Model model.
If elt is already in a model, then it is moved to the Model model.
If elt is not in a model, then elt is added to the Model model.
A function return value of zero indicates the model was successfully set.
ID = 55


Name
Integer Set_model(Dynamic_Element de,Model model)
Description
Sets the Model of all the Elements in the Dynamic_Element de to model.
For each Element elt in the Dynamic_Element, de if elt is already in a model, then it is moved to
the Model model. If elt is not in a model, elt is added to the Model model.
A function return value of zero indicates the models were successfully set.
ID = 141


Name
Integer Get_model(Element elt,Model &model)
Description
Get the model handle of the model containing the Element elt. The model is returned by the
Model model.
A function return value of zero indicates the handle was returned successfully.
ID = 54


Name
Integer Set_breakline(Element elt,Integer break_type)
Description
Sets the breakline type for triangulation purposes for the Element elt.

Page 256

Elements

Chapter 5 12dPL Library Calls

The breakline type is given as the Integer break_type.
The break_type is
0
1

if elt is to be used as a point string
if elt is to be used as a breakline string

A function return value of zero indicates the breakline type was successfully set.
LJG? what about arcs, circles
ID = 53


Name
Integer Get_breakline(Element elt,Integer &break_type)
Description
Gets the breakline type of the Element elt. The breakline type is used for triangulation purposes
and is returned as the Integer break_type.
The break_type is
0

if elt is used as a point string

1

breakline string

A function return value of zero indicates the breakline type was returned successfully.
ID = 52


Name
Integer Get_type(Element elt,Text &elt_type)
Description
Get the Element type of the Element elt.
The Element type is returned by the Text elt_type.
For the types of elements, go to Types of Elements .
A function return value of zero indicates the type was returned successfully.
ID = 64


Name
Integer Set_style(Element elt,Text elt_style)
Description
Set the line style of the Element elt.
The name of the line style is given by the Text elt_style.
A function return value of zero indicates the style was successfully set.
ID = 49


Name
Integer Get_style(Element elt,Text &elt_style)
Description
Get the line style of the Element elt.
The name of the line style is returned by the Text elt_style.
The style is not used for Elements of type Tin or Text.
A function return value of zero indicates the style was returned successfully.
ID = 48


Name
Integer Set_chainage(Element elt,Real start_chain)
Description
Set the start chainage of the Element elt.
The start chainage is given by the Real start_chain.
A function return value of zero indicates the start chainage was successfully set.
ID = 51


Name
Integer Get_chainage(Element elt,Real &start_chain)
Description
Get the start chainage of the Element elt.
The start chainage is returned by the Real start_chain.
A function return value of zero indicates the chainage was returned successfully.
ID = 50


Name
Integer Get_end_chainage(Element elt,Real &chainage)
Description
Get the end chainage of the Element elt.
The end chainage is returned by the Real chainage.
A function return value of zero indicates the chainage was returned successfully.
ID = 654


Name
Integer Get_id(Element elt,Uid &uid)

Page 258

Elements

Chapter 5 12dPL Library Calls

Description
Get the unique Uid of the Element elt and return it in uid.
If elt is null or an error occurs, uid is set to zero.
A function return value of zero indicates the Element Uid was successfully returned.
ID = 1908


Name
Integer Get_id(Element elt,Integer &id)
Description
Get the unique id of the Element elt and return it in id.
If elt is null or an error occurs, id is set to zero.
A function return value of zero indicates the Element id was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_id(Element elt,Uid &id) instead.
ID = 378


Name
Integer Get_time_created(Element elt,Integer &time)
Description
Get the time of creation of the Element elt.
The time value is returned in Integer time (seconds since January 1 1970).
A function return value of zero indicates the data was returned successfully.
ID = 673


Name
Integer Get_time_updated(Element elt,Integer &time)
Description
Get the time of the last update of the Element elt.
The time value is returned in Integer time (seconds since January 1 1970).
A function return value of zero indicates the data was returned successfully.
ID = 674


Name
Integer Set_time_updated(Element elt,Integer time)
Description
Set the time of the last update of the Element elt.

Elements

Page 259

12d Model Programming Language Manual

The time value is defined in Integer time.
A function return value of zero indicates the time was updated successfully.
ID = 675


Name
Integer Null(Element elt)
Description
Set the Element elt to null.
A function return value of zero indicates the Element elt was successfully set to null.
Note
The database item pointed to by the Element elt is not affected in any way.
ID = 133


Name
Integer Get_extent_x(Element elt,Real &xmin,Real &xmax)
Description
Gets the x-extents of the Element elt.
The minimum x extent is returned by the Real xmin.
The maximum x extent is returned by the Real xmax.
A function return value of zero indicates the x extents were successfully returned.
ID = 159


Name
Integer Get_extent_y(Element elt,Real &ymin,Real &ymax)
Description
Gets the y-extents of the Element elt.
The minimum y extent is returned by the Real ymin.
The maximum y extent is returned by the Real ymax.
A function return value of zero indicates the y extents were successfully returned.
ID = 160


Name
Integer Get_extent_z(Element elt,Real &zmin,Real &zmax)
Description
Gets the z-extents of the Element elt.

Page 260

Elements

Chapter 5 12dPL Library Calls

The minimum z extent is returned by the Real zmin.
The maximum z extent is returned by the Real zmax.
A function return value of zero indicates the z extents were successfully returned.
ID = 161


Name
Integer Calc_extent(Element elt)
Description
Calculate the extents of the Element elt.
This is necessary after an Element's body data has been modified.
A function return value of zero indicates the extent calculation was successful.
ID = 162


Name
Integer Element_duplicate(Element elt,Element &dup_elt)
Description
Create a duplicate of the Element elt and return it as the Element dup_elt.
A function return value of zero indicates the duplication was successful.
ID = 430


Name
Integer Element_delete(Element elt)
Description
Delete from the 12d Model database the item that the Element elt points to. The Element elt is
then set to null.
A function return value of zero indicates the data base item was deleted successfully.
ID = 41


Name
Integer Get_type(Element elt,Integer &elt_type)
Description
NOT IMPLEMENTED.
Get the Element type of the Element elt.
The Element type is returned as the Integer elt_type.
A function return value of zero indicates the type was returned successfully.
ID = 42


Name
Integer Get_attributes(Element elt,Attributes &att)
Description
For the Element elt, return the Attributes for the Element as att.
If the Element has no attribute then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 1972


Name
Integer Set_attributes(Element elt,Attributes att)
Description
For the Element elt, set the Attributes for the Element to att.
A function return value of zero indicates the attribute is successfully set.
ID = 1973


Name
Integer Get_attribute(Element elt,Text att_name,Uid &uid)
Description
From the Element elt, get the attribute called att_name from elt and return the attribute value in
uid. The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - this function is more efficient than getting the Attributes from the Element and then getting
the data from that Attributes.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1974


Name
Integer Get_attribute(Element elt,Text att_name,Attributes &att)
Description
From the Element elt, get the attribute called att_name from elt and return the attribute value in
att. The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - this function is more efficient than getting the Attributes from the Element and then getting

Elements

Page 263

12d Model Programming Language Manual

the data from that Attributes.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1975


Name
Integer Get_attribute(Element elt,Integer att_no,Uid &uid)
Description
From the Element elt, get the attribute with number att_no and return the attribute value in uid.
The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1976


Name
Integer Get_attribute(Element elt,Integer att_no,Attributes &att)
Description
From the Element elt, get the attribute with number att_no and return the attribute value in att.
The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1977


Name
Integer Set_attribute(Element elt,Text att_name,Uid uid)
Description
For the Element elt,
if the attribute called att_name does not exist in the element then create it as type Uid and give
it the value uid.
if the attribute called att_name does exist and it is type Uid, then set its value to att.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1978


Name
Integer Set_attribute(Element elt,Text att_name,Attributes att)
Description
For the Element elt,
if the attribute called att_name does not exist in the element then create it as type Attributes
and give it the value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1979


Name
Integer Set_attribute(Element elt,Integer att_no,Uid uid)
Description
For the Element elt, if the attribute number att_no exists and it is of type Uid, then its value is set
to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1980


Name
Integer Set_attribute(Element elt,Integer att_no,Attributes att)
Description
For the Element elt, if the attribute number att_no exists and it is of type Attributes, then its value
is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1981


Name
Integer Attribute_exists(Element elt,Text att_name)
Elements

Page 265

12d Model Programming Language Manual

Description
Checks to see if a user attribute with the name att_name exists in the Element elt.
A non-zero function return value indicates that the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values.
ID = 555


Name
Integer Attribute_exists(Element elt,Text att_name,Integer &att_no)
Description
Checks to see if a user attribute with the name att_name exists in the Element elt.
If the attribute exists, its position is returned in Integer att_no.
This position can be used in other Attribute functions described below.
A non-zero function return value indicates the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 556


Name
Integer Attribute_delete(Element elt,Text att_name)
Description
Delete the user attribute with the name att_name for Element elt.
A function return value of zero indicates the attribute was deleted.
ID = 557


Name
Integer Attribute_delete(Element elt,Integer att_no)
Description
Delete the user attribute at the position att_no for Element elt.
A function return value of zero indicates the attribute was deleted.
ID = 558


Name
Integer Attribute_delete_all(Element elt)
Description

Page 266

Elements

Chapter 5 12dPL Library Calls

Delete all the user attributes for Element elt.
A function return value of zero indicates all the attributes were deleted.
ID = 559


Name
Integer Get_number_of_attributes(Element elt,Integer &no_atts)
Description
Get the total number of user attributes for Element elt.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the attribute was successfully returned.
ID = 560


Name
Integer Get_attribute(Element elt,Text att_name,Text &att)
Description
Get the data for the user attribute with the name att_name for Element elt.
The user attribute must be of type Text and is returned in Text att.
A function return value of zero indicates the attribute was successfully returned.
ID = 561


Name
Integer Get_attribute(Element elt,Text att_name,Integer &att)
Description
Get the data for the user attribute with the name att_name for Element elt.
The user attribute must be of type Integer and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 562


Name
Integer Get_attribute(Element elt,Text att_name,Real &att)
Description
Get the data for the user attribute with the name att_name for Element elt.
The user attribute must be of type Real and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 563


Name
Integer Get_attribute(Element elt,Integer att_no,Text &att)
Description
Get the data for the user attribute at the position att_no for Element elt.
The user attribute must be of type Text and is returned in att.
A function return value of zero indicates the attribute was successfully returned.
ID = 564


Name
Integer Get_attribute(Element elt,Integer att_no,Integer &att)
Description
Get the data for the user attribute at the position att_no for Element elt.
The user attribute must be of type Integer and is returned in Integer att.
A function return value of zero indicates the attribute was successfully returned.
ID = 565


Name
Integer Get_attribute(Element elt,Integer att_no,Real &att)
Description
Get the data for the user attribute at the position att_no for Element elt.
The user attribute must be of type Real and is returned in Real att.
A function return value of zero indicates the attribute was successfully returned.
ID = 566


Name
Integer Get_attribute_name(Element elt,Integer att_no,Text &name)
Description
Get the name for the user attribute at the position att_no for Element elt.
The user attribute name found is returned in Text name.
A function return value of zero indicates the attribute name was successfully returned.
ID = 567


Name

Page 268

Elements

Chapter 5 12dPL Library Calls

Integer Get_attribute_type(Element elt,Text att_name,Integer &att_type)
Description
Get the type of the user attribute with the name att_name from the Element elt.
The user attribute type is returned in Integer att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 568


Name
Integer Get_attribute_type(Element elt,Integer att_no,Integer &att_type)
Description
Get the type of the user attribute at position att_no for the Element elt.
The user attribute type is returned in att_type.
For the list of attribute types, go to Data Type Attribute Type .
A function return value of zero indicates the attribute type was successfully returned.
ID = 569


Name
Integer Get_attribute_length(Element elt,Text att_name,Integer &att_len)
Description
Get the length of the user attribute with the name att_name for Element elt.
The user attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 570


Name
Integer Get_attribute_length(Element elt,Integer att_no,Integer &att_len)
Description
Get the length of the user attribute at position att_no for Element elt.
The user attribute length is returned in att_len.
A function return value of zero indicates the attribute type was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 571


Name
Integer Set_attribute(Element elt,Text att_name,Text att)
Description
For the Element elt, set the user attribute with name att_name to the Text att.
The user attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 572


Name
Integer Set_attribute(Element elt,Text att_name,Integer att)
Description
For the Element elt, set the user attribute with name att_name to the Integer att.
The user attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 573


Name
Integer Set_attribute(Element elt,Text att_name,Real att)
Description
For the Element elt, set the user attribute with name att_name to the Real att.
The user attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.
ID = 574


Name
Integer Set_attribute(Element elt,Integer att_no,Text att)
Description
For the Element elt, set the user attribute at position att_no to the Text att.
The user attribute must be of type Text
A function return value of zero indicates the attribute was successfully set.
ID = 575


Name
Integer Set_attribute(Element elt,Integer att_no,Integer att)
Description

Page 270

Elements

Chapter 5 12dPL Library Calls

For the Element elt, set the user attribute at position att_no to the Integer att.
The user attribute must be of type Integer
A function return value of zero indicates the attribute was successfully set.
ID = 576


Name
Integer Set_attribute(Element elt,Integer att_no,Real att)
Description
For the Element elt, set the user attribute at position att_no to the Real att.
The user attribute must be of type Real
A function return value of zero indicates the attribute was successfully set.
ID = 577


Name
Integer Attribute_dump(Element elt)
Description
Write out information about the Element attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 578


Name
Integer Attribute_debug(Element elt)
Description
Write out even more information about the Element attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 589


Name
Integer Triangulate(Dynamic_Element de,Text tin_name,Integer tin_colour,Integer preserve,Integer
bubbles,Tin &tin)
Description
The elements from the Dynamic_Element de are triangulated and a tin named tin_name created
with colour tin_colour.
A non zero value for preserve allows break lines to be preserved.
A non zero value for bubbles removes bubbles from the triangulation.
A created tin is returned by Tin tin.
A function return value of zero indicates the triangulation was successful.
ID = 142


Name
Integer Triangulate(Dynamic_Text list,Text tin_name,Integer colour,Integer preserve,Integer bubbles,Tin
&tin)
Description
Triangulate the data from a list of models Dynamic_Text list.
The tin name is given as Text tin_name, the tin colour is given as Integer colour, the preserve
string option is given by Integer preserve, and the remove bubbles option is given by Integer
bubbles, 1 is on, 0 is off.
A function return value of zero indicates the Tin tin was successfully returned.
ID = 1428


Name
Integer Tin_exists(Text tin_name)
Description
Checks to see if a tin with the name tin_name exists.
A non-zero function return value indicates a tin does exist.
A zero function return value indicates that no tin of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 355


Name
Integer Tin_exists(Tin tin)
Description
Checks if the Tin tin is valid (that is, not null).
A non-zero function return value indicates that tin is not null.
A zero function return value indicates that tin is null.
Warning this is the opposite of most 12dPL function return values
ID = 356


Name
Integer Get_project_tins(Dynamic_Text &tins)
Description
Get the names of all the tins in the project. The names are returned in the Dynamic_Text, tins.
A function return value of zero indicates the tin names were returned successfully.
ID = 232


Name
Tin Get_tin(Text tin_name)
Description
Get a Tin handle for the tin with name tin_name.
If the tin exists, the handle to it is returned as the function return value.
If the tin does not exist, a null Tin is returned as the function return value.
ID = 146


Name
Tin Get_tin(Element elt)
Description
If the Element elt is of type Tin and the tin exists, a Tin handle to the tin is returned as the
function return value.
If the tin does not exist or the Element is not of type Tin, a null Tin is returned as the function
return value.
ID = 370


Name
Integer Get_name(Tin tin,Text &tin_name)
Description
Get the name of the Tin tin.
The tin name is returned in the Text tin_name.
A function return value of zero indicates success.
If tin is null, the function return value is non-zero.

Tin_models(Tin tin, Dynamic_Text &models_used)
Name
Integer Tin_models(Tin tin, Dynamic_Text &models_used)
Description
Get the names of all the models that were used to create the Tin tin.
The model names are returned in the Dynamic_Text models_used.
A function return value of zero indicates that the view names were returned successfully.
ID = 431


Name
Integer Get_time_created(Tin tin,Integer &time)
Description
Get the time that the Tin tin was created and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2114


Name
Integer Get_time_updated(Tin tin,Integer &time)
Description

Tin Element

Page 275

12d Model Programming Language Manual

Get the time that the Tin tin was last updated and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2115


Name
Integer Set_time_updated(Tin tin,Integer time)
Description
Set the update time for the Tin tin to time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully set.
ID = 2116


Name
Integer Tin_number_of_points(Tin tin,Integer &notri)
Description
Get the total number of points used in creating the Tin tin.
This value includes duplicate points.
The number of triangles is returned in the Integer notri.
A function return value of zero indicates success.
If tin is null, the function return value is non-zero.
ID = 472


Name
Integer Tin_number_of_triangles(Tin tin,Integer &notri)
Description
Get the number of triangles in the Tin tin.
The number of triangles is returned in the Integer notri.
A function return value of zero indicates success.
If tin is null, the function return value is non-zero.
ID = 473


Name
Integer Tin_number_of_duplicate_points(Tin tin,Integer &notri)
Description

Page 276

Tin Element

Chapter 5 12dPL Library Calls

Get the number of duplicate points found whilst creating the Tin tin.
The number of duplicate points is returned in the Integer notri.
A function return value of zero indicates success.
If tin is null, the function return value is non-zero.
ID = 474


Name
Integer Tin_number_of_items(Tin tin,Integer &num_items)
Description
The number of strings in the tin tin is returned as num_items. Note that if the original string in
the data set to be triangulated had invisible segments (discontinuities) then that string is broken
into two or more strings in the tin.
A function return value of zero indicates that num_items was successfully returned.
ID = 475


Name
Integer Tin_colour(Tin tin,Real x,Real y,Integer &colour)
Description
Get the colour of the tin at the point (x,y)
A function return value of zero indicates success.
ID = 218


Name
Integer Tin_height(Tin tin,Real x,Real y,Real &height)
Description
Get the height of the tin at the point (x,y).
If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set.
A function return value of zero indicates the height was successfully returned.
ID = 215


Name
Integer Tin_slope(Tin tin,Real x,Real y,Real &slope)
Description
Get the slope of the tin at the point (x,y).
The units for slope is an angle in radians measured from the horizontal plane.
If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set.

Tin Element

Page 277

12d Model Programming Language Manual

A function return value of zero indicates the slope was successfully returned.
ID = 216


Name
Integer Tin_aspect(Tin tin,Real x,Real y,Real &aspect)
Description
Get the aspect of the tin at the point (x,y).
The units for aspect is a bearing in radians. That is, aspect is given as a clockwise angle
measured from the positive y-axis (North).
If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set.
A function return value of zero indicates the aspect was successfully returned.
ID = 217


Name
Integer Tin_duplicate(Tin tin,Text dup_name)
Description
Create a new Tin with name dup_name which is a duplicate the Tin tin.
IT is an error if a Tin called dup_name already exists.
A function return value of zero indicates the duplication was successful.
ID = 429


Name
Integer Tin_rename(Text original_name,Text new_name)
Description
Change the name of the Tin original_name to the new name new_name.
A function return value of zero indicates the rename was successful.
ID = 422


Name
Integer Tin_boundary(Tin tin,Integer colour_for_strings,Dynamic_Element &de)
Description
Get the boundary polygons for the Tin tin. The polygons are returned in the Dynamic_Element
de with colour colour_for_strings.
A function return value of zero indicates the data was successfully returned.
ID = 476


Name
Integer Tin_delete(Tin tin)
Description
Delete the Tin tin from the project and the disk.
A function return value of zero indicates the tin was deleted successfully.
ID = 219


Name
Integer Tin_get_point(Tin tin,Integer np,Real &x,Real &y,Real &z)
Description
Get the (x,y,z) coordinate of np’th point of the tin.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
A function return value of zero indicates the coordinate of the point was successfully returned.
ID = 831


Name
Integer Tin_get_triangle_points(Tin tin,Integer nt,Integer &p1,Integer &p2,Integer &p3)
Description
Get the three points of nt’th triangle of the tin.
The first point value is returned in Integer p1.
The second point value is returned in Integer p2.
The third point value is returned in Integer p3.
A function return value of zero indicates the points were successfully returned.
ID = 832


Name
Integer Tin_get_triangle_neighbours(Tin tin,Integer nt,Integer &n1,Integer &n2,Integer &n3)
Description
Get the three neighbour triangles of the nt’th triangle of the tin.
The first triangle neighbour is returned in Integer n1.
The second triangle neighbour is returned in Integer n2.
The third triangle neighbour is returned in Integer n3.
A function return value of zero indicates the triangles were successfully returned.

Tin Element

Page 279

12d Model Programming Language Manual

ID = 833


Name
Integer Tin_get_point_from_point(Tin tin,Real x,Real y,Integer &np)
Description
For the Tin tin and the coordinate (x,y), get the tin point number of the vertex of the triangle
closest to (x,y), and returned it in np.
A function return value of zero indicates the function was successful.
ID = 1436


Name
Integer Tin_get_triangles_about_point(Tin tin,Integer n,Integer &no_triangles)
Description
For the Tin tin and the nth point of tin, get the number of triangles surrounding the point and
return the number in no_triangles.
A function return value of zero indicates the function was successful.
ID = 1628


Name
Integer Tin_get_triangles_about_point(Tin tin,Integer n,Integer max_triangles,Integer
&no_triangles,Integer triangles[],Integer points[],Integer status[])
Description
For the Tin tin and the nth point of tin,
get the number of triangles surrounding the point and return it as no_triangles
return the list of triangle numbers in triangles[]
return the list of all the point numbers of vertices of the triangles that surround the point in
points[] (the number of these is the same as the number of triangle around the point)
LJG? return the status of each triangle in triangles[]. status is 0 for a null triangle, 1 for other
triangles.
Note: max_triangles is the size of the arrays triangles[], points[] and status[]. The number of
triangles surrounding the nth point of a tin is given by Tin_get_triangles_about_point.
A function return value of zero indicates the function was successful.
ID = 1629


Name
Integer Tin_get_triangle_inside(Tin tin,Integer triangle,Integer &Inside)
Description
Page 280

Tin Element

Chapter 5 12dPL Library Calls

Get the condition of the nth triangle of the tin.
If the value of the flag Inside is
0
1
2

not valid triangle.
not valid triangle.
the triangle is a non-null triangle.

So for a valid triangle, inside = 2.
A function return value of zero indicates the flag was successfully returned.
ID = 835


Name
Integer Tin_get_triangle(Tin tin,Integer triangle,Integer &p1,Integer &p2,Integer &p3,Integer
&n1,Integer &n2,Integer &n3,Real &x1,Real &y1,Real &z1,Real &x2,Real &y2,Real &z2,Real &x3,Real
&y3,Real &z3)
Description
Get the three points and their (x,y,z) data and three neighbour triangles of nth triangle of the tin.
The first point is returned in Integer p1, the (x, y, z) value is returned in x1,y1,z1.
The second point is returned in Integer p2, the (x, y, z) value is returned in x2,y2,z2.
The third point is returned in Integer p3, the x, y, z values are returned in x3,y3,z3.
The first triangle neighbour is returned in Integer n1.
The second triangle neighbour is returned in Integer n2.
The third triangle neighbour is returned in Integer n3.
A function return value of zero indicates the data was successfully returned.
ID = 836


Name
Integer Tin_get_triangle_from_point(Tin tin,Real x,Real y,Integer &triangle)
Description
Get the triangle of the Tin tin that contains the given coordinate (x,y).
The triangle number is returned in Integer triangle.
A function return value of zero indicates the triangle was successfully returned.
ID = 837


Name
Integer Draw_triangle(Tin tin,Integer tri,Integer c)
Description
Draw the triangle tri with colour c inside the Tin tin.

Tin Element

Page 281

12d Model Programming Language Manual

A function return value of zero indicates the triangle was successfully drawn.
ID = 1433


Name
Integer Draw_triangles_about_point(Tin tin,Integer pt,Integer c)
Description
Draw the triangles about a point pt with colour c inside Tin tin.
A function return value of zero indicates the triangles were successfully drawn.
ID = 1434


Name
Integer Triangles_clip(Real x1,Real y1,Real x2,Real y2,Real x3,Real y3,Real x4,Real y4,Real z4,Real
x5,Real y5,Real z5,Real x6,Real y6,Real z6,Integer &npts_out,Real xarray_out[],Real yarray_out[],Real
zarray_out[])
Description
The vertices of a 2d triangle is defined by the coordinates (x1,y1), (x2,y2) and (x3,y3).
The vertices of a 3d triangle is defined by the coordinates (x4,y4,z4), (x5,y5,z5) and (x6,y6,z6).
The Real arrays xarray_out[], yarray_out[], zarrary_out[] must exist and have dimensions at
least 9.
The function uses the 2d triangle to clip the 3d triangle and return the polygon of 3d clips points in
the arrays xarray_out[], yarray_out[], zarrar_out[]. The number of clips points is returned in
npts_out.
A function return value of zero indicates the function was successful.
ID = 1439


Name
Integer Tin_models(Tin tin,Dynamic_Text &models)
Description
WARNING - this does not appear to be correct. There is another Tin_models documented.
LJG ERROR
Get the model names models that contains Tin tin.
Type of models must be Dynamic_Text.
A function return value of zero indicates the models were successfully returned.

Retriangulate(Tin tin)

Page 282

Tin Element

Chapter 5 12dPL Library Calls

Name
Integer Retriangulate(Tin tin)
Description
Retriangulate the Tin tin.
A function return value of zero indicates the Tin tin was successfully returned.
ID = 1429


Name
Integer Breakline(Tin tin,Integer p1,Integer p2)
Description
Add breakline in Tin tin from point 1 p1 to point 2 p2.
A function return value of zero indicates the breakline was successfully added.
ID = 1430


Name
Integer Flip_triangles(Tin tin,Integer t1,Integer t2)
Description
From the triangles t1 and t2 in Tin tin.
A function return value of zero indicates the triangles were successfully flipped.
ID = 1431


Name
Integer Set_height(Tin tin,Integer pt,Real ht)
Description
Set the height Real ht for the point pt on the Tin tin.
A function return value of zero indicates the height was successfully set.
ID = 1432


Name
Integer Set_supertin(Tin_Box box,Integer mode)
Description
ID = 1311


Name
Integer Null(Tin tin)
Description
Set the Tin handle tin to null. This does not affect the 12d Model tin that the handle pointed to.
A function return value of zero indicates tin was successfully nulled.
ID = 376


Name
Integer Null_triangles(Tin tin,Element poly,Integer mode)
Description
Set any triangle whose centroid is inside or outside a given polygon to null.
tin is the tin to null and poly is the polygon which restricts the nulling.
If mode is
0

the inside of the polygon is nulled.

1

the outside is nulled.

A function return value of zero indicates there were no errors in the nulling calculations.
ID = 153


Name
Integer Reset_null_triangles(Tin tin,Element poly,Integer mode)
Description
Set any null triangle whose centroid is inside or outside a given polygon to be a valid triangle.
tin is the tin to reset and poly is the polygon which determines which triangles are to be reset
If mode is
0

the inside of the polygon is reset.

1

the outside is reset.

A function return value of zero indicates there were no errors in the reset calculations.
ID = 154


Name
Integer Reset_null_triangles(Tin tin)
Description
Set all the triangles of the tin tin to be valid triangles.
A function return value of zero indicates there were no errors in the reset calculations.
ID = 155


Name
Integer Null_by_angle_length(Tin tin,Real l1,Real a1,Real l2,Real a2)
Description
Refer to reference manual Page 444 “Null by Angle and Length”.
A function return value of zero indicates the triangle was nulled successfully.
ID = 1435


Name
Integer Get_colour(Tin tin,Integer &colour)
Description
Get the colour of the Tin tin.
The colour (as a number) is returned as the Integer colour.
A function return value of zero indicates the colour was returned successfully.
Note
There are 12dPL functions to convert the colour number to a colour name and viceversa.

Set_colour(Tin tin,Integer colour)
Name
Integer Set_colour(Tin tin,Integer colour)
Description
Set the colour of the Tin tin. The colour is given by the Integer colour.
A function return value of zero indicates that the colour was successfully set.

Tin_get_triangle_colour(Tin tin,Integer triangle,Integer &colour)
Name
Integer Tin_get_triangle_colour(Tin tin,Integer triangle,Integer &colour)
Description
Get the colour of the nth triangle of the tin.
The colour value is returned in Integer colour.
A function return value of zero indicates the colour were successfully returned.
ID = 834


Name
Integer Colour_triangles(Tin tin,Integer colour,Element poly,Integer mode)
Description
Colour all the triangles in the Tin tin whose centroids are inside or outside a given polygon to a
specified colour.
The triangulation is tin, the polygon poly and the colour number col_num.
The value of mode determines whether the triangles whose centroids are inside or outside the
polygon are coloured.
If mode equals 0, the triangles inside the polygon are coloured.
If mode equals 1, the triangles outside the polygon are coloured.
A function return value of zero indicates there were no errors in the colour calculations.
Page 286

Tin Element

Chapter 5 12dPL Library Calls

ID = 156


Name
Integer Reset_colour_triangles(Tin tin,Element poly,Integer mode)
Description
Set any triangle in the Tin tin whose centroid is inside or outside a given polygon back to the
base tin colour.
The value of mode determines whether the triangles whose centroids are inside or outside the
polygon are set back to the base colour.
If mode equals 0, the triangles inside the polygon are set
If mode equals 1, the triangles outside the polygon are set
A function return value of zero indicates there were no errors in the colour reset calculations.
ID = 157


Name
Integer Reset_colour_triangles(Tin tin)
Description
Set all the triangles in the Tin tin back to the base tin colour.
A function return value of zero indicates success.
ID = 158


Name
Element Create_super(Integer flag1,Integer num_pts)
Description
Create an Element of type Super with room for num_pts vertices and num_pts-1 segments if
the string is not closed or num_pts segments if the string is closed.
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. See Super
String Dimensions for the values that flag1 may take.
The actual values of the arrays are set by other function calls after the string is created.
The return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
Note - if dimensions greater than 32 are required, then calls with two flags must be used.
For example Integer Create_super(Integer flag1, Integer flag2,Integer num_pts).
ID = 691


Name
Element Create_super(Integer flag1,Integer flag2,Integer npts)
Description
create super string with arrays set aside following flag1 and flag 2 (extended dimensions).
Create an Element of type Super with room for num_pts vertices and num_pts-1 segments if
the string is not closed or num_pts segments if the string is closed.
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.
flag2 is used to specify which of the dimensions from 33 to 64 are used/not used.
See Super String Dimensions for the values that flag1 and flag2 may take.
The actual values of the arrays are set by other function calls after the string is created.
The return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
ID = 1499


Name
Element Create_super(Integer num_pts,Element seed)
Description
Create an Element of type Super with room for num_pts vertices and num_pts-1 segments if
the string is not closed or num_pts segments if the string is closed.
Set the colour, name, style, flags etc. of the new string to be the same as those from the Element
seed. Note that the seed string must also be a super string.
The actual values of the arrays are set after the string is created.
The return value is an Element handle to the created super string.

Super String Element

Page 297

12d Model Programming Language Manual

If the Super string could not be created, then the returned Element will be null.
ID = 692


Name
Element Create_super(Integer flag1,Segment seg)
Description
Create an Element of type Super with two vertices if seg is a Line, Arc or Spiral, or one vertex if
seg is a Point. The co-ordinates for the one or two vertices are taken from seg.
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. See Super
String Dimensions for the values that flag1 may take.
LJG? if seg is an Arc or a Spiral, then what dimensions are set and what values are they given?
The return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
Note - if dimensions greater than 32 are required, then calls with two flags must be used.
For example Integer Create_super(Integer flag1, Integer flag2,Segment seg).
ID = 693


Name
Element Create_super(Integer flag1,Integer flag2,Segment seg)
Description
Create an Element of type Super with two vertices if seg is a Line, Arc or Spiral, or one vertex if
seg is a Point. The co-ordinates for the one or two vertices are taken from seg.
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.
flag2 is used to specify which of the dimensions from 33 to 64 are used/not used.
See Super String Dimensions for the values that flag1 and flag2 may take.
LJG? if seg is an Arc or a Spiral, then what dimensions are set and what values are they given?
The return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
ID = 1500


Name
Element Create_super(Integer flag1,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer num_pts)
Description
Create an Element of type Super with num_pts vertices.
The basic geometry for the super string is supplied by the arrays x (x values), y (y values), z (z
values), r (radius of segments), b (bulge of segment b = 1 for major arc > 180 degrees, b = 0 for
minor arc < 180 degrees).
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.
Page 298

Super String Element

Chapter 5 12dPL Library Calls

Note that depending on the flag1 value, the z, r, b arrays may or may not be used, but the arrays
must still be supplied. See Super String Dimensions for the values that flag1 may take.
The arrays must be of length num_pts or greater.
The function return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
Note - if dimensions greater than 32 are required, then calls with two flags must be used.
For example Integer Create_super(Integer flag1, Integer flag2,Real x[],Real y[],Real z[],Real
r[],Integer b[],Integer num_pts).
ID = 690


Name
Element Create_super(Integer flag1,Integer flag2,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
num_pts)
Description
Create an Element of type Super with num_pts vertices.
The basic geometry for the super string is supplied by the arrays x (x values), y (y values), z (z
values), r (radius of segments), b (bulge of segment b = 1 for major arc > 180 degrees, b = 0 for
minor arc < 180 degrees).
flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.
flag2 is used to specify which of the dimensions from 33 to 64 are used/not used.
Note that depending on the flag1 value, the z, r, b arrays may or may not be used, but the arrays
must still be supplied. See Super String Dimensions for the values that flag1 and flag2 may
take.
The arrays must be of length num_pts or greater.
The function return value is an Element handle to the created super string.
If the Super string could not be created, then the returned Element will be null.
ID = 1498


Name
Integer Super_insert_vertex(Element super,Integer where,Integer count)
Description
For the super string super, insert count new vertices BEFORE vertex index where.
All the existing vertices from index position where onwards are move to after the new count
inserted vertices.
For example, Super_insert_vertex(super,1,10) will insert 10 new vertices before vertex index 1,
and all the existing vertices will be moved to after vertex index 10.
Note that if the string is a closed string then the closure applies to the new last vertex.
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A return value of 0 indicates the function call was successful.
ID = 2168


Name
Integer Super_remove_vertex(Element super,Integer where,Integer count)
Description
For the super string super, delete count existing vertices starting at vertex index where.
If there are not enough vertices to delete then the delete stops at the last vertex of the super
string.
Note that if the string is closed then the closure applies to the new last vertex.
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A return value of 0 indicates the function call was successful.
ID = 2169


Name
Integer Set_super_vertex_coord(Element super,Integer i,Real x,Real y,Real z)
Description
Set the coordinate data (x,y,z) for the i’th vertex (the vertex with index number i) of the super
Element super where
the x value to set is in Real x.
the y value to set is in Real y.
the z value to set is in Real z.
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A function return value of zero indicates the data was successfully set.
ID = 732


Name
Integer Get_super_vertex_coord(Element super,Integer i,Real &x,Real &y,Real &z)
Description
Get the coordinate data (x,y,z) for the i’th vertex (the vertex with index number i) of the super
Element super.
The x coordinate is returned in Real x.
The y coordinate is returned in Real y.
The z coordinate is returned in Real z.
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A return value of 0 indicates the function call was successful.
ID = 733


Name
Integer Set_super_data(Element super,Integer i,Real x,Real y,Real z,Real r,Integer b)
Description
Set the (x,y,z,r,f) data for the i’th vertex of the super Element super where
the x value to set is the Real x.
the y value to set is the Real y.
the z value to set is the Real z.
the radius value to set is the Real r.
the major/minor arc bulge value to set is the Integer b (0 for minor arc < 180 degrees, non zero
for major arc > 180 degrees).
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A function return value of zero indicates the data was successfully set.
ID = 699


Name
Integer Get_super_data(Element super,Integer i,Real &x,Real &y,Real &z,Real &r,Integer &b
Description
Get the (x,y,z,r,b data for the i’th vertex of the super string super.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
The radius value is returned in Real r.
The major/minor arc bulge value is returned in Integer b.(bulge of segment b = 1 for major arc >
180 degrees, b = 0 for minor arc < 180 degrees).
If the Element super is not of type Super, then the function return value is set to a non zero
value.
A function return value of zero indicates the data was successfully returned.
ID = 696


Name
Integer Set_super_data(Element super,Real x[],Real y[],Real z[],Real r[],Integer b[], Integer num_pts)
Description
Set the (x,y,z,r,b) data for the first num_pts vertices of the string Element super.
This function allows the user to modify a large number of vertices of the string in one call.
The maximum number of vertices that can be set is given by the number of vertices in the string.
The (x,y,z,r,f) values for each string vertex are given in the Real arrays x[], y[],z[],r[] and Integer
array b[] where the (x,y,z) are coordinate, r the radius of the arc on the following segment and b
is the bulge to say whether the arc is a major or minor arc (bulge of segment b = 1 for major arc
> 180 degrees, b = 0 for minor arc < 180 degrees).
The number of vertices to be set is given by Integer num_pts
If the Element super is not of type Super, then nothing is modified and the function return value
is set to a non zero value.
Note: this function can not create new super Elements but only modify existing super Elements.
A function return value of zero indicates the data was set successfully.
ID = 697


Name
Integer Get_super_data(Element super,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
max_pts,Integer &num_pts)
Description

Page 302

Super String Element

Chapter 5 12dPL Library Calls

Get the (x,y,z,r,f) data for the first max_pts vertices of the super string Element super.
The (x,y,z,r,f) values at each string vertex are returned in the Real arrays x[], y[],z[],r[] and
Integer array b[] (the arrays are x values, y values, z values, radius of segments, b is bulge to
denote if the segment is major or minor arc (bulge of segment b = 1 for major arc > 180 degrees,
b = 0 for minor arc < 180 degrees).
The maximum number of vertices that can be returned is given by max_pts (usually the size of
the arrays).
The vertex data returned starts at the first vertex and goes up to the minimum of max_pts and the
number of vertices in the string.
The actual number of vertices returned is returned by Integer num_pts
num_pts <= max_pts
If the Element super is not of type Super, then num_pts is returned as zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 694


Name
Integer Set_super_data(Element super,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
num_pts,Integer start_pt)
Description
For the super Element super, set the (x,y,z,r,b) data for num_pts vertices, starting at vertex
number start_pt.
This function allows the user to modify a large number of vertices of the string in one call starting
at vertex
number start_pt rather than vertex one.
The maximum number of vertices that can be set is given by the difference between the number
of vertices in the string and the value of start_pt.
The (x,y,z,r,f) values for the string vertices are given in the Real arrays x[], y[],z[],r[] and b[]
where the (x,y,z) are coordinate, r the radius of the arc on the following segment and b is the
bulge to say whether the arc is a major or minor arc (bulge of segment b = 1 for major arc > 180
degrees, b = 0 for minor arc < 180 degrees).
The number of the first string vertex to be modified is start_pt.
The total number of vertices to be set is given by Integer num_pts
If the Element super is not of type Super, then nothing is modified and the function return value
is set to a non zero value.
A function return value of zero indicates the data was set successfully.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new super strings but only modify existing super strings.
ID = 698


Name
Integer Get_super_data(Element super,Real x[],Real y[],Real z[],Real r[],Integer b[], Integer
max_pts,Integer &num_pts,Integer start_pt)
Description
For a super string Element super, get the (x,y,z,r,b) data for max_pts vertices starting at vertex
number start_pt (the arrays are x values, y values, z values, radius of segments, b is if segment
is major or minor arc).
This routine allows the user to return the data from a super string in user specified chunks. This
is necessary if the number of vertices in the string is greater than the size of the arrays available
to contain the information.
As in the previous function, the maximum number of vertices that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the vertex data returned starts at vertex number start_pt rather than
vertex one.
The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[],z[],r[] and
Integer array b[].
The actual number of vertices returned is given by Integer num_pts
num_pts <= max_pts
If the Element super is not of type Super, then num_pts is set to zero and the function return
value is set to a non zero value.
Note A start_pt of one gives the same result as for the previous function.
A function return value of zero indicates the data was successfully returned.
ID = 695


Name
Integer Get_super_vertex_forward_direction(Element super,Integer vert,Real &ang)
Description
For the Element super of type Super, get the angle of the tangent at the beginning of the
segment leaving vertex number vert. That is, the segment going from vertex vert to vertex
vert+1. Return the angle in ang.
ang is in radians and is measured in a counterclockwise direction from the positive x-axis.

vertex number vert

forward angle

vertex number vert

forward angle
tangent at beginning
of segment following
vertex number vert

vertex number vert+1

vertex number vert+1

If the super string is closed, the angle will still be valid for the last vertex of the super string and it
is the angle of the closing segment between the last vertex and the first vertex.
If super string is open, the call fails for the last vertex and a non-zero return code is returned.
If the Element super is not of type Super, then a non-zero return code is returned
A function return value of zero indicates the angle was successfully returned.
ID = 1501


Name
Integer Get_super_vertex_backward_direction(Element super,Integer vert,Real &ang)
Description
For the Element super of type Super, get the angle of the tangent at the end of the segment
entering vertex number vert. That is, the segment going from vertex vert-1 to vertex vert. Return
the angle in ang.
ang is in radians and is measured in a counterclockwise direction from the positive x-axis.

backward angle

vertex number vert

backward angle

vertex number vert
vertex number vert-1

vertex number vert-1

Super String Element

tangent at
end of segment
going into vertex
number vert

Page 305

12d Model Programming Language Manual

If the super string is closed, the angle will still be valid for the first vertex of the super string and it
is the angle of the closing segment between the first vertex and the last vertex.
If super string is open, the call fails for the first vertex and a non-zero return code is returned.
If the Element super is not of type Super, then a non-zero return code is returned
A function return value of zero indicates the angle was successfully returned.
ID = 1502


Name
Integer Get_type_like(Element super,Integer &type)
Description
In earlier versions of 12d Model, there were a large number of string types but in later versions of
12d Model, the super string was introduced which with its possible dimensions, could replace
many of the other strings.
However, for some applications it was important to know if the super string was like one of the
original strings. For example, some options required a string to be a contours string, the original
2d string. That is, the string has the one z-value (or height) for the entire string. So a super string
that has a constant dimension for height, behaves like a 2d string and in that case will return the
Type Like of 2d.
The Type Like’s can be referred to by a number (Integer) or by text (Text).
See Types of Elements for the values of the Type Like numbers and Type Like text.
The Type Like for the super string is returned in type.
If the Element string is not a super string, then a non zero function return value is returned.
A function return value of zero indicates the Type Like was returned successfully.
ID = 2074


Name
Integer Get_type_like(Element elt,Text &type)
Description
In earlier versions of 12d Model, there were a large number of string types but in later versions of
12d Model, the super string was introduced which with its possible dimensions, could replace
many of the other strings.
However, for some applications it was important to know if the super string was like one of the
original strings. For example, some options required a string to be a contours string, the original
2d string. That is, the string has the one z-value (or height) for the entire string. So a super string
that has a constant dimension for height, behaves like a 2d string and in that case will return the
Type Like of 2d.
The Type Like’s can be referred to by a number (Integer) or by text (Text).
See Types of Elements for the values of the Type Like numbers and Type Like text.
The Text Type Like for the super string is returned in type.
If the Element string is not a super string, then a non zero function return value is returned.

Page 306

Super String Element

Chapter 5 12dPL Library Calls

A function return value of zero indicates the Type Like was returned successfully.
ID = 2075


Name
Integer Set_super_use_2d_level(Element super,Integer use)
Description
For the super string Element super, define whether the height dimension Att_ZCoord_Value is
used or removed.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
If use is 1, the dimension is set. If use is 0, the dimension Att_ZCoord_Value is removed.
Note that if the height dimension Att_ZCoord_Array exists, this call is ignored.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 700


Name
Integer Get_super_use_2d_level(Element super,Integer &use)
Description
Query whether the dimension height dimension Att_ZCoord_Value exists for the super string
super.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
use is returned as 1 if the dimension exists, or 0 if the dimension doesn’t exist.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 701


Name
Integer Set_super_use_3d_level(Element super,Integer use)
Description
For the super string Element super, define whether the height dimension Att_ZCoord_Array is
used or removed.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.

Page 308

Super String Element

Chapter 5 12dPL Library Calls

If use is 1, the dimension is set. If use is 0, the dimension Att_ZCoord_Array is removed.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 730


Name
Integer Get_super_use_3d_level(Element super,Integer &use)
Description
Query whether the height dimension Att_ZCoord_Array exists for the super string super.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
use is returned as 1 if the dimension exists, or 0 if the dimension doesn’t exist.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 731


Name
Integer Super_vertex_level_value_to_array(Element super)
Description
If for the super string super the dimension Att_ZCoord_Value exists and the dimension
Att_ZCoord_Array does not exist then there will be one z value zval (height or level) for the entire
string.
In this case (when the dimension Att_ZCoord_Value exists and the dimension Att_ZCoord_Array
does not exist) this function sets the Att_ZCoord_Array dimension and creates a new z-value for
each vertex of super and it is given the value zval.
See Height Dimensions for information on the Height (ZCoord) dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 2174


Name
Integer Get_super_2d_level(Element elt,Real &level)
Description
For the Element elt, if the height dimension Att_ZCoord_Value is set and Att_ZCoord_Array is
not set, then the z-value for the entire string is returned in level.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.

Super String Element

Page 309

12d Model Programming Language Manual

If the Element elt is not of type Super, or the dimension Att_ZCoord_Value is not set, this call
fails and a non zero return value is returned.
A return value of zero indicates the function call was successful.
ID = 703


Name
Integer Set_super_2d_level(Element elt,Real level)
Description
For the Element elt of type Super, if the dimension Att_ZCoord_Value is set and
Att_ZCoord_Array is not set, then the z-value for the entire string is set to level.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
If the Element elt is not of type Super, or the dimension Att_ZCoord_Value is not set, this call
fails and a non zero return value is returned.
A return value of zero indicates the function call was successful.
ID = 702


Name
Integer Set_super_use_tinability(Element super,Integer use)
Description
Tell the super string whether to use the dimension Att_Contour_Array.
LJG?
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
A return value of 0 indicates the function call was successful.
ID = 722


Name
Integer Get_super_use_tinability(Element super,Integer &use)
Description
Query whether the dimension Att_Contour_Array exists for the super string.
LJG?
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 723


Name
Integer Set_super_use_vertex_tinability_value(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Vertex_Tinable_Value is
used or removed.

Super String Element

Page 311

12d Model Programming Language Manual

If Att_Vertex_Tinable_Value is set and Att_Vertex_Tinability_Array is not set then the tinability is
the same for all vertices of super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set and the tinability is the same for all vertices.
If use is 0, the dimension is removed.
Note that if the dimension Att_Vertex_Tinable_Array exists, this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1584


Name
Integer Get_super_use_vertex_tinability_value(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Tinable_Value exists for the super string super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1585


Name
Integer Set_super_use_vertex_tinability_array(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Vertex_Tinable_Array is
used.
If Att_Vertex_Tinable_Array is set then there can be a different tinability defined for each vertex
of super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set and the tinability is different for each vertex.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 1586


Name
Integer Get_super_use_vertex_tinability_array(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Tinable_Array exists for the super string super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Page 312

Super String Element

Chapter 5 12dPL Library Calls

Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1587


Name
Integer Set_super_vertex_tinability(Element super,Integer vert,Integer tinability)
Description
For the Element super (which must be of type Super), set the tinability value for vertex number
vert to the value tinability.
If tinability is 1, the vertex is tinable.
If tinability is 0, the vertex is not tinable.
If the Element super is not of type Super, or Att_Vertex_Tinable_Array is not set for super, then
a non-zero return code is returned.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 736


Name
Integer Get_super_vertex_tinability(Element super,Integer vert,Integer &tinability)
Description
For the Element super (which must be of type Super), get the tinability value for vertex number
vert and return it in the Integer tinability.
If tinability is 1, the vertex is tinable.
If tinability is 0, the vertex is not tinable.
If the Element super is not of type Super, or Att_Vertex_Tinable_Array is not set for super, then
a non-zero return code is returned.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 737


Name
Integer Set_super_use_segment_tinability_value(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Segment_Tinable_Value is
Super String Element

Page 313

12d Model Programming Language Manual

used or removed.
If Att_Segment_Tinable_Value is set and Att_Segment_Tinability_Array is not set then the
tinability is the same for all segments of super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set and the tinability is the same for all segments.
If use is 0, the dimension is removed.
Note that if the dimension Att_Segment_Tinable_Array exists, this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1592


Name
Integer Get_super_use_segment_tinability_value(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Tinable_Value exists for the super string super.
If Att_Segment_Tinable_Value is set and Att_Segment_Tinability_Array is not set then the
tinability is the same for all segments of super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1593


Name
Integer Set_super_use_segment_tinability_array(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Segment_Tinable_Array is
set or removed.
If Att_Segment_Tinable_Array is set then there can be a different tinability defined for each
segment in super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set and the tinability is different for each segment.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 1594


Name
Integer Get_super_use_segment_tinability_array(Element super,Integer &use)

Page 314

Super String Element

Chapter 5 12dPL Library Calls

Description
Query whether the dimension Att_Segment_Tinable_Array exists for the super string super.
If Att_Segment_Tinable_Array is set then there can be a different tinability defined for each
segment in super.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1595


Name
Integer Set_super_segment_tinability(Element super,Integer seg,Integer tinability)
Description
For the Element super (which must be of type Super), set the tinability value for segment
number seg to the value tinability.
If tinability is 1, the segment is tinable.
If tinability is 0, the segment is not tinable.
If the Element super is not of type Super, or Att_Segment_Tinable_Array is not set for super,
then a non-zero return code is returned.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 724


Name
Integer Get_super_segment_tinability(Element super,Integer seg,Integer &tinability)
Description
For the Element super (which must be of type Super), get the tinability value for segment
number seg and return it in the Integer tinability.
If tinability is 1, the segment is tinable.
If tinability is 0, the segment is not tinable.
If the Element super is not of type Super, or Att_Segment_Tinable_Array is not set for super,
then a non-zero return code is returned.
See Tinability Dimensions for information on the Tinability dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 725


Name
Integer Set_super_use_segment_radius(Element super,Integer use)
Description
For the super string Element super, define whether the segment radius dimension
Att_Radius_Array is to be used or removed.
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the segments between vertices of the super can be
straights or arcs.
If use is 0, the dimension is removed. That is, the segments between vertices of the super can
only be straights.
Note that if the dimension Att_Radius_Array is set then the Att_Major_Array is also automatically
set.
A return value of 0 indicates the function call was successful.
ID = 708


Name
Integer Get_super_use_segment_radius(Element super,Integer &use)
Description
Query whether the segment radius dimension Att_Radius_Array exists for the super string.
use is returned as 1 if the dimension Att_Radius_Array exists, or 0 if the dimension doesn’t exist.
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
A return value of 0 indicates the function call was successful.
ID = 709


Name
Integer Set_super_segment_radius(Element super,Integer seg,Real rad)
Description
For the super string super, set the radius of segment number seg to the value rad.
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Radius_Array set.
A return value of 0 indicates the function call was successful.
ID = 710


Name
Integer Get_super_segment_radius(Element super,Integer seg,Real &rad)
Description
For the super string super, get the radius of segment number seg and return the radius in rad.
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Radius_Array set.
A return value of 0 indicates the function call was successful.
ID = 711


Name
Integer Set_super_segment_major(Element super,Integer seg,Integer bulge)
Description
For the super string super, set the major/minor arc value of segment number seg to the value
bulge. (bulge of segment b = 1 for major arc > 180 degrees, b = 0 for minor arc < 180 degrees)
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Major_Array set.
A return value of 0 indicates the function call was successful.
ID = 712


Name
Integer Get_super_segment_major(Element super,Integer seg,Integer &major)
Description
For the super string super, get the major/minor arc bulge of segment number seg and return the
value in bulge (bulge of segment bulge = 1 for major arc > 180 degrees, bulge = 0 for minor arc
< 180 degrees).
See Segment Radius Dimension for information on the Segment Radius dimensions or Super
String Dimensions for information on all dimensions.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Major_Array set.
A return value of 0 indicates the function call was successful.
ID = 713


Name
Integer Set_super_use_vertex_point_number(Element super,Integer use)
Description
Tell the super string whether to use, remove, the dimension Att_Point_Array.
If Att_Point_Array exists, the string can have a Point Id for each vertex.
If use is 1, the dimension is set and each vertex can have a Point Id.
If use is 0, the dimension is removed.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 738


Name
Integer Get_super_use_vertex_point_number(Element super,Integer &use)
Description
Query whether the dimension Att_Point_Array exists for the super string.
If Att_Point_Array exists, the string can have a Point Id for each vertex.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 739


Name
Integer Set_super_vertex_point_number(Element super,Integer vert,Integer point_number)
Description
For the Element super which must be of type Super, set the Point Id for vertex number vert to
the have the text value of the integer point_number.
If the Element super is not of type Super, or the dimension Att_Point_Array is not set, then a
non-zero return code is returned.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.
Note - in earlier versions of 12d Model (pre v6), point id’s were only integers. This was extended
to being a text when surveying equipment allowed non-integer point ids.
A function return value of zero indicates the point id was successfully set.

Page 318

Super String Element

Chapter 5 12dPL Library Calls

ID = 740


Name
Integer Get_super_vertex_point_number(Element super,Integer vert,Integer &point_number)
Description
This function should no longer be used because now Point Id’s do not have to be
integers.
From the Element super which must be of type Super, get the Point Id for vertex number vert
and return it in the Integer point_number.
If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,
then a non-zero return code is returned.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.
Note - in earlier versions of 12d Model (pre v6), Point Id’s were only integers. This was extended
to being a text when surveying equipment allowed non-integer Point Ids.
A function return value of zero indicates the point id was successfully returned.
ID = 741


Name
Integer Set_super_vertex_point_number(Element super,Integer vert,Text point_id)
Description
For the Element super which must be of type Super, set the Point Id for vertex number vert to
the text point_id.
If the Element super is not of type Super, or the dimension Att_Point_Array is not set, then a
non-zero return code is returned.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the point id was successfully set.
ID = 1625


Name
Integer Get_super_vertex_point_number(Element super,Integer vert,Text &point_id)
Description
From the Element super which must be of type Super, get the Point Id for vertex number vert
and return it in the Text point_id.
If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,
then a non-zero return code is returned.
See Point Id Dimension for information on the Point Id dimensions or Super String Dimensions
for information on all the dimensions.

Super String Element

Page 319

12d Model Programming Language Manual

A function return value of zero indicates the point id was successfully returned.
ID = 1626


Name
Integer Set_super_use_symbol(Element super,Integer use)
Description
For Element super of type Super, define whether the vertex symbol dimension
Att_Symbol_Value is used or removed.
See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or Super
String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string has one symbol for all vertices.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 797


Name
Integer Get_super_use_symbol(Element super,Integer &use)
Description
Query whether the vertex symbol dimension Att_Symbol_Value exists for the Element super of
type Super.
See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or Super
String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists. That is, the super string has one symbol for all
vertices.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 798


Name
Integer Set_super_use_vertex_symbol(Element super,Integer use)
Description
For Element super of type Super, define whether the vertex symbol dimension
Att_Symbol_Array is used or removed.
See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or Super
String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string has a different symbol on each vertex.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 799


Name
Integer Get_super_use_vertex_symbol(Element super,Integer &use)
Description
Query whether the vertex symbol dimension Att_Symbol_Array exists for the super string.
See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or Super
String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists. That is, the super string has a different symbol on
each vertex.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 800


Name
Integer Super_vertex_symbol_value_to_array(Element super)
Description
If for the super string super the dimension Att_Symbol_Value exists and the dimension
Att_Symbol_Array does not exist then there will be one z value zval (height or level) for the entire
string.
In this case (when the dimension Att_Symbol_Value exists and the dimension Att_Symbol_Array
does not exist) this function sets the Att_Symbol_Array dimension and creates a new array for
symbol at each vertex of super.
See Vertex Symbol Dimensions for information on the Height (ZCoord) dimensions or Super
String Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 2175


Name
Integer Set_super_vertex_symbol_style(Element super,Integer vert,Text sym)
Description
For the super Element super, set the symbol on vertex number vert to be the symbol style
named sym.
If there is only the one Symbol for the entire string then the symbol name for that symbol is set to
sym regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 801


Name
Integer Get_super_vertex_symbol_style(Element super,Integer vert,Text &s)
Description
For the super Element super, return the name of the symbol on vertex number vert in Text sym.
If there is only the one Symbol for the entire string then the symbol name for that symbol is
returned in sym regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 802


Name
Integer Set_super_vertex_symbol_colour(Element super,Integer vert,Integer col)
Description
For the super Element super, set the colour number of the symbol from the vertex number vert
to be col.
If there is only the one Symbol for the entire string then the colour number of that symbol is set to
col regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 807


Name
Integer Get_super_vertex_symbol_colour(Element super,Integer vert,Integer &col)
Description
For the super Element super, return as col the colour number of the symbol on vertex number
vert.
If there is only the one Symbol for the entire string then the colour number of that symbol is
returned in col regardless of the value of vert.

Page 324

Super String Element

Chapter 5 12dPL Library Calls

A return value of 0 indicates the function call was successful.
ID = 808


Name
Integer Set_super_vertex_symbol_offset_width(Element super,Integer vert,Real x_offset)
Description
For the super Element super, set the x offset of the symbol from vertex number vert to be
x_offset.
If there is only the one Symbol for the entire string then the x offset of that symbol is set to
x_offset regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of x
offset.
A return value of 0 indicates the function call was successful.
ID = 809


Name
Integer Get_super_vertex_symbol_offset_width(Element super,Integer vert,Real &x_offset)
Description
For the super Element super, return as x_offset the x offset of the symbol from vertex number
vert.
If there is only the one Symbol for the entire string then the x offset of that Symbol is returned in
x_offset regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of x
offset.
A return value of 0 indicates the function call was successful.
ID = 810


Name
Integer Set_super_vertex_symbol_offset_height(Element super,Integer vert,Real y_offset)
Description
For the super Element super, set the y offset of the symbol from the vertex number vert to be
y_offset.
If there is only the one Symbol for the entire string then the y offset of that symbol is set to
y_offset regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of y
offset.
A return value of 0 indicates the function call was successful.
ID = 811


Name
Integer Get_super_vertex_symbol_offset_height(Element super,Integer vert,Real &y_offset)
Description
For the super Element super, return as y_offset the y offset of the symbol from the vertex
number vert.
If there is only the one Symbol for the entire string then the y offset of that Symbol is returned in
y_offset regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of y
offset.
A return value of 0 indicates the function call was successful.
ID = 812


Name
Integer Set_super_vertex_symbol_rotation(Element super,Integer vert,Real ang)
Description
For the super Element super, set the angle of rotation of the symbol on vertex number vert to
ang. ang is in radians and is measured counterclockwise from the x-axis.
angle is in radians and is measured counterclockwise from the x-axis.
If there is only the one Symbol for the entire string then the angle of rotation of that symbol is set
to ang regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of
angle of rotation of the symbol.
A return value of 0 indicates the function call was successful.
ID = 803


Name
Integer Get_super_vertex_symbol_rotation(Element super,Integer vert,Real &angle)
Description
For the super Element super, return the angle of rotation in angle of the symbol on vertex
number vert.
angle is in radians and is measured counterclockwise from the x-axis.
If there is only the one angle of rotation for the entire string then the angle of rotation of that
Symbol is returned in ang regardless of the value of vert.
See Definitions of Super String Vertex Symbol Dimensions and Parameters for the definition of
angle of rotation of the symbol.
A return value of 0 indicates the function call was successful.
ID = 804


Name
Integer Set_super_vertex_symbol_size(Element super,Integer vert,Real sz)
Description
For the super Element super, set the size of the symbol on vertex number vert to be sz.
If there is only the one Symbol for the entire string then the size of that symbol is set to sz
regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 805


Name
Integer Get_super_vertex_symbol_size(Element super,Integer vert,Real &sz)
Description
For the super Element super, return as s the size of the symbol on vertex number vert.
If there is only the one angle of rotation for the entire string then the angle of rotation of that
Symbol is returned in sz regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 806


Name
Integer Set_super_use_pipe(Element elt,Integer use)
Integer Set_super_use_diameter(Element elt,Integer use)
Description
For the super string Element elt, define whether the pipe/culvert dimension Att_Diameter_Value
is used or removed.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If use is 1, the dimension Att_Diameter_Value is set That is, the pipe has one diameter and one
thickness (V10) for the entire string (i.e. a constant pipe).
If use is 0, the dimension is removed.
Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), this call is ignored.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful.
ID = 704


Name
Integer Get_super_use_pipe(Element elt,Integer &use)
Integer Get_super_use_diameter(Element elt,Integer &use)
Description
Query whether the pipe/culvert dimension Att_Diameter_Value exists for the super string elt.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists
use is returned as 0 if the dimension doesn’t exist, or if it is a variable pipe string (i.e. a
Att_Diameter_Array exists).
Note - if it is a constant pipe string (Att_Diameter_Value exists) and a variable pipe string
(Att_Diameter_Array exists) then the variable pipe takes precedence.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful.
ID = 705


Name
Integer Set_super_use_segment_pipe(Element elt,Integer use)
Integer Set_super_use_segment_diameter(Element elt,Integer use)
Description
For the super string Element elt, define whether the pipe/culvert dimension Att_Diameter_Array
is used or removed.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If use is 1, the dimension Att_Diameter_Array is set. That is, each pipe segment can have a
different diameter and thickness (V10).
If use is 0, the dimension is removed.
Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), this call is ignored.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful.
ID = 714


Name
Integer Get_super_use_segment_pipe (Element elt,Integer &use)
Integer Get_super_use_segment_diameter (Element elt,Integer &use)
Description

Page 330

Super String Element

Chapter 5 12dPL Library Calls

Query whether the pipe/culvert dimension Att_Diameter_Array exists for the super string elt.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful.
ID = 715


Name
Integer Set_super_use_culvert(Element super,Integer use)
Description
Tell the super string whether to use or remove the pipe/culvert dimension Att_Culvert_Value.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
A value for use of 1 sets the dimension and 0 removes it.
Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1247


Name
Integer Get_super_use_culvert(Element super,Integer &use)
Description
Query whether the pipe/culvert dimension Att_Culvert_Value exists for the super string.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
use is returned as 1 if the dimension Att_Culvert_Value exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1246


Name
Integer Set_super_use_segment_culvert(Element super,Integer use)
Description
Tell the super string whether to use or remove the pipe/culvert dimension Att_Culvert_Array.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
A value for use of 1 sets the dimension and 0 removes it.

Super String Element

Page 331

12d Model Programming Language Manual

Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1251


Name
Integer Get_super_use_segment_culvert(Element super,Integer &use)
Description
Query whether the pipe/culvert dimension Att_Culvert_Array exists for the super string.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
use is returned as 1 if the dimension Att_Culvert_Array exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1250


Name
Integer Set_super_use_pipe_justify(Element super,Integer use)
Description
For Element super of type Super, define whether the pipe/culvert dimension Att_Pipe_Justify is
used or removed.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the pipe or culvert super string has a justification
defined.
If use is 0, the dimension is removed.
Note: the same justification flag is used whether the super string is a round pipe or a culvert and
the justification applies for the entire string.
A return value of 0 indicates the function call was successful.
ID = 1255


Name
Integer Get_super_use_pipe_justify(Element super,Integer &use)
Description
Query whether the pipe/culvert dimension Att_Pipe_Justify exists for the Element super of type
Super.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.

Page 332

Super String Element

Chapter 5 12dPL Library Calls

use is returned as 1 if the dimension exists
use is returned as 0 if the dimension doesn’t exist.
Note: the same justification flag is used whether the super string is a round pipe or a culvert and
the justification applies for the entire string.
A return value of 0 indicates the function call was successful.
ID = 1254


Name
Integer Set_super_pipe_justify(Element super,Integer justify)
Description
For the Element super of type Super which is a pipe or culvert string (i.e. Att_Diameter_Value,
Att_Diameter_Array, Att_Culvert_Value or Att_Culvert_Array has been set), set the pipe/culvert
justification to justify.
The values for justify are given in Pipe/Culvert Justification
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or a correct dimension is not allocated, this call fails
and a non-zero function value is returned.
Note: the same justification flag is used whether the super string is a pipe or a culvert and the
justification applies for the entire string.
A return value of 0 indicates the function call was successful
ID = 1256


Name
Integer Get_super_pipe_justify(Element super,Integer &justify)
Description
For the Element super of type Super which is a pipe or culvert string (i.e. Att_Diameter_Value,
Att_Diameter_Array, Att_Culvert_Value or Att_Culvert_Array has been set), get the pipe/culvert
justification and return it in justify.
The values for justify are given in Pipe/Culvert Justification
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or a correct dimension is not allocated, this call fails
and a non-zero function value is returned.
Note: the same justification flag is used whether the super string is a pipe or a culvert and the
justification applies for the entire string.
A return value of 0 indicates the function call was successful
ID = 1257


Name
Integer Set_super_pipe(Element super,Real diameter,Real thickness,Integer internal_diameter)
Description
For the Element super of type Super which is a constant diameter pipe string (i.e. the
dimension flag Att_Diameter_Value has been set and Att_Diameter_Array has not been set), set
the thickness to thickness and the internal diameter to diameter if internal_diameter = 1 or the
external diameter to diameter if internal_diameter is non zero.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
Note - Get_super_use_pipe can be called to make sure it is a constant diameter pipe string.
A return value of 0 indicates the function call was successful.
ID = 2645


Name
Integer Get_super_pipe(Element super,Real &diameter,Real thickness,Integer internal_diameter)
Description
For the Element super of type Super which is a constant diameter round pipe string (i.e.
Att_Diameter_Value has been set and Att_Diameter_Array has not been set), get the pipe
thickness and return it in thickness and the internal diameter and return it in internal_diameter.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
Note - Get_super_use_pipe can be called to make sure it is a constant diameter round pipe
string.
A return value of 0 indicates the function call was successful
ID = 2646


Name
Integer Set_super_segment_pipe(Element super,Integer seg,Real diameter,Real thickness,Integer
internal_diameter)
Description
For the super Element super and segment number seg, set the thickness to thickness and the
internal diameter to diameter if internal_diameter = 1 or the external diameter to diameter if
internal_diameter is non zero.

Super String Element

Page 335

12d Model Programming Language Manual

If super is not a variable pipe string then a non zero return value is returned.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
A return value of 0 indicates the function call was successful
ID = 2649


Name
Integer Get_super_segment_pipe(Element super,Integer seg,Real &diameter,Real &thickness,Integer
&internal_diameter)
Description
For the super Element super and for segment number seg, get the pipe thickness and return it in
thickness, and if the returned value of internal_diameter is 1 then return the internal diameter
in diameter otherwise return the external diameter in diameter.
If super is not a variable pipe string then a non zero return value is returned.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
ID = 2650


Name
Integer Set_super_culvert(Element super,Real width,Real height,Real left_thickness,Real
right_thickness,Real top_thickness,Real bottom_thickness,Integer internal_width_height)
Description
For the Element super of type Super which is a constant width and height string (i.e.the pipe/
culvert dimension flag Att_Culvert_Value has been set and Att_Culvert_Array not set), then
if internal_width_height =1 then set the culvert internal width to w and the internal height to
h.
if internal_width_height is not 1 then set the culvert external width to w and the external
height to h.
Set the left thickness to left_thickness, right thickness to right_thickness, top thickness to
top_thickness and bottom thickness to bottom_thickness.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension Att_Culvert_Value is not allocated,
this call fails and a non-zero function value is returned.
A return value of 0 indicates the function call was successful.
Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.
ID = 2647


Name
Integer Get_super_culvert(Element super,Real &width,Real &height,Real &left_thickness,Real
&right_thickness,Real &top_thickness,Real &bottom_thickness,Integer &internal_width_height)
Description
For the Element super of type Super which is a constant width and height string (i.e.the pipe/
culvert dimension flag Att_Culvert_Value has been set and Att_Culvert_Array not set), then
if internal_width_height is returned as 1 then the culvert internal width is returned in w and
the internal height returned in h.
if internal_width_height is not returned as 1 then the culvert external width is returned in w
and the external height returned in h.
The left thickness is returned in left_thickness, right thickness in right_thickness, top thickness
in top_thickness and bottom thickness in bottom_thickness.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
A return value of 0 indicates the function call was successful
Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.

Super String Element

Page 337

12d Model Programming Language Manual

ID = 2648


Name
Integer Set_super_segment_culvert(Element super,Integer seg,Real width,Real height,Real
left_thickness,Real right_thickness,Real top_thickness,Real bottom_thickness,Integer
internal_width_height)
Description
For the Element super of type Super which has culvert widths and heights for each segment
(i.e.the pipe/culvert dimension flag Att_Culvert_Array has been set), then for segment number
seg:
if internal_width_height =1 then set the culvert internal width to w and the internal height to
h.
if internal_width_height is not 1 then set the culvert external width to w and the external
height to h.
Set the left thickness to left_thickness, right thickness to right_thickness, top thickness to
top_thickness and bottom thickness to bottom_thickness.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,
this call fails and a non-zero function value is returned.
A return value of 0 indicates the function call was successful.
Note - Get_super_use_segment_culvert can be called to make sure it is a variable segment
culvert string.
ID = 2651


Name
Integer Get_super_segment_culvert(Element super,Integer seg,Real &width,Real &height,Real
&left_thickness,Real &right_thickness,Real &top_thickness,Real &bottom_thickness,Integer
&internal_width_height)
Description
For the Element super of type Super which has culvert width and heights for each segment
(i.e.the pipe/culvert dimension flag Att_Culvert_Array has been set), then for segment number
seg:
if internal_width_height is returned as 1 then the culvert internal width is returned in w and
the internal height returned in h.
if internal_width_height is not returned as 1 then the culvert external width is returned in w
and the external height returned in h.
The left thickness is returned in left_thickness, right thickness in right_thickness, top thickness
in top_thickness and bottom thickness in bottom_thickness.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String

Page 338

Super String Element

Chapter 5 12dPL Library Calls

Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
A return value of 0 indicates the function call was successful
Note - Get_super_use_segment_culvert can be called to make sure it is a variable segment
culvert string.
ID = 2652


Name
Integer Set_super_pipe (Element super,Real diameter)
Integer Set_super_diameter (Element super,Real diameter)
Description
For the Element super of type Super which is a constant diameter pipe string (i.e. the
dimension flag Att_Diameter_Value has been set and Att_Diameter_Array has not been set), set
the diameter to diameter.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
Note - Get_super_use_pipe can be called to make sure it is constant diameter pipe string.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful.
ID = 706


Name
Integer Get_super_pipe(Element super,Real &diameter)
Integer Get_super_diameter(Element super,Real &diameter)
Description
For the Element super of type Super which is a constant diameter round pipe string (i.e.
Att_Diameter_Value has been set and Att_Diameter_Array has not been set), get the pipe
diameter and return it in diameter.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
This function has the new name for V10 onwards. The old call will still work.
Note - Get_super_use_pipe can be called to make sure it is a constant diameter pipe string.
A return value of 0 indicates the function call was successful
ID = 707


Name
Integer Set_super_segment_pipe(Element super,Integer seg,Real diameter)
Integer Set_super_segment_diameter(Element super,Integer seg,Real diameter)
Description
For the super Element super, set the pipe diameter for segment number seg to diameter.
For V10, if super is not a variable pipe string then a non zero return value is returned.
For V10,a return value of 0 indicates the function call was successful
For V9, the return code is always 0.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
Note - for V9, no error code is set if the string in not a variable pipe string. That needs to checked
using the Get_super_use_pipe calls.
This function has the new name for V10 onwards. The old call will still work.
A return value of 0 indicates the function call was successful
ID = 716


Name
Integer Get_super_segment_pipe(Element super,Integer seg,Real &diameter)
Integer Get_super_segment_diameter(Element super,Integer seg,Real &diameter)
Description
This function has the new name for V10 onwards. The old call will still work.
For the super Element super, get the pipe diameter for segment number seg and return it in
diameter.
For V10, if super is not a variable pipe string then a non zero return value is returned.
For V10,a return value of 0 indicates the function call was successful
For V9, the return code is always 0.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
Note - for V9, no error code is set if the string in not a variable pipe string. That needs to checked
using the Get_super_use_pipe calls.
ID = 717


Name
Integer Set_super_culvert(Element super,Real w,Real h)
Description
For the Element super of type Super which is a constant width and height culvert string (i.e.the
pipe/culvert dimension flag Att_Culvert_Value has been set), set the culvert width to w and the
height to h.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated Att_Culvert_Value,
this call fails and a non-zero function value is returned.
A return value of 0 indicates the function call was successful.
Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.
ID = 1249


Name
Integer Get_super_culvert(Element super,Real &w,Real &h)
Description
For the Element super of type Super which is a constant width and height culvert string (i.e.the
pipe/culvert dimension flag Att_Culvert_Value has been set), get the culvert width and height and
return them in w and h respectively.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension is not allocated, this call fails and a
non-zero function value is returned.
A return value of 0 indicates the function call was successful
Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.
ID = 1248


Name
Integer Set_super_segment_culvert(Element super,Integer seg,Real w,Real h)
Description
For the Element super of type Super which has culvert widths and heights for each
segment(i.e.the pipe/culvert dimension flag Att_Culvert_Array has been set), set the culvert
width and height for segment number seg to be w and h respectively.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,

Page 342

Super String Element

Chapter 5 12dPL Library Calls

this call fails and a non-zero function value is returned.
A return value of 0 indicates the function call was successful.
Note - Get_super_use_segment_culvert can be called to make sure it is variable segment
culvert string.
ID = 1253


Name
Integer Get_super_segment_culvert(Element super,Integer seg,Real &w,Real &h)
Description
For the Element super of type Super which has culvert widths and heights for each
segment(i.e.the pipe/culvert dimension flag Att_Culvert_Array has been set), get the culvert
width and height for segment number seg and return them in w and h respectively.
See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or Super String
Dimensions for information on all dimensions.
If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,
this call fails and a non-zero function value is returned.
A return value of 0 indicates the function call was successful.
Note - Get_super_use_segment_culvert can be called to make sure it is variable segment
culvert string.
ID = 1252


Name
Integer Set_super_use_vertex_text_value(Element super,Integer use)
Description
Tell the super string super whether to use (set), or not use (remove), the dimension
Att_Vertex_Text_Value.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Vertex_Text_Value is used, then the same text is attached to all the vertices of the super
string.
Note if the dimension Att_Vertex_Text_Array exists, this call is ignored.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1237


Name
Integer Get_super_use_vertex_text_value(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Text_Value exists for the super string super.
use is returned as 1 if the dimension Att_Vertex_Text_Value exists.
use is returned as 0 if the dimension doesn’t exist.
If the dimension Att_Vertex_Text_Value exists then the string has the same text for every vertex
of the string.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1238


Name
Integer Set_super_use_vertex_text_array(Element super,Integer use)
Description
Tell the super string whether to use (set), or not use (remove), the dimension
Att_Segment_Text_Array.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Vertex_Text_Array is used, then there is different text at each vertex of the super string
super.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 742


Name
Integer Get_super_use_vertex_text_array(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Text_Array exists (is used) for the super string super.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
If Att_Vertex_Text_Array is used, then there is different text on each vertex of the of the string.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 743


Name

Page 346

Super String Element

Chapter 5 12dPL Library Calls

Integer Super_vertex_text_value_to_array(Element super)
Description
If for the super string super the dimension Att_Vertex_Text_Value exists and the dimension
Att_Vertex_Text_Array does not exist then there will be one Vertex Text txt for the entire string.
In this case (when the dimension Att_Vertex_Text_Value exists and the dimension
Att_Vertex_Text_Array does not exist) this function sets the Att_Vertex_Text_Array dimension
and new vertex text created for each vertex of super and the new vertex text is given the value
txt.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 2177


Name
Integer Set_super_use_vertex_annotation_value(Element super,Integer use)
Description
Tell the super string super whether to use, or not use, the dimension
Att_Vertex_Annotate_Value.
If the dimension Att_Vertex_Annotate_Value exists and the dimension
Att_Vertex_Annotate_Array doesn’t exist then the string has the one annotation which is used for
vertex text on any vertex of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
Note if the dimension Att_Vertex_Annotate_Array exists, this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 750


Name
Integer Get_super_use_vertex_annotation_value(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Annotate_Value exists for the super string super.
If the dimension Att_Vertex_Annotate_Value exists and the dimension
Att_Vertex_Annotate_Array doesn’t exist then the string has the one annotation which is used for
vertex text on any vertex of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.

Super String Element

Page 347

12d Model Programming Language Manual

A return value of 0 indicates the function call was successful.
ID = 751


Name
Integer Set_super_use_vertex_annotation_array(Element super,Integer use)
Description
Tell the super string super whether to use, or not use, the dimension Att_Vertex_Annotate_Array.
If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation for
the vertex text on each vertex of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
A return value of 0 indicates the function call was successful.
ID = 752


Name
Integer Get_super_use_vertex_annotation_array(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Annotate_Array exists for the super string super.
If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation for
the vertex text on each vertex of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 753


Name
Integer Super_vertex_annotate_value_to_array(Element elt)
Description
If for the super string super the dimension Att_Vertex_Annotate_Value exists and the dimension
Att_Vertex_Annotate_Array does not exist then there will be one Annotation annot for the entire
string.
In this case (when the dimension Att_Vertex_Annotate_Value exists and the dimension
Att_Vertex_Annotate_Array does not exist), this function sets the Att_Vertex_Annotate_Array
dimension and new Annotations created for each vertex of super and the new Annotation is
given the value annot.
See Vertex Text Annotation Dimensions for information on the Text dimensions or Super String
Dimensions for information on all the dimensions.

Page 348

Super String Element

Chapter 5 12dPL Library Calls

A return value of 0 indicates the function call was successful.
ID = 2178


Name
Integer Set_super_vertex_text(Element super,Integer vert,Text txt)
Description
For the super Element super, set the vertex text at vertex number vert to be txt.
If there is only one Vertex Text for all the vertices then the text for that one Vertex Text is set to txt
regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 744


Name
Integer Get_super_vertex_text(Element super,Integer vert,Text &txt)
Description
For the super string super, return in txt the vertex text on vertex number vert.
If there is only one Vertex Text for all the vertices then the text for that one Vertex Text will be
returned in txt regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 745


Name
Integer Set_super_vertex_world_text(Element)
Description
Set the units for vertex text for the super string super to World. See Vertex Text Annotation Units
.
A return value of 0 indicates the function call was successful.
ID = 747


Name
Integer Set_super_vertex_device_text(Element)
Description
Set the units for vertex text for the super string super to Screen (also known as Device or Pixel).
See Vertex Text Annotation Units .
A return value of 0 indicates the function call was successful.

Super String Element

Page 349

12d Model Programming Language Manual

ID = 746


Name
Integer Set_super_vertex_paper_text(Element super)
Description
For an Element super of type Super, set the text units for vertex text to be paper (that is
millimetres).
See Vertex Text Annotation Units for the definition of segment text units.
If there is Textstyle_Data for the vertex text then this will override the
Set_super_vertex_device_text call.
A return value of 0 indicates the function call was successful.
ID = 1633


Name
Integer Set_super_vertex_text_type(Element super,Integer type)
Description
For the super Element super, set the vertex text units to be the value of type.
See Vertex Text Annotation Units for the definition of vertex text units.
A return value of 0 indicates the function call was successful.
ID = 748


Name
Integer Get_super_vertex_text_type(Element super,Integer &type)
Description
For the super Element super, return in type the value for the vertex text units for the vertex text
of the string.
See Vertex Text Annotation Units for the definition of vertex text units.
A return value of 0 indicates the function call was successful.
ID = 749


Name
Integer Set_super_vertex_text_justify(Element super,Integer vert,Integer just)
Description
For the super string super, set the justification of the text on vertex number vert to just.
See Vertex Text Annotation Definitions for the definition of justification.
If there is only one Vertex Text Annotation for all the Vertex Text then the justification for that one
Vertex Text Annotation is set to just regardless of the value of vert.
Page 350

Super String Element

Chapter 5 12dPL Library Calls

A return value of 0 indicates the function call was successful.
ID = 754


Name
Integer Get_super_vertex_text_justify(Element super,Integer vert,Integer &just)
Description
For the super string super, return the justification of the vertex text on vertex number vert in just.
See Vertex Text Annotation Definitions for the definition of justification.
If there is only one Vertex Text Annotation for all the Vertex Text then the justification for that one
Vertex Text Annotation will be returned in just regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 755


Name
Integer Set_super_vertex_text_offset_width(Element super,Integer vert,Real offset)
Description
For the super string super, set the offset (offset width) of the vertex text from vertex number vert
to offset
See Vertex Text Annotation Definitions for the definition of offset (offset width).
If there is only one Vertex Text Annotation for all the Vertex Text then the offset width for that one
Vertex Text Annotation is set to offset regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 756


Name
Integer Get_super_vertex_text_offset_width(Element super,Integer vert,Real &offset)
Description
For the super string super, return as offset the offset (offset width) of the vertex text from vertex
number vert.
See Vertex Text Annotation Definitions for the definition of offset (offset width).
If there is only one Vertex Text Annotation for all the Vertex Text then the offset width for that one
Vertex Text Annotation will be returned in offset regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 757


Name
Integer Set_super_vertex_text_offset_height(Element super,Integer vert,Real raise)

Super String Element

Page 351

12d Model Programming Language Manual

Description
For the super string super, set the raise (offset height) of the vertex text for vertex number vert to
raise.
See Vertex Text Annotation Definitions for the definition of raise (offset height)
If there is only one Vertex Text Annotation for all the Vertex Text then the raise for that one Vertex
Text Annotation is set to raise regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 758


Name
Integer Get_super_vertex_text_offset_height(Element super,Integer vert,Real &raise)
Description
For the super string super, return as raise the raise of the vertex text from vertex number vert.
See Vertex Text Annotation Definitions for the definition of raise (offset height)
If there is only one Vertex Text Annotation for all the Vertex Text then the raise for that one Vertex
Text Annotation will be returned in raise regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 759


Name
Integer Set_super_vertex_text_colour(Element super,Integer vert,Integer col)
Description
For the super string super, set the colour number of the vertex text on the vertex number vert to
be col.
If there is only one Vertex Text Annotation for all the Vertex Text then the colour number for that
one Vertex Text Annotation is set to col regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 1091


Name
Integer Get_super_vertex_text_colour(Element super,Integer vert,Integer &col)
Description
For the super string super, return as col the colour number of the vertex text on vertex number
vert.
If there is only one Vertex Text Annotion for all the Vertex Text then the colour for that one Vertex
Text Annotation will be returned in col regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 1092


Name
Integer Set_super_vertex_text_angle(Element super,Integer vert,Real ang)
Description
For the super string super, set the angle of rotation of the vertex text on vertex number vert to
ang. ang is in radians and is measured counterclockwise from the x-axis.
See Vertex Text Annotation Definitions for the definition of angle.
If there is only one Vertex Text Annotion for all the Vertex Text then the angle for that one Vertex
Text Annotation is set to ang regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 760


Name
Integer Get_super_vertex_text_angle(Element super,Integer vert,Real &ang)
Description
For the super string super, return the angle of rotation of the vertex text on vertex number vert in
ang. ang is measured in radians and is measured counterclockwise from the x-axis.
See Vertex Text Annotation Definitions for the definition of angle.
If there is only one Vertex Text Annotion for all the Vertex Text then the angle for that one Vertex
Text Annotation will be returned in ang regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 761


Name
Integer Set_super_vertex_text_size(Element super,Integer vert,Real sz)
Description
For the super Element super, set the size of the vertex text on vertex number vert to sz.
If there is only one Vertex Text Annotion for all the Vertex Text then the size for that one Vertex
Text Annotation is set to sz regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 762


Name
Integer Get_super_vertex_text_size(Element super,Integer vert,Real &sz)
Description
For the super string super, return the size of the vertex text on vertex number vert as sz.
If there is only one Vertex Text Annotion for all the Vertex Text then the size for that one Vertex
Text Annotation will be returned in sz regardless of the value of vert.
A return value of 0 indicates the function call was successful.
Super String Element

Page 353

12d Model Programming Language Manual

ID = 763


Name
Integer Set_super_vertex_text_x_factor(Element super,Integer vert,Real xf)
Description
For the super string super, set the x factor of the vertex text on vertex number vert to xf.
If there is only one Vertex Text Annotion for all the Vertex Text then the x factor for that one
Vertex Text Annotation is set to xf regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 764


Name
Integer Get_super_vertex_text_x_factor(Element super,Integer vert,Real &x)
Description
For the super string super, return in xf the x factor of the vertex text on vertex number vert.
If there is only one Vertex Text Annotion for all the Vertex Text then the x factor for that one
Vertex Text Annotation will be returned in xf regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 765


Name
Integer Set_super_vertex_text_slant(Element super,Integer vert,Real sl)
Description
For the super string super, set the slant of the vertex text on vertex number vert to sl.
If there is only one Vertex Text Annotion for all the Vertex Text then the slant factor for that one
Vertex Text Annotation is set to sl regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 766


Name
Integer Get_super_vertex_text_slant(Element super,Integer vert,Real &s)
Description
For the super string super, return as sl the slant of the vertex text on vertex number vert.
If there is only one Vertex Text Annotion for all the Vertex Text then the slant for that one Vertex
Text Annotation will be returned in sl regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 767


Name
Integer Set_super_vertex_text_style(Element super,Integer vert,Text ts)
Description
For the super string super, set the textstyle of the vertex text on vertex number vert to ts.
If there is only one Vertex Text Annotion for all the Vertex Text then the textstyle for that one
Vertex Text Annotation is set to ts regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 768


Name
Integer Get_super_vertex_text_style(Element super,Integer vert,Text &ts)
Description
For the super string super, return as ts the textstyle of the vertex text on vertex number vert.
If there is only one Vertex Text Annotion for all the Vertex Text then the textstyle for that one
Vertex Text Annotation will be returned in ts regardless of the value of vert.
A return value of 0 indicates the function call was successful.
ID = 769


Name
Integer Set_super_vertex_text_ttf_underline(Element super super,Integer vert,Integer underline)
Description
For the Element super of type Super, set the underline state for the vertex text on vertex number
vert to be underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
If there is only one Vertex Text Annotion for all the Vertex Text then the underline state for that
one Vertex Text Annotation is set to underline regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates underline was successfully set.
ID = 2600


Name
Integer Get_super_vertex_text_ttf_underline(Element super,Integer vert,Integer &underline)
Description

Super String Element

Page 355

12d Model Programming Language Manual

For the Element super of type Super, get the underline state for the vertex text on vertex number
vert and return it as underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
If there is only one Vertex Text Annotion for all the Vertex Text then the underline state for that
one Vertex Text Annotation will be returned in underline regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates underline was successfully returned.
ID = 2601


Name
Integer Set_super_vertex_text_ttf_strikeout(Element super,Integer vert,Integer strikeout)
Description
For the Element super of type Super, set the strikeout state for the vertex text on vertex number
vert to be strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
If there is only one Vertex Text Annotion for all the Vertex Text then the strikeout state for that one
Vertex Text Annotation is set to strikeout regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates strikeout was successfully set.
ID = 2602


Name
Integer Get_super_vertex_text_ttf_strikeout(Element super,Integer vert,Integer &strikeout)
Description
For the Element super of type Super, get the strikeout state for the vertex text on vertex number
vert and return it as strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
If there is only one Vertex Text Annotion for all the Vertex Text then the strikeout state for that one
Vertex Text Annotation will be returned in strikeout regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates strikeout was successfully returned.
ID = 2603


Name
Page 356

Super String Element

Chapter 5 12dPL Library Calls

Integer Set_super_vertex_text_ttf_italic(Element super,Integer vert,Integer italic)
Description
For the Element super of type Super, set the italic state for the vertex text on vertex number vert
to be italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
If there is only one Vertex Text Annotion for all the Vertex Text then the italic state for that one
Vertex Text Annotation is set to italic regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates italic was successfully set.
ID = 2604


Name
Integer Get_super_vertex_text_ttf_italic(Element super,Integer vert,Integer &italic)
Description
For the Element super of type Super, get the italic state for the vertex text on vertex number vert
and return it as italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
If there is only one Vertex Text Annotion for all the Vertex Text then the italic state for that one
Vertex Text Annotation will be returned in italic regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates italic was successfully returned.
ID = 2605


Name
Integer Set_super_vertex_text_ttf_outline(Element elt,Integer vert,Integer outline)
Description
For the Element super of type Super, set the outline state for the vertex text on vertex number
vert to be outline.
If outline = 1, then for a true type font the text will be only shown in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
If there is only one Vertex Text Annotion for all the Vertex Text then the outline state for that one
Vertex Text Annotation is set to outline regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates outline was successfully set.
ID = 2775


Name
Integer Get_super_vertex_text_ttf_outline(Element elt,Integer vert,Integer &outline)
Description
For the Element super of type Super, get the outline state for the vertex text on vertex number
vert and return it as outline.
If outline = 1, then for a true type font the text will be shown only in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
If there is only one Vertex Text Annotion for all the Vertex Text then the outline state for that one
Vertex Text Annotation will be returned in outline regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates outline was successfully returned.
ID = 2776


Name
Integer Set_super_vertex_text_ttf_weight(Element super,Integer vert,Integer weight)
Description
For the Element super of type Super, set the weight for the vertex text on vertex number vert to
be weight.
For the list of allowable weights, go to Allowable Weights
If there is only one Vertex Text Annotion for all the Vertex Text then the weight for that one Vertex
Text Annotation is set to weight regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates weight was successfully set.
ID = 2606


Name
Integer Get_super_vertex_text_ttf_weight(Element super,Integer vert,Integer &weight)
Description
For the Element super of type Super, get the weight for the vertex text on vertex number vert
and return it as weight.
For the list of allowable weights, go to Allowable Weights
If there is only one Vertex Text Annotion for all the Vertex Text then the weight for that one Vertex
Text Annotation will be returned in weight regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Array or Att_Vertex_Value set.
A function return value of zero indicates weight was successfully returned.
ID = 2607


Name
Integer Set_super_vertex_text_whiteout(Element superstring,Integer vert,Integer c)
Description
For vertex number vert of the Super String Element superstring, set the colour number of the
colour used for the whiteout box around the vertex text, to be colour.
If no text whiteout is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
If there is only one Vertex Text Annotion for all the Vertex Text then the colour number of the
colour used for the whiteout box around the vertex text for that one Vertex Text Annotation is set
to c regardless of the value of vert.
A function return value of zero indicates the colour number was successfully set.
ID = 2755


Name
Integer Get_super_vertex_text_whiteout(Element superstring,Integer vert,Integer &c)
Description
For vertex number vert of the Super String Element superstring, get the colour number that is
used for the whiteout box around the vertex text. The whiteout colour is returned as Integer
colour.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
If there is only one Vertex Text Annotion for all the Vertex Text then the colour number that is
used for the whiteout box around the vertex text for that one Vertex Text Annotation will be
returned in c regardless of the value of vert.
A function return value of zero indicates the colour number was successfully returned.
ID = 2756


Name
Integer Set_super_vertex_text_border(Element superstring,Integer vert,Integer c)
Description
For vertex number vert of the Super String Element superstring, set the colour number of the
colour used for the border of the whiteout box around the vertex text, to be colour.
If no whiteout border is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
If there is only one Vertex Text Annotion for all the Vertex Text then the colour number of the
colour used for the border of the whiteout box around the vertex text for that one Vertex Text
Annotation is set to c regardless of the value of vert.
A function return value of zero indicates the colour number was successfully set.
ID = 2765


Name
Integer Get_super_vertex_text_border(Element superstring,Integer vert,Integer &c)
Description
For vertex number vert of the Super String Element superstring, get the colour number that is
used for the border of the whiteout box around the vertex text. The whiteout border colour is
returned as Integer colour.
NO_COLOUR is the returned as the colour number if there is no whiteout border.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
If there is only one Vertex Text Annotion for all the Vertex Text then the colour number that is
used for the border of the whiteout box around the vertex text for that one Vertex Text Annotation
will be returned in c regardless of the value of vert.
A function return value of zero indicates the colour number was successfully returned.
ID = 2766


Name
Integer Set_super_vertex_textstyle_data(Element super,Integer vert,Textstyle_Data d)
Description
For the Element super of type Super, set the Textstyle_Data for the vertex text on vertex number
vert to be d.
Setting a Textstyle_Data means that all the individual values that are contained in the
Textstyle_Data are set rather than having to set each one individually.
LJG? if the value is blank in the Textstyle_Data and the value is already set for the vertex text, is
the value left alone?
If there is only one Vertex Text Annotion for all the Vertex Text then the Textstyle_Data for that
one Vertex Text Annotation is set to d regardless of the value of vert.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Value set.
A function return value of zero indicates the Textstyle_Data was successfully set.
ID = 1663


Name
Integer Get_super_vertex_textstyle_data(Element elt,Integer vert,Textstyle_Data &d)
Description
For the Element super of type Super, get the Textstyle_Data for the vertex text on vertex number
vert and return it as d.
LJG? if a value is not set in the vertex text, what does it return?
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Vertex_Text_Value set.
If there is only one Vertex Text Annotion for all the Vertex Text then the Textstyle_Data for that

Page 360

Super String Element

Chapter 5 12dPL Library Calls

one Vertex Text Annotation will be returned in d regardless of the value of vert.
A function return value of zero indicates the Textstyle_Data was successfully returned.
ID = 1664


Name
Integer Set_super_use_segment_text_value(Element super,Integer use)
Description
Tell the super string super whether to use (set), or not use (remove) the dimension
Att_Segment_Text_Value.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Segment_Text_Value is used, then the same text is on all the segments of the super string.
Note if the dimension Att_Segment_Text_Array exists, this call is ignored.
See Vertex Text Dimensions for information on the Text dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1239


Name
Integer Get_super_use_segment_text_value(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Text_Value exists for the super string.
use is returned as 1 if the dimension Att_Segment_Text_Value exists.
use is returned as 0 if the dimension doesn’t exist.
If the dimension Att_Segment_Text_Value exists then the string has the same text for every
segment of the string.
See Segment Text Dimensions for information on the Segment Text dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1240


Name
Integer Set_super_use_segment_text_array(Element super,Integer use)
Description
Tell the super string super whether to use (set), or not use (remove), the dimension
Att_Segment_Text_Array.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Segment_Text_Array is used, then there is different text on each segment of the of the
string.
See Segment Text Dimensions for information on the Text dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1189


Name
Integer Get_super_use_segment_text_array(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Text_Array exists for the super string super.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
If Att_Segment_Text_Array is used, then there is different text on each segment of the of the
string.
See Segment Text Dimensions for information on the Text dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1190


Name
Integer Super_segment_text_value_to_array(Element super)
Description
If for the super string super the dimension Att_Segment_Text_Value exists and the dimension
Att_Segment_Text_Array does not exist then there will be one Segment Text txt for the entire
string.
In this case (when the dimension Att_Segment_Text_Value exists and the dimension
Att_Segment_Text_Array does not exist) this function sets the Att_Segment_Text_Array
dimension and new segment text created for each segment of super and the new segment text
is given the value txt.
See Segment Text Dimensions for information on the Text dimensions or Super String
Dimensions for information on all the dimensions.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 2179


Name
Integer Set_super_use_segment_annotation_value(Element super,Integer use)
Description
Tell the super string whether to use or remove, the dimension Att_Segment_Annotate_Value.
If the dimension Att_Segment_Annotate_Value exists and the dimension
Att_Segment_Annotate_Array doesn’t exist then the string has the one annotation which is used
for segment text on any segment of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.

Super String Element

Page 365

12d Model Programming Language Manual

A value for use of 1 sets the dimension and 0 removes it.
Note if the dimension Att_Segment_Annotate_Array exists, this call is ignored.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1193


Name
Integer Get_super_use_segment_annotation_value(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Annotate_Value exists for the super string.
If the dimension Att_Segment_Annotate_Value exists and the dimension
Att_Segment_Annotate_Array doesn’t exist then the string has the one annotation which is used
for segment text on any segment of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1194


Name
Integer Set_super_use_segment_annotation_array(Element super,Integer use)
Description
Tell the super string whether to use or remove the dimension Att_Segment_Annotate_Array.
If the dimension Att_Segment_Annotate_Array exists then the string has a different annotation
for the segment text on each segment of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1195


Name
Integer Get_super_use_segment_annotation_array(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Annotate_Array exists for the super string.
If the dimension Att_Segment_Annotate_Array exists then the string has a different annotation
Page 366

Super String Element

Chapter 5 12dPL Library Calls

for the segment text on each segment of the string.
See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1196


Name
Integer Super_segment_annotate_value_to_array(Element super)
Description
If for the super string super the dimension Att_Segment_Annotate_Value exists and the
dimension Att_Segment_Annotate_Array does not exist then there will be one Segment Text
Annotate annot for the entire string.
In this case (when the dimension Att_Segment_Annotate_Value exists and the dimension
Att_Segment_Annotate_Array does not exist) this function sets the
Att_Segment_Annotate_Array dimension and new segment Annotates created for each segment
of super and the new segment text Annotate is given the value annot
See Segment Text Annotation Dimensions for information on the Text dimensions or Super
String Dimensions for information on all the dimensions.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 2180


Name
Integer Set_super_segment_text(Element super,Integer seg,Text text)
Description
For the super Element super, set the segment text at segment number seg to be txt.
If there is only one Segment Text for all the segments then the text for that one Segment Text is
set to txt regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1191


Name
Integer Get_super_segment_text(Element super,Integer seg,Text &text)
Description
Super String Element

Page 367

12d Model Programming Language Manual

For the super Element super, return in txt the segment text on segment number seg.
If there is only one Segment Text for all the segments then the text for that one Segment Text will
be returned in txt regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1192


Name
Integer Set_super_segment_world_text(Element super)
Description
For an Element super of type Super, set the text unit for segment text to be world text.
See Segment Text Annotation Units for the definition of segment text units.
If there is Textstyle_Data for the segment text then this will override the
Set_super_segment_world_text call.
A return value of 0 indicates the function call was successful.
ID = 1233


Name
Integer Set_super_segment_device_text(Element super)
Description
For an Element super of type Super, set the text unit for segment text to be pixels (also known
as device text or screen text).
See Segment Text Annotation Units for the definition of segment text units.
If there is Textstyle_Data for the segment text then this will override the
Set_super_segment_device_text call.
A return value of 0 indicates the function call was successful.
ID = 1232


Name
Integer Set_super_segment_paper_text(Element super)
Description
For an Element super of type Super, set the text units for segment text to be paper (that is
millimetres).
See Segment Text Annotation Units for the definition of segment text units.
If there is Textstyle_Data for the segment text then this will override the
Set_super_segment_device_text call.
A return value of 0 indicates the function call was successful.
ID = 1634


Name
Integer Set_super_segment_text_type(Element super,Integer type)
Description
For the super Element super, set the segment text units to the value type.
See Segment Text Annotation Units for the definition of segment text units.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1234


Name
Integer Get_super_segment_text_type(Element super,Integer &type)
Description
For the super Element super, return in type the value of the segment text units.
See Segment Text Annotation Units for the definition of vertex text units.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1235


Name
Integer Set_super_segment_text_justify(Element super,Integer seg,Integer just)
Description
For the super string super, set the justification of the segment text on segment number seg to
just.
See Segment Text Annotation Definitions for the definition of justification.
If there is only one Segment Text Annotation for all the Segment Text then the justification for that
one Segment Text Annotation is set to just regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1197


Name
Integer Get_super_segment_text_justify(Element super,Integer seg,Integer &just)
Description
For the super string super, return the justification of the segment text on segment number seg in
just.
See Segment Text Annotation Definitions for the definition of justification.
If there is only one Segment Text Annotation for all the Segment Text then the justification for that

Super String Element

Page 369

12d Model Programming Language Manual

one Segment Text Annotation will be returned in just regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1198


Name
Integer Set_super_segment_text_offset_width(Element super,Integer seg,Real o)ff
Description
For the super string super, set the offset (offset width) of the segment text on segment number
seg to off.
See Segment Text Annotation Definitions for the definition of offset.
If there is only one Segment Text Annotation for all the Segment Text then the offset for that one
Segment Text Annotation is set to off regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1199


Name
Integer Get_super_segment_text_offset_width(Element super,Integer seg,Real &off)
Description
For the super string super, return the offset (offset width) of the segment text on segment
number seg in off.
See Segment Text Annotation Definitions for the definition of offset.
If there is only one Segment Text Annotation for all the Segment Text then the offset for that one
Segment Text Annotation will be returned in off regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1200


Name
Integer Set_super_segment_text_offset_height(Element super,Integer seg,Real raise)
Description
For the super string super, set the raise (offset height) of the segment text on segment number
seg to raise.
See Segment Text Annotation Definitions for the definition of raise.
If there is only one Segment Text Annotation for all the Segment Text then the raise for that one
Segment Text Annotation is set to raise regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
Page 370

Super String Element

Chapter 5 12dPL Library Calls

ID = 1201


Name
Integer Get_super_segment_text_offset_height(Element super,Integer seg,Real &raise)
Description
For the super string super, return the raise (offset height) of the segment text on segment
number seg in raise.
See Segment Text Annotation Definitions for the definition of raise.
If there is only one Segment Text Annotation for all the Segment Text then the raise for that one
Segment Text Annotation will be returned in raise regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1202


Name
Integer Set_super_segment_text_colour(Element super,Integer seg,Integer col)
Description
For the super string super, set the colour number of the segment text on segment number seg to
col.
If there is only one Segment Text Annotation for all the Segment Text then the colour number for
that one Segment Text Annotation is set to col regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1213


Name
Integer Get_super_segment_text_colour(Element super,Integer seg,Integer &col)
Description
For the super string super, return the colour number of the segment text on segment number
seg in col.
If there is only one Segment Text Annotation for all the Segment Text then the colour number for
that one Segment Text Annotation will be returned in col regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1214


Name

Super String Element

Page 371

12d Model Programming Language Manual

Integer Set_super_segment_text_angle(Element super,Integer seg,Real ang)
Description
For the super string super, set the angle of rotation of the segment text on segment number seg
to ang.
See Segment Text Annotation Definitions for the definition of angle. ang is measured in radians
and is measured counterclockwise from the direction of the segment.
If there is only one Segment Text Annotation for all the Segment Text then the angle for that one
Segment Text Annotation is set to angle regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1203


Name
Integer Get_super_segment_text_angle(Element super,Integer seg,Real &ang)
Description
For the super string super, return the angle of rotation of the segment text on segment number
seg in ang.
See Segment Text Annotation Definitions for the definition of angle. ang is measured in radians
and is measured counterclockwise from the direction of the segment.
If there is only one Segment Text Annotation for all the Segment Text then angle for that one
Segment Text Annotation will be returned in ang regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1204


Name
Integer Set_super_segment_text_size(Element super,Integer seg,Real sz)
Description
For the super string super, set the size of the segment text on segment number seg to sz.
If there is only one Segment Text Annotation for all the Segment Text then the size for that one
Segment Text Annotation is set to sz regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1205


Name
Integer Get_super_segment_text_size(Element super,Integer seg,Real &sz)
Description
For the super string super, return the size of the segment text on segment number seg in sz.

Page 372

Super String Element

Chapter 5 12dPL Library Calls

If there is only one Segment Text Annotation for all the Segment Text then size for that one
Segment Text Annotation will be returned in sz regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1206


Name
Integer Set_super_segment_text_x_factor(Element super,Integer seg,Real xf)
Description
For the super string super, set the x factor of the segment text on segment number seg to xf.
If there is only one Segment Text Annotation for all the Segment Text then the x factor for that
one Segment Text Annotation is set to xf regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1207


Name
Integer Get_super_segment_text_x_factor(Element super,Integer seg,Real &xf)
Description
For the super string super, return the x factor of the segment text on segment number seg in xf.
If there is only one Segment Text Annotation for all the Segment Text then the x factor for that
one Segment Text Annotation will be returned in xf regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1208


Name
Integer Set_super_segment_text_slant(Element super,Integer seg,Real sl)
Description
For the super string super, set the slant of the segment text on segment number seg to sl.
If there is only one Segment Text Annotation for all the Segment Text then the slant for that one
Segment Text Annotation is set to sl regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1209


Name

Super String Element

Page 373

12d Model Programming Language Manual

Integer Get_super_segment_text_slant(Element super,Integer seg,Real &sl)
Description
For the super string super, return the slant of the segment text on segment number seg in sl.
If there is only one Segment Text Annotation for all the Segment Text then the slant for that one
Segment Text Annotation will be returned in sl regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1210


Name
Integer Set_super_segment_text_style(Element super,Integer seg,Text ts)
Description
For the super string super, set the textstyle of the segment text on segment number seg to ts.
If there is only one Segment Text Annotation for all the Segment Text then the textstyle for that
one Segment Text Annotation is set to ts regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1211


Name
Integer Get_super_segment_text_style(Element super,Integer seg,Text &ts)
Description
For the super string super, return the textstyle of the segment text on segment number seg in ts.
If there is only one Segment Text Annotation for all the Segment Text then the textstyle for that
one Segment Text Annotation will be returned in ts regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A return value of 0 indicates the function call was successful.
ID = 1212


Name
Integer Set_super_segment_text_ttf_underline(Element super,Integer seg,Integer underline)
Description
For the super string super, set the underline state of the segment text on segment number seg
to underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the underline state for
Page 374

Super String Element

Chapter 5 12dPL Library Calls

that one Segment Text Annotation is set to underline regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates underline was successfully set.
ID = 2608


Name
Integer Get_super_segment_text_ttf_underline(Element super,Integer seg,Integer &underline)
Description
For the super string super, return the underline state of the segment text on segment number
seg in underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the underline state for
that one Segment Text Annotation will be returned in underline regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates underline was successfully returned.
ID = 2609


Name
Integer Set_super_segment_text_ttf_strikeout(Element super,Integer seg,Integer strikeout)
Description
For the super string super, set the strikeout state of the segment text on segment number seg to
strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the strikeout state for
that one Segment Text Annotation is set to strikeout regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates strikeout was successfully set.
ID = 2610


Name
Integer Get_super_segment_text_ttf_strikeout(Element super,Integer seg,Integer &strikeout)
Description
For the super string super, return the strikeout state of the segment text on segment number seg

Super String Element

Page 375

12d Model Programming Language Manual

in strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the strikeout state for
that one Segment Text Annotation will be returned in strikeout regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates strikeout was successfully returned.
ID = 2611


Name
Integer Set_super_segment_text_ttf_italic(Element super,Integer seg,Integer italic)
Description
For the super string super, set the italic state of the segment text on segment number seg to
italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the italic state for that
one Segment Text Annotation is set to italic regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates italic was successfully set.
ID = 2612


Name
Integer Get_super_segment_text_ttf_italic(Element super,Integer seg,Integer &italic)
Description
For the super string super, return the italic state of the segment text on segment number seg in
italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the italic state for that
one Segment Text Annotation will be returned in italic regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates italic was successfully returned.
ID = 2613


Name

Page 376

Super String Element

Chapter 5 12dPL Library Calls

Integer Set_super_segment_text_ttf_outline(Element elt,Integer seg,Integer outline)
Description
For the super string super, set the outline state of the segment text on segment number seg to
outline.
If outline = 1, then for a true type font the text will be only shown in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the outline state for
that one Segment Text Annotation is set to outline regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates outline was successfully set.
ID = 2777


Name
Integer Get_super_segment_text_ttf_outline(Element elt,Integer seg,Integer &outline)
Description
For the super string super, return the outline state of the segment text on segment number seg
in outline.
If outline = 1, then for a true type font the text will be shown only in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the outline state for
that one Segment Text Annotation will be returned in outline regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates outline was successfully returned.
ID = 2778


Name
Integer Set_super_segment_text_ttf_weight(Element super,Integer seg,Integer weight)
Description
For the super string super, set the weight of the segment text on segment number seg to
weight.
If there is only one Segment Text Annotation for all the Segment Text then the weight for that one
Segment Text Annotation is set to weight regardless of the value of seg.
For the list of allowable weights, go to Allowable Weights
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates weight was successfully set.
ID = 2614


Name

Super String Element

Page 377

12d Model Programming Language Manual

Integer Get_super_segment_text_ttf_weight(Element super,Integer seg,Integer &weight)
Description
For the super string super, return the weight of the segment text on segment number seg in
weight.
For the list of allowable weights, go to Allowable Weights
If there is only one Segment Text Annotation for all the Segment Text then the weight for that one
Segment Text Annotation will be returned in weight regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates weight was successfully returned.
ID = 2615


Name
Integer Set_super_segment_text_whiteout(Element superstring,Integer seg,Integer c)
Description
For the super string super, set the colour number of the colour used for the whiteout box around
the segment text on segment number seg to c.
If no text whiteout is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the colour number of
the colour used for the whiteout box around the segment text for that one Segment Text
Annotation is set to c regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the colour number was successfully set.
ID = 2757


Name
Integer Get_super_segment_text_whiteout(Element superstring,Integer seg,Integer &c)
Description
For the super string super, return the colour number that is used for the whiteout box around the
segment text on segment number seg in c.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the colour number that
is used for the whiteout box around the segment text for that one Segment Text Annotation will
be returned in c regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the colour number was successfully returned.
ID = 2758


Name
Integer Set_super_segment_text_border(Element superstring,Integer seg,Integer c)
Description
For the super string super, set the colour number of the colour used for the border of the
whiteout box around the segment text on segment number seg to c.
If no text whiteout border is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the colour number of
the colour used for border of the whiteout box around the segment text for that one Segment Text
Annotation is set to c regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the colour number was successfully set.
ID = 2767


Name
Integer Get_super_segment_text_border(Element superstring,Integer seg,Integer &c)
Description
For the super string super, return the colour number that is used as the border of the whiteout
box around the segment text on segment number seg in c.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
If there is only one Segment Text Annotation for all the Segment Text then the colour number that
is used for the border around the whiteout box around the segment text for that one Segment
Text Annotation will be returned in c regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the colour number was successfully returned.
ID = 2768


Name
Integer Set_super_segment_textstyle_data(Element elt,Integer seg,Textstyle_Data d)
Description
For the super string super, set the Textstyle_Data of the segment text on segment number seg
to d.
Setting a Textstyle_Data means that all the individual values that are contained in the
Textstyle_Data are set rather than having to set each one individually.
LJG? if the value is blank in the Textstyle_Data and the value is already set for the segment text,
is the value left alone?
If there is only one Segment Text Annotation for all the Segment Text then the Textstyle_Data for

Super String Element

Page 379

12d Model Programming Language Manual

that one Segment Text Annotation is set to d regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the Textstyle_Data was successfully set.
ID = 1665


Name
Integer Get_super_segment_textstyle_data(Element elt,Integer seg,Textstyle_Data &d)
Description
For the super string super, return the Textstyle_Data for the segment text on segment number
seg in d.
Using a Textstyle_Data means that all the individual values for the Segment Text Annotation are
returned in the Textstyle_Data rather than getting each one individually.
LJG? if a value is not set in the segment text, what does it return?
If there is only one Segment Text Annotation for all the Segment Text then the Textstyle_Data for
that one Segment Text Annotation will be returned in d regardless of the value of seg.
A non-zero function return value is returned if super is not of type Super.
A function return value of zero indicates the Textstyle_Data was successfully returned.
ID = 1666


Name
Integer Set_super_use_hatch(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Hatch_Value is used or
removed.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have 2 angle hatching.
If use is 0, the dimension is removed. If the string had hatching then the hatching will be
removed.
A return value of 0 indicates the function call was successful.
ID = 1464


Name
Integer Get_super_use_hatch(Element super,Integer &use)
Description
Query whether the dimension Att_Hatch_Value exists for the super string super.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists and hatching is enabled for the string.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1465


Name
Integer Set_super_hatch_colour(Element super,Integer col_1,Integer col_2)
Description
For the super Element super, set the colour of the first hatch lines to the Integer colour col_1and
the colour of the second hatch lines to the Integer colour col_2.

Super String Element

Page 381

12d Model Programming Language Manual

If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1466


Name
Integer Get_super_hatch_colour(Element super,Integer &col_1,Integer &col_2)
Description
For the super Element super, return the colour of the first hatch lines as col_1 and the colour of
the second hatch lines as col_2.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1467


Name
Integer Set_super_hatch_angle(Element super,Real ang_1,Real ang_2)
Description
For the super Element super, set the angle of the first hatch lines to the angle ang_1 and the
angle of the second hatch lines to the angle ang_2. The angles are in radians and measured
counterclockwise from the x-axis.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1468


Name
Integer Get_super_hatch_angle(Element super,Real &ang_1,Real &ang_2)
Description
For the super Element super, return the angle of the first hatch lines as ang_1 and the angle of
the second hatch lines as ang_2. The angles are in radians and measured counterclockwise
from the x-axis.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1469


Name
Integer Set_super_hatch_spacing(Element super,Real dist_1,Real dist_2)
Description
For the super Element super, set the distance between the first hatch lines to the dist_1 and the

Page 382

Super String Element

Chapter 5 12dPL Library Calls

distance between the second hatch lines of dist_2. The units for dist_1 and dist_2 are given by
other calls.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1470


Name
Integer Get_super_hatch_spacing(Element super,Real &dist_1,Real &dist_2)
Description
For the super Element super, return the distance of the first hatch lines as dist_1 and the
distance of the second hatch lines as dist_2. The units for dist_1 and dist_2 are given by other
calls.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1471


Name
Integer Set_super_hatch_origin(Element super,Real x,Real y)
Description
For the super Element super, both sets of hatch lines go through the point (x,y). The units for x
and y are given by other calls.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1472


Name
Integer Get_super_hatch_origin(Element super,Real &x,Real &y)
Description
For the super Element super, return the origin that both sets of hatch lines go through as (x,y).
The units for x and y are given by other calls.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1473


Name
Integer Set_super_hatch_device(Element super)
Description

Super String Element

Page 383

12d Model Programming Language Manual

For the super Element super, set the units for the hatch spacing and the hatch origin to be
device units.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1474


Name
Integer Set_super_hatch_world(Element super)
Description
For the super Element super, set the units for the hatch spacing and the hatch origin to be world
units.
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1475


Name
Integer Set_super_hatch_type(Element super,Integer type)
Description
For the super Element super, set the units for the hatch spacing and the hatch origin to be:
if type = 0 then device units
if type = 1 then world units
if type = 2 then paper units
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1476


Name
Integer Get_super_hatch_type(Element super,Integer &type)
Description
For the super Element super, get the units for the hatch spacing and the hatch origin. The units
are returned as type and the values are:
if type = 0 then device units
if type = 1 then world units
if type = 2 then paper units
If hatching is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1477


Name
Integer Set_super_use_solid(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Solid_Value is used or
removed.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have solid fill.
If use is 0, the dimension is removed. If the string had solid fill then the solid fill will be removed.
A return value of zero indicates the function call was successful.
ID = 1478


Name
Integer Get_super_use_solid(Element super,Integer &use)
Description
Query whether the dimension Att_Solid_Value exists for the super string super.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists and solid fill is enabled for the string.
use is returned as 0 if the dimension doesn’t exist.
A return value of zero indicates the function call was successful.
ID = 1479


Name
Integer Set_super_solid_colour(Element super,Integer colour)
Description
For the super Element super, set the colour of the solid fill to the colour number colour.
If solid fill is not enabled for super, then a non-zero return code is returned.
A return value of zero indicates the function call was successful.
ID = 1480


Name
Integer Get_super_solid_colour(Element super,Integer &colour)
Description
For the super Element super, get the colour number of the solid fill and return it in colour.
If solid fill is not enabled for super, then a non-zero return code is returned.

Super String Element

Page 385

12d Model Programming Language Manual

A return value of zero indicates the function call was successful.
ID = 1481


Name
Integer Set_super_solid_blend(Element super,Real blend)
Description
For the super Element super, set the blend of the solid fill to the blend.
If solid fill is not enabled for super, then a non-zero return code is returned.
A return value of zero indicates the function call was successful.
ID = 2165


Name
Integer Get_super_solid_blend(Element super,Real &blend)
Description
For the super Element super, get the blend value of the solid fill and return it in blend.
blend will have a value between 0.0 for showing no colour fill, and 1.0 for showing full colour fill.
If solid fill is not enabled for super, then a non-zero return code is returned.
A return value of zero indicates the function call was successful.
ID = 2166


Name
Integer Set_super_use_bitmap(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Bitmap_Value is used or
removed.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have bitmap fill.
If use is 0, the dimension is removed. If the string had a bitmap fill then the bitmap fill will be
removed.
A return value of zero indicates the function call was successful.
ID = 1482


Name
Integer Get_super_use_bitmap(Element super,Integer &use)
Description
Query whether the dimension Att_Bitmap_Value exists for the super string super.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists and bitmap fill is enabled for the string.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1483


Name
Integer Set_super_bitmap(Element super,Text filename)
Description
For the super Element super, set the bitmap to be the image in the file of name filename.
The image can be bmps or ?.
If bitmap fill is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1484


Name
Integer Get_super_bitmap(Element super,Text &filename)
Description

Super String Element

Page 387

12d Model Programming Language Manual

For the super Element super, get the file name of the bitmap fill and return it in filename.
If bitmap fill is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1485


Name
Integer Set_super_bitmap_origin(Element super,Real x,Real y)
Description
For the super Element super, the left hand corner of the bitmap is placed at the point (x,y). The
units for x and y are given in other functions.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1486


Name
Integer Get_super_bitmap_origin(Element super,Real &x,Real &y)
Description
For the super Element super, return the (x,y) point of the left hand corner of the bitmap. The
units for x and y are given in other functions.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1487


Name
Integer Set_super_bitmap_transparent(Element super,Integer colour)
Description
For the super Element super, set the colour with colour number colour to be transparent in the
bitmap.
If bitmap fill is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1488


Name
Integer Get_super_bitmap_transparent(Element super,Integer &colour)
Description
For the super Element super, get the transparency colour and return it in colour.

Page 388

Super String Element

Chapter 5 12dPL Library Calls

If bitmap fill is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1489


Name
Integer Set_super_bitmap_device(Element super)
Description
For the super Element super, set the units for the bitmap width and height to be device units.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1490


Name
Integer Set_super_bitmap_world(Element super)
Description
For the super Element super, set the units for the width and height of the bitmap to be world
units.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1491


Name
Integer Set_super_bitmap_type(Element super,Integer type)
Description
For the super Element super, set the units for the width and height of the bitmap to be:
if type = 0 then device units
if type = 1 then world units
if type = 2 then paper units
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1492


Name
Integer Get_super_bitmap_type(Element super,Integer &type)
Description
For the super Element super, get the units for width and height of the bitmap. The units are
returned as type and the values are:

Super String Element

Page 389

12d Model Programming Language Manual

if type = 0 then device units
if type = 1 then world units
if type = 2 then paper units
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1493


Name
Integer Set_super_bitmap_angle(Element super,Real ang)
Description
For the super Element super, set the angle to rotate the bitmap to be ang. The angle is in
radians and measured counterclockwise from the x-axis
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1494


Name
Integer Get_super_bitmap_angle(Element super,Real &ang)
Description
For the super Element super, get the angle of rotation of bitmap and return it in ang. The angle is
in radians and measured counterclockwise from the x-axis
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1495


Name
Integer Set_super_bitmap_size(Element super,Real w,Real h)
Description
For the super Element super, scale the bitmap to have the width w and height h in the units set
in other bitmap calls.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1496


Name
Integer Get_super_bitmap_size(Element super,Real &w,Real &h)
Description

Page 390

Super String Element

Chapter 5 12dPL Library Calls

For the super Element super, get the width and height that the bitmap was scaled to. The width
is returned in w and the height in h. The units have been set in other bitmap calls.
If bitmap is not enabled for super, then a non-zero return code is returned.
A return value of 0 indicates the function call was successful.
ID = 1497


Name
Integer Set_super_use_pattern(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Pattern_Value is used or
removed.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have a pattern.
If use is 0, the dimension is removed. If the string had a pattern then the pattern will be removed.
A return value of 0 indicates the function call was successful.
ID = 1686


Name
Integer Get_super_use_pattern(Element super,Integer &use)
Description
Query whether the dimension Att_Pattern_Value exists for the super string super.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1693


Name
Integer Set_super_use_acad_pattern(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Autocad_Pattern_Value is
used or removed.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have an Autocad pattern.
If use is 0, the dimension is removed. If the string had an Autocad pattern then the Autocad
pattern will be removed.
A return value of 0 indicates the function call was successful.
ID = 2141


Name
Integer Get_super_use_acad_pattern(Element super,Integer &use)
Description
Query whether the dimension Att_Autocad_Pattern_Value exists for the super string super.
See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on this
dimension or Super String Dimensions for information on all dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 2142


Name
Integer Set_super_use_hole(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Hole_Value is used or
removed.
See Hole Dimension for information on the hole dimension or Super String Dimensions for
information on all dimensions.
If use is 1, the dimension is set. That is, the super string can have holes.
If use is 0, the dimension is removed. If the string had holes then the holes will be removed.
A return value of 0 indicates the function call was successful.
ID = 1456


Name
Integer Get_super_use_hole(Element super,Integer &use)
Description
Query whether the dimension Att_Hole_Value exists for the super string super.
See Hole Dimension for information on hole dimensions or Super String Dimensions for
information on all dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1457


Name
Integer Super_add_hole (Element super,Element hole)
Description
Add the Element hole as a hole to the super Element super.
The operation will fail if super already belongs to a model and a non-zero return value returned.
So if an existing string in a model is to be used as a hole, the string must be copied and the copy
used as the hole.
A return value of zero indicates the function call was successful.
ID = 1460


Name
Integer Get_super_holes(Element super,Integer &numberless)

Page 394

Super String Element

Chapter 5 12dPL Library Calls

Description
For the Element super of type Super, the number of holes for the super string is returned as
no_holes.
If holes are not enabled for the super string then a non-zero return code is returned and
no_holes is set to 0.
A return value of 0 indicates the function call was successful.
ID = 1458


Name
Integer Super_get_hole(Element super,Integer hole_no,Element &hole)
Description
For the Element super of type Super, the holes number hole_no is returned as the super
Element hole.
If hole needs to be used in 12d Model and added to a model, then the Element hole must be
copied and added to the model.
If hole_no is less than zero or greater than the number of holes in super, then a non-zero return
code is returned. The Element hole is then undefined.
A return value of 0 indicates the function call was successful.
ID = 1459


Name
Integer Super_delete_hole(Element super,Element hole)
Description
If Super_get_hole is used to get the hole hole from the Element super then this option can be
used to delete hole from super.
A return value of zero indicates the function call was successful.
ID = 1461


Name
Integer Super_delete_hole(Element super,Integer hole_no)
Description
Delete the hole number hole_no from the Element super.
If there is no hole hole_no, the operation will fail and a non-zero return value is returned.
A return value of zero indicates the function call was successful.
ID = 1462


Name

Super String Element

Page 395

12d Model Programming Language Manual

Integer Super_delete_all_holes(Element super)
Description
Delete all the holes from the Element super.
A return value of 0 indicates the function call was successful.
ID = 1463


Name
Integer Set_super_use_segment_colour(Element super,Integer use)
Description
Tell the super string whether to use or remove the colour dimension Att_Colour_Array.
A value for use of 1 sets the dimension and 0 removes it.
See Colour Dimension for information on Colour dimensions or Super String Dimensions for
information on all dimensions.
A return value of 0 indicates the function call was successful.
ID = 726


Name
Integer Get_super_use_segment_colour(Element super,Integer &use)
Description
Query whether the colour dimension Att_Colour_Array exists for the super string.
use is returned as 1 if the dimension Att_Colour_Array exists, or 0 if the dimension doesn’t exist.
See Colour Dimension for information on Colour dimensions or Super String Dimensions for
information on all dimensions.
A return value of 0 indicates the function call was successful.
ID = 727


Name
Integer Set_super_segment_colour(Element super,Integer seg,Integer colour)
Description
For the Element super of type Super, set the colour number for the segment number seg to be
colour.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the colour dimension Att_Colour_Array set.
See Colour Dimension for information on Colour dimensions or Super String Dimensions for
information on all dimensions.
A function return value of zero indicates colour was successfully set.
ID = 728


Name
Integer Get_super_segment_colour(Element super,Integer seg,Integer &colour)

Super String Element

Page 397

12d Model Programming Language Manual

Description
For the Element super of type Super, get the colour number for the segment number seg and
return it as colour.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the colour dimension Att_Colour_Array set.
See Colour Dimension for information on Colour dimensions or Super String Dimensions for
information on all dimensions.
A function return value of zero indicates colour was successfully returned.
ID = 729


Name
Integer Set_super_use_segment_geometry(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Geom_Array is used or
removed.
If Att_Geom_Array exists, the string can have Segments (which can be straights, arcs or
transitions) between the vertices of the super string.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
If use is 1, the dimension is set. That is, the segments of the super string are not just straights
but of type Segments (which can be straights, arcs or transitions).
If use is 0, the dimension is removed. If the string had Segments for segments then they will be
removed.
A return value of 0 indicates the function call was successful.
ID = 1838


Name
Integer Get_super_use_segment_geometry(Element super,Integer &use)
Description
Query whether the dimension Att_Geom_Array exists for the super string super.
If Att_Geom_Array exists, the string can have Segments (which can be straights, arcs or
transitions) between the vertices of the super string.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists. That is, the segments of the super string are not
just straights but of type Segments (which can be straights, arcs or transitions).
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1839


Name
Integer Set_super_segment_spiral(Element elt,Integer seg,Spiral trans)
Description
For the Element super of type Super, set the segment number seg to be the transition trans.
A non-zero function return value is returned if super is not of type Super, or if super does not

Super String Element

Page 399

12d Model Programming Language Manual

have the dimension Att_Geom_Array set.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the transition was successfully set.
ID = 1840


Name
Integer Get_super_segment_spiral(Element elt,Integer seg,Spiral &trans)
Description
For the Element super of type Super, get the Spiral for the segment number seg and return it as
trans.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Geom_Array set, or if the segment is not a Spiral.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the Spiral was successfully returned.
ID = 1841


Name
Integer Set_super_segment_geometry(Element elt,Integer seg,Segment geom)
Description
For the Element super of type Super, set the segment number seg to be the Segment geom.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Geom_Array set.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the segment was successfully set.
ID = 1844


Name
Integer Get_super_segment_geometry(Element elt,Integer seg,Segment &geom)
Description
For the Element super of type Super, get the Segment for the segment number seg and return it
as geom.
A non-zero function return value is returned if super is not of type Super, or if super does not
have the dimension Att_Geom_Array set.
See Segment Geometry Dimension for information on the Segment Geometry dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the Spiral was successfully returned.
ID = 1845


Name
Integer Set_super_use_extrude(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Extrude_Value is used or
removed.
If Att_Extrude_Value is set then an extrusion is allowed on the super string.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
If use is 1, the dimension is set and an extrusion is allowed.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 1679


Name
Integer Get_super_use_extrude(Element super,Integer &use)
Description
Query whether the dimension Att_Extrude_Value exists for the super string super.
If Att_Extrude_Value is set then an extrusion is allowed on the super string.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1680


Name
Integer Super_append_string_extrude(Element super,Element shape)
Description

Page 402

Super String Element

Chapter 5 12dPL Library Calls

For the Element super of type Super which has the dimension Att_Extrude_Value set, add the
Element shape to the list of Elements that are extruded along super. Note: shape must also be
of type Super.
A non-zero function return value is returned if super or shape is not of type Super, or if the
Dimension Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the shape was successfully added to the list.
ID = 2643


Name
Integer Super_append_extrude(Element super,Text extrude_name)
Description
For the Element super of type Super, get the shape called extrude_name from the file
extrudes.4d and append it to the list of extrudes for super.
Note: the extrudes in the extrudes.4d file can be more complex than just a simple profile swept
along the string. It also included interval extrudes.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Extrude_Value is not set, or if there is no extrude_name in extrudes.4d.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1923


Name
Integer Super_append_string_extrude(Element string,Element shape,Integer use_string_colour,Integer
shape_mirror,Real start_chainage,Real final_chainage)
Description
what is shape_mirror 0/1
use_string_colour 1 use the shape string colour, 0 use string colour colour
<no description>
ID = 2644


Name
Integer Get_super_extrudes(Element super,Integer &num_extrudes)
Description
For the Element super of type Super and has the dimension Att_Extrude_Value set, get the
number of Element that are in the list of extrudes for super and return it in num_extrudes.
A non-zero function return value is returned if super is not of type Super, or if the Dimension

Super String Element

Page 403

12d Model Programming Language Manual

Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1921


Name
Integer Super_insert_extrude(Element super,Text extrude_name,Integer where)
Description
For the Element super of type Super, get the shape called extrude_name from the file
extrudes.4d and insert into the list of extrudes at position number where. The existing extrudes
from position number where upwards are all moved up one position in the list.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Extrude_Value is not set, or if there is no extrude_name in extrudes.4d.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1922


Name
Integer Super_delete_extrude(Element super,Integer extrude_num)
Description
For the Element super of type Super, delete the extrude in position number extrude_num from
the list of extrusions for super.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1924


Name
Integer Super_delete_all_extrudes(Element super)
Description
Delete all extrudes.
For the Element super of type Super, delete all the extrudes from the list of extrusions for super.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.

Page 404

Super String Element

Chapter 5 12dPL Library Calls

A return value of 0 indicates the function call was successful.
ID = 1925


Name
Integer Set_super_extrude(Element super,Element shape)
Description
LEGACY FUNCTION - DO NOT USE
Many moons ago there was only one profile that could be extruded along the string.
Later that was modified and there is now a list of profiles that are extruded.
This call is from before there was a list and will behave as if there is no list and will delete the list.
Hence this option should not be used.
For the Element super of type Super which has the dimension Att_Extrude_Value set, set
shape to be the Element that is extruded along super.
Note: shape must also be of type Super.
WARNING: If this function is called and there is a list of extrudes, the entire list will be
deleted.
A non-zero function return value is returned if super or shape is not of type Super, or if the
Dimension Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the shape was successfully set.
ID = 1681


Name
Integer Get_super_extrude(Element super,Element &shape)
Description
LEGACY FUNCTION - DO NOT USE
Many moons ago there was only one profile that could be extruded along the string.
Later that was modified and there is now a list of profiles that are extruded.
This call will only return one profile. Hence this option should not be used.
For the Element super of type Super and has the dimension Att_Extrude_Value set, get the
Element shape that defines the 2d profile that is extruded along super.
Note: shape will be of type Super.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Extrude_Value is not set.
See Extrude Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the shape was successfully returned.
ID = 1682


Name
Integer Set_super_use_interval(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Interval_Value is used or
removed.
If Att_Interval_Value is set then there is a Real interval_distance and a Real chord_arc_distance
stored for the super string.
See Interval Dimensions for information on the Interval dimensions or Super String Dimensions
for information on all the dimensions.
If use is 1, the dimension is set and the two intervals are stored.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 1702


Name
Integer Get_super_use_interval(Element super,Integer &use)
Description
Query whether the dimension Att_Interval_Value exists for the super string super.
If Att_Interval_Value is set then there is a Real interval_distance and a Real chord_arc_distance
stored for the super string.
See Interval Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1705


Name
Integer Set_super_interval_distance(Element super,Real value)
Description
For the Element super of type Super which has the dimension Att_Interval_Value set, set the
interval_distance to value.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Interval_Value is not set.
See Interval Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the interval_distance was successfully set.
ID = 1704


Name
Integer Get_super_interval_distance(Element super,Real &value)
Description
For the Element super of type Super and has the dimension Att_Interval_Value set, get the
interval_distance for super and return it in value.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Interval_Value is not set.
See Interval Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the interval_distance was successfully returned.
ID = 1707


Name
Integer Set_super_interval_chord_arc(Element super,Real value)
Description
Description
For the Element super of type Super which has the dimension Att_Interval_Value set, set the
chord_arc_distance to value.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Interval_Value is not set.
See Interval Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the chord_arc_distance was successfully set.
ID = 1703


Name
Integer Get_super_interval_chord_arc(Element super,Real &value)

Super String Element

Page 407

12d Model Programming Language Manual

Description
For the Element super of type Super and has the dimension Att_Interval_Value set, get the
chord_arc_distance for super and return it in value.
A non-zero function return value is returned if super is not of type Super, or if the Dimension
Att_Interval_Value is not set.
See Interval Dimensions for information on the Extrude dimensions or Super String Dimensions
for information on all the dimensions.
A function return value of zero indicates the chord_arc_distance was successfully returned.
ID = 1706


Name
Integer Set_super_use_vertex_attribute(Element super,Integer use)
Description
Tell the super string whether to use. or remove, the dimension Att_Vertex_Attribute_Array.
If Att_Vertex_Attribute_Array exists then there can be a type Attributes for each vertex.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
If use is 1, the dimension is set and an Attributes is allowed on each vertex.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 770


Name
Integer Get_super_use_vertex_attribute(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Attribute_Array exists for the super string.
If Att_Vertex_Attribute_Array exists then there can be a type Attributes for each vertex.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 771


Name
Integer Set_super_vertex_attributes(Element super,Integer vert,Attributes att)
Description
For the Element super, set the Attributes for the vertex number vert to att.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, then a
non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute is successfully set.
ID = 2003


Name
Integer Get_super_vertex_attributes(Element super,Integer vert,Attributes &att)
Description
For the Element super, return the Attributes for the vertex number vert as att.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or the
vertex number vert has no Attributes, then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute is successfully returned.
ID = 2002


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Text att_name,Uid &uid)
Description
For the Element super, get the attribute called att_name for the vertex number vert and return
the attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or the
attribute is not of type Uid then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2004


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Text att_name,Attributes &att)
Description
For the Element super, get the attribute called att_name for the vertex number vert and return
the attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or the
attribute is not of type Attributes then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2005


Name
Integer Get_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Uid &uid)

Page 410

Super String Element

Chapter 5 12dPL Library Calls

Description
For the Element super, get the attribute with number att_no for the vertex number vert and
return the attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or the
attribute is not of type Uid then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2006


Name
Integer Get_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Attributes &att)
Description
For the Element super, get the attribute with number att_no for the vertex number vert and
return the attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or the
attribute is not of type Attributes then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2007


Name
Integer Set_super_vertex_attribute(Element elt,Integer vert,Text att_name,Uid uid)
Description
For the Element super and on the vertex number vert,
if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to uid.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2008


Name

Super String Element

Page 411

12d Model Programming Language Manual

Integer Set_super_vertex_attribute(Element elt,Integer vert,Text att_name,Attributes att)
Description
For the Element super and on the vertex number vert,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2009


Name
Integer Set_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Uid uid)
Description
For the Element super and on the vertex number vert, if the attribute number att_no exists and
it is of type Uid, then its value is set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2010


Name
Integer Set_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Attributes att)
Description
For the Element super and on the vertex number vert, if the attribute number att_no exists and
it is of type Attributes, then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2011


Name
Integer Super_vertex_attribute_exists(Element elt,Integer vert,Text att_name,Integer &num)

Page 412

Super String Element

Chapter 5 12dPL Library Calls

Description
Checks to see if for vertex number vert, an attribute of name att_name exists, and if it does,
return the number of the attribute as num.
A non-zero function return value indicates the attribute exists and its number was successfully
returned.
A zero function return value indicates the attribute does not exist, or the number was not
successfully returned.
Warning - this is the opposite to most 12dPL function return values
ID = 773


Name
Integer Super_vertex_attribute_exists(Element elt,Integer vert,Text att_name)
Description
Checks to see if for vertex number vert, an attribute of name att_name exists.
A non-zero function return value indicates the attribute exists.
A zero function return value indicates the attribute does not exist.
Warning - this is the opposite to most 12dPL function return values
ID = 772


Name
Integer Super_vertex_attribute_delete(Element super,Integer vert,Integer att_no)
Description
For the Element super, delete the attribute with attribute number att_no for vertex number vert.
If the Element super is not of type Super or super has no vertex number vert, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 775


Name
Integer Super_vertex_attribute_delete(Element super,Integer vert,Text att_name)
Description
For the Element super, delete the attribute with the name att_name for vertex number vert.
If the Element super is not of type Super or super has vertex number vert, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 774


Name
Integer Super_vertex_attribute_delete_all(Element super,Integer vert)
Description
Delete all the attributes of vertex number vert of the super string super.
A function return value of zero indicates the function was successful.
ID = 776


Name
Integer Super_vertex_attribute_dump(Element super,Integer vert)
Description
Write out information to the Output Window about the vertex attributes for vertex number vert of
the super string super.
A function return value of zero indicates the function was successful.
ID = 777


Name
Integer Super_vertex_attribute_debug(Element super,Integer vert)
Description
Write out even more information to the Output Window about the vertex attributes for vertex
number vert of the super string super.
A function return value of zero indicates the function was successful.
ID = 778


Name
Integer Get_super_vertex_number_of_attributes(Element super,Integer vert,Integer &no_atts)
Description
Get the total number of attributes for vertex number vert of the Element super.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the number of attributes was successfully returned.
ID = 779


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Text att_name,Text &txt)
Description
For the Element super, get the attribute called att_name for the vertex number vert and return
the attribute value in txt. The attribute must be of type Text.
Page 414

Super String Element

Chapter 5 12dPL Library Calls

If the Element is not of type Super or the attribute is not of type Text then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 780


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Text att_name,Integer &int)
Description
For the Element super, get the attribute called att_name for the vertex number vert and return
the attribute value in int. The attribute must be of type Integer.
If the Element is not of type Super or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 781


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Text att_name,Real &real)
Description
For the Element super, get the attribute called att_name for the vertex number vert and return
the attribute value in real. The attribute must be of type Real.
If the Element is not of type Super or the attribute is not of type Real then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 782


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Integer att_no,Text &txt)
Description
For the Element super, get the attribute number att_no for the vertex number vert and return the
attribute value in txt. The attribute must be of type Text.
If the Element is not of type Super or the attribute is not of type Text then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 783


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Integer att_no,Integer &int)
Description
For the Element super, get the attribute number att_no for the vertex number vert and return the
attribute value in int. The attribute must be of type Integer.
If the Element is not of type Super or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 784


Name
Integer Get_super_vertex_attribute(Element super,Integer vert,Integer att_no,Real &real)
Description
For the Element super, get the attribute number att_no for the vertex number vert and return the
attribute value in real. The attribute must be of type Real.
If the Element is not of type Super or the attribute is not of type Real then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 785


Name
Integer Get_super_vertex_attribute_name(Element super,Integer vert,Integer att_no,Text &txt)
Description
For vertex number vert of the Element super, get the name of the attribute number att_no. The
attribute name is returned in txt.
A function return value of zero indicates the attribute name was successfully returned.
ID = 786


Name
Integer Get_super_vertex_attribute_length(Element super,Integer vert,Text att_name,Integer &att_len)
Description

Page 416

Super String Element

Chapter 5 12dPL Library Calls

For vertex number vert of the Element super, get the length (in bytes) of the attribute with the
name att_name. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 789


Name
Integer Get_super_vertex_attribute_length(Element super,Integer vert,Integer att_no,Integer &att_len)
Description
For vertex number vert of the Element super, get the length (in bytes) of the attribute number
att_no. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for attributes of type Text and Binary.
ID = 790


Name
Integer Get_super_vertex_attribute_type(Element super,Integer vert,Text att_name,Integer &att_type)
Description
For vertex number vert of the Element super, get the type of the attribute with name att_name.
The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 787


Name
Integer Get_super_vertex_attribute_type(Element super,Integer vert,Integer att_no,Integer &att_type)
Description
For vertex number vert of the Element super, get the type of the attribute with attribute number
att_no. The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 788


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Text att_name,Text txt)
Description

Super String Element

Page 417

12d Model Programming Language Manual

For the Element super and on the vertex number vert,
if the attribute called att_name does not exist then create it as type Text and give it the value
txt.
if the attribute called att_name does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 791


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Text att_name,Integer int)
Description
For the Element super and on the vertex number vert,
if the attribute called att_name does not exist then create it as type Integer and give it the value
int.
if the attribute called att_name does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 792


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Text att_name,Real real)
Description
For the Element super and on the vertex number vert,
if the attribute called att_name does not exist then create it as type Real and give it the value
real.
if the attribute called att_name does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 793


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Integer att_no,Text txt)
Description
For the Element super and on the vertex number vert,
if the attribute with number att_no does not exist then create it as type Text and give it the
value txt.
if the attribute with number att_no does exist and it is type Text, then set its value to txt.

Page 418

Super String Element

Chapter 5 12dPL Library Calls

If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 794


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Integer att_no,Integer int)
Description
For the Element super and on the vertex number vert,
if the attribute with number att_no does not exist then create it as type Integer and give it the
value int.
if the attribute with number att_no does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 795


Name
Integer Set_super_vertex_attribute(Element super,Integer vert,Integer att_no,Real real)
Description
For the Element super and on the vertex number vert,
if the attribute with number att_no does not exist then create it as type Real and give it the
value real.
if the attribute with number att_no does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 796


Name
Integer Set_super_use_segment_attribute(Element super,Integer use)
Description
Tell the super string whether to use or remove the dimension Att_Segment_Attribute_Array.
If the dimension Att_Segment_Attribute_Array exists then there can be an Attributes on each
segment.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
A return value of 0 indicates the function call was successful.
ID = 1060


Name
Integer Get_super_use_segment_attribute(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Attribute_Array exists for the super string.
If the dimension Att_Segment_Attribute_Array exists then there can be an Attributes on each
segment.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1061


Name
Integer Get_super_segment_attributes(Element elt,Integer seg,Attributes &att)
Description
For the Element super, return the Attributes for the segment number seg as att.
If the Element is not of type Super, or Att_Segment_Attribute_Array dimension is not set, or the
segment number seg has no attribute then a non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute is successfully returned.
ID = 2012


Name
Integer Set_super_segment_attributes(Element elt,Integer seg,Attributes att)
Description
For the Element super, set the Attributes for the segment number seg to att.
If the Element is not of type Super, or Att_Segment_Attribute_Array dimension is not set, then a
non-zero return value is returned.
See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or
Super String Dimensions for information on all the dimensions.
A function return value of zero indicates the attribute is successfully set.
ID = 2013


Name
Integer Get_super_segment_attribute(Element super,Integer seg,Text att_name,Uid &uid)
Description
For the Element super, get the attribute called att_name for the segment number seg and return
the attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Super or the attribute is not of type Uid then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2014


Name
Integer Get_super_segment_attribute(Element super,Integer seg,Text att_name,Attributes &att)
Description
For the Element super, get the attribute called att_name for the segment number seg and return
the attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Super or the attribute is not of type Attributes then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2015


Name
Integer Get_super_segment_attribute(Element super,Integer seg,Integer att_no,Uid &uid)
Description
For the Element super, get the attribute with number att_no for the segment number seg and

Super String Element

Page 421

12d Model Programming Language Manual

return the attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Super or the attribute is not of type Uid then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2016


Name
Integer Get_super_segment_attribute(Element super,Integer seg,Integer att_no,Attributes &att)
Description
For the Element super, get the attribute with number att_no for the segment number seg and
return the attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Super or the attribute is not of type Attributes then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2017


Name
Integer Set_super_segment_attribute(Element super,Integer seg,Text att_name,Uid uid)
Description
For the Element super and on the segment number seg,
if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to uid.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2018


Name
Integer Set_super_segment_attribute(Element super,Integer seg,Text att_name,Attributes att)
Description
For the Element super and on the segment number seg,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.

Page 422

Super String Element

Chapter 5 12dPL Library Calls

if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2019


Name
Integer Set_super_segment_attribute(Element super,Integer seg,Integer att_no,Uid uid)
Description
For the Element super and on the segment number seg, if the attribute number att_no exists
and it is of type Uid, then its value is set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2020


Name
Integer Set_super_segment_attribute(Element super,Integer seg,Integer att_no,Attributes att)
Description
For the Element super and on the segment number seg, if the attribute number att_no exists
and it is of type Attributes, then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2021


Name
Integer Super_segment_attribute_exists(Element elt,Integer seg,Text att_name)
Description
Checks to see if for segment number seg, an attribute of name att_name exists.
A non-zero function return value indicates the attribute exists.
A zero function return value indicates the attribute does not exist.

Super String Element

Page 423

12d Model Programming Language Manual

Warning - this is the opposite to most 12dPL function return values
ID = 1062


Name
Integer Super_segment_attribute_exists(Element elt,Integer seg,Text att_name,Integer &num)
Description
Checks to see if for segment number seg, an attribute of name att_name exists, and if it does,
return the number of the attribute as num.
A non-zero function return value indicates the attribute exists and its number was successfully
returned.
A zero function return value indicates the attribute does not exist, or the number was not
successfully returned.
Warning - this is the opposite to most 12dPL function return values
ID = 1063


Name
Integer Super_segment_attribute_delete (Element super,Integer seg,Text att_name)
Description
For the Element super, delete the attribute with the name att_name for segment number seg.
If the Element super is not of type Super or super has no segment number seg, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 1064


Name
Integer Super_segment_attribute_delete (Element super,Integer seg,Integer att_no)
Description
For the Element super, delete the attribute with attribute number att_no for segment number
seg.
If the Element super is not of type Super or super has no segment number seg, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 1065


Name
Integer Super_segment_attribute_delete_all (Element super,Integer seg)

Page 424

Super String Element

Chapter 5 12dPL Library Calls

Description
Delete all the attributes of segment number seg of the super string super.
A function return value of zero indicates the function was successful.
ID = 1066


Name
Integer Super_segment_attribute_dump (Element super,Integer seg)
Description
Write out information to the Output Window about the segment attributes for segment number
seg of the super string super.
A function return value of zero indicates the function was successful.
ID = 1067


Name
Integer Super_segment_attribute_debug (Element super,Integer seg)
Description
Write out even more information to the Output Window about the segment attributes for segment
number seg of the super string super.
A function return value of zero indicates the function was successful.
ID = 1068


Name
Integer Get_super_segment_number_of_attributes(Element elt,Integer seg,Integer &no_atts)
Description
Get the total number of attributes for segment number seg of the Element super.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the number of attributes was successfully returned.
A return value of 0 indicates the function call was successful.
ID = 1069


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Text att_name,Text &text)
Description
For the Element super, get the attribute called att_name for the segment number seg and return
the attribute value in text. The attribute must be of type Text.

Super String Element

Page 425

12d Model Programming Language Manual

If the Element is not of type Super or the attribute is not of type Text then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1070


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Text att_name,Integer &int)
Description
For the Element super, get the attribute called att_name for the segment number seg and return
the attribute value in int. The attribute must be of type Integer.
If the Element is not of type Super or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1071


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Text att_name,Real &real)
Description
For the Element super, get the attribute called att_name for the segment number seg and return
the attribute value in real. The attribute must be of type Real.
If the Element is not of type Super or the attribute is not of type Real then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1072


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Integer att_no,Text &txt)
Description
For the Element super, get the attribute number att_no for the segment number seg and return
the attribute value in txt. The attribute must be of type Text.
If the Element is not of type Super or the attribute is not of type Text then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.

Page 426

Super String Element

Chapter 5 12dPL Library Calls

ID = 1073


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Integer att_no,Integer &int)
Description
For the Element super, get the attribute number att_no for the segment number seg and return
the attribute value in int. The attribute must be of type Integer.
If the Element is not of type Super or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1074


Name
Integer Get_super_segment_attribute (Element super,Integer seg,Integer att_no,Real &real)
Description
For the Element super, get the attribute number att_no for the segment number seg and return
the attribute value in real. The attribute must be of type Real.
If the Element is not of type Super or the attribute is not of type Real then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 1075


Name
Integer Get_super_segment_attribute_name (Element super,Integer seg,Integer att_no,Text &txt)
Description
For segment number seg of the Element super, get the name of the attribute number att_no.
The attribute name is returned in txt.
A function return value of zero indicates the attribute name was successfully returned.
ID = 1076


Name
Integer Get_super_segment_attribute_type (Element super,Integer seg,Text att_name,Integer &att_type)

Super String Element

Page 427

12d Model Programming Language Manual

Description
For segment number seg of the Element super, get the type of the attribute with name
att_name. The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 1077


Name
Integer Get_super_segment_attribute_type (Element super,Integer seg,Integer att_no,Integer &att_type)
Description
For segment number seg of the Element super, get the type of the attribute with attribute
number att_no. The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 1078


Name
Integer Get_super_segment_attribute_length(Element super,Integer seg,Text att_name,Integer &att_len)
Description
For segment number seg of the Element super, get the length (in bytes) of the attribute with the
name att_name. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 1079


Name
Integer Get_super_segment_attribute_length(Element super,Integer seg,Integer att_no,Integer &att_len)
Description
For segment number seg of the Element super, get the length (in bytes) of the attribute number
att_no. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for attributes of type Text and Binary.
ID = 1080


Name
Integer Set_super_segment_attribute (Element super,Integer seg,Text att_name,Text txt)

Page 428

Super String Element

Chapter 5 12dPL Library Calls

Description
For the Element super and on the segment number seg,
if the attribute called att_name does not exist then create it as type Text and give it the value
txt.
if the attribute called att_name does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1081


Name
Integer Set_super_segment_attribute (Element super,Integer seg,Text att_name,Integer int)
Description
For the Element super and on the segment number seg,
if the attribute called att_name does not exist then create it as type Integer and give it the value
int.
if the attribute called att_name does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1082


Name
Integer Set_super_segment_attribute (Element super,Integer seg,Text att_name,Real real)
Description
For the Element super and on the segment number seg,
if the attribute called att_name does not exist then create it as type Real and give it the value
real.
if the attribute called att_name does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1083


Name
Integer Set_super_segment_attribute (Element super,Integer seg,Integer att_no,Text txt)
Description
For the Element super and on the segment number seg,
if the attribute with number att_no does not exist then create it as type Text and give it the
value txt.

Super String Element

Page 429

12d Model Programming Language Manual

if the attribute with number att_no does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 1084


Name
Integer Set_super_segment_attribute (Element super,Integer seg,Integer att_no,Integer int)
Description
For the Element super and on the segment number seg,
if the attribute with number att_no does not exist then create it as type Integer and give it the
value int.
if the attribute with number att_no does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 1085


Name
Integer Set_super_segment_attribute(Element super,Integer seg,Integer att_no,Real real)
Description
For the Element super and on the segment number seg,
if the attribute with number att_no does not exist then create it as type Real and give it the
value real.
if the attribute with number att_no does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.
ID = 1086


Name
Integer Set_super_use_vertex_uid(Element super,Integer use)
Description
WARNING - Reserved for 12d Solutions Staff Only.
Tell the super string super whether to use (set), or not use (remove), the dimension
Att_Vertex_UID_Array.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Vertex_UID_Array is used, then there is an Integer (referred to as a uid) stored at each
vertex of the super string.
This is used by 12d Solutions to store special backtracking numbers on each vertex (for example
for survey data reduction or with the underlying super string in a super alignment).
See UID Dimensions for information on the Vertex UID dimension or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1572


Name
Integer Get_super_use_vertex_uid(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_UID_Array exists (is used) for the super string super.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
If Att_Vertex_UID_Array is used, then there is an Integer (referred to as a uid) stored at each
vertex of the super string.
This is used by 12d Solutions to store special backtracking numbers on each vertex (for example
for survey data reduction or with the underlying super string in a super alignment).
See UID Dimensions for information on the Vertex UID dimension or Super String Dimensions
for information on all the dimensions.
ID = 1573


Name
Integer Set_super_vertex_uid(Element super,Integer vert,Integer num)
Description
WARNING - Reserved for 12d Solutions Staff Only.
For the super Element super, set the vertex uid at vertex number vert to be num.
A return value of 0 indicates the function call was successful.
ID = 1574


Name
Integer Get_super_vertex_uid(Element super,Integer vert,Integer &num)
Description
For the super Element super, get the vertex uid at vertex number vert and return it in num.
A return value of 0 indicates the function call was successful.
ID = 1575


Name
Integer Set_super_use_segment_uid(Element super,Integer use)
Description
WARNING - Reserved for 12d Solutions Staff Only.
Tell the super string super whether to use (set), or not use (remove), the dimension
Att_Segment_UID_Array.
A value for use of 1 sets the dimension and 0 removes it.
If Att_Segment_UID_Array is used, then there is an Integer stored at each segment of the super
string.
This is used by 12d Solutions to store special backtracking numbers on each segment (for
example for survey data reduction or with the underlying super string in a super alignment).
See UID Dimensions for information on the Segment UID dimension or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 1576


Name
Integer Get_super_use_segment_uid(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_UID_Array exists (is used) for the super string

Page 432

Super String Element

Chapter 5 12dPL Library Calls

super.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
If Att_Segment_UID_Array is used, then there is an Integer stored at each segment of the super
string.
This is used by 12d Solutions to store special backtracking numbers on each segment (for
example for survey data reduction or with the underlying super string in a super alignment).
See UID Dimensions for information on the Segment UID dimension or Super String Dimensions
for information on all the dimensions.
ID = 1577


Name
Integer Set_super_segment_uid(Element super,Integer seg,Integer num)
Description
WARNING - Reserved for 12d Solutions Staff Only.
For the super Element super, set the number called uid at segment number seg to be num.
A return value of 0 indicates the function call was successful.
ID = 1578


Name
Integer Get_super_segment_uid(Element super,Integer seg,Integer &num)
Description
For the super Element super, get the number called the uid on segment number seg and return
it in num.
A return value of 0 indicates the function call was successful.
ID = 1579


Name
Integer Set_super_use_vertex_image_value(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Vertex_Image_Value is
used. If the dimension Att_Vertex_Image_Value is set then there can be one image attached to
each vertex.
See Vertex Image Dimensions for information on the Vertex Image dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set. That is, the super string can have an image attached to each
vertex (it can be a different image at each vertex).
If use is 0, the dimension is removed. If the string had images then the images will be removed.
A return value of 0 indicates the function call was successful.
ID = 1767


Name
Integer Get_super_use_vertex_image_value(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Image_Value exists for the super string super.
If the dimension Att_Vertex_Image_Value is set then there can be one image attached to each
vertex.
See Vertex Image Dimensions for information on the Vertex Image dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1768


Name
Integer Set_super_use_vertex_image_array(Element super,Integer use)
Description
For the super string Element super, define whether the dimension Att_Vertex_Image_Array is
used, or removed, for the super string super.

Page 434

Super String Element

Chapter 5 12dPL Library Calls

If the dimension Att_Vertex_Image_Array is set then there can be more than one image attached
to each vertex.
See Vertex Image Dimensions for information on the Vertex Image dimensions or Super String
Dimensions for information on all the dimensions.
If use is 1, the dimension is set. That is, each super string vertex can have a number of images
attached to it.
If use is 0, the dimension is removed. If the super string vertex had images then the images will
be removed.
A return value of 0 indicates the function call was successful.
ID = 1769


Name
Integer Get_super_use_vertex_image_array(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Image_Array exists for the super string super.
If the dimension Att_Vertex_Image_Array is set then there can be more than one image attached
to each vertex.
See Vertex Image Dimensions for information on the Vertex Image dimensions or Super String
Dimensions for information on all the dimensions.
use is returned as 1 if the dimension exists. That is, each super string vertex can have a number
of images attached to it.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1770


Name
Integer Super_vertex_image_value_to_array(Element super)
Description
If for the super string super the dimension Att_Vertex_Image_Value exists and the dimension
Att_Vertex_Image_Array does not exist then there will be one image img for the entire string.
In this case (when the dimension Att_Vertex_Image_Value exists and the dimension
Att_ZCoord_Array does not exist) this function sets the Att_Vertex_Image_Array dimension and
creates a new image for each vertex of super and it is given the value img.
See Height Dimensions for information on the Height (ZCoord) dimensions or Super String
Dimensions for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 2176


Name
Integer Super_vertex_image_delete(Element super,Integer vertex_num,Integer image_num)
Description
For the super Element super, delete image number image_num from vertex number
vertex_num.
A return value of 0 indicates the function call was successful.
ID = 1862


Name
Integer Super_vertex_image_delete_all(Element super,Integer vertex_num)
Description
For the super Element super, delete all the images on vertex number vertex_num.
A return value of 0 indicates the function call was successful.
ID = 1863


Name
Integer Get_super_vertex_number_of_images(Element super,Integer vertex_num,Integer &num_images)
Description
For the super Element super, return in num_images the number of images on vertex number
vertex_num.
A return value of 0 indicates the function call was successful.
ID = 1864


Name
Integer Get_super_vertex_image_type(Element elt,Integer vertex,Integer image_no,Text &image_type)
Description
what is image_type? (it is URL etc)
<no description>
ID = 1865


Name
Integer Super_vertex_add_URL(Element super,Integer vertex,Text url)
Description
image_vertex_array or value. Set the vertex to have text which is treated as url.

Page 436

Super String Element

Chapter 5 12dPL Library Calls

<no description>
ID = 1771


Name
Integer Get_super_vertex_URL(Element elt,Integer vertex,Integer image_no,Text &url)
Description
get url. If not url type then error.
<no description>
ID = 1866


Name
Integer Get_Super_vertex_plan_image(Element super,Integer vertex,Integer image_no,Text &url,Real
&width,Real &height,Real &angle,Real &offset_x,Real &offset_y)
Description
an image type
<no description>
ID = 1867


Name
Integer Set_super_use_visibility(Element super,Integer use)
Description
Tell the super string whether to use, or remove, the dimension Att_Visible_Array.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
A value for use of 1 sets the dimension and 0 removes it.
A return value of 0 indicates the function call was successful.
ID = 718


Name
Integer Get_super_use_visibility(Element super,Integer &use)
Description
Query whether the dimension Att_Visible_Array exists for the super string.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 719


Name
Integer Set_super_use_vertex_visibility_value(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Vertex_Visible_Value is
used or removed.
If Att_Vertex_Visible_Value is set and Att_Vertex_Visible_Array is not set, then there is only one
visibility value for all vertices in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions

Page 438

Super String Element

Chapter 5 12dPL Library Calls

for information on all the dimensions.
If Att_Vertex_Visible_Value is set then the visibility is the same for all vertices in super.
If use is 1, the dimension is set and the visibility is the same for all vertices.
If use is 0, the dimension is removed.
Note that if the dimension Att_Vertex_Visible_Array exists, this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1580


Name
Integer Get_super_use_vertex_visibility_value(Element super,Integer &use)
Description
Query whether the dimension Att_Vertex_Visible_Value exists for the super string super. If
Att_Vertex_Visible_Value is set then there is one visibility value for all vertices in super.
If Att_Vertex_Visible_Value is set and Att_Vertex_Visible_Array is not set, then there is only one
visibility value for all vertices in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1581


Name
Integer Set_super_use_vertex_visibility_array(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Vertex_Visible_Array is
used or removed.
If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex in
super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
If use is 1, the dimension is set and the visibility is different for each vertex.
If use is 0, the dimension is removed.
A return value of 0 indicates the function call was successful.
ID = 1582


Name
Integer Get_super_use_vertex_visibility_array(Element super,Integer &use)
Description

Super String Element

Page 439

12d Model Programming Language Manual

Query whether the dimension Att_Vertex_Visible_Array exists for the super string super.
If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex in
super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1583


Name
Integer Set_super_vertex_visibility(Element super,Integer vert,Integer visibility)
Description
For the Element super (which must be of type Super), set the visibility value for vertex number
vert and to visibility.
If visibility is 1, the vertex is visible.
If visibility is 0, the vertex is invisible.
If the Element super is not of type Super, or Att_Vertex_Visible_Array is not set for super, then a
non-zero return code is returned.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 734


Name
Integer Get_super_vertex_visibility(Element super,Integer vert,Integer &visibility)
Description
For the Element super (which must be of type Super), get the visibility value for vertex number
vert and return it in the Integer visibility.
If visibility is 1, the vertex is visible.
If visibility is 0, the vertex is invisible.
If the Element super is not of type Super, or Att_Vertex_Visible_Array is not set for super, then a
non-zero return code is returned.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 735


Name
Integer Set_super_use_segment_visibility_value(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Segment_Visible_Value is
used or removed.
If Att_Segment_Visible_Value is set and Att_Segment_Visible_Array is not set, then the visibility
is the same for all segments in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
If use is 1, the dimension is set and the visibility is the same for all segments.
If use is 0, the dimension is removed.
Note that if the dimension Att_Segment_Visible_Array exists, this call is ignored.
A return value of 0 indicates the function call was successful.
ID = 1588


Name
Integer Get_super_use_segment_visibility_value(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Visible_Value exists for the super string super.
If Att_Segment_Visible_Value is set and Att_Segment_Visible_Array is not set, then the visibility
is the same for all segments in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1589


Name
Integer Set_super_use_segment_visibility_array(Element super,Integer use)
Description
For Element super of type Super, define whether the dimension Att_Segment_Visible_Array is
used or removed.
If Att_Segment_Visible_Array is set then there can be a different visibility defined for each
segment in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
If use is 1, the dimension is set and the visibility is different for each segment.
If use is 0, the dimension is removed.

Super String Element

Page 441

12d Model Programming Language Manual

A return value of 0 indicates the function call was successful.
ID = 1590


Name
Integer Get_super_use_segment_visibility_array(Element super,Integer &use)
Description
Query whether the dimension Att_Segment_Visible_Array exists for the super string super.
If Att_Segment_Visible_Array is set then there can be a different visibility defined for each
segment in super.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
use is returned as 1 if the dimension exists.
use is returned as 0 if the dimension doesn’t exist.
A return value of 0 indicates the function call was successful.
ID = 1591


Name
Integer Set_super_segment_visibility(Element super,Integer seg,Integer visibility)
Description
For the Element super (which must be of type Super), set the visibility value for segment
number seg to visibility.
If visibility is 1, the segment is visible.
If visibility is 0, the segment is invisible.
If the Element super is not of type Super, or Att_Segment_Visible_Array is not set for super,
then a non-zero return code is returned.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions
for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 720


Name
Integer Get_super_segment_visibility(Element super,Integer seg,Integer &visibility)
Description
For the Element super (which must be of type Super), get the visibility value for segment
number seg and return it in the Integer visibility.
If visibility is 1, the segment is visible.
If visibility is 0, the segment is invisible.
If the Element super is not of type Super, or Att_Segment_Visible_Array is not set for super,
then a non-zero return code is returned.
See Visibility Dimensions for information on the Visibility dimensions or Super String Dimensions

Page 442

Super String Element

Chapter 5 12dPL Library Calls

for information on all the dimensions.
A return value of 0 indicates the function call was successful.
ID = 721


Name
Element Create_align()
Description
Create an Element of type Super_Alignment.
The function return value gives the actual Element created.
If the Super Alignment string could not be created, then the returned Element will be null.
ID = 2120


Name
Element Create_align(Element seed)
Description
Create an Element of type Super_Alignment, and set the colour, name, style etc. of the new
string to be the same as those from the Element seed.
If the Super Alignment string could not be created, then the returned Element will be null.
ID = 2121


Name
Integer Is_super_alignment_solved(Element super_alignment)
Description
Check if the geometry of the Element super_alignment solves.

Super Alignment String Element

Page 459

12d Model Programming Language Manual

The Element super_alignment must be of type Super_Alignment.
A no-zero function return value indicates that the geometry will solve.
A zero function return value indicates the geometry for the will not solve, or that
super_alignment is not of type Super_Alignment.
Warning this is the opposite of most 12dPL function return values.
ID = 2680


Name
Element Create_arc(Arc arc)
Description
Create an Element of type Arc from the Arc arc.
The arc string has the same centre, radius, start and end points as the Arc arc.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 294


Name
Element Create_arc(Real x1,Real y1,Real z1,Real x2,Real y2,Real z2,Real x3,Real y3,Real z3)
Description
Create an Element of type Arc through three given points.
The arc string has start point (x1,y1,z1), an intermediate point (x2,y2,z2) on the arc and the end
point (x3,y3,z3).
The centre and radius of the arc will be automatically calculated.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 312


Name
Element Create_arc(Real xc,Real yc,Real zc,Real rad,Real xs,Real ys,Real zs,Real xe,Real ye,Real ze)
Description

Arc String Element

Page 461

12d Model Programming Language Manual

Create an Element of type Arc with centre (xc,yc,zc), radius rad, start point (xs,ys,zs) and end
point (xe,ye,ze).
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 296


Name
Element Create_arc(Real xc,Real yc,Real zc,Real rad,Real xs,Real ys,Real zs,Real xe,Real ye,Real ze)
Description
Create an Element of type Arc with centre (xc,yc,zc), and radius rad.
The points (xs,ys,zs) and (xe,ye,ze) define the start and end points respectively for the arc. If
either of the points do not lie on the plan circle with centre (xc,yc) and radius rad, then the point
is dropped perpendicularly onto the plan circle to define the (x,y) co-ordinates for the relevant
start or end point.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 296


Name
Element Create_arc(Real xc,Real yc,Real zc,Real xs,Real ys,Real zs,Real sweep)
Description
Create an Element of type Arc with centre point (xc,yc,zc), start point (xs,ys,zs) and sweep
angle sweep.
The absolute radius is calculated as the distance between the centre and start point of the arc.
The sign of the radius comes from the sweep angle.
The sweep angle is measured in a clockwise direction from the line joining the centre to the arc
start point. The units for sweep angles are radians.
Hence the sweep angle is measured in radians and a positive value indicates a clockwise
direction and a positive radius.
The end point of the arc will be automatically created.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 313


Name
Element Create_arc(Real xc,Real yc,Real zc,Real xs,Real ys,Real zs,Real xe,Real ye,Real ze,Integer dir)
Description
Create an Element of type Arc with centre (xc,yc,zc), start point (xs,ys,zs) and end point
Page 462

Arc String Element

Chapter 5 12dPL Library Calls

(xe,ye,ze).
The absolute radius is calculated as the distance between the centre and start point of the arc.
If dir is positive, the radius is taken to be positive.
If dir is negative, the radius is taken to be negative.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 314


Name
Element Create_arc_2(Real xs,Real ys,Real zs,Real rad,Real arc_length,Real start_angle)
Description
Create an Element of type Arc with radius rad. The arc starts at the point (xs,ys,zs) with tangent
angle start_angle and total arc length arc_length.
The centre and end points will be automatically created.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 316


Name
Element Create_arc_3(Real xs,Real ys,Real zs,Real rad,Real arc_length,Real chord_angle)
Description
Create an Element of type Arc with radius rad. The arc starts at the point (xs,ys,zs) with a chord
angle chord_angle and total arc length arc_length.
The centre and end points will be automatically created.
The function return value gives the actual Element created.
If the arc string could not be created, then the returned Element will be null.
ID = 317


Name
Integer Set_arc_centre(Element elt,Real xc,Real yc,Real zc)
Description
Set the centre point of the Arc string given by Element elt to (xc,yc,zc).
The start and end points are also translated by the plan distance between the old and new
centre.
A function return value of zero indicates the centre was successfully modified.
ID = 319


Name
Integer Get_arc_centre(Element elt,Real &xc,Real &yc,Real &zc)
Description
Get the centre point for Arc string given by Element elt.
The centre of the arc is (xc,yc,zc).
A function return value of zero indicates the centre was successfully returned.
ID = 318


Name
Integer Set_arc_radius(Element elt,Real rad)
Description
Set the radius of the Arc string given by Element elt to rad. The new radius must be non-zero.
The start and end points are projected radially so that they still lie on the arc.
A function return value of zero indicates the radius was successfully modified.
ID = 321


Name
Integer Get_arc_radius(Element elt,Real &rad)
Description
Get the radius for Arc string given by Element elt.
The radius is given by rad.
A function return value of zero indicates the radius was successfully returned.
ID = 320


Name
Integer Set_arc_start(Element elt,Real xs,Real ys,Real zs)
Description
Set the start point of the Arc string given by Element elt to (xs,ys,zs).
If the start point does not lie on the arc, then the point (xs,ys,zs) is projected radially onto the arc
and the projected point taken as the start point.
A function return value of zero indicates the start point was successfully modified.
ID = 323


Name
Integer Get_arc_start(Element elt,Real &xs,Real &ys,Real &zs)
Page 464

Arc String Element

Chapter 5 12dPL Library Calls

Description
Get the start point for Arc string given by Element elt.
The start of the arc is (xs,ys,zs).
A function return value of zero indicates that the start point was successfully returned.
ID = 322


Name
Integer Set_arc_end(Element elt,Real xe,Real ye,Real ze)
Description
Set the end point of the Arc string given by Element elt to (xe,ye,ze).
If the end point does not lie on the arc, then the point (xe,ye,ze) is projected radially onto the arc
and the projected point taken as the end point.
A function return value of zero indicates the end point was successfully modified.
ID = 325


Name
Integer Get_arc_end(Element elt,Real &xe,Real &ye,Real &ze)
Description
Get the end point for Arc string given by Element elt.
The end of the arc is (xe,ye,ze).
A function return value of zero indicates that the end point was successfully returned.
ID = 324


Name
Integer Set_arc_data(Element elt,Real xc,Real yc,Real zc,Real rad,Real xs,Real ys,Real zs,Real xe,Real
ye,Real ze)
Description
Set the data for the Arc string given by Element elt.
The arc is given the centre (xc,yc,zc), radius rad and start and end points (xs,ys,zs) and
(xe,ye,ze) respectively.
A function return value of zero indicates the arc data was successfully set.
ID = 327


Name
Integer Get_arc_data(Element elt,Real &xc,Real &yc,Real &zc,Real &rad,Real &xs,Real &ys,Real
&zs,Real &xe,Real &ye,Real &ze)

Arc String Element

Page 465

12d Model Programming Language Manual

Description
Get the data for the Arc string given by Element elt.
The arc has centre (xc,yc,zc), radius rad and start and end points (xs,ys,zs) and (xe,ye,ze)
respectively.
A function return value of zero indicates that the arc date was successfully returned.
ID = 326


Name
Element Create_circle(Real xc,Real yc,Real zc,Real rad)
Description
Create an Element of type Circle with centre (xc,yc), radius rad and z value (height) zc.
The function return value gives the actual Element created.
If the circle string could not be created, then the returned Element will be null.
ID = 307


Name
Element Create_circle(Real xc,Real yc,Real zc,Real xp,Real yp,Real zp)
Description
Create an Element of type Circle with centre (xc,yc) and point (xp,yp) on the circle.
The height of the circle is zc.
The radius of the circle will be automatically calculated.
The function return value gives the actual Element created.
If the circle string could not be created, then the returned Element will be null.
ID = 308


Name
Element Create_circle(Real x1,Real y1,Real z1,Real x2,Real y2,Real z2,Real x3,Real y3,Real z3)
Description
Create an Element of type Circle going through the three points (x1,y1), (x2,y2) and (
x3,y3).
The height of the circle is z1.
The centre and radius of the circle will be automatically created.
The function return value gives the actual Element created.
If the circle string could not be created, then the returned Element will be null.
ID = 309


Name
Integer Set_circle_data(Element elt,Real xc,Real yc,Real zc,Real rad)
Description
Circle String Element

Page 467

12d Model Programming Language Manual

Set the data for the Circle string given by Element elt.
The centre of the circle is set to (xc,yc,zc), the height to zc and the radius to rad.
A function return value of zero indicates success.
ID = 311


Name
Integer Get_circle_data(Element elt,Real &xc,Real &yc,Real &zc,Real &rad)
Description
Get the data for the Circle string given by Element elt.
The centre of the circle is (xc,yc,zc), height zc
and radius rad.
A function return value of zero indicates success.
ID = 310


Name
Element Create_text(Text text,Real x,Real y,Real size,Integer colour)
Description
Creates an Element of type Text.
The Element is at position (x,y), has Text text of size size and colour colour. The other data is
defaulted.
The function return value gives the actual Element created.
If the text string could not be created, then the returned Element will be null.
ID = 174


Name
Element Create_text(Text text,Real x,Real y,Real size,Integer colour,Real ang)
Description
Creates an Element of type Text.
The Element is at position (x,y), has Text text of size size, colour colour and angle ang. The
other data is defaulted.
The function return value gives the actual Element created.

Text String Element

Page 469

12d Model Programming Language Manual

If the text string could not be created, then the returned Element will be null.
ID = 175


Name
Element Create_text(Text text,Real x,Real y,Real size,Integer colour,Real ang,Integer justif)
Description
Creates an Element of type Text.
The Element is at position (x,y), has Text text of size size, colour colour, angle ang and
justification justif. The other data is defaulted.
The function return value gives the actual Element created.
If the text string could not be created, then the returned Element will be null.
ID = 176


Name
Element Create_text(Text text,Real x,Real y,Real size,Integer colour,Real ang,Integer justif,Integer
size_mode)
Description
Creates an Element of type Text.
The Element is at position (x,y), has Text text of size size, colour colour, angle ang, justification
justif and size mode size_mode. The other data is defaulted.
The function return value gives the actual Element created.
If the text string could not be created, then the returned Element will be null.
ID = 177


Name
Element Create_text(Text text,Real x,Real y,Real size,Integer colour,Real ang,Integer justif,Integer
size_mode,Real offset_distance,Real rise_distance)
Description
Creates an Element of type Text.
The Element is at position (x,y), has Text text of size size, colour colour, angle ang, justification
justif, size mode size_mode, offset offset_distance and rise rise_distance.
The function return value gives the actual Element created.
If the text string could not be created, then the returned Element will be null.
ID = 178


Name
Integer Set_text_data(Element elt,Text text,Real x,Real y,Real size,Integer colour,Real ang,Integer
justif,Integer size_mode,Real offset_distance,Real rise_distance)
Description
Set values for each of the text parameters.
For a diagram, see Textstyle Data .
A function return value of zero indicates that the text data was successfully set.
ID = 180


Name
Integer Get_text_data(Element elt,Text &text,Real &x,Real &y,Real &size,Integer &colour,Real
&ang,Integer &justification,Integer &size_mode,Real &offset_dist,Real &rise_dist)
Description
Get the values for each of the text parameters.
For a diagram, see Textstyle Data .
A function return value of zero indicates that the text data was successfully returned.
ID = 179


Name
Integer Set_text_value(Element elt,Text text)
Description
Set the actual text of the text Element elt.
The text is given as Text text.
A function return value of zero indicates the data was successfully set.
ID = 461


Name
Integer Get_text_value(Element elt,Text &text)
Description
Get the actual text of the text Element elt.
The text is returned as Text text.
A function return value of zero indicates the data was successfully returned.
ID = 453


Name
Integer Set_text_textstyle_data(Element elt,Textstyle_Data d)
Description
For the Element elt of type Text, set the Textstyle_Data to be d.
Setting a Textstyle_Data means that all the individual values that are contained in the
Textstyle_Data are set rather than having to set each one individually.
LJG? if the value is blank in the Textstyle_Data and the value is already set for the text string, is
the value left alone?
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates the Textstyle_Data was successfully set.
ID = 1669


Name
Integer Get_text_textstyle_data(Element elt,Textstyle_Data &d)
Description
For the Element elt of type Text, get the Textstyle_Data for the string and return it as d.
LJG? if a value is not set in the text string, what does it return?
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates the Textstyle_Data was successfully returned.
ID = 1670


Name
Integer Get_text_length(Element elt,Real &length)
Description
Get the length of the characters of the text Element elt.
The text length is returned as Real length.
A function return value of zero indicates the data was successfully returned.
ID = 580


Name
Integer Set_text_xy(Element elt,Real x,Real y)
Description
Set the base position of for the text Element elt.
The position is given as Real (x,y).
A function return value of zero indicates the data was successfully set.
ID = 462


Name
Integer Get_text_xy(Element elt,Real &x,Real &y)
Description
Get the base position of for the text Element elt.
The position is returned as Real (x,y).
A function return value of zero indicates the data was successfully returned.
ID = 454


Name
Integer Set_text_units(Element elt,Integer units_mode)
Description
Set the units used for the text parameters of the text Element elt.
The mode is given as Integer units_mode.
For the values of units_mode, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 466


Name
Integer Get_text_units(Element elt,Integer &units_mode)
Description
Get the units used for the text parameters of the text Element elt.
The mode is returned as Integer units_mode.
For the values of units_mode, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 458


Name
Integer Set_text_size(Element elt,Real size)
Description
Set the size of the characters of the text Element elt.
The text size is returned as Real size.
A function return value of zero indicates the data was successfully set.
ID = 463


Name
Integer Get_text_size(Element elt,Real &size)
Description
Get the size of the characters of the text Element elt.
The text size is returned as Real size.
A function return value of zero indicates the data was successfully returned.
ID = 455


Name
Integer Set_text_justify(Element elt,Integer justify)
Description
Set the justification used for the text Element elt.
The justification is given as Integer justify.
For the values of justify and their meaning, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 465


Name
Integer Get_text_justify(Element elt,Integer &justify)
Description
Get the justification used for the text Element elt.
The justification is returned as Integer justify.
For the values of justify and their meaning, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 457


Name
Integer Set_text_angle(Element elt,Real ang)
Description
Set the angle of rotation (in radians) about the text (x,y) point of the text Element elt.
The angle is given as Real ang.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 464


Name
Integer Get_text_angle(Element elt,Real &ang)
Description
Get the angle of rotation (in radians) about the text (x,y) point of the text Element elt and return
the angle as ang.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 456


Name
Integer Set_text_offset(Element elt,Real offset)
Description
Set the offset distance of the text Element elt.
The offset is given as Real offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 467


Name
Integer Get_text_offset(Element elt,Real &offset)
Description
Get the offset distance of the text Element elt.
The offset is returned as Real offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 459


Name
Integer Set_text_rise(Element elt,Real rise)
Description
Set the rise distance of the text Element elt.
The rise is returned as Real rise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 468


Name
Integer Get_text_rise(Element elt,Real &rise)
Description
Get the rise distance of the text Element elt.
The rise is returned as Real rise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 460


Name
Integer Set_text_height(Element elt,Real height)
Description
Set the height of the characters of the text Element elt.
The text height is given as Real height.
A function return value of zero indicates the data was successfully set.
ID = 584


Name
Integer Get_text_height(Element elt,Real &height)
Description
Get the height of the characters of the text Element elt.
The text height is returned as Real height.
A function return value of zero indicates the data was successfully returned.
ID = 579


Name
Integer Set_text_slant(Element elt,Real slant)
Description
Set the slant of the characters of the text Element elt.
The text slant is given as Real slant.
A function return value of zero indicates the data was successfully set.
ID = 585


Name

Page 476

Text String Element

Chapter 5 12dPL Library Calls

Integer Get_text_slant(Element elt,Real &slant)
Description
Get the slant of the characters of the text Element elt.
The text slant is returned as Real slant.
A function return value of zero indicates the data was successfully returned.
ID = 581


Name
Integer Set_text_style(Element elt,Text style)
Description
Set the style of the characters of the text Element elt.
The text style is given as Text style.
A function return value of zero indicates the data was successfully set.
ID = 587


Name
Integer Get_text_style(Element elt,Text &style)
Description
Get the style of the characters of the text Element elt.
The text style is returned as Text style.
A function return value of zero indicates the data was successfully returned.
ID = 583


Name
Integer Set_text_x_factor(Element elt,Real xfact)
Description
Set the x factor of the characters of the text Element elt.
The text x factor is given as Real xfact.
A function return value of zero indicates the data was successfully set.
ID = 586


Name
Integer Get_text_x_factor(Element elt,Real &xfact)
Description
Get the x factor of the characters of the text Element elt.

Text String Element

Page 477

12d Model Programming Language Manual

The text x factor is returned as Real xfact.
A function return value of zero indicates the data was successfully returned.
ID = 582


Name
Integer Set_text_ttf_underline(Element elt,Integer underline)
Description
For the Element elt of type Text, set the underline state to underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates underlined was successfully set.
ID = 2596


Name
Integer Get_text_ttf_underline(Element elt,Integer &underline)
Description
For the Element elt of type Text, get the underline state and return it in underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates underlined was successfully returned.
ID = 2592


Name
Integer Set_text_ttf_strikeout(Element elt,Integer strikeout)
Description
For the Element elt of type Text, set the strikeout state to strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates strikeout was successfully set.
ID = 2597


Name
Integer Get_text_ttf_strikeout(Element elt,Integer &strikeout)
Description
For the Element elt of type Text, get the strikeout state and return it in strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates strikeout was successfully returned.
ID = 2593


Name
Integer Set_text_ttf_italic(Element elt,Integer italic)
Description
For the Element elt of type Text, set the italic state to italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates italic was successfully set.
ID = 2598


Name
Integer Get_text_ttf_italic(Element elt,Integer &italic)
Description
For the Element elt of type Text, get the italic state and return it in italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates italic was successfully returned.
ID = 2594


Name
Integer Set_text_ttf_outline(Element elt,Integer outline)
Description
For the Element elt of type Text, set the outline state to outline.

Text String Element

Page 479

12d Model Programming Language Manual

If outline = 1, then for a true type font the text will be only shown in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates outline was successfully set.
ID = 2772


Name
Integer Get_text_ttf_outline(Element elt,Integer &outline)
Description
For the Element elt of type Text, get the outline state and return it in outline.
If outline = 1, then for a true type font the text will be shown only in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates outline was successfully returned.
ID = 2771


Name
Integer Set_text_ttf_weight(Element elt,Integer weight)
Description
For the Element elt of type Text, set the font weight to weight.
For the list of allowable weights, go to Allowable Weights
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates weight was successfully set.
ID = 2599


Name
Integer Get_text_ttf_weight(Element elt,Integer &weight)
Description
For the Element elt of type Text, get the font weight and return it in weight.
For the list of allowable weights, go to Allowable Weights
A non-zero function return value is returned if elt is not of type Text.
A function return value of zero indicates weight was successfully returned.
ID = 2595


Name
Integer Set_text_whiteout(Element text,Integer colour)
Description
For the Text Element text, set the colour number of the colour used for the whiteout box around
the text, to be colour.
If no text whiteout is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2752


Name
Integer Get_text_whiteout(Element text,Integer &colour)
Description
For the Text Element text, get the colour number that is used for the whiteout box around the
text. The whiteout colour is returned as Integer colour.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2751


Name
Integer Set_text_border(Element text,Integer colour)
Description
For the Text Element text, set the colour number of the colour used for the border of the whiteout
box around the text, to be colour.
If no whiteout border is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2762


Name
Integer Get_text_border(Element text,Integer &colour)
Description
For the Text Element text, get the colour number that is used for the border of the whiteout box
around the text. The whiteout border colour is returned as Integer colour.

Text String Element

Page 481

12d Model Programming Language Manual

NO_COLOUR is the returned as the colour number if there is no whiteout border.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff)
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2761


Name
Integer Create_pipeline()
Description
Create a pipeline.
A function return value of zero indicates the pipeline was created successfully.
ID = 1264


Name
Integer Create_pipeline(Element seed)
Description
Create an Element of type Pipeline, and set the colour, name, style etc. of the new string to be
the same as those from the Element seed.
A function return value of zero indicates the pipeline was created successfully.
ID = 1265


Name
Integer Set_pipeline_diameter(Element pipeline,Real diameter)
Description
Set the diameter for pipeline.
Type of the diameter must be Real.
A function return value of zero indicates the diameter was successfully set.
ID = 1266


Name
Integer Get_pipeline_diameter(Element pipeline,Real &diameter)
Description
Get the diameter from the Element pipeline.
The type of diameter must be Real.
A function return value of zero indicates the diameter was returned successfully.
ID = 1268


Name
Integer Set_pipeline_length(Element pipeline,Real length)
Pipeline String Element

Page 483

12d Model Programming Language Manual

Description
Set the length for pipeline.
Type of the length must be Real.
A function return value of zero indicates the length was successfully set.
ID = 1267


Name
Integer Get_pipeline_length(Element pipeline,Real &length)
Description
Get the length from the Element pipeline.
The type of length must be Real.
A function return value of zero indicates the length was returned successfully.
ID = 1269


Name
Element Create_drainage(Integer num_verts,Integer num_pits)
Description
Create an Element of type Drainage with room for num_verts vertices in the underlying string,
and room for num_pits pits.
The actual data of the drainage string is set after the string is created.
If the drainage string could not be created, then the returned Element will be null.
ID = 490


Name
Element Create_drainage(Real x[],Real y[],Real z[],Real r[],Integer b[],Integer num_verts, Integer
num_pits)
Description
Create an Element of type drainage.
The Element has num_verts vertices with (x,y,z) values for the vertices given in the Real arrays
x[], y[] and z[], and the radii of the arcs for the segments between the vertices given by the Real
radius array r[] and the Integer bulge array b[] (Bulge arrayb=1 for major arc >180 degrees, b =
1 for minor arc < 180 degrees).
The drainage string also contains Integer num_pits pits.
The function return value gives the actual Element created.
If the drainage string could not be created, then the returned Element will be null.
ID = 489


Name
Integer Set_drainage_data(Element drain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
num_verts)

Page 488

Drainage String Element

Chapter 5 12dPL Library Calls

Description
Set the (x,y,z,r,b) data for the first num_verts vertices of the drainage Element drain.
This function allows the user to modify a large number of vertices of the string in one call.
The maximum number of vertices that can be set is given by the number of vertices in the string.
The (x,y,z,r,b) values for each string vertex are given in the Real arrays x[], y[], z[], r[] and b[].
The number of vertices to be set is given by Integer num_verts
If the Element drain is not of type Drainage, then nothing is modified and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new Drainage Elements but only modify existing Drainage Elements.
ID = 2100


Name
Integer Get_drainage_data(Element drain,Real x[],Real y[],Real z[],Real r[],Integer f[],Integer
max_verts,Integer &num_verts)
Description
Get the (x,y,z,r,b) data for the first max_verts points of the drainage Element drain.
The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[], z[], r[] and b[].
The maximum number of vertices that can be returned is given by max_verts (usually the size of
the arrays). The vertex data returned starts at the first vertex and goes up to the minimum of
max_verts and the number of vertices in the string.
The actual number of vertices returned is returned by Integer num_verts
num_verts <= max_verts
If the Element drain is not of type Drainage, then num_pts is returned as zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 2097


Name
Integer Set_drainage_data(Element drain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
num_verts,Integer start_vert)
Description
For the drainage Element drain, set the (x,y,z,r,b) data for num_verts vertices, starting at vertex
number start_vert.
This function allows the user to modify a large number of vertices of the string in one call starting
at vertex number start_vert rather than vertex one.
The maximum number of vertices that can be set is given by the difference between the number
of vertices in the string and the value of start_vert.

Drainage String Element

Page 489

12d Model Programming Language Manual

The (x,y,z,r,f) values for the string vertices are given in the Real arrays x[], y[], z[], r[] and b[].
The number of the first string vertex to be modified is start_vert.
The total number of vertices to be set is given by Integer num_verts
If the Element drain is not of type Drainage, then nothing is modified and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_vert of one gives the same result as the function Set_drainage_data(Element
drain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer num_verts) .
(b) This function can not create new Drainage Elements but only modify existing Drainage
Elements.
ID = 2101


Name
Integer Get_drainage_data(Element drain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
max_verts,Integer &num_verts,Integer start_vert)
Description
For a drainage Element drain, get the (x,y,z,r,b) data for max_verts points starting at vertex
number start_vert.
This routine allows the user to return the data from a drainage string in user specified chunks.
This is necessary if the number of vertices in the string is greater than the size of the arrays
available to contain the information.
The maximum number of vertices that can be returned is given by max_verts (usually the size of
the arrays). For this function, the vertex data returned starts at vertex number start_vert rather
than vertex one.
The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[], z[], r[] and b[].
The actual number of vertices returned is given by Integer num_verts
num_verts <= max_verts
If the Element drain is not of type Drainage, then num_verts is set to zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_vert of one gives the same result as for the function Get_drainage_data(Element
drain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer max_verts,Integer &num_verts) .
ID = 2098


Name
Integer Set_drainage_data(Element drain,Integer i,Real x,Real y,Real z,Real r,Integer b)
Description
Set the (x,y,z,r,f) data for the ith vertex of the string.
The x value is given in Real x.

Page 490

Drainage String Element

Chapter 5 12dPL Library Calls

The y value is given in Real y.
The z value is given in Real z.
The radius value is given in Real r.
The minor/major value is given in Integer b. if b = 0, arc < 180 degrees; if b = 1, arc >180
degrees.
A function return value of zero indicates the data was successfully set.
ID = 2102


Name
Integer Get_drainage_data(Element drain,Integer i,Real &x,Real &y,Real &z,Real &r,Integer &b)
Description
Get the (x,y,z,r,f) data for the ith vertex of the Element drain.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
The radius value is returned in Real r.
The minor/major value is returned in Integer b.
If minor/major is 0, arc < 180.
If minor/major is 1, arc > 180
A function return value of zero indicates the data was successfully returned.
ID = 2099


Name
Integer Set_drainage_outfall_height(Element drain,Real ht)
Description
Set the outfall height of the drainage Element drain to the value ht.
A function return value of zero indicates the outfall height was successfully set.
ID = 491


Name
Integer Get_drainage_outfall_height(Element drain,Real &ht)
Description
Get the outfall height of the drainage Element drain and return it as ht.
A function return value of zero indicates the outfall height was successfully returned.
ID = 492


Name
Integer Set_drainage_ns_tin(Element drain,Tin tin)
Description
For the drainage string drain, set the natural surface Tin to be tin.
A function return value of zero indicates the tin was successfully set.
ID = 1275


Name
Integer Get_drainage_ns_tin(Element drain,Tin &tin)
Description
For the drainage string drain, get the natural surface Tin and return it in tin.
A function return value of zero indicates the tin was successfully returned.
ID = 1274


Name
Integer Set_drainage_fs_tin(Element drain,Tin tin)
Description
For the drainage string drain, set the finished surface Tin to be tin.
Page 492

Drainage String Element

Chapter 5 12dPL Library Calls

A function return value of zero indicates the tin was successfully set.
ID = 1273


Name
Integer Get_drainage_fs_tin(Element drain,Tin &tin)
Description
For the drainage string drain, get the finished surface Tin and return it in tin.
A function return value of zero indicates the tin was successfully returned.
ID = 1272


Name
Integer Set_drainage_flow(Element drain,Integer dir)
Description
Set the flow direction of the drainage Element drain
The flow direction is given as Integer dir.
dir = 1 means the flow direction is the same as the string direction. That is, the flow direction is
the same as the chainage direction of the drainage string.
dir = 0 means the flow direction is opposite to the string direction. That is, the flow direction is the
opposite direction to the chainage direction of the drainage string.
See Drainage Definitions .
A function return value of zero indicates the flow direction was successfully set.
ID = 539


Name
Integer Get_drainage_flow(Element drain,Integer &dir)
Description
Get the flow direction of the drainage Element drain and return the flow direction dir.
dir = 1 means the flow direction is the same as the string direction. That is, the flow direction is
the same as the chainage direction of the drainage string.
dir = 0 means the flow direction is opposite to the string direction. That is, the flow direction is the
opposite direction to the chainage direction of the drainage string.
See Drainage Definitions .
A function return value of zero indicates the flow direction was successfully returned.
ID = 540


Name
Integer Set_drainage_float(Element drain,Integer string_pit_float)

Drainage String Element

Page 493

12d Model Programming Language Manual

Description
For the Element drain, which must be of type Drainage, set the value of the flag for the string
floating pit to string_pit_float.
Note: If a pit does not have a pit_float value set for the pit, then the pit uses the string_pit_float
value.
A pit can be given its own pit_float value using the call Set_drainage_pit_float(Element
drain,Integer pit,Integer pit_float) .
If string_pit_float = 1, the top of a pit automatically takes its level (height) from the finished
surface tin for the drainage string drain.
If string_pit_float = 0, the top of the pit level is fixed.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the string_pit_float was successfully set.
ID = 1271


Name
Integer Get_drainage_float(Element drain,Integer &string_pit_float)
Description
For the Element drain, which must be of type Drainage, return the value of the flag for the string
floating pit in string_pit_float.
Note: If a pit does not have a pit_float value set for the pit, then the pit uses the string_pit_float
value.
A pit can be given its own pit_float value using the call Set_drainage_pit_float(Element
drain,Integer pit,Integer pit_float) .
If string_pit_float = 1, the top of a pit automatically takes its level (height) from the finished
surface tin for the drainage string drain.
If string_pit_float = 0, the top of the pit level is fixed.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the string_pit_float value was successfully returned.
ID = 1270


Name
Integer Get_drainage_trunk(Element drain,Element &trunk)
Description
For the drainage string drain, determine if drain flows into a trunk string.
If there is a trunk string then it is returned as trunk and the function return value is 0. If a trunk
exists, then drain is a branch string.
If there is no trunk string and the downstream end of drain is an outlet then the function return
value is 44.
For all other cases, the function return value is non zero but not 44.
See Drainage Definitions .
ID = 1444


Name
Integer Drainage_default_grading_to_end(Element drain,Integer pipe_num)
Description
For the Element drain, which must be of type Drainage, grade from pipe number pipe_num to
the end of the string using the minimum grade, cover etc for the drain.
The drainage flow direction is essential to the grading algorithm.
A function return value of zero indicates the string was successfully graded.
ID = 1700


Name
Integer Drainage_grade_to_end(Element drain,Integer pipe_num,Real slope)
Description
For the Element drain, which must be of type Drainage, grade from pipe number pipe_num to
the end of the string using the slope slope where the units for slope are 1:in. That is, 1 vertical :in
slope horizontal
The drainage flow direction is essential to the grading algorithm.
A function return value of zero indicates the string was successfully graded.
ID = 1701


Name
Integer Get_drainage_pits(Element drain,Integer &npits)
Description
For the Element drain, which must of type Drainage, get the number of pits for the string and
return it in npits. The number of pipes in npits - 1.
The i’th pipe goes from the i’th pit to the (i+1)’th pit.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 530


Name
Integer Set_drainage_pit(Element drain,Integer p,Real x,Real y,Real z)
Description
Set the x,y & z for the pth pit of the string Element drain.
The x coordinate of the pit is given as Real x.
The y coordinate of the pit is given as Real y.
The z coordinate of the pit is given as Real z.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 532


Name
Integer Get_drainage_pit(Element drain,Integer p,Real &x,Real &y,Real &z)
Description
Get the x,y & z for the pth pit of the string Element drain.
The x coordinate of the pit is returned in Real x.
The y coordinate of the pit is returned in Real y.
The z coordinate of the pit is returned in Real z (the cover level).
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 531


Name
Integer Set_drainage_pit_name(Element drain,Integer p,Text name)
Description

Drainage String Element

Page 497

12d Model Programming Language Manual

For the Element drain, which must be of type Drainage, set the name for the pth pit to name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 513


Name
Integer Get_drainage_pit_name(Element drain,Integer p,Text &name)
Description
For the Element drain, which must be of type Drainage, get the name for the pth pit and return it
in name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 507


Name
Integer Set_drainage_pit_colour(Element drain,Integer pit,Integer colour)
Description
For the Element drain, which must of type Drainage, set the colour of the pth pit to colour
number colour.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2781


Name
Integer Get_drainage_pit_colour(Element drain,Integer p,Integer &colour)
Description
For the Element drain, which must of type Drainage, return the colour number of the pth pit in
colour.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2780


Name
Integer Set_drainage_pit_diameter(Element drain,Integer p,Real diameter)
Description
For the Element drain, which must of type Drainage, set the diameter for the pth pit to diameter.

Page 498

Drainage String Element

Chapter 5 12dPL Library Calls

See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 511


Name
Integer Get_drainage_pit_diameter(Element drain,Integer p,Real &diameter)
Description
For the Element drain, which must of type Drainage, return the diameter of the pth pit in
diameter.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 505


Name
Integer Set_drainage_pit_symbol_angle(Element drain,Integer p,Real angle)
Description
For the Element drain, which must of type Drainage, set the angle for the pth pit to angle. angle
is used for both the physical pit, and a symbol used for the pit in a Drainage Plan Plot.
angle is in radians and measured in the counter clockwise direction from the x-axis.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2872


Name
Integer Get_drainage_pit_symbol_angle(Element drain,Integer pit,Real &angle)
Description
For the Element drain, which must of type Drainage, return the angle of the pth pit in angle.
angle is used for both the physical pit, and a symbol used for the pit in a Drainage Plan Plot.
angle is in radians and measured in the counter clockwise direction from the x-axis.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 2871


Name
Integer Set_drainage_pit_width(Element drain,Integer p,Real width)
Description
For the Element drain, which must of type Drainage, set the width for the pth pit to width.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2876


Name
Integer Get_drainage_pit_width(Element drain,Integer p,Real &width)
Description
For the Element drain, which must of type Drainage, return the width of the pth pit in width.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 2877


Name
Integer Set_drainage_pit_length(Element drain,Integer p,Real length)
Description
For the Element drain, which must of type Drainage, set the length for the pth pit to length.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2878


Name
Integer Get_drainage_pit_length(Element drain,Integer p,Real &length)
Description
For the Element drain, which must of type Drainage, return the length of the pth pit in length.
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 2879


Name
Integer Set_drainage_pit_float_sump(Element drain,Integer pit,Integer sump_float)
Description
For the Element drain, which must be of type Drainage, and pit number pit, set the flag for the
floating sump invert level to sump_float.
If sump_float = 1, the invert level of the sump automatically moves to be the invert level of the
lowest pipe coming into the pit, plus the sump offset (which is defined by an attribute).
If sump_float = 0, the invert level of the sump is fixed and is explicitly set by the call
Set_drainage_pit_sump_level(Element drain,Integer pit,Real level) .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the floating sump level flag was successfully set.
ID = 2786


Name
Integer Get_drainage_pit_float_sump(Element element,Integer pit,Integer &sump_float)
Description
For the Element drain, which must be of type Drainage, and pit number pit, return the flag for the
floating sump invert level as sump_float.
If sump_float = 1, the invert level of the sump automatically moves to be the invert level of the
lowest pipe coming into the pit, plus the sump offset (which is defined by an attribute).
If sump_float = 0, the invert level of the sump is fixed and is explicitly set by the call
Set_drainage_pit_sump_level(Element drain,Integer pit,Real level) .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the floating sump level flag was successfully returned.
ID = 2787


Name
Integer Set_drainage_pit_sump_level(Element drain,Integer pit,Real level)
Description
For the Element drain, which must be of type Drainage, and pit number pit, set the pit sump
invert level to level.
This value is only used when the pit floating sump level flag is set to 1. See
Set_drainage_pit_float_sump(Element drain,Integer pit,Integer sump_float) .
See Drainage Pit Cross Section .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the sump invert level was successfully set.
ID = 2788


Name
Integer Get_drainage_pit_sump_level(Element drain,Integer pit,Real &level)
Description
invert of the sump
For the Element drain, which must be of type Drainage, and pit number pit, return the invert
level of the sump as level.
See Drainage Pit Cross Section .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the sump invert level was successfully returned.
ID = 2789


Name
Integer Set_drainage_pit_thickness(Element drain,Integer p,Real bottom,Real front,Real back,Real
left,Real right)
Description
For the Element drain, which must of type Drainage, set the thicknesses for the pth pit to
bottom, front back, left and right where
bottom is the thickness of the bottom of the pit
front is the thickness for a round pit and the front thickness for a rectangular pit
back is the back thickness for a rectangular pit and not used for a round pit
left is the left thickness for a rectangular pit and not used for a round pit
right is the right thickness for a rectangular pit and not used for a round pit
See Drainage Pit Definitions .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2870


Name
Integer Get_drainage_pit_thickness(Element drain,Integer p,Real &bottom,Real &front,Real &back,Real
&left,Real &right)
Description
For the Element drain, which must of type Drainage, get the thicknesses for the pth pit and
return them in bottom, front back, left and right where
bottom is the thickness of the bottom of the pit
front is the thickness for a round pit, and the front thickness for a rectangular pit
back is the back thickness for a rectangular pit and not used for a round pit
left is the left thickness for a rectangular pit and not used for a round pit
right is the right thickness for a rectangular pit and not used for a round pit
See Drainage Pit Definitions .

Page 502

Drainage String Element

Chapter 5 12dPL Library Calls

If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the thicknesses was successfully returned.
ID = 2869


Name
Integer Set_drainage_use_connection_points(Element drain,Integer use_connection_points)
Description
For the Element drain, which must be of type Drainage, set whether pit connection points are
used or not.
If use_connection_points = 0, pit connection points are not used.
If use_connection_points = 1, pit connection points are used.
If connection points are to be used and there are no custom connection points defined for the pit
in the drainage.4d file, then every pipe goes to the centre of the closest rectangular side, or onto
the circle for circular pits.
If connection points are to be used and there are custom connection points defined for the pit in
the drainage.4d file, then the pipes go to the closest connection point.
See Drainage Definitions for connection points.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the use_connection_points flag was successfully set.
ID = 2790


Name
Integer Get_drainage_use_connection_points(Element drain,Integer &use_connection_points)
Description
For the Element drain, return the pit connection point mode for the string in
use_connection_points.
If use_connection_points = 0, pit connection points are not used for drain.
If use_connection_points = 1, pit connection points are used for drain.
See Drainage Definitions for connection points.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the use_connection_points flag was successfully
returned.
ID = 2791


Name
Integer Drainage_Adjust_Pit_Connection_Points(Element drain,Integer pit)
Description

Drainage String Element

Page 503

12d Model Programming Language Manual

For the Element drain, which must be of type Drainage, recalculate the pit connection points for
pit number pit.
Note that this needs to be done if the pit was moved or changed. For example, changing the
diameter of the pit.
See Drainage Definitions for connection points.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the connection points were successfully adjusted.
ID = 2792


Name
Integer Drainage_Adjust_Pit_Connection_Points_All(Element drain)
Description
For the Element drain, which must be of type Drainage, recalculate the pit connection points for
all the pits in drain.
Note that this needs to be done if pits were moved or changed. For example, changing the
diameter of the pits.
See Drainage Definitions for connection points.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the connection points were successfully adjusted.
ID = 2793


Name
Integer Get_drainage_pit_connection_points(Element drain,Integer pit,Real &lx,Real &ly,Real &rx,Real
&ry)
Description
For the Element drain, which must be of type Drainage, return the pit connection points for pit
number pit.
The coordinates of the pit connection point for the pipe that comes into the pit from the left are
returned as (lx,ly).
The coordinates of the pit connection point for the pipe that goes out of the pit to the right are
returned as (rx,ry).
See Drainage Definitions for connection points.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the connection points were successfully returned.
ID = 2847


Name
Integer Set_drainage_pit_inverts(Element drain,Integer p,Real lhs,Real rhs)

Page 504

Drainage String Element

Chapter 5 12dPL Library Calls

Description
For the Element drain, which must be of type Drainage, set the invert levels of the pipes of drain
entering/leaving the pth pit.
The invert level of the pipe entering/leaving the left side of the pit is set to Real lhs.
The invert level of the pipe entering/leaving the right side of the pit is set to Real rhs.
See Drainage Pipe Definitions for invert levels.
Note: this is setting the invert levels of the pipes entering/leaving the pth pit.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 514


Name
Integer Get_drainage_pit_inverts(Element drain,Integer p,Real &lhs,Real &rhs)
Description
For the Element drain, which must be of type Drainage, get the invert levels of the pipes of drain
entering/leaving the pth pit.
The invert level of the pipe entering/leaving the left side of the pit is returned in lhs.
The invert level of the pipe entering/leaving the right side of the pit is returned in rhs.
See Drainage Pipe Definitions for invert levels.
Note: this is getting the invert levels of the pipes entering/leaving the pth pit.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 508


Name
Integer Get_drainage_pit_angle(Element drain,Integer p,Real &ang)
Description
For the Element drain, which must of type Drainage, get the angle between pipes of drain
entering and leaving the pth pit, and return the angle as ang.
Note: this is not the angle of the drainage pit itself which is returned by the call
Get_drainage_pit_symbol_angle(Element drain,Integer pit,Real &angle) .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 517


Name
Integer Get_drainage_pit_angle(Element drain,Integer p,Real &ang,Integer trunk)
Description

Drainage String Element

Page 505

12d Model Programming Language Manual

For the Element drain, which must of type Drainage, for the pth pit, get the angle between
incoming pipe and the outgoing pipe, and return it as ang. ang is in radians.
If the drainage string is using connection points, the direction of the pipes at the connection
points are used.
If the drainage string is NOT using connection points, the direction of the pipes at the pit centre
are used.
trunk controls the action to be taken when the pit is at the downstream end of the drainage
string.
If trunk in non-zero, then a trunk line will be searched for to obtain the outgoing pipe. If no trunk
line is found, ang = 0.
If trunk is zero, ang = 0.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 1294


Name
Integer Get_drainage_pit_chainage(Element drain,Integer p,Real &chainage)
Description
For the Element drain, which must be of type Drainage, return the chainage for the pth pit in
chainage.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 520


Name
Integer Get_drainage_pit_chainages(Element drain,Integer pit,Real &ch_lcp,Real &ch_centre,Real
&ch_rcp)
Description
For the Element drain, which must be of type Drainage, and for pit number pit, return the
chainages of the pit connection points and the chainage of the centre of the pit.
The chainage of the pit connection point for the pipe that comes into the pit from the left is
returned as ch_lcp.
The chainage of the pit connection point for the pipe that goes out of the pit to the right is
returned as ch_rcp.
The chainage of the centre of the pit is returned as ch_centre.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the chainages were successfully returned.
ID = 2848


Name
Integer Get_drainage_pit_shape(Element drain,Integer pit,Integer mode,Element &super_inside,Element
&super_outside)
Description
For the Element drain, which must be of type Drainage, return the plan shape of the inside of pit
number pit as the super string super_inside and the plan shape of the outside of the pit as
super_outside.
So for a circular pit with a wall thickness, a super string representing a circle of the diameter of
the pit is the super_inside and a circle of (diameter + 2*thickness) is the super_outside.
If mode = 0, the shapes are given the z-value of the bottom of the pit (sump bottom).
If mode = 1, the shapes are given the z-value of the invert of the sump.
If mode = 2, the shapes are given the z-value of the grate.
If mode = 3, the shapes are given the z-value of the cover.

mode = 3 cover level

pit cover

grate
depth of pit

mode = 2 grate level

mode = 1 sump invert
mode = 0 bottom of pit
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the shapes were successfully returned.
ID = 2849


Name
Integer Set_drainage_pit_float(Element drain,Integer pit,Integer pit_float)
Description
For the Element drain, which must be of type Drainage, and pit number pit, set the flag for the
floating pit level to pit_float.
If pit_float = 1, the top of the pit automatically takes its level (height) from the finished surface tin
for the drainage string drain.
If pit_float = 0, the top of the pit level is fixed.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the pit_float value was successfully set.
ID = 1277


Name
Integer Get_drainage_pit_float(Element drain,Integer pit,Integer &pit_float)
Description
For the Element drain, which must be of type Drainage, and pit number pit, return the flag for the
floating pit level as pit_float.
If pit_float = 1, the top of the pit automatically takes its level (height) from the finished surface tin
for the drainage string drain.
If pit_float = 0, the top of the pit level is fixed.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the pit_float value was successfully returned.
ID = 1276


Name
Integer Set_drainage_pit_hgl(Element drain,Integer p,Real hgl)
Description
For the Element drain, which must be of type Drainage, set the hgl level for the centre of the pth
pit of the string to hgl.
If hgl is null then the hgl for the surface is not drawn.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 1241


Name
Integer Get_drainage_pit_hgl(Element drain,Integer p,Real &hgl)
Description
For the Element drain, which must be of type Drainage, get the hgl level for centre of the pth pit
and return it in hgl.
If hgl is null then the hgl for the surface is not drawn.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 1242


Name
Integer Set_drainage_pit_surface_hgl(Element element,Integer pit,Real surface_hgl)
Description
For the Element drain, which must be of type Drainage, set the surface hgl level for the centre of
Page 508

Drainage String Element

Chapter 5 12dPL Library Calls

the pth pit of the string, to surface_hgl.
If surface_hgl is null then the hgl for the surface is not drawn.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2785


Name
Integer Get_drainage_pit_surface_hgl(Element element,Integer pit,Real &surface_hgl)
Description
For the Element drain, which must be of type Drainage, get the surface hgl level for the centre of
the pth pit of the string, and return it in surface_hgl.
If surface_hgl is null then the hgl for the surface is not drawn.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2784


Name
Integer Set_drainage_pit_hgls(Element drain,Integer p,Real lhs,Real rhs)
Description
For the Element drain, which must be of type Drainage, set the hgl levels of the pipes of drain
entering/leaving the pth pit.
The hgl level of the pipe entering/leaving the left side of the pit is given as Real lhs.
The hgl level of the entering/leaving right side of the pit is given as Real rhs.
Note: this is setting the hgl levels for the pipes entering/leaving the pth pit, not the hgl of the pit.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 538


Name
Integer Get_drainage_pit_hgls(Element drain,Integer p,Real &lhs,Real &rhs)
Description
For the Element drain, which must be of type Drainage, get the hgl levels of the pipes of drain
entering/leaving the pth pit.
The hgl level of the pipe entering/leaving the left side of the pit is returned in Real lhs.
The hgl level of the pipe entering/leaving the right side of the pit is returned in Real rhs.
Note: this is getting the hgl levels of the pipes entering/leaving the pth pit, not the hgl of the pit.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.

Drainage String Element

Page 509

12d Model Programming Language Manual

ID = 535


Name
Integer Set_drainage_pit_road_chainage(Element drain,Integer p,Real chainage)
Description
For the Element drain, which must be of type Drainage, set the road chainage for the pth pit to
chainage.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 515


Name
Integer Get_drainage_pit_road_chainage(Element drain,Integer p,Real &chainage)
Description
For the Element drain, which must be of type Drainage, return the road chainage for the pth pit
in chainage.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 509


Name
Integer Set_drainage_pit_road_name(Element drain,Integer p,Text name)
Description
For the Element drain, which must be of type Drainage, set the road name for the pth pit to
name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 516


Name
Integer Get_drainage_pit_road_name(Element drain,Integer p,Text &name)
Description
For the Element drain, which must be of type Drainage, return the road name for the pth pit in
name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 510


Name
Integer Set_drainage_pit_type(Element drain,Integer p,Text type)
Description
For the Element drain, which must be of type Drainage, set the type for the pth pit to type.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 512


Name
Integer Get_drainage_pit_type(Element drain,Integer p,Text &type)
Description
For the Element drain, which must be of type Drainage, return the type for the pth pit in type.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 506


Name
Integer Get_drainage_pit_branches(Element drain,Integer p,Dynamic_Element &branches)
Description
For the Element drain, which must be of type Drainage, this function returns a list of the
branches (each branch is a Drainage string) that flow into the pth pit of drain. The list of
branches is returned in the Dynamic_Element branches.
Note: a branch is defined as a drainage string that flows into a non-outlet pit of another drainage
string. Thus the flow direction of the drainage string is important.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 1443


Name
Integer Get_drainage_pit_depth(Element drain,Integer p,Real &depth)
Description
For the Element drain, which must be of type Drainage, return the depth of the pth pit in depth.
If drain is not an Element of type Drainage then a non zero function return code is returned.
See for the def inion of pit depth.
A function return value of zero indicates the data was successfully returned.
Drainage String Element

Page 511

12d Model Programming Language Manual

ID = 519


Name
Integer Get_drainage_pit_drop(Element drain,Integer p,Real &drop)
Description
For the Element drain, which must be of type Drainage, return the drop through the pth pit in
drop.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 518


Name
Integer Get_drainage_pit_ns(Element drain,Integer n,Real &ns_ht)
Description
For the Element drain, which must be of type Drainage, return the height from the natural
surface tin at the location of the centre of the nth pit in ns_ht.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 521


Name
Integer Get_drainage_pit_fs(Element drain,Integer n,Real &fs_ht)
Description
For the Element drain, which must be of type Drainage, return the height from the finished
surface tin at the location of the centre of the nth pit in fs_ht.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 522


Name
Integer Get_drainage_number_of_manhole_types(Integer &num_types)
Description
Get the number of pit (manhole, maintenance hole) types from the drainage.4d file and return the
number in num_types.
A function return value of zero indicates the data was successfully returned.
ID = 2077


Name
Integer Get_drainage_manhole_type(Integer i,Text &type)
Description
Get the name of the i’th manhole type from the drainage.4d file and return the name in type.
A function return value of zero indicates the data was successfully returned.
ID = 2078


Name
Integer Get_drainage_manhole_length(Text type,Real &length)
Description
For the manhole of type type from the drainage.4d file, return the length as given by the keyword
"mhsize" in length (the length and width are given by the keyword "mhsize").
If there is no such manhole type, -1 is returned as the function return value.
If the length does not exist for the manhole type type, -2 is returned as the function return value.
A function return value of zero indicates the data was successfully returned.
ID = 2079


Name
Integer Get_drainage_manhole_width(Text type,Real &width)
Description
For the manhole of type type from the drainage.4d file, return the width as given by the keyword
"mhsize" in width (the length and width are given by the keyword "mhsize").
If there is no such manhole type, -1 is returned as the function return value.
If the width does not exist for manhole type type, -2 is returned as the function return value.
A function return value of zero indicates the data was successfully returned.
ID = 2080


Name
Integer Get_drainage_manhole_description(Text type,Text &description)
Description
Get the description of the manhole of type type from the drainage.4d file and return the
description in description.
If there is no such manhole type, -1 is returned as the function return value.
If the description does not exist for manhole type type, -2 is returned as the function return value.
A function return value of zero indicates the data was successfully returned.
ID = 2081


Name
Integer Get_drainage_manhole_notes(Text type,Text &notes)
Description
Get the notes of the manhole of type type from the drainage.4d file and return the notes in
notes.
If there is no such manhole type, -1 is returned as the function return value.
If notes do not exist for manhole type type, -2 is returned as the function return value.
A function return value of zero indicates the data was successfully returned.
ID = 2082


Name
Integer Get_drainage_manhole_group(Text type,Text &group)
Description
Get the group of the manhole of type type from the drainage.4d file and return the group in
group.
If there is no such manhole type, -1 is returned as the function return value.
If group does not exist for manhole type type, -2 is returned as the function return value.
A function return value of zero indicates the data was successfully returned.
ID = 2083


Name
Integer Get_drainage_manhole_capacities(Text type,Real &multi,Real &fixed,Real &percent,Real
&coeff,Real &power)
Description
From the drainage.4d file, for the manhole of type type return the values for the generic Inlet

Page 514

Drainage String Element

Chapter 5 12dPL Library Calls

capacities from the file for:
cap_multi
cap_fixed
cap_percent
cap_coeff
cap_power

// if undefined the default is 1
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 1

A function return value of zero indicates the data was successfully returned.
ID = 2084


Name
Integer Get_drainage_number_of_sag_curves(Text type,Integer &n)
Description
From the drainage.4d file, for the manhole of type type, get the number of sag capacity curves
(cap_curve_sag) and return the number in n.
A function return value of zero indicates the number was successfully returned.
ID = 2085


Name
Integer Get_drainage_sag_curve_name(Text type,Text &name)
Description
From the drainage.4d file, for the manhole of type type, return the name of the sag capacity
curve (cap_curve_sag) in name.
A function return value of zero indicates the data was successfully returned.
ID = 2086


Name
Integer Get_drainage_manhole_capacities_sag(Text type,Real &multi,Real &fixed,Real &percent,Real
&coeff,Real &power)
Description
From the drainage.4d file, for the manhole of type type, return the sag capacity curve
(cap_curve_sag) values from the file for:
cap_multi
cap_fixed
cap_percent
cap_coeff
cap_power

// if undefined the default is 1
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 1

A function return value of zero indicates the data was successfully returned.
ID = 2087


Name
Integer Get_drainage_number_of_sag_curve_coords(Text type,Integer &n)
Description
From the drainage.4d file, for the manhole of type type, return the number of coordinates in the
sag capacity curve (cap_curve_sag) in n.
Note - n may be 0.
A function return value of zero indicates the number was successfully returned.
ID = 2088


Name
Integer Get_drainage_sag_curve_coords(Text type,Real Depth[],Real Qin[],Integer nmax,Integer &num)
Description
From the drainage.4d file, for the manhole of type type, return the coordinates for the sag
capacity curve (cap_curve_sag) in Depth[] and Qin[].
nmax is the size of the arrays Depth[] and Qin[], and num returns the actual number of
coordinates.
A function return value of zero indicates the coordinates were successfully returned.
ID = 2089


Name
Integer Get_drainage_number_of_grade_curves(Text type,Integer &n)
Description
From the drainage.4d file, for the manhole of type type, get the number of grade curves
(cap_curve_grade) and return the number in n.
A function return value of zero indicates the number was successfully returned.
ID = 2090


Name
Integer Get_drainage_grade_curve_name(Text type,Integer i,Text &name)
Description
From the drainage.4d file, for the manhole of type type, return the name of the i’th grade curve
(cap_curve_grade) in name.
A function return value of zero indicates the name was successfully returned.
ID = 2091


Name
Integer Get_drainage_grade_curve_threshold(Text type,Text name,Integer &by_grade,Real
&road_grade,Integer &by_xfall,Real &road_xfall)
Description
From the drainage.4d file, for the manhole of type type, and the capacity on grade curve called
name:
if the keyword "road_grade" exists then by_grade is set to 1 and the road on grade value is
returned in road_grade. Otherwise by_grade is set to 0.
if the keyword "road_crossfall" exists then by_crossfall is set to 1 and the road crossfall value is
returned in road_xfall. Otherwise by_xfall is set to 0.
A function return value of zero indicates the values were successfully returned.
ID = 2092


Name
Integer Get_drainage_manhole_capacities_grade(Text type,Text name,Real &multi,Real &fixed,Real
&percent,Real &coeff,Real &power)
Description
From the drainage.4d file, for the manhole of type type, and the capacity on grade curve called
name, return the sag capacity curve (cap_curve_grade) values from the file for:
cap_multi
cap_fixed
cap_percent
cap_coeff
cap_power

// if undefined the default is 1
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 0
// if undefined the default is 1

A function return value of zero indicates the data was successfully returned.
ID = 2093


Name
Integer Get_drainage_number_of_grade_curve_coords(Text type,Text name,Integer &n)
Description
From the drainage.4d file, for the manhole of type type, and the capacity on grade curve called
name, return the number of coordinates in the on grade capacity curve (cap_curve_grade) in n.
Note - n may be 0.
A function return value of zero indicates the number was successfully returned.
ID = 2094


Name

Drainage String Element

Page 517

12d Model Programming Language Manual

Integer Get_drainage_grade_curve_coords(Text type,Text name,Real Qa[],Real Qin[],Integer
nmax,Integer &n)
Description
From the drainage.4d file, for the manhole of type type, and the capacity on grade curve called
name, return the coordinates for the on grade capacity curve (cap_curve_grade) in Qa[] and
Qin[].
nmax is the size of the arrays Qa[] and Qin[], and num returns the actual number of coordinates.
A function return value of zero indicates the coordinates were successfully returned.
ID = 2095


Name
Integer Get_drainage_manhole_config(Text type,Text &cap_config)
Description
From the drainage.4d file, for the manhole of type type, return the value of the keyword
"cap_config" in cap_config.
The value of cap_config must be:
"g" - for an on grade pit
"s" - for an sag pit
or
"m" - for a manhole sealed pit.
If the value of cap_config is not "g", "s" or "m" then a non zero function return value is returned.
A function return value of zero indicates the value was successfully returned.
ID = 2103


Name
Integer Get_drainage_manhole_diam(Text type,Real &diameter)
Description
From the drainage.4d file, for the manhole of type type, return the value of the keyword
"mhdiam" in diameter.
A function return value of zero indicates the value was successfully returned.
ID = 2104


Name
Integer Get_drainage_pit_attribute_length(Element drain,Integer pit,Integer att_no,Integer &att_len)
Description
For pit number pit of the Element drain, get the length (in bytes) of the attribute number att_no.
The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for attributes of type Text and Binary.
ID = 1005


Name
Integer Get_drainage_pit_attribute_length(Element drain,Integer pit,Text att_name,Integer &att_len)
Description
For pit number pit of the Element drain, get the length (in bytes) of the attribute with the name
att_name. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 1004


Name
Integer Get_drainage_pit_attribute_type(Element drain,Integer pit,Integer att_no,Integer &att_type)
Description
For pit number pit of the Element drain, get the type of the attribute with attribute number
att_no. The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 1003


Name
Integer Get_drainage_pit_attribute_type(Element drain,Integer pit,Text att_name,Integer &att_type)
Description
For pit number pit of the Element drain, get the type of the attribute with name att_name. The
attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.

Drainage String Element

Page 519

12d Model Programming Language Manual

ID = 1002


Name
Integer Get_drainage_pit_attribute_name(Element drain,Integer pit,Integer att_no,Text &name)
Description
For pit number pit of the Element drain, get the name of the attribute number att_no. The
attribute name is returned in name.
A function return value of zero indicates the attribute name was successfully returned.
ID = 1001


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Real &real)
Description
For the Element drain, get the attribute with number att_no for the pit number pit and return the
attribute value in real. The attribute must be of type Real.
If the Element is not of type Drainage or the attribute is not of type Real then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1000


Name
Integer Get_drainage_pit_attribute (Element drain,Integer pit,Integer att_no,Integer &int)
Description
For the Element drain, get the attribute with number att_no for the pit number pit and return the
attribute value in int. The attribute must be of type Integer.
If the Element is not of type Drainage or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 999


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Text &txt)
Description

Page 520

Drainage String Element

Chapter 5 12dPL Library Calls

For the Element drain, get the attribute with number att_no for the pit number pit and return the
attribute value in txt. The attribute must be of type Text.
If the Element is not of type Drainage or the attribute is not of type Text then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 998


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Real &real)
Description
For the Element drain, get the attribute called att_name for the pit number pit and return the
attribute value in real. The attribute must be of type Real.
If the Element is not of type Drainage or the attribute is not of type Real then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 997


Name
Integer Get_drainage_pit_number_of_attributes(Element drain,Integer pit,Integer &no_atts)
Description
Get the total number of attributes for pit number pit of the Element drain.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the number of attributes was successfully returned.
ID = 994


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Text &txt)
Description
For the Element drain, get the attribute called att_name for the pit number pit and return the
attribute value in txt. The attribute must be of type Text.
If the Element is not of type Drainage or the attribute is not of type Text then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.

Drainage String Element

Page 521

12d Model Programming Language Manual

ID = 995


Name
Integer Get_drainage_pit_attribute (Element drain,Integer pit,Text att_name,Integer &int)
Description
For the Element drain, get the attribute called att_name for the pit number pit and return the
attribute value in int. The attribute must be of type Integer.
If the Element is not of type Drainage or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 996


Name
Integer Get_drainage_pit_attributes(Element drain,Integer pit,Attributes &att)
Description
For the Element drain, return the Attributes for the pit number pit as att.
If the Element is not of type Drainage or the pit number pit has no attribute then a non-zero
return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 2022


Name
Integer Set_drainage_pit_attributes(Element drain,Integer pit,Attributes att)
Description
For the Element drain, set the Attributes for the pit number pit to att.
If the Element is not of type Drainage then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully set.
ID = 2023


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Uid &uid)
Description
For the Element drain, get the attribute called att_name for the pit number pit and return the
attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero return

Page 522

Drainage String Element

Chapter 5 12dPL Library Calls

value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2024


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Attributes &att)
Description
For the Element drain, get the attribute called att_name for the pit number pit and return the
attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2025


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Uid &uid)
Description
For the Element drain, get the attribute with number att_no for the pit number pit and return the
attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2026


Name
Integer Get_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Attributes &att)
Description
For the Element drain, get the attribute with number att_no for the pit number pit and return the
attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.

Drainage String Element

Page 523

12d Model Programming Language Manual

ID = 2027


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Uid uid)
Description
For the Element drain and on the pit number pit,
if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to uid.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2028


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Attributes att)
Description
For the Element drain and on the pit number pit,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2029


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Uid uid)
Description
For the Element drain and on the pit number pit, if the attribute number att_no exists and it is of
type Uid, then its value is set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2030


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Attributes att)
Description
For the Element drain and on the pit number pit, if the attribute number att_no exists and it is of
type Attributes, then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2031


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Real real)
Description
For the Element drain and on the pit number pit,
if the attribute with number att_no does not exist then create it as type Real and give it the
value real.
if the attribute with number att_no does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1011


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Integer int)
Description
For the Element drain and on the pit number pit,
if the attribute with number att_no does not exist then create it as type Integer and give it the
value int.
if the attribute with number att_no does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1010


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Integer att_no,Text txt)
Description
For the Element drain and on the pit number pit,
if the attribute with number att_no does not exist then create it as type Text and give it the
value txt.
if the attribute with number att_no does exist and it is type Text then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1009


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Real real)
Description
For the Element drain and on the pit number pit,
if the attribute called att_name does not exist then create it as type Real and give it the value
real.
if the attribute called att_name does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1008


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Integer int)
Description
For the Element drain and on the pit number pit
if the attribute called att_name does not exist then create it as type Integer and give it the value
int.
if the attribute called att_name does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1007


Name
Integer Set_drainage_pit_attribute(Element drain,Integer pit,Text att_name,Text txt)
Description
For the Element drain and on the pit number pit,
if the attribute called att_name does not exist then create it as type Text and give it the value
txt.
if the attribute called att_name does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1006


Name
Integer Drainage_pit_attribute_exists (Element drain,Integer pit,Text att_name)
Description
For the Element drain, checks to see if an attribute with the name att_name exists for pit number
pit.
A non-zero function return value indicates that an attribute of that name exists.
If the attribute does not exist, or drain is not of type Drainage, or there is no pit number pit, a
zero function return value is returned.
Warning - this is the opposite of most 12dPL function return values.
ID = 987


Name
Integer Drainage_pit_attribute_exists (Element drain,Integer pit,Text name,Integer &no)
Description
For the Element drain, checks to see if an attribute with the name att_name exists for pit number
pit.
If the attribute of that name exists, its attribute number is returned is no.
A non-zero function return value indicates that an attribute of that name exists.
If the attribute does not exist, or drain is not of type Drainage, or there is no pit number pit, a
zero function return value is returned.
Warning - this is the opposite of most 12dPL function return values.
ID = 988


Name
Integer Drainage_pit_attribute_delete (Element drain,Integer pit,Text att_name)
Description

Drainage String Element

Page 527

12d Model Programming Language Manual

For the Element drain, delete the attribute with the name att_name for pit number pit.
If the Element drain is not of type Drainage or drain has no pit number pit, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 989


Name
Integer Drainage_pit_attribute_delete (Element drain,Integer pit,Integer att_no)
Description
For the Element drain, delete the attribute with attribute number att_no for pit number pit.
If the Element drain is not of type Drainage or drain has no pit number pit, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 990


Name
Integer Drainage_pit_attribute_delete_all (Element drain,Integer pit)
Description
Delete all the attributes of pit number pit of the drainage string drain.
A function return value of zero indicates the function was successful.
ID = 991


Name
Integer Drainage_pit_attribute_dump (Element drain,Integer pit)
Description
Write out information to the Output Window about the pit attributes for pit number pit of the
drainage string drain.
A function return value of zero indicates the function was successful.
ID = 992


Name
Integer Drainage_pit_attribute_debug (Element drain,Integer pit)
Description
Write out even more information to the Output Window about the pit attributes for pit number pit
of the drainage string drain.
A function return value of zero indicates the function was successful.
ID = 993


Name
Integer Set_drainage_pipe_inverts(Element drain,Integer p,Real lhs,Real rhs)
Description
Set the pipe invert levels for the pth pipe of the string Element drain.
The invert level of the left hand end of the pipe is given as Real lhs.
The invert level of the right hand end of the pipe is given as Real rhs.
See Drainage Pipe Definitions .
Note: pipe invert levels can also be set using the call Set_drainage_pit_inverts(Element
drain,Integer p,Real lhs,Real rhs) .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 536


Name
Integer Get_drainage_pipe_inverts(Element drain,Integer p,Real &lhs,Real &rhs)
Description
Get the pipe invert levels for the pth pipe of the string Element drain.
The invert level of the pipe of the left hand end of the pipe is returned in Real lhs.
The invert level of the right hand end of the pipe is returned in Real rhs.
See Drainage Pipe Definitions .
Note: pipe invert levels can also be returned using the call Get_drainage_pit_inverts(Element
drain,Integer p,Real &lhs,Real &rhs) .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 533


Name
Integer Set_drainage_pipe_number_of_pipes(Element drain,Integer pipe,Integer n)
Description
For the Element drain, which must be of type Drainage, and for the pipe number pipe, set the
number of pipes to be n.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the number was successfully set.
ID = 2852


Name
Integer Get_drainage_pipe_number_of_pipes(Element drain,Integer pipe,Integer &n)
Page 532

Drainage String Element

Chapter 5 12dPL Library Calls

Description
For the Element drain, which must be of type Drainage, and for the pipe number pipe, return the
number of pipes as n.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the number was successfully returned.
ID = 2853


Name
Integer Set_drainage_pipe_colour(Element drain,Integer p,Integer colour)
Description
Set the colour of the pth pipe of the Element drain to colour number colour.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2783


Name
Integer Get_drainage_pipe_colour(Element drain,Integer p,Integer &colour)
Description
Get the colour number of the pth pipe of the Element drain and return the colour number in
colour.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 2782


Name
Integer Set_drainage_pipe_name(Element drain,Integer p,Text name)
Description
Set the pipe name for the pth pipe of the string Element drain.
The pipe name is given as Text name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 502


Name
Integer Get_drainage_pipe_name(Element drain,Integer p,Text &name)
Description

Drainage String Element

Page 533

12d Model Programming Language Manual

Get the pipe name for the pth pipe of the string Element drain.
The pipe name is returned in Text name.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 497


Name
Integer Set_drainage_pipe_type(Element drain,Integer p,Text type)
Description
Set the pipe type for the pth pipe of the string Element drain.
The pipe type is given as Text type.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 501


Name
Integer Get_drainage_pipe_type(Element drain,Integer p,Text &type)
Description
Get the pipe type for the pth pipe of the string Element drain.
The pipe type is returned in Text type.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 496


Name
Integer Set_drainage_pipe_cover(Element drain,Integer pipe,Real cover)
Description
For the Element drain, which must be of type Drainage, set the minimum cover for pipe number
pipe, to cover.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 1442


Name
Integer Get_drainage_pipe_cover(Element drain,Integer pipe,Real &minc,Real &maxc)
Description

Page 534

Drainage String Element

Chapter 5 12dPL Library Calls

For the Element drain, which must be of type Drainage, return the minimum cover value for pipe
number pipe, in cover.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 1441


Name
Integer Set_drainage_pipe_diameter(Element drain,Integer p,Real diameter)
Description
Set the pipe diameter for the pth pipe of the string Element drain.
The pipe diameter is given as Real diameter.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 500


Name
Integer Set_drainage_pipe_width(Element drain,Integer pipe,Real &width)
Description
For the Element drain, which must be of type Drainage, and pipe number pipe, set the width of
the pipe to the value width.
If a width is not to be used then set a null value for width.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the width was successfully set.
ID = 2857


Name
Integer Set_drainage_pipe_top_width(Element drain,Integer pipe,Real &top_width)
Description
For the Element drain, which must be of type Drainage, and pipe number pipe, set the top width
of the pipe to the value top_width.
If a top width is not to be used then set a null value for top_width.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the top width was successfully set.
ID = 2858


Name
Integer Get_drainage_pipe_diameter(Element drain,Integer p,Real &diameter)
Description
Get the pipe diameter for the pth pipe of the string Element drain.
The pipe diameter is returned in Real diameter.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 495


Name
Integer Get_drainage_pipe_width(Element drain,Integer pipe,Real &width)
Description
For the Element drain, which must be of type Drainage, and pipe number pipe, get the width of
the pipe and return it in width.
If a width is not to be used then a null value is returned for width.
If drain is not an Element of type Drainage then a non zero function return code is returned.
See Drainage Pipe Cross Sections .
A function return value of zero indicates the width was successfully returned.
ID = 2855


Name
Integer Get_drainage_pipe_top_width(Element drain,Integer pipe,Real &top_width)
Description
For the Element drain, which must be of type Drainage, and pipe number pipe, get the top width
of the pipe and return it in top_width.
If a top width is not to be used then a null value is returned for top_width.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the top width was successfully returned.
ID = 2856


Name
Integer Get_drainage_pipe_thickness(Element drain,Integer pipe,Real &top,Real &bottom,Real
&left,Real &right)
Description

Page 536

Drainage String Element

Chapter 5 12dPL Library Calls

For the Element drain, which must be of type Drainage, and pipe number pipe, set the pipe
thicknesses to top, bottom, left and right where
top is the thickness for a round pipe, and the top thickness for a non round pipe.
bottom is the thickness of the bottom of the pipe for a non round pipe.
left is the thickness of the left of the pipe for a non round pipe.
right is the thickness of the right of the pipe for a non round pipe.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the thicknesses were successfully set.
ID = 2867


Name
Integer Set_drainage_pipe_thickness(Element drain,Integer pit,Real top,Real bottom,Real left,Real right)
Description
For the Element drain, which must be of type Drainage, and pipe number pipe, return the pipe
thicknesses in top, bottom, left and right where
top is the thickness for a round pipe, and the top thickness for a non round pipe.
bottom is the thickness of the bottom of the pipe for a non round pipe.
left is the thickness of the left of the pipe for a non round pipe.
right is the thickness of the right of the pipe for a non round pipe.
See Drainage Pipe Cross Sections .
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the thicknesses were successfully returned.
ID = 2868


Name
Integer Get_drainage_pipe_intersects_pit(Element drain,Integer pipe,Real offset,Real &lx,Real &ly,Real
&lch,Real &rx,Real &ry,Real &rch)
Description
For the Element drain, which must be of type Drainage, and for pipe number pipe, get the (x,y)
coordinates and chainage of the intersection of the pipe offset (in the (x,y) pane) by the distance
offset, with the pits at either end of the offset pipe.
If offset is positive then the pipe is offset to the right of the original pipe, and to the left when the
offset is negative. Left and right are defined with respect to the direction of the pipe.
The coordinates of the intersection of the pipe with the left hand pit are returned as (lx,ly) and the
chainage of the intersection point as lch.
The coordinates of the intersection of the pipe with the right hand pit are returned as (rx,ry) and
the chainage of the intersection point as rch.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the values were successfully returned.

Drainage String Element

Page 537

12d Model Programming Language Manual

ID = 2851


Name
Integer Get_drainage_pipe_shape(Element element,Integer pipe,Integer mode,Dynamic_Element
&super_inside,Dynamic_Element &super_outside)
Description
For the Element drain, which must be of type Drainage, return as super strings, the shape of the
insides of the pipes in the Dynamic_Element super_inside and the shape of the outsides of the
pipes in the Dynamic_Element super_outside. The number of pipes, separation and thickness
settings are used in generating all the shapes.
So this function returns a list of the super strings that “draw” the plan view of the inside and
outside of the pipes.
For a circular pipe with wall thickness, the super_inside string is a super string with a plan box
shape with a width of the diameter of the pipe and a length equal to the length of the pipe. And
super_outside has a width equal to (diameter + 2*thickness).
For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan box
shape with a width of the diameter of the pipe and a length equal to the length of the pipe. And
super_outside has a width equal to (diameter + left_thickness + right_thickness)
mode controls the z values assigned to the super strings.
If mode = 0, the shapes are given the z-value of the invert levels of the pipes.
If mode = 1, the shapes are given the z-value of the centre levels of the pipes.
If mode = 2, the shapes are given the z-value of the obvert levels of the pipes.
A function return value of 2 indicates the super strings could not be created.
A function return value of zero indicates the shapes were successfully returned.
ID = 2854


Name
Integer Get_drainage_pipe_shape(Element drain,Integer pipe,Integer mode,Real offset,Element
&super_inside,Element &super_outside)
Description
For the Element drain, which must be of type Drainage, return the shape of the inside of pipe
number pipe as the super string super_inside and the shape of the outside of the pipe as
super_outside, and the shapes are offset in the (x,y) plane from the pipe by the distance offset.
If offset is positive then the shapes are offset to the right of the pipe and to the left when the
offset is negative. Left and right is defined with respect to the direction of the pipe.
So this function returns a list of the super strings that “draw” the plan view of the inside and
outside of the pipe offset by the given value offset.
For for a circular pipe with a wall thickness, the super_inside is a super string with a plan box
shape with a width of the diameter of the pipe and a length equal to the length of the pipe. And
super_outside has a width equal to (diameter + 2*thickness).
For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan box
shape with a width of the diameter of the pipe and a length equal to the length of the pipe. And

Page 538

Drainage String Element

Chapter 5 12dPL Library Calls

super_outside has a width equal to (diameter + left_thickness + right_thickness)
If mode = 0, the shapes are given the z-value of the invert levels of the pipe.
If mode = 1, the shapes are given the z-value of the centre levels of the pipe.
If mode = 2, the shapes are given the z-value of the obvert levels of the pipe.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the shapes were successfully returned.
Note: the number of pipes and separation are not used for generating the shapes and offset is
use instead. For generating shapes using number of pipes and separation, see
Get_drainage_pipe_shape(Element element,Integer pipe,Integer mode,Dynamic_Element
&super_inside,Dynamic_Element &super_outside)
ID = 2850


Name
Integer Set_drainage_pipe_hgls(Element drain,Integer p,Real lhs,Real rhs)
Description
Set the pipe hgl levels for the pth pipe of the string Element drain.
The hgl level of the left hand side of the pipe is set to lhs.
The hgl level of the right hand side of the pipe is set to rhs.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 537


Name
Integer Get_drainage_pipe_hgls(Element drain,Integer p,Real &lhs,Real &rhs)
Description
Get the pipe HGL levels for the pth pipe of the string Element drain.
The hgl level of the left hand side of the pipe is returned in lhs.
The hgl level of the right hand side of the pipe is returned in rhs.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 534


Name
Integer Set_drainage_pipe_velocity(Element drain,Integer p,Real velocity)
Description
Get the pipe flow velocity for the pth pipe of the string Element drain.
The velocity of the pipe is returned in Real velocity.

Drainage String Element

Page 539

12d Model Programming Language Manual

If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 499


Name
Integer Get_drainage_pipe_velocity(Element drain,Integer p,Real &velocity)
Description
Get the flow velocity for the pth pipe of the string Element drain.
The velocity is returned in Real velocity.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 494


Name
Integer Set_drainage_pipe_flow(Element drain,Integer p,Real flow)
Description
Get the pipe flow volume for the pth pipe of the string Element drain.
The velocity of the pipe is returned in Real flow.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully set.
ID = 498


Name
Integer Get_drainage_pipe_flow(Element drain,Integer p,Real &flow)
Description
Get the flow volume for the pth pipe of the string Element drain.
The volume is returned in Real velocity.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 493


Name
Integer Get_drainage_pipe_length(Element drain,Integer p,Real &length)
Description
Get the pipe length for the pth pipe of the string Element drain.

Page 540

Drainage String Element

Chapter 5 12dPL Library Calls

The length of the pipe is returned in Real length.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 503


Name
Integer Get_drainage_pipe_grade(Element drain,Integer p,Real &grade)
Description
Get the pipe grade for the pth pipe of the string Element drain.
The grade of the pipe is returned in Real grade.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 504


Name
Integer Get_drainage_pipe_ns(Element drain,Integer p,Real ch[],Real ht[],Integer max_pts,Integer
&npts)
Description
For the drainage string drain, get the heights along the pth pipe from the natural surface tin.
Because the pipe is long then there will be more than one height and the heights are returned in
chainage order along the pipe. The heights are returned in the arrays ch (for chainage) and ht.
The maximum number of natural surface points that can be returned is given by max_pts
(usually the size of the arrays).
The actual number of points of natural surface is returned in npts.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 523


Name
Integer Get_drainage_pipe_fs(Element drain,Integer p,Real ch[],Real ht[],Integer max_pts,Integer
&npts)
Description
For the drainage string drain, get the heights along the pth pipe from the finished surface tin.
Because the pipe is long then there will be more than one height and the heights are returned in
chainage order along the pipe. The heights are returned in the arrays ch (for chainage) and ht.
The maximum number of finished surface points that can be returned is given by max_pts
(usually the size of the arrays).

Drainage String Element

Page 541

12d Model Programming Language Manual

The actual number of points of finished surface is returned in npts.
If drain is not an Element of type Drainage then a non zero function return code is returned.
A function return value of zero indicates the data was successfully returned.
ID = 524


Name
Integer Get_drainage_number_of_pipe_types(Integer &n)
Description
Get the number of pipe types (classes) from the drainage.4d file and return the number in n.
A function return value of zero indicates the data was successfully returned.
ID = 2271


Name
Integer Get_drainage_pipe_type(Integer i,Text &type)
Description
Get the name of the i’th pipe type (class) from the drainage.4d file and return the name in type.
A function return value of zero indicates the data was successfully returned.
ID = 2272


Name
Integer Get_drainage_pipe_roughness(Text type,Real &roughness,Integer &roughness_type)
Description
For the pipe type type, return from the drainage.4d file, the roughness in roughness and
roughness type in roughness_type. Roughness type is MANNING (0) or COLEBROOK (1).
If pipe type type does not exist, then a non-zero return value is returned.
A function return value of zero indicates the data was successfully returned.
ID = 2273


Name
Integer Set_drainage_pipe_attributes(Element drain,Integer pipe,Attributes att)
Description
For the Element drain, set the Attributes for the pipe number pipe to att.
If the Element is not of type Drainage then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully set.
ID = 2033


Name
Integer Get_drainage_pipe_attributes(Element drain,Integer pipe,Attributes &att)
Description
For the Element drain, return the Attributes for the pipe number pipe as att.
If the Element is not of type Drainage or the pipe number pipe has no attribute then a non-zero
return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 2032


Name
Integer Get_drainage_pipe_attribute(Element drain,Integer pipe,Text att_name,Uid &uid)
Description
For the Element drain, get the attribute called att_name for the pipe number pipe and return the
attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2034


Name
Integer Get_drainage_pipe_attribute(Element drain,Integer pipe,Text att_name,Attributes &att)
Description
For the Element drain, get the attribute called att_name for the pipe number pipe and return the
attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zero
return value is returned.
Page 544

Drainage String Element

Chapter 5 12dPL Library Calls

A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2035


Name
Integer Get_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Uid &uid)
Description
For the Element drain get the attribute with number att_no for the pipe number pipe and return
the attribute value in uid. The attribute must be of type Uid.
If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2036


Name
Integer Get_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Attributes &att)
Description
For the Element drain, get the attribute with number att_no for the pipe number pipe and return
the attribute value in att. The attribute must be of type Attributes.
If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 2037


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Text att_name,Uid uid)
Description
For the Element drain and on the pipe number pipe,
if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to uid.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2038


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Text att_name,Attributes att)
Description
For the Element drain and on the pipe number pipe,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 2039


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Uid uid)
Description
For the Element drain and on the pipe number pipe, if the attribute number att_no exists and it
is of type Uid, then its value is set to uid.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2040


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Attributes att)
Description
For the Element drain and on the pipe number pipe, if the attribute number att_no exists and it
is of type Attributes, then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2041


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Text att_name,Text &txt)
Description
For the Element drain, get the attribute called att_name for the pipe number pipe and return the
attribute value in txt. The attribute must be of type Text.
If the Element is not of type Drainage or the attribute is not of type Text then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1020


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Text att_name,Integer &int)
Description
For the Element drain, get the attribute called att_name for the pipe number pipe and return the
attribute value in int. The attribute must be of type Integer.
If the Element is not of type Drainage or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1021


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Text att_name,Real &real)
Description
For the Element drain, get the attribute called att_name for the pipe number pipe and return the
attribute value in real. The attribute must be of type Real.
If the Element is not of type Drainage or the attribute is not of type Real then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1022


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Integer att_no,Text &txt)
Description
For the Element drain, get the attribute with number att_no for the pipe number pipe and return
the attribute value in txt. The attribute must be of type Text.
If the Element is not of type Drainage or the attribute is not of type Text then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1023


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Integer att_no,Integer &int)
Description
For the Element drain, get the attribute with number att_no for the pipe number pipe and return
the attribute value in int. The attribute must be of type Integer.
If the Element is not of type Drainage or the attribute is not of type Integer then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1024


Name
Integer Get_drainage_pipe_attribute (Element drain,Integer pipe,Integer att_no,Real &real)
Description
For the Element drain, get the attribute with number att_no for the pipe number pipe and return
the attribute value in real. The attribute must be of type Real.
If the Element is not of type Drainage or the attribute is not of type Real then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1025


Name
Integer Drainage_pipe_attribute_exists (Element drain,Integer pipe,Text att_name)
Description
For the Element drain, checks to see if an attribute with the name att_name exists for pipe
number pipe.
A non-zero function return value indicates that an attribute of that name exists.
If the attribute does not exist, or drain is not of type Drainage, or there is no pipe number pipe, a
zero function return value is returned.
Warning this is the opposite of most 12dPL function return values.
ID = 1012


Name
Integer Drainage_pipe_attribute_exists (Element drain, Integer pipe,Text name,Integer &no)
Description
For the Element drain, checks to see if an attribute with the name att_name exists for pipe
number pipe.
If the attribute of that name exists, its attribute number is returned is no.
A non-zero function return value indicates that an attribute of that name exists.
If the attribute does not exist, or drain is not of type Drainage, or there is no pipe number pipe, a
zero function return value is returned.
Warning this is the opposite of most 12dPL function return values.
ID = 1013


Name
Integer Drainage_pipe_attribute_delete (Element drain,Integer pipe,Text att_name)
Description
For the Element drain, delete the attribute with the name att_name for pipe number pipe.
If the Element drain is not of type Drainage or drain has no pipe number pipe, then a non-zero
return code is returned.
A function return value of zero indicates the attribute was deleted.
ID = 1014


Name
Integer Drainage_pipe_attribute_delete (Element drain,Integer pipe,Integer att_no)
Description
For the Element drain, delete the attribute with attribute number att_no for pipe number pipe.
If the Element drain is not of type Drainage or drain has no pipe number pipe, then a non-zero
return code is returned.

Drainage String Element

Page 549

12d Model Programming Language Manual

A function return value of zero indicates the attribute was deleted.
ID = 1015


Name
Integer Drainage_pipe_attribute_delete_all (Element drain,Integer pipe)
Description
Delete all the attributes of pipe number pipe of the drainage string drain.
A function return value of zero indicates the function was successful.
ID = 1016


Name
Integer Drainage_pipe_attribute_dump (Element drain,Integer pipe)
Description
Write out information to the Output Window about the pipe attributes for pipe number pipe of the
drainage string drain.
A function return value of zero indicates the function was successful.
ID = 1017


Name
Integer Drainage_pipe_attribute_debug (Element drain,Integer pipe)
Description
Write out even more information to the Output Window about the pipe attributes for pipe number
pipe of the drainage string drain.
A function return value of zero indicates the function was successful.
ID = 1018


Name
Integer Get_drainage_pipe_number_of_attributes(Element drain,Integer pipe,Integer &no_atts)
Description
Get the total number of attributes for pipe number pipe of the Element drain.
The total number of attributes is returned in Integer no_atts.
A function return value of zero indicates the number of attributes was successfully returned.
ID = 1019


Name
Integer Get_drainage_pipe_attribute_length (Element drain,Integer pipe,Text att_name,Integer &att_len)
Description
For pipe number pipe of the Element drain, get the length (in bytes) of the attribute with the
name att_name. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for user attributes of type Text and Binary.
ID = 1029


Name
Integer Get_drainage_pipe_attribute_length (Element drain,Integer pipe,Integer att_no,Integer &att_len)
Description
For pipe number pipe of the Element drain, get the length (in bytes) of the attribute number
att_no. The attribute length is returned in att_len.
A function return value of zero indicates the attribute length was successfully returned.
Note - the length is useful for attributes of type Text and Binary.
ID = 1030


Name
Integer Get_drainage_pipe_attribute_name(Element drain,Integer pipe,Integer att_no,Text &name)
Description
For pipe number pipe of the Element drain, get the name of the attribute number att_no. The
attribute name is returned in name.
A function return value of zero indicates the attribute name was successfully returned.
ID = 1026


Name
Integer Get_drainage_pipe_attribute_type(Element drain,Integer pipe,Text att_name,Integer &att_type)
Description
For pipe number pipe of the Element drain, get the type of the attribute with name att_name.
The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 1027


Name
Integer Get_drainage_pipe_attribute_type(Element drain,Integer pipe,Integer att_no,Integer &att_type)
Description
For pipe number pipe of the Element drain, get the type of the attribute with attribute number
att_no. The attribute type is returned in att_type.
A function return value of zero indicates the attribute type was successfully returned.
ID = 1028


Name
Integer Set_drainage_pipe_attribute (Element drain,Integer pipe,Text att_name,Text txt)
Description
For the Element drain and on the pipe number pipe,
if the attribute called att_name does not exist then create it as type Text and give it the value
txt.
if the attribute called att_name does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1031


Name
Integer Set_drainage_pipe_attribute (Element drain,Integer pipe,Text att_name,Integer int)
Description
For the Element drain and on the pipe number pipe,
if the attribute called att_name does not exist then create it as type Integer and give it the value
int.
if the attribute called att_name does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1032


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Text att_name,Real real)
Description

Page 552

Drainage String Element

Chapter 5 12dPL Library Calls

For the Element drain and on the pipe number pipe,
if the attribute called att_name does not exist then create it as type Real and give it the value
real.
if the attribute called att_name does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
called att_name.
ID = 1033


Name
Integer Set_drainage_pipe_attribute (Element drain,Integer pipe,Integer att_no,Text txt)
Description
For the Element drain and on the pipe number pipe,
if the attribute with number att_no does not exist then create it as type Text and give it the
value txt.
if the attribute with number att_no does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1034


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Integer int)
Description
For the Element drain and on the pipe number pipe,
if the attribute with number att_no does not exist then create it as type Integer and give it the
value int.
if the attribute with number att_no does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1035


Name
Integer Set_drainage_pipe_attribute(Element drain,Integer pipe,Integer att_no,Real real)
Description
For the Element drain and on the pipe number pipe,

Drainage String Element

Page 553

12d Model Programming Language Manual

if the attribute with number att_no does not exist then create it as type Real and give it the
value real.
if the attribute with number att_no does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attribute
number att_no.
ID = 1036


Name
Integer Get_drainage_hcs(Element drain,Integer &no_hcs)
Description
Get the number of house connections for the string Element drain.
The number of house connection is returned in Integer no_hcs.
A function return value of zero indicates the data was successfully returned.
ID = 590


Name
Integer Get_drainage_hc(Element drain,Integer h,Real &x,Real &y,Real &z)
Description
Get the x,y & z for the hth house connection of the string Element drain.
The x coordinate of the house connection is returned in Real x.
The y coordinate of the house connection is returned in Real y.
The z coordinate of the house connection is returned in Real z.
A function return value of zero indicates the data was successfully returned.
ID = 591


Name
Integer Set_drainage_hc_adopted_level(Element drain,Integer hc,Real level)
Description
For the drainage string drain, set the adopted level for the h’th house connection to level.
A function return value of zero indicates the data was successfully set.
ID = 1302


Name
Integer Get_drainage_hc_adopted_level(Element drain,Integer h,Real &level)
Description
Get the adopted level for the h’th house connection of the string Element drain.
The adopted level of the house connection is returned in Real level.
A function return value of zero indicates the data was successfully returned.
ID = 598


Name
Integer Set_drainage_hc_bush(Element drain,Integer hc,Text bush)
Description
For the drainage string drain, set the bush type for the h’th house connection to bush.
A function return value of zero indicates the data was successfully set.
ID = 1310


Name
Integer Get_drainage_hc_bush(Element drain,Integer h,Text &bush)
Description
Get the bush type for the h’th house connection of the string Element drain.
The bush type of the house connection is returned in Text bush.
A function return value of zero indicates the data was successfully returned.
ID = 606


Name
Integer Set_drainage_hc_colour(Element drain,Integer hc,Integer colour)
Description
For the drainage string drain, set the colour number for the h’th house connection to colour.
A function return value of zero indicates the data was successfully set.
ID = 1307


Name
Integer Get_drainage_hc_colour(Element drain,Integer h,Integer &colour)
Description
Get the colour for the h’th house connection of the string Element drain.
The colour of the house connection is returned in Integer colour.
A function return value of zero indicates the data was successfully returned.
ID = 603


Name
Integer Set_drainage_hc_depth(Element drain,Integer hc,Real depth)
Description
For the drainage string drain, set the depth for the h’th house connection to depth.
A function return value of zero indicates the data was successfully set.

Page 556

Drainage String Element

Chapter 5 12dPL Library Calls

ID = 1305


Name
Integer Get_drainage_hc_depth(Element drain,Integer h,Real &depth)
Description
Get the depth for the h’th house connection of the string Element drain.
The depth of the house connection is returned in Real depth.
A function return value of zero indicates the data was successfully returned.
ID = 601


Name
Integer Set_drainage_hc_diameter(Element drain,Integer hc,Real diameter)
Description
For the drainage string drain, set the diameter for the h’th house connection to diameter.
A function return value of zero indicates the data was successfully set.
ID = 1306


Name
Integer Get_drainage_hc_diameter(Element drain,Integer h,Real &diameter)
Description
Get the diameter for the h’th house connection of the string Element drain.
The diameter of the house connection is returned in Real diameter.
A function return value of zero indicates the data was successfully returned.
ID = 602


Name
Integer Set_drainage_hc_grade(Element drain,Integer hc,Real grade)
Description
For the drainage string drain, set the grade for the h’th house connection to grade.
A function return value of zero indicates the data was successfully set.
ID = 1304


Name
Integer Get_drainage_hc_grade(Element drain,Integer h,Real &grade)

Drainage String Element

Page 557

12d Model Programming Language Manual

Description
Get the grade for the h’th house connection of the string Element drain.
The grade of the house connection is returned in Real grade.
A function return value of zero indicates the data was successfully returned.
ID = 600


Name
Integer Set_drainage_hc_hcb(Element drain,Integer hc,Integer hcb)
Description
For the drainage string drain, set the hcb for the h’th house connection to hcb.
A function return value of zero indicates the data was successfully set.
ID = 1300


Name
Integer Get_drainage_hc_hcb(Element drain,Integer h,Integer &hcb)
Description
Get the hcb for the h’th house connection of the string Element drain.
The hcb of the house connection is returned in Integer hcb.
A function return value of zero indicates the data was successfully returned.
ID = 596


Name
Integer Set_drainage_hc_length(Element drain,Integer hc,Real length)
Description
For the drainage string drain, set the length for the h’th house connection to length.
A function return value of zero indicates the data was successfully set.
ID = 1303


Name
Integer Get_drainage_hc_length(Element drain,Integer h,Real &length)
Description
Get the length for the h’th house connection of the string Element drain.
The length of the house connection is returned in Real length.
A function return value of zero indicates the data was successfully returned.
ID = 599


Name
Integer Set_drainage_hc_level(Element drain,Integer hc,Real level)
Description
For the drainage string drain, set the level for the h’th house connection to level.
A function return value of zero indicates the data was successfully set.
ID = 1301


Name
Integer Get_drainage_hc_level(Element drain,Integer h,Real &level)
Description
Get the level for the h’th house connection of the string Element drain.
The level of the house connection is returned in Real level.
A function return value of zero indicates the data was successfully returned.
ID = 597


Name
Integer Set_drainage_hc_material(Element drain,Integer hc,Text material)
Description
For the drainage string drain, set the material for the h’th house connection to material.
A function return value of zero indicates the data was successfully set.
ID = 1309


Name
Integer Get_drainage_hc_material(Element drain,Integer h,Text &material)
Description
Get the material for the h’th house connection of the string Element drain.
The material of the house connection is returned in Text material.
A function return value of zero indicates the data was successfully returned.
ID = 605


Name
Integer Set_drainage_hc_name(Element drain,Integer hc,Text name)
Description

Drainage String Element

Page 559

12d Model Programming Language Manual

For the drainage string drain, set the name for the h’th house connection to name.
A function return value of zero indicates the data was successfully set.
ID = 1299


Name
Integer Get_drainage_hc_name(Element drain,Integer h,Text &name)
Description
Get the name for the h’th house connection of the string Element drain.
The name of the house connection is returned in Text name.
A function return value of zero indicates the data was successfully returned.
ID = 595


Name
Integer Set_drainage_hc_side(Element drain,Integer hc,Integer side)
Description
For the drainage string drain, set the side for the h’th house connection by the value of side.
when side = -1, the house connection is on the left side of the string.
when side = 1, the house connection is on the right side of the string.
A function return value of zero indicates the data was successfully set.
ID = 1298


Name
Integer Get_drainage_hc_side(Element drain,Integer h,Integer &side)
Description
Get the side for the h’th house connection of the string Element drain.
The side of the house connection is returned in Integer side.
If side = -1, the house connection is on the left side of the string.
If side = 1, the house connection is on the right side of the string.
A function return value of zero indicates the data was successfully returned.
ID = 594


Name
Integer Set_drainage_hc_type(Element drain,Integer hc,Text type)
Description
For the drainage string drain, set the hc type for the h’th house connection to type.
A function return value of zero indicates the data was successfully set.

Page 560

Drainage String Element

Chapter 5 12dPL Library Calls

ID = 1308


Name
Integer Get_drainage_hc_type(Element drain,Integer h,Text &type)
Description
Get the type for the h’th house connection of the string Element drain.
The type of the house connection is returned in Text type.
A function return value of zero indicates the data was successfully returned.
ID = 604


Name
Integer Get_drainage_hc_chainage(Element drain,Integer h,Real &chainage)
Description
Get the chainage for the h’th house connection of the string Element drain.
The chainage of the house connection is returned in Real chainage.
A function return value of zero indicates the data was successfully returned.
ID = 592


Name
Integer Get_drainage_hc_ip(Element drain,Integer h,Integer &ip)
Description
Get the intersect point for the h’th house connection of the string Element drain.
The intersection point of the house connection is returned in Integer ip.
A function return value of zero indicates the data was successfully returned.
ID = 593


Name
Element Create_feature()
Description
Create an Element of type Feature
The function return value gives the actual Element created.
If the feature string could not be created, then the returned Element will be null.
ID = 872


Name
Element Create_feature(Element seed)
Description
Create an Element of type Feature and set the colour, name, style etc. of the new string to be the
same as those from the Element Seed.
The function return value gives the actual Element created.
If the Feature string could not be created, then the returned Element will be null.
ID = 873


Name
Element Create_feature(Text name,Integer colour,Real xc,Real yc,Real zc,Real rad)
Description
Create an Element of type Feature with name name, colour colour, centre (xc,yc), radius rad
and z value (height) zc.
The function return value gives the actual Element created.
If the Feature string could not be created, then the returned Element will be null.
ID = 874


Name
Integer Get_feature_centre(Element elt,Real &xc,Real &yc,Real &zc)
Description
Get the centre point for Feature string given by Element elt.
The centre of the Feature is (xc,yc,zc).

Page 562

Feature String Element

Chapter 5 12dPL Library Calls

A function return value of zero indicates the centre was successfully returned.
ID = 876


Name
Integer Set_feature_centre(Element elt,Real xc,Real yc,Real zc)
Description
Set the centre point of the Feature string given by Element elt to (xc,yc,zc).
A function return value of zero indicates the centre was successfully modified.
ID = 875


Name
Integer Get_feature_radius(Element elt,Real &rad)
Description
Get the radius for Feature string given by Element elt and return it in rad.
A function return value of zero indicates the radius was successfully returned.
ID = 878


Name
Integer Set_feature_radius(Element elt,Real rad)
Description
Set the radius of the Feature string given by Element elt to rad. The new radius must be nonzero.
A function return value of zero indicates the radius was successfully modified.
ID = 877


Name
Element Create_interface(Real x[],Real y[],Real z[],Integer f[],Integer num_pts)
Description
Create an Element of type Interface.
The Element has num_pts points with (x,y,z,flag) values given in the Real arrays x[], y[], z[] and
Integer array f[].
The function return value gives the actual Element created.
If the Interface string could not be created, then the returned Element will be null.
ID = 181


Name
Element Create_interface(Integer num_pts)
Description
Create an Element of type Interface with room for num_pts (x,y,z,flag) points.
The actual x, y, z and flag values of the Interface string are set after the string is created.
If the Interface string could not be created, then the returned Element will be null.
ID = 451


Name
Element Create_interface(Integer num_pts,Element seed)
Description
Create an Element of type Interface with room for num_pts (x,y,z,flag) points, and set the colour,
name, style etc. of the new string to be the same as those from the Element seed.
The actual x, y, z and flag values of the Interface string are set after the string is created.
If the Interface string could not be created, then the returned Element will be null.
ID = 668


Name
Integer Get_interface_data(Element elt,Real x[],Real y[],Real z[],Integer f[],Integer max_pts,Integer
&num_pts)
Description
Get the (x,y,z,flag) data for the first max_pts points of the Interface Element elt.
The (x,y,z,flag) values at each string point are returned in the Real arrays x[], y[], z[] and Integer
array f[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type Interface, then num_pts is returned as zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 182


Name
Integer Get_interface_data(Element elt,Real x[],Real y[],Real z[],Integer f[],Integer max_pts,Integer
&num_pts,Integer start_pt)
Description
For a Interface Element elt, get the (x,y,z,flag) data for max_pts points starting at the point
number start_pt.
This routine allows the user to return the data from a Interface string in user specified chunks.
This is necessary if the number of points in the string is greater than the size of the arrays
available to contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than point
one.
The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Integer
array f[].
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type Interface, then num_pts is returned as zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.

Interface String Element

Page 565

12d Model Programming Language Manual

ID = 183


Name
Integer Get_interface_data(Element elt,Integer i,Real &x,Real &y,Real &z,Integer &f)
Description
Get the (x,y,z,flag) data for the ith point of the string.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
The flag value is returned in Integer f.
A function return value of zero indicates the data was successfully returned.
ID = 184


Name
Integer Set_interface_data(Element elt,Real x[],Real y[],Real z[],Integer f[],Integer num_pts)
Description
Set the (x,y,z,flag) data for the first num_pts points of the Interface Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y,z,flag) values at each string point are given in the Real arrays x[], y[], z[] and Integer
array f[].
The number of points to be set is given by Integer num_pts
If the Element elt is not of type Interface, then nothing is modified and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new Interface Elements but only modify existing Interface Elements.
ID = 185


Name
Integer Set_interface_data(Element elt,Real x[],Real y[],Real z[],Integer f[],Integer num_pts,Integer
start_pt)
Description
For the Interface Element elt, set the (x,y,z,flag) data for num_pts points starting at point number
start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt
rather than point one.

Page 566

Interface String Element

Chapter 5 12dPL Library Calls

The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.
The (x,y,z,flag) values for the string points are given in the Real arrays x[], y[], z[] and Integer
array f[].
The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type Interface, then nothing is modified and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new Interface Elements but only modify existing Interface
Elements.
ID = 186


Name
Integer Set_interface_data(Element elt,Integer i,Real x,Real y,Real z,Integer flag)
Description
Set the (x,y,z,flag) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
The flag value is given in Integer flag.
A function return value of zero indicates the data was successfully set.
ID = 187


Name
Element Create_face(Real x[],Real y[],Real z[],Integer num_pts)
Description
The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[].
The function return value gives the actual Element created.
If the face string could not be created, then the returned Element will be null.
ID = 1215


Name
Element Create_face(Integer num_npts)
Description
Create an Element of type face with room for num_pts (x,y,z) points.
The actual x, y and z values of the face string are set after the string is created.
If the face string could not be created, then the returned Element will be null.
ID = 1216


Name
Element Create_face(Integer num_npts,Element seed)
Description
Create an Element of type face with room for num_pts (x,y) points, and set the colour, name,
style etc. of the new string to be the same as those from the Element seed.
The actual x, y and z values of the face string are set after the string is created.
If the face string could not be created, then the returned Element will be null.
ID = 1217


Name
Integer Get_face_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts)
Description
Get the (x,y,z) data for the first max_pts vertices of the face Element elt.

Page 568

Face String Element

Chapter 5 12dPL Library Calls

The (x,y,z) values at each string vertex are returned in the Real arrays x[], y[] and z[].
The maximum number of vertices that can be returned is given by max_pts (usually the size of
the arrays). The vertex data returned starts at the first vertex and goes up to the minimum of
max_pts and the number of vertices in the string.
The actual number of vertices returned is returned by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type face, then num_pts is returned as zero and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 78


Name
Integer Get_face_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts,Integer
start_pt)
Description
For a face Element elt, get the (x,y,z) data for max_pts vertices starting at vertex number
start_pt.
This routine allows the user to return the data from a face string in user specified chunks.
This is necessary if the number of vertices in the string is greater than the size of the arrays
available to contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the vertex data returned starts at vertex number start_pt rather than
vertex one.
The (x,y,z) values at each string vertex is returned in the Real arrays x[], y[] and z[].
The actual number of vertices returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type face, then num_pts is set to zero and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.
ID = 79


Name
Integer Set_face_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)
Description
Set the (x,y,z) data for the first num_pts vertices of the face Element elt.
This function allows the user to modify a large number of vertices of the string in one call.
The maximum number of vertices that can be set is given by the number of vertices in the string.

Face String Element

Page 569

12d Model Programming Language Manual

The (x,y,z) values for each string vertex is given in the Real arrays x[], y[] and z[].
The number of vertices to be set is given by Integer num_pts
If the Element elt is not of type face, then nothing is modified and the function return value is set
to a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new face Elements but only modify existing face Elements.
ID = 80


Name
Integer Set_face_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integer start_pt)
Description
For the face Element elt, set the (x,y,z) data for num_pts vertices, starting at vertex number
start_pt.
This function allows the user to modify a large number of vertices of the string in one call starting
at vertex number start_pt rather than the first vertex (vertex one).
The maximum number of vertices that can be set is given by the difference between the number
of vertices in the string and the value of start_pt.
The (x,y,z) values for the string vertices are given in the Real arrays x[], y[] and z[].
The number of the first string vertex to be modified is start_pt.
The total number of vertices to be set is given by Integer num_pts
If the Element elt is not of type face, then nothing is modified and the function return value is set
to a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new face Elements but only modify existing face Elements.
ID = 81


Name
Integer Get_face_data(Element elt,Integer i,Real &x,Real &y,Real &z)
Description
Get the (x,y,z) data for the ith vertex of the string.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
A function return value of zero indicates the data was successfully returned.
ID = 82


Name
Integer Set_face_data(Element elt,Integer i,Real x,Real y,Real z)
Description
Set the (x,y,z) data for the ith vertex of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
A function return value of zero indicates the data was successfully set.
ID = 83


Name
Integer Get_face_hatch_distance(Element elt,Real &dist)
Description
Get the distance between the hatch lines for the face string elt. The distance is returned as dist
A function return value of zero indicates the data was successfully returned.
ID = 1218


Name
Integer Set_face_hatch_distance(Element elt,Real dist)
Description
Set the distance between the hatch lines for the face string elt to be dist
The distance is given in world units.
A function return value of zero indicates the data was successfully set.
ID = 1219


Name
Integer Get_face_hatch_angle(Element elt,Real &ang)
Description
Get the angle of the hatch lines for the face string elt. The angle is returned as ang.
The angle is given in radians and is measured in the counter-clockwise direction from the x-axis.
A function return value of zero indicates the data was successfully returned.
ID = 1220


Name
Integer Set_face_hatch_angle(Element elt,Real ang)

Face String Element

Page 571

12d Model Programming Language Manual

Description
Set the angle of the hatch lines for the face string elt to be ang
A function return value of zero indicates the data was successfully set.
ID = 1221


Name
Integer Get_face_hatch_colour(Element elt,Integer &colour)
Description
Get the colour of the solid fill for the face string elt. The colour number is returned as colour.
A function return value of zero indicates the data was successfully returned.
ID = 1222


Name
Integer Set_face_hatch_colour(Element elt,Integer colour)
Description
Set the colour of the solid fill for the face string elt to the colour number colour.
A function return value of zero indicates the data was successfully set.
ID = 1223


Name
Integer Get_face_edge_colour(Element elt,Integer &colour)
Description
Get the colour of the edge of the face string elt. The colour number is returned as colour.
A function return value of zero indicates the data was successfully returned.
ID = 1224


Name
Integer Set_face_edge_colour(Element elt,Integer colour)
Description
Set the colour of the edge of the face string elt to the colour number colour.
A function return value of zero indicates the data was successfully set.
ID = 1225


Name

Page 572

Face String Element

Chapter 5 12dPL Library Calls

Integer Get_face_hatch_mode(Element elt,Integer &mode)
Description
Get the mode of the hatch of the face string elt. The value of mode is returned as mode.
If the mode is 1, then the hatch pattern is drawn when the face is on a plan view.
If the mode is 0, then the hatch pattern is not drawn when the face is on a plan view.
A function return value of zero indicates the data was successfully returned.
ID = 1226


Name
Integer Set_face_hatch_mode(Element elt,Integer mode)
Description
Set the mode of the hatch pattern of the face string elt to the value mode.
If the mode is 1, then the hatch pattern is drawn when the face is on a plan view.
If the mode is 0, then the hatch pattern is not drawn when the face is on a plan view.
A function return value of zero indicates the data was successfully set.
ID = 1227


Name
Integer Get_face_fill_mode(Element elt,Integer &mode)
Description
Get the mode of the fill of the face string elt. The value of mode is returned as mode.
If the mode is 1, then the face is filled with the face colour when the face is on a plan view.
If the mode is 0, then the face is not filled when the face is on a plan view.
A function return value of zero indicates the data was successfully returned.
ID = 1228


Name
Integer Set_face_fill_mode(Element elt,Integer mode)
Description
Set the mode of the fill of the face string elt to the value mode.
If the mode is 1, then the face is filled with the face colour when the face is on a plan view.
If the mode is 0, then the face is not filled when the face is on a plan view.
A function return value of zero indicates the data was successfully set.
ID = 1229


Name
Integer Get_face_edge_mode(Element elt,Integer &mode)

Face String Element

Page 573

12d Model Programming Language Manual

Description
Get the mode of the edge of the face string elt. The value of mode is returned as mode.
If the mode is 1, then the edge is drawn with the edge colour when the face is on a plan view.
If the mode is 0, then the edge is not drawn when the face is on a plan view.
A function return value of zero indicates the data was successfully returned.
ID = 1230


Name
Integer Set_face_edge_mode(Element elt,Integer mode)
Description
Set the mode for displaying the edge of the face string elt to the value mode.
If the mode is 1, then the edge is drawn with the edge colour when the face is on a plan view.
If the mode is 0, then the edge is not drawn when the face is on a plan view.
A function return value of zero indicates the data was successfully set.
ID = 1231


Name
Element Create_plot_frame(Text name)
Description
Create an Element of type Plot_Frame.
The function return value gives the actual Element created.
If the plot frame could not be created, then the returned Element will be null.
ID = 607


Name
Integer Get_plot_frame_name(Element elt,Text &name)
Description
Get the name of the plot frame in Element elt.
The name value is returned in Text name.
A function return value of zero indicates the data was successfully returned.
ID = 608


Name
Integer Get_plot_frame_scale(Element elt,Real &scale)
Description
Get the scale of the plot frame in Element elt.
The scale value is returned in Real scale. The value for scale is 1:scale.
A function return value of zero indicates the data was successfully returned.
ID = 609


Name
Integer Get_plot_frame_rotation(Element elt,Real &rotation)
Description
Get the rotation of the plot frame in Element elt.
The name value is returned in Real rotation. The units for rotation are radians.
A function return value of zero indicates the data was successfully returned.
ID = 610


Name
Integer Get_plot_frame_origin(Element elt,Real &x,Real &y)
Description
Get the origin of the plot frame in Element elt.
The x origin value is returned in Real x.
The y origin value is returned in Real y.
A function return value of zero indicates the data was successfully returned.
ID = 611


Name
Integer Get_plot_frame_sheet_size(Element elt,Real &w,Real &h)
Description
Get the sheet size of the plot frame in Element elt.
The width value is returned in Real w.
The height value is returned in Real h.
A function return value of zero indicates the data was successfully returned.
ID = 612


Name
Integer Get_plot_frame_sheet_size(Element elt,Text &size)
Description
Get the sheet size of the plot frame in Element elt.
The sheet size is returned in Text size.
A function return value of zero indicates the data was successfully returned.
ID = 613


Name
Integer Get_plot_frame_margins(Element elt,Real &l,Real &b,Real &r,Real &t)
Description
Get the sheet margins of the plot frame in Element elt.
The left margin value is returned in Real l.
The bottom margin value is returned in Real b.
The right margin value is returned in Real r.
The top margin value is returned in Real t.

Page 576

Plot Frame Element

Chapter 5 12dPL Library Calls

A function return value of zero indicates the data was successfully returned.
ID = 614


Name
Integer Get_plot_frame_text_size(Element elt,Real &text_size)
Description
Get the text size of the plot frame in Element elt.
The text size is returned in Text text_size.
A function return value of zero indicates the data was successfully returned.
ID = 615


Name
Integer Get_plot_frame_draw_border(Element elt,Integer &draw_border)
Description
Get the draw border of the plot frame in Element elt.
The draw border flag is returned in Integer draw_border.
A function return value of zero indicates the data was successfully returned.
ID = 616


Name
Integer Get_plot_frame_draw_viewport(Element elt,Integer &draw_viewport)
Description
Get the draw viewport of the plot frame in Element elt.
The draw viewport flag is returned in Integer draw_viewport.
A function return value of zero indicates the data was successfully returned.
ID = 617


Name
Integer Get_plot_frame_draw_title_file(Element elt,Integer &draw_title)
Description
Get the draw title file of the plot frame in Element elt.
The draw title file flag is returned in Integer draw_title.
A function return value of zero indicates the data was successfully returned.
ID = 618


Name
Integer Get_plot_frame_colour(Element elt,Integer &colour)
Description
Get the colour of the plot frame in Element elt.
The colour value is returned Integer colour.
A function return value of zero indicates the data was successfully returned.
ID = 619


Name
Integer Get_plot_frame_textstyle(Element elt,Text &textstyle)
Description
Get the textstyle of the plot frame in Element elt.
The textstyle value is returned in Text textstyle.
A function return value of zero indicates the data was successfully returned.
ID = 620


Name
Integer Get_plot_frame_plotter(Element elt,Integer &plotter)
Description
Get the plotter of the plot frame in Element elt.
The plotter value is returned in Integer plotter.
A function return value of zero indicates the data was successfully returned.
ID = 621


Name
Integer Get_plot_frame_plotter_name(Element elt,Text &plotter_name)
Description
Get the plotter name of the plot frame in Element elt.
The plotter name is returned in the Text plotter_name.
A function return value of zero indicates the plotter _name was returned successfully.
ID = 686


Name
Integer Get_plot_frame_plot_file(Element elt,Text &plot_file)

Page 578

Plot Frame Element

Chapter 5 12dPL Library Calls

Description
Get the plot file of the plot frame in Element elt.
The plot file value is returned in Text plot_file.
A function return value of zero indicates the data was successfully returned.
ID = 622


Name
Integer Get_plot_frame_title_1(Element elt,Text &title)
Description
Get the first title line of the plot frame in Element elt.
The title line value is returned in Text title.
A function return value of zero indicates the data was successfully returned.
ID = 623


Name
Integer Get_plot_frame_title_2(Element elt,Text &title)
Description
Get the second title line of the plot frame in Element elt.
The title line value is returned in Text title.
A function return value of zero indicates the data was successfully returned.
ID = 624


Name
Integer Get_plot_frame_title_file(Element elt,Text &title_file)
Description
Get the title file of the plot frame in Element elt.
The title file value is returned in Text title_file.
A function return value of zero indicates the data was successfully returned.
ID = 625


Name
Integer Set_plot_frame_name(Element elt,Text name)
Description
Set the name of the plot frame in Element elt.
The name value is defined in Text name.

Plot Frame Element

Page 579

12d Model Programming Language Manual

A function return value of zero indicates the data was successfully set.
ID = 626


Name
Integer Set_plot_frame_scale(Element elt,Real scale)
Description
Set the scale of the plot frame in Element elt.
The scale value is defined in Real scale.
A function return value of zero indicates the data was successfully set.
ID = 627


Name
Integer Set_plot_frame_rotation(Element elt,Real rotation)
Description
Set the rotation of the plot frame in Element elt.
The rotation value is defined in Real rotation.
A function return value of zero indicates the data was successfully set.
ID = 628


Name
Integer Set_plot_frame_rotation(Element elt,Real rotation)
Description
Set the rotation of the plot frame in Element elt
The rotation value is defined in Real rotation.
A function return value of zero indicates the data was successfully set.

Set_plot_frame_origin(Element elt,Real x,Real y)
Name
Integer Set_plot_frame_origin(Element elt,Real x,Real y)
Description
Set the origin of the plot frame in Element elt.
The x origin value is defined in Real x.
The y origin value is defined in Real y.
A function return value of zero indicates the data was successfully set.
ID = 629


Name
Integer Set_plot_frame_sheet_size(Element elt,Real w,Real h)
Description
Set the sheet size of the plot frame in Element elt.
The width value is defined in Real w.
The height value is defined in Real h.
A function return value of zero indicates the data was successfully set.
ID = 630


Name
Integer Set_plot_frame_sheet_size(Element elt,Text size)
Description
Set the sheet size of the plot frame in Element elt.
The sheet size is defined in Text size.
A function return value of zero indicates the data was successfully set.
ID = 631


Name
Integer Set_plot_frame_margins(Element elt,Real l,Real b,Real r,Real t)
Description
Set the sheet margins of the plot frame in Element elt.
The left margin value is defined in Real l.
The bottom margin value is defined in Real b.
The right margin value is defined in Real r.
The top margin value is defined in Real t.
A function return value of zero indicates the data was successfully set.
ID = 632


Name
Integer Set_plot_frame_text_size(Element elt,Real text_size)
Description
Set the text size of the plot frame in Element elt.
The text size is defined in Text text_size.
A function return value of zero indicates the data was successfully set.
ID = 633


Name
Integer Set_plot_frame_draw_border(Element elt,Integer draw_border)
Description
Set the draw border of the plot frame in Element elt.
The draw border flag is defined in Integer draw_border.
A function return value of zero indicates the data was successfully set.
ID = 634


Name
Integer Set_plot_frame_draw_viewport(Element elt,Integer draw_viewport)
Description
Set the draw viewport of the plot frame in Element elt.
The draw viewport flag is defined in Integer draw_viewport.
A function return value of zero indicates the data was successfully set.
ID = 635


Name
Integer Set_plot_frame_draw_title_file(Element elt,Integer draw_title)
Description
Set the draw title file of the plot frame in Element elt.
The draw title file flag is defined in Integer draw_title.
A function return value of zero indicates the data was successfully set.
ID = 636


Name
Integer Set_plot_frame_colour(Element elt,Integer colour)
Description
Set the colour of the plot frame in Element elt.
The colour value is defined Integer colour.
A function return value of zero indicates the data was successfully set.
ID = 637


Name
Integer Set_plot_frame_textstyle(Element elt,Text textstyle)

Page 582

Plot Frame Element

Chapter 5 12dPL Library Calls

Description
Set the textstyle of the plot frame in Element elt.
The textstyle value is defined in Text textstyle
A function return value of zero indicates the data was successfully set.
ID = 638


Name
Integer Set_plot_frame_plotter(Element elt,Integer plotter)
Description
Set the plotter of the plot frame in Element elt.
The plotter value is defined in Integer plotter.
A function return value of zero indicates the data was successfully set.
ID = 639


Name
Integer Set_plot_frame_plotter_name(Element elt,Text plotter_name)
Description
Set the plotter name of the plot frame in Element elt.
The plotter name is given in the Text plotter_name.
A function return value of zero indicates the plotter name was successfully set.
ID = 687


Name
Integer Set_plot_frame_plot_file(Element elt,Text plot_file)
Description
Set the plot file of the plot frame in Element elt
The plot file value is defined in Text plot_file.
A function return value of zero indicates the data was successfully set.
ID = 640


Name
Integer Set_plot_frame_title_1(Element elt,Text title_1)
Description
Set the first title line of the plot frame in Element elt.
The title line value is defined in Text title_1.

Plot Frame Element

Page 583

12d Model Programming Language Manual

A function return value of zero indicates the data was successfully set.
ID = 641


Name
Integer Set_plot_frame_title_2(Element elt,Text title_2)
Description
Set the second title line of the plot frame in Element elt.
The title line value is defined in Text title_2.
A function return value of zero indicates the data was successfully set.
ID = 642


Name
Integer Set_plot_frame_title_file(Element elt,Text title_file)
Description
Set the title file of the plot frame in Element elt
The title file value is defined in Text title_file.
A function return value of zero indicates the data was successfully set.
ID = 643


Name
Element Create_2d(Real x[],Real y[],Real zvalue,Integer num_pts)
Description
Create an Element of type 2d.
The Element has num_pts points with (x,y) values given in the Real arrays x[] and y[].
The height of the string is given by the Real zvalue.
The function return value gives the actual Element created.
If the 2d string could not be created, then the returned Element will be null.
ID = 77


Name
Element Create_2d(Integer num_pts)
Description
Create an Element of type 2d with room for num_pts (x,y) points.
The actual x and y values and the height of the 2d string are set after the string is created.
If the 2d string could not be created, then the returned Element will be null.
ID = 448


Name
Element Create_2d(Integer num_pts,Element seed)
Description
Create an Element of type 2d with room for num_pts (x,y) points, and set the colour, name, style
etc. of the new string to be the same as those from the Element seed.
The actual x and y values and the height of the 2d string are set after the string is created.
If the 2d string could not be created, then the returned Element will be null.
ID = 665


Name
Integer Get_2d_data(Element elt,Real x[],Real y[],Real &zvalue,Integer max_pts,Integer &num_pts)

Page 586

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Description
Get the string height and the (x,y) data for the first max_pts points of the 2d Element elt.
The x and y values at each string point are returned in the Real arrays x[] and y[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
The height of the 2d string is returned in the Real zvalue.
If the Element elt is not of type 2d, then num_pts is returned as zero and the function return value
is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 69


Name
Integer Get_2d_data(Element elt,Real x[],Real y[],Real &zvalue,Integer max_pt,Integer
&num_pts,Integer start_pt)
Description
For a 2d Element elt, get the string height and the (x,y) data for max_pts points starting at point
number start_pt.
This routine allows the user to return the data from a 2d string in user specified chunks. This is
necessary if the number of points in the string is greater than the size of the arrays available to
contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than
point one.
The (x,y) values at each string point are returned in the Real arrays x[] and y[].
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
The height of the 2d string is returned in the Real zvalue.
If the Element elt is not of type 2d, then num_pts is set to zero and the function return value is set
to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.
ID = 70


Name
Integer Get_2d_data(Element elt,Integer i,Real &x,Real &y)

Strings Replaced by Super Strings

Page 587

12d Model Programming Language Manual

Description
Get the (x,y) data for the ith point of the string.
The x value is returned in Real x.
The y value is returned in Real y.
A function return value of zero indicates the data was successfully returned.
ID = 73


Name
Integer Get_2d_data(Element elt,Real &z)
Description
Get the height of the 2d string given by Element elt.
The height of the string is returned in Real z.
A function return value of zero indicates the height was successfully returned.
ID = 75


Name
Integer Set_2d_data(Element elt,Real x[],Real y[],Integer num_pts)
Description
Set the (x,y) data for the first num_pts points of the 2d Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y) values at each string point are given in the Real arrays x[] and y[].
The number of points to be set is given by Integer num_pts
If the Element elt is not of type 2d, then nothing is modified and the function return value is set to
a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new 2d Elements - it only modifies existing 2d Elements.
ID = 71


Name
Integer Set_2d_data(Element elt,Real x[],Real y[],Integer num_pts,Integer start_pt)
Description
For the 2d Element elt, set the (x,y) data for num_pts points starting at point number start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt rather than point one.
The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.

Page 588

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

The (x,y) values for the string points are given in the Real arrays x[] and y[].
The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type 2d, then nothing is modified and the function return value is set to
a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new 2d Elements but only modify existing 2d Elements.
ID = 72


Name
Integer Set_2d_data(Element elt,Integer i,Real x,Real y)
Description
Set the (x,y) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
A function return value of zero indicates the data was successfully set.
ID = 74


Name
Integer Set_2d_data(Element elt,Real z)
Description
Modify the height of the 2d Element elt.
The new height is given in the Real z.
A function return value of zero indicates the height was successfully set.
ID = 76


Name
Element Create_3d(Line line)
Description
Create an Element of type 3d from the Line line.
The created Element will have two points with co-ordinates equal to the end points of the Line
line.
The function return value gives the actual Element created.
If the 3d string could not be created, then the returned Element will be null.
ID = 295


Name
Element Create_3d(Real x[],Real y[],Real z[],Integer num_pts)
Description
Create an Element of type 3d.
The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[].
The function return value gives the actual Element created.
If the 3d string could not be created, then the returned Element will be null.
ID = 84


Name
Element Create_3d(Integer num_pts)
Description
Create an Element of type 3d with room for num_pts (x,y,z) points.
The actual x, y and z values of the 3d string are set after the string is created.
If the 3d string could not be created, then the returned Element will be null.
ID = 449


Name
Element Create_3d(Integer num_pts,Element seed)
Description
Page 590

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Create an Element of type 3d with room for num_pts (x,y) points, and set the colour, name, style
etc. of the new string to be the same as those from the Element seed.
The actual x, y and z values of the 3d string are set after the string is created.
If the 3d string could not be created, then the returned Element will be null.
ID = 666


Name
Integer Get_3d_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts)
Description
Get the (x,y,z) data for the first max_pts points of the 3d Element elt.
The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is returned by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type 3d, then num_pts is returned as zero and the function return value
is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.

Get_3d_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer
&num_pts,Integer start_pt)
Name
Integer Get_3d_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts,Integer
start_pt)
Description
For a 3d Element elt, get the (x,y,z) data for max_pts points starting at point number start_pt.
This routine allows the user to return the data from a 3d string in user specified chunks. This is
necessary if the number of points in the string is greater than the size of the arrays available to
contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than
point one.
The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[].
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type 3d, then num_pts is set to zero and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.

Strings Replaced by Super Strings

Page 591

12d Model Programming Language Manual

Get_3d_data(Element elt,Integer i, Real &x,Real &y,Real &z)
Name
Integer Get_3d_data(Element elt,Integer i, Real &x,Real &y,Real &z)
Description
Get the (x,y,z) data for the ith point of the string.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
A function return value of zero indicates the data was successfully returned.

Set_3d_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)
Name
Integer Set_3d_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)
Description
Set the (x,y,z) data for the first num_pts points of the 3d Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y,z) values for each string point are given in the Real arrays x[], y[] and z[].
The number of points to be set is given by Integer num_pts
If the Element elt is not of type 3d, then nothing is modified and the function return value is set to
a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new 3d Elements but only modify existing 3d Elements.
ID = 80


Name
Integer Set_3d_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integer start_pt)
Description
For the 3d Element elt, set the (x,y,z) data for num_pts points, starting at point number start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt rather than point one.
The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.
The (x,y,z) values for the string points are given in the Real arrays x[], y[] and z[].
The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type 3d, then nothing is modified and the function return value is set to

Page 592

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

a nonzero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new 3d Elements but only modify existing 3d Elements.

Set_3d_data(Element elt,Integer i,Real x,Real y,Real z)
Name
Integer Set_3d_data(Element elt,Integer i,Real x,Real y,Real z)
Description
Set the (x,y,z) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
A function return value of zero indicates the data was successfully set.
ID = 83


Name
Element Create_4d(Real x[],Real y[],Real z[],Text t[],Integer num_pts)
Description
Create an Element of type 4d. The Element has num_pts points with (x,y,z,text) values given in
the Real arrays x[], y[], z[] and Text array t[].
The function return value gives the actual Element created.
If the 4d string could not be created, then the returned Element will be null.
ID = 91


Name
Element Create_4d(Integer num_pts)
Description
Create an Element of type 4d with room for num_pts (x,y,z,text) points.
The actual x, y, z and text values of the 4d string are set after the string is created.
If the 4d string could not be created, then the returned Element will be null.

Page 594

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

ID = 450


Name
Element Create_4d(Integer num_pts,Element seed)
Description
Create an Element of type 4d with room for num_pts (x,y) points, and set the colour, name, style
etc. of the new string to be the same as those from the Element seed.
The actual x, y, z and text values of the 4d string are set after the string is created.
If the 4d string could not be created, then the returned Element will be null.
ID = 667


Name
Integer Set_4d_data(Element elt,Real x[],Real y[],Real z[],Text t[],Integer num_pts)
Description
Set the (x,y,z,text) data for the first num_pts points of the 4d Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y,z,text) values at each string point are given in the Real arrays x[], y[], z[] and Text array
t[].
The number of points to be set is given by Integer num_pts
If the Element elt is not of type 4d, then nothing is modified and the function return value is set to
a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new 4d Elements but only modify existing 4d Elements.
ID = 87


Name
Integer Set_4d_data(Element elt,Real x[],Real y[],Real z[],Text t[],Integer num_pts,Integer start_pt)
Description
For the 4d Element elt, set the (x,y,z,text) data for num_pts points, starting at point number
start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt rather than point one.
The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.
The (x,y,z,text) values for the string points are given in the Real arrays x[], y[], z[] and Text array
t[].

Strings Replaced by Super Strings

Page 595

12d Model Programming Language Manual

The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type 4d, then nothing is modified and the function return value is set to
a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new 4d Elements but only modify existing 4d Elements.
ID = 88


Name
Integer Set_4d_data(Element elt,Integer i,Real x,Real y,Real z,Text t)
Description
Set the (x,y,z,text) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
The text value is given in Text t.
A function return value of zero indicates the data was successfully set.
ID = 90


Name
Integer Get_4d_data(Element elt,Real x[],Real y[],Real z[],Text t[],Integer max_pts,Integer &num_pts)
Description
Get the (x,y,z,text) data for the first max_pts points of the 4d Element elt.
The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Text
array t[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is returned by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type 4d, then num_pts is set to zero and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 85


Name
Integer Get_4d_data(Element elt,Real x[],Real y[],Real z[],Text t[],Integer max_pts,Integer
&num_pts,Integer start_pt)
Description
For a 4d Element elt, get the (x,y,z,text) data for max_pts points starting at point number
start_pt.
This routine allows the user to return the data from a 4d string in user specified chunks. This is
necessary if the number of points in the string is greater than the size of the arrays available to
contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than
point one.
The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Text
array t[].
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type 4d, then num_pts is returned as zero and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.
ID = 86


Name
Integer Get_4d_data(Element elt,Integer i,Real &x,Real &y,Real &z,Text &t)
Description
Get the (x,y,z,text) data for the ith point of the string.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
The text value is returned in Text t.
A function return value of zero indicates the data was successfully returned.
ID = 89


Name
Integer Set_4d_textstyle_data(Element elt,Textstyle_Data d)
Description
For the Element elt of type 4d, set the Textstyle_Data to be d.
Setting a Textstyle_Data means that all the individual values that are contained in the
Textstyle_Data are set rather than having to set each one individually.

Strings Replaced by Super Strings

Page 597

12d Model Programming Language Manual

LJG? if the value is blank in the Textstyle_Data and the value is already set for the 4d string, is
the value left alone?
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates the Textstyle_Data was successfully set.
ID = 1667


Name
Integer Get_4d_textstyle_data(Element elt,Textstyle_Data &d)
Description
For the Element elt of type 4d, get the Textstyle_Data for the string and return it as d.
LJG? if a value is not set in the 4d string, what does it return?
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates the Textstyle_Data was successfully returned.
ID = 1668


Name
Integer Set_4d_units(Element elt,Integer units_mode)
Description
Set the units used for the text parameters of the 4d Element elt.
The mode is given as Integer units_mode.
For the values of units_mode, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 447


Name
Integer Get_4d_units(Element elt,Integer &units_mode)
Description
Get the units used for the text parameters of the 4d Element elt.
The mode is returned as Integer units_mode.
For the values of units_mode, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 441


Name
Integer Set_4d_size(Element elt,Real size)
Description

Page 598

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Set the size of the characters of the 4d text of the Element elt.
The text size is given as Real size.
A function return value of zero indicates the data was successfully set.
ID = 442


Name
Integer Get_4d_size(Element elt,Real &size)
Description
Get the size of the characters of the 4d text of the Element elt.
The text size is returned as Real size.
A function return value of zero indicates the data was successfully returned.
ID = 436


Name
Integer Set_4d_justify(Element elt,Integer justify)
Description
Set the justification used for the text parameters of the 4d Element elt.
The justification is given as Integer justify.
For the values of justify and their meaning, see Textstyle Data .
A function return vale of zero indicates the data was successfully set.
ID = 446


Name
Integer Get_4d_justify(Element elt,Integer &justify)
Description
Get the justification used for the text parameters of the 4d Element elt.
The justification is returned as Integer justify.
For the values of justify and their meaning, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 440


Name
Integer Set_4d_angle(Element elt,Real angle)
Description
Set the angle of rotation (in radians) about each 4d point (x,y) of the text of the 4d Element elt.

Strings Replaced by Super Strings

Page 599

12d Model Programming Language Manual

The angle is given as Real angle.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 445


Name
Integer Get_4d_angle(Element elt,Real &angle)
Description
Get the angle of rotation (in radians) about each 4d point (x,y) of the text of the 4d Element elt.
angle is measured in an anti-clockwise direction from the horizontal axis.
The angle is returned as Real angle.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 439


Name
Integer Set_4d_offset(Element elt,Real offset)
Description
Set the offset distance of the text to be used for each 4d point (x,y) for the 4d Element elt.
The offset is returned as Real offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 443


Name
Integer Get_4d_offset(Element elt,Real &offset)
Description
Get the offset distance of the text to be used for each 4d point (x,y) for the 4d Element elt.
The offset is returned as Real offset.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 437


Name
Integer Set_4d_rise(Element elt,Real rise)
Description

Page 600

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Set the rise distance of the text to be used for each 4d point (x,y) for the 4d Element elt.
The rise is given as Real rise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully set.
ID = 444


Name
Integer Get_4d_rise(Element elt,Real &rise)
Description
Get the rise distance of the text to be used for each 4d point (x,y) for the 4d Element elt.
The rise is returned as Real rise.
For a diagram, see Textstyle Data .
A function return value of zero indicates the data was successfully returned.
ID = 438


Name
Integer Set_4d_height(Element elt,Real height)
Description
Set the height of the characters of the 4d text of the Element elt.
The text height is given as Real height.
A function return value of zero indicates the data was successfully set.
ID = 648


Name
Integer Get_4d_height(Element elt,Real &height)
Description
Get the height of the characters of the 4d text of the Element elt.
The text height is returned as Real height.
A function return value of zero indicates the data was successfully returned.
ID = 644


Name
Integer Set_4d_slant(Element elt,Real slant)
Description
Set the slant of the characters of the 4d text of the Element elt.
The text slant is given as Real slant.

Strings Replaced by Super Strings

Page 601

12d Model Programming Language Manual

A function return value of zero indicates the data was successfully set.
ID = 649


Name
Integer Get_4d_slant(Element elt,Real &slant)
Description
Get the slant of the characters of the 4d text of the Element elt.
The text slant is returned as Real slant.
A function return value of zero indicates the data was successfully returned.
ID = 645


Name
Integer Set_4d_x_factor(Element elt,Real xfact)
Description
Set the x factor of the characters of the 4d text of the Element elt.
The text x factor is given as Real xfact.
A function return value of zero indicates the data was successfully set.
ID = 650


Name
Integer Get_4d_x_factor(Element elt,Real &xfact)
Description
Get the x factor of the characters of the 4d text of the Element elt.
The text x factor is returned as Real xfact.
A function return value of zero indicates the data was successfully returned.
ID = 646


Name
Integer Set_4d_style(Element elt,Text style)
Description
Set the style of the characters of the 4d text of the Element elt.
The text style is given as Text style.
A function return value of zero indicates the data was successfully set.
ID = 651


Name
Integer Get_4d_style(Element elt,Text &style)
Description
Get the style of the characters of the 4d text of the Element elt.
The text style is returned as Text style.
A function return value of zero indicates the data was successfully returned.
ID = 647


Name
Integer Set_4d_ttf_underline(Element elt,Integer underline)
Description
For the Element elt of type 4d, set the underline state to underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates underlined was successfully set.
ID = 2588


Name
Integer Get_4d_ttf_underline(Element elt,Integer &underline)
Description
For the Element elt of type 4d, get the underline state and return it in underline.
If underline = 1, then for a true type font the text will be underlined.
If underline = 0, then text will not be underlined.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates underlined was successfully returned.
ID = 2584


Name
Integer Set_4d_ttf_strikeout(Element elt,Integer strikeout)
Description
For the Element elt of type 4d, set the strikeout state to strikeout.
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.

Strings Replaced by Super Strings

Page 603

12d Model Programming Language Manual

For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates strikeout was successfully set.
ID = 2589


Name
Integer Get_4d_ttf_strikeout(Element elt,Integer &strikeout)
Description
For the Element elt of type 4d, get the strikeout state and return it in strikeout.
For a diagram, see Textstyle Data .
If strikeout = 1, then for a true type font the text will be strikeout.
If strikeout = 0, then text will not be strikeout.
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates strikeout was successfully returned.
ID = 2585


Name
Integer Set_4d_ttf_weight(Element elt,Integer weight)
Description
For the Element elt of type 4d, set the font weight to weight.
For the list of allowable weights, go to Allowable Weights
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates weight was successfully set.
ID = 2591


Name
Integer Get_4d_ttf_weight(Element elt,Integer &weight)
Description
For the Element elt of type 4d, get the font weight and return it in weight.
Allowable Weights
The allowable numbers for weight are:
0 = FW_DONTCARE
100 = FW_THIN
200 = FW_EXTRALIGHT
300 = FW_LIGHT
400 = FW_NORMAL
500 = FW_MEDIUM
600 = FW_SEMIBOLD
700 = FW_BOLD
800 = FW_EXTRABOLD
Page 604

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

900 = FW_HEAVY
Note that in the distributed file set_ups.h these are defined as:
#define FW_DONTCARE
#define FW_THIN
#define FW_EXTRALIGHT
#define FW_LIGHT
#define FW_NORMAL
#define FW_MEDIUM
#define FW_SEMIBOLD
#define FW_BOLD
#define FW_EXTRABOLD
#define FW_HEAVY
#define FW_ULTRALIGHT
#define FW_REGULAR
#define FW_DEMIBOLD
#define FW_ULTRABOLD
#define FW_BLACK

0
100
200
300
400
500
600
700
800
900
FW_EXTRALIGHT
FW_NORMAL
FW_SEMIBOLD
FW_EXTRABOLD
FW_HEAVY

A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates weight was successfully returned.
ID = 2587


Name
Integer Set_4d_ttf_italic(Element elt,Integer italic)
Description
For the Element elt of type 4d, set the italic state to italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates italic was successfully set.
ID = 2590


Name
Integer Get_4d_ttf_italic(Element elt,Integer &italic)
Description
For the Element elt of type 4d, get the italic state and return it in italic.
If italic = 1, then for a true type font the text will be italic.
If italic = 0, then text will not be italic.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates italic was successfully returned.
ID = 2586


Name
Integer Set_4d_ttf_outline(Element elt,Integer outline)
Description
For the Element elt of type 4d, set the outline state to outline.
If outline = 1, then for a true type font the text will be only shown in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates outline was successfully set.
ID = 2770


Name
Integer Get_4d_ttf_outline(Element elt,Integer &outline)
Description
For the Element elt of type 4d, get the outline state and return it in outline.
If outline = 1, then for a true type font the text will be shown only in outline.
If outline = 0, then text will not be only shown in outline.
For a diagram, see Textstyle Data .
A non-zero function return value is returned if elt is not of type 4d.
A function return value of zero indicates outline was successfully returned.
ID = 2769


Name
Integer Set_4d_whiteout(Element element,Integer colour)
Description
For the 4d Element elt, set the colour number of the colour used for the whiteout box around
vertex text, to be colour.
If no text whiteout is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2750


Name
Integer Get_4d_whiteout(Element element,Integer &colour)

Page 606

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Description
For the 4d Element elt, get the colour number that is used for the whiteout box around vertex
text. The whiteout colour is returned as Integer colour.
NO_COLOUR is the returned as the colour number if whiteout is not being used.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2749


Name
Integer Set_4d_border(Element element,Integer colour)
Description
For the 4d Element elt, set the colour number of the colour used for the border of the whiteout
box around vertex text, to be colour.
If no whiteout border is required, then set the colour number to NO_COLOUR.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff).
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully set.
ID = 2760


Name
Integer Get_4d_border(Element element,Integer &colour)
Description
For the 4d Element elt, get the colour number that is used for the border of the whiteout box
around vertex text. The whiteout border colour is returned as Integer colour.
NO_COLOUR is the returned as the colour number if there is no whiteout border.
Note: The colour number for "view colour" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff)
For a diagram, see Textstyle Data .
A function return value of zero indicates the colour number was successfully returned.
ID = 2759


Name
Element Create_pipe(Real x[],Real y[],Real z[],Integer num_pts)
Description
Create an Element of type pipe.
The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[].
The function return value gives the actual Element created.
If the pipe string could not be created, then the returned Element will be null.
ID = 676


Name
Element Create_pipe(Integer num_pts)
Description
Create an Element of type pipe with room for num_pts (x,y,z) points.
The actual x, y and z values of the pipe string are set after the string is created.
If the pipe string could not be created, then the returned Element will be null.
ID = 677


Name
Element Create_pipe(Integer num_pts,Element seed)
Description
Create an Element of type pipe with room for num_pts (x,y) points, and set the colour, name,
style etc. of the new string to be the same as those from the Element seed.
The actual x, y and z values of the pipe string are set after the string is created.
If the pipe string could not be created, then the returned Element will be null.
ID = 678


Name
Integer Get_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts)
Description

Page 608

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Get the (x,y,z) data for the first max_pts points of the pipe Element elt.
The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is returned by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type pipe, then num_pts is returned as zero and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.

Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)
Name
Integer Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)
Description
Set the (x,y,z) data for the first num_pts points of the pipe Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y,z) values for each string point are given in the Real arrays x[], y[] and z[].
The number of points to be set is given by Integer num_pts
If the Element elt is not of type pipe, then nothing is modified and the function return value is set
to a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new pipe Elements but only modify existing pipe Elements.
ID = 80


Name
Integer Get_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer max_pts,Integer &num_pts,Integer
start_pt)
Description
For a pipe Element elt, get the (x,y,z) data for max_pts points starting at point number start_pt.
This routine allows the user to return the data from a pipe string in user specified chunks.
This is necessary if the number of points in the string is greater than the size of the arrays
available to contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than
point one.
The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[].
The actual number of points returned is given by Integer num_pts

Strings Replaced by Super Strings

Page 609

12d Model Programming Language Manual

num_pts <= max_pts
If the Element elt is not of type pipe, then num_pts is set to zero and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.

Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integer
start_pt)
Name
Integer Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integer start_pt)
Description
For the pipe Element elt, set the (x,y,z) data for num_pts points, starting at point number
start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt rather than point one.
The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.
The (x,y,z) values for the string points are given in the Real arrays x[], y[] and z[].
The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type pipe, then nothing is modified and the function return value is set
to a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new pipe Elements but only modify existing pipe Elements.

Get_pipe_data(Element elt,Integer i, Real &x,Real &y,Real &z)
Name
Integer Get_pipe_data(Element elt,Integer i, Real &x,Real &y,Real &z)
Description
Get the (x,y,z) data for the ith point of the string.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
A function return value of zero indicates the data was successfully returned.

Set_pipe_data(Element elt,Integer i,Real x,Real y,Real z)
Name
Integer Set_pipe_data(Element elt,Integer i,Real x,Real y,Real z)
Description
Page 610

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

Set the (x,y,z) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
A function return value of zero indicates the data was successfully set.
ID = 83


Name
Integer Get_pipe_diameter(Element elt,Real &diameter)
Description
Get the pipe diameter of the string Element elt.
The pipe diameter is returned in Real diameter.
A function return value of zero indicates the data was successfully returned.
ID = 681


Name
Integer Set_pipe_diameter(Element elt,Real diameter)
Description
Set the pipe diameter of the string Element elt.
The pipe diameter is given as Real diameter.
A function return value of zero indicates the data was successfully set.
ID = 679


Name
Integer Get_pipe_justify(Element elt,Integer &justify)
Description
Get the justification used for the pipe Element elt
The justification is returned as Integer justify.
A function return value of zero indicates the data was successfully returned.
ID = 682


Name
Integer Set_pipe_justify(Element elt,Integer justify)
Description
Set the justification used for the text parameter of the pipe Element elt.

Strings Replaced by Super Strings

Page 611

12d Model Programming Language Manual

The justification is given as Integer justify.
A function return value of zero indicates the data was successfully set.
ID = 680


Name
Element Create_polyline(Real x[],Real y[],Real z[],Real r[],Integer f[],Integer num_pts)
Description
Create an Element of type polyline.
The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[], and
arcs between consecutive points given in the Real array r[] and the Integer array bulge[].
The radius of the arc between the nth and the n+1 point is given by r[n] and the arc is on the right
of the line joining the nth and n+1 point if r[n] is positive, and on the left if r[n] is negative. Hence
the absolute value of r[n] gives the radius of the curve between the nth and n+1 point and the
sign of r[n] defines what side the curve lies on.
The value of bulge[n] defines whether the arc is a minor or major arc. A value of 0 denotes a
minor arc and 1 a major arc.
The function return value gives the actual Element created.
If the polyline string could not be created, then the returned Element will be null.
ID = 481


Name
Element Create_polyline(Integer num_pts)
Description
Create an Element of type Polyline with room for num_pts (x,y,z,r,bulge) points.
The actual x, y, z, r, and bulge values of the polyline string are set after the string is created.
If the polyline string could not be created, then the returned Element will be null.
ID = 482


Name
Element Create_polyline(Integer num_pts,Element seed)

Strings Replaced by Super Strings

Page 613

12d Model Programming Language Manual

Description
Create an Element of type Polyline with room for num_pts (x,y,z,r,bulge) points, and set the
colour, name, style etc. of the new string to be the same as those from the Element seed.
The actual x, y, z, r, and bulge values of the polyline string are set after the string is created.
If the polyline string could not be created, then the returned Element will be null.
ID = 669


Name
Element Create_polyline(Segment seg)
Description
Create an Element of type Polyline from the Segment seg. The segment may be a Line, or Arc.
The created Element will have two points with co-ordinates equal to the end points of the
Segment seg.
The function return value gives the actual Element created.
If the polyline string could not be created, then the returned Element will be null.
ID = 554


Name
Integer Get_polyline_data(Element elt,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer
max_pts,Integer &num_pts)
Description
Get the (x,y,z,r,b) data for the first max_pts points of the polyline Element elt.
The (x,y,z,r,b) values at each string point are returned in the Real arrays x[], y[], z[], r[] and b[].
The maximum number of points that can be returned is given by max_pts (usually the size of the
arrays). The point data returned starts at the first point and goes up to the minimum of max_pts
and the number of points in the string.
The actual number of points returned is returned by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type Polyline, then num_pts is returned as zero and the function
return value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
ID = 483


Name
Integer Get_polyline_data(Element elt,Real x[],Real y[],Real z[],Real r[],Integer f[],Integer
max_pts,Integer &num_pts,Integer start_pt)
Description

Page 614

Strings Replaced by Super Strings

Chapter 5 12dPL Library Calls

For a polyline Element elt, get the (x,y,z,r,f) data for max_pts points starting at point number
start_pt.
This routine allows the user to return the data from a polyline string in user specified chunks. This
is necessary if the number of points in the string is greater than the size of the arrays available to
contain the information.
As in the previous function, the maximum number of points that can be returned is given by
max_pts (usually the size of the arrays).
However, for this function, the point data returned starts at point number start_pt rather than
point one.
The (x,y,z,r,f) values at each string point are returned in the Real arrays x[], y[], z[], r[] and f[].
The actual number of points returned is given by Integer num_pts
num_pts <= max_pts
If the Element elt is not of type Polyline, then num_pts is set to zero and the function return
value is set to a non-zero value.
A function return value of zero indicates the data was successfully returned.
Note
A start_pt of one gives the same result as for the previous function.
ID = 484


Name
Integer Get_polyline_data(Element elt,Integer i,Real &x,Real &y,Real &z,Real &r,Integer &f)
Description
Get the (x,y,z,r,f) data for the ith point of the Polyline Element elt.
The x value is returned in Real x.
The y value is returned in Real y.
The z value is returned in Real z.
The radius value is returned in Real r.
The minor/major value is returned in Integer f.
A function return value of zero indicates the data was successfully returned.
ID = 485


Name
Integer Set_polyline_data(Element elt,Real x[],Real y[],Real z[],Real r[],Integer f[],Integer num_pts)
Description
Set the (x,y,z,r,f) data for the first num_pts points of the polyline Element elt.
This function allows the user to modify a large number of points of the string in one call.
The maximum number of points that can be set is given by the number of points in the string.
The (x,y,z,r,f) values for each string point are given in the Real arrays x[], y[], z[], r[] and f[].
The number of points to be set is given by Integer num_pts

Strings Replaced by Super Strings

Page 615

12d Model Programming Language Manual

If the Element elt is not of type Polyline, then nothing is modified and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Note
This function can not create new Polyline Elements but only modify existing Polyline Elements.
ID = 486


Name
Integer Set_polyline_data(Element elt,Real x[],Real y[],Real z[],Real r[],Integer f[],Integer
num_pts,Integer start_pt)
Description
For the polyline Element elt, set the (x,y,z,r,f) data for num_pts points, starting at point number
start_pt.
This function allows the user to modify a large number of points of the string in one call starting at
point number start_pt rather than point one.
The maximum number of points that can be set is given by the difference between the number of
points in the string and the value of start_pt.
The (x,y,z,r,f) values for the string points are given in the Real arrays x[], y[], z[], r[]
and f[].
The number of the first string point to be modified is start_pt.
The total number of points to be set is given by Integer num_pts
If the Element elt is not of type Polyline, then nothing is modified and the function return value is
set to a non-zero value.
A function return value of zero indicates the data was successfully set.
Notes
(a) A start_pt of one gives the same result as the previous function.
(b) This function can not create new Polyline Elements but only modify existing Polyline
Elements.
ID = 487


Name
Integer Set_polyline_data(Element elt,Integer i,Real x,Real y,Real z,Real r,Integer f)
Description
Set the (x,y,z,r,f) data for the ith point of the string.
The x value is given in Real x.
The y value is given in Real y.
The z value is given in Real z.
The radius value is given in Real r.
The minor/major value is given in Integer f.
A function return value of zero indicates the data was successfully set.
ID = 488


Name
Element Create_align()
Description
Create an Element of type Alignment.
The function return value gives the actual Element created.
If the Alignment string could not be created, then the returned Element will be null.
ID = 92


Name
Element Create_align(Element seed)
Description
Create an Element of type Alignment, and set the colour, name, style etc. of the new string to be
the same as those from the Element seed.
If the alignment string could not be created, then the returned Element will be null.
ID = 670


Name
Integer Append_hip(Element elt,Real x,Real y)
Description
Append a horizontal intersection point (hip) with plan co-ordinates (x,y) to the Element elt

Page 618

Alignment String Element

Chapter 5 12dPL Library Calls

. The radius and spiral lengths are set to zero.
The order in which the hips are appended is taken as the order of the hips in the Alignment
string.
The hips must be appended in order of increasing chainage along the Alignment string.
Append_hip is used to place the first hip as well as the subsequent hips.
A function return value of zero indicates that the hip was successfully appended.
ID = 93


Name
Integer Append_hip(Element elt,Real x,Real y,Real rad)
Description
Append a horizontal intersection point (hip) with plan co-ordinates (x,y) and curve radius rad to
the Element elt. The spiral lengths are set to zero.
A zero curve radius indicates that no curve is present.
A function return value of zero indicates that the hip was successfully appended.
ID = 94


Name
Integer Append_hip(Element elt,Real x,Real y,Real rad,Real left_spiral,Real right_spiral)
Description
Append to the Element elt a horizontal intersection point (hip) with co-ordinates (x,y), curve
radius rad and left and right spirals of length left_spiral and right_spiral respectively.
A zero curve radius indicates that no curve is present.
A zero spiral length indicates that a spiral is not present.
A function return value of zero indicates that the hip was successfully appended.
ID = 95


Name
Integer Get_hip_points(Element elt,Integer &num_pts)
Description
Get the number of hips, num_pts, in the Alignment Element elt.
A function return value of zero indicates the number of hip points was successfully returned.
ID = 100


Name
Integer Get_hip_data(Element elt,Integer i,Real &x,Real &y)

Alignment String Element

Page 619

12d Model Programming Language Manual

Description
Get the plan co-ordinates (x,y) of the ith hip point of the Alignment string elt.
A function return value of zero indicates the hip data was successfully returned.
ID = 101


Name
Integer Get_hip_data(Element elt,Integer i,Real &x,Real &y,Real &rad)
Description
Get the plan co-ordinates (x,y) and the curve radius, rad, for the ith hip point of the Alignment
string elt.
If the radius is:
positive,
negative,
zero,

it is a right hand curve
it is a left hand curve.
there is no curve.

A function return value of zero indicates the hip data was successfully returned.
ID = 102


Name
Integer Get_hip_data(Element elt,Integer i,Real &x,Real &y,Real &rad,Real &left_spiral,Real
&right_spiral)
Description
Get the plan co-ordinates (x,y), the curve radius rad, and the left and right spiral lengths,
left_spiral and right_spiral for the ith hip point of the Alignment Element elt.
If the radius is:
positive,
negative,
zero,

it is a right hand curve
it is a left hand curve.
there is no curve.

A spiral length of zero indicates that there is no spiral.
A function return value of zero indicates the hip data was successfully returned.
ID = 103


Name
Integer Set_hip_data(Element elt,Integer i,Real x,Real y)
Description
Modify the plan co-ordinates (x,y) of the ith hip point of the Alignment string elt. The existing
curve radius and spiral lengths are not altered.
The ith hip point must already exist.
A function return value of zero indicates the hip was successfully set.

Page 620

Alignment String Element

Chapter 5 12dPL Library Calls

ID = 104


Name
Integer Set_hip_data(Element elt,Integer i,Real x,Real y,Real rad)
Description
Modify the plan co-ordinates (x,y) and the curve radius, rad, of the ith hip point of the Alignment
string elt. The spiral lengths are not altered.
The ith hip point must already exist.
A function return value of zero indicates the hip was successfully set.
ID = 105


Name
Integer Set_hip_data(Element elt,Integer i,Real x,Real y,Real rad,Real left_spiral,Real right_spiral)
Description
Modify the plan co-ordinates (x,y), the curve radius rad, and the left and right spiral lengths,
left_spiral and right_spiral for the ith hip point of the Alignment string elt.
The ith hip point must already exist.
A function return value of zero indicates the hip was successfully set.
ID = 106


Name
Integer Insert_hip(Element elt,Integer i,Real x,Real y)
Description
Insert a new hip with plan co-ordinates (x,y) before the existing ith hip point.
The curve radius and spiral lengths are set to zero.
The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one.
If i is greater than number of hips, then the new hip is appended to the string.
If i is less than one, then the new hip is prepended to the string.
A function return value of zero indicates the hip was inserted successfully.
ID = 107


Name
Integer Insert_hip(Element elt,Integer i,Real x,Real y,Real rad)
Description
Insert a new hip with plan co-ordinates (x,y) and curve radius rad before the existing ith hip
point.
Alignment String Element

Page 621

12d Model Programming Language Manual

The spiral lengths are set to zero.
The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one.
If i is greater than number of hips, then the new hip is appended to the string.
If i is less than one, then the new hip is prepended to the string.
A function return value of zero indicates the hip was inserted successfully.
ID = 108


Name
Integer Insert_hip(Element elt,Integer i,Real x,Real y,Real rad,Real left_spiral,Real right_spiral)
Description
Insert a new hip with plan co-ordinates (x,y), curve radius rad and left and right spirals of length
left_spiral and right_spiral respectively, before the existing ith hip point.
The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one.
If i is greater than number of hips, then the new hip is appended to the string.
If i is less than one, then the new hip is prepended to the string.
A function return value of zero indicates the hip was inserted successfully.
ID = 109


Name
Integer Delete_hip(Element elt,Integer i)
Description
Delete the ith hip from the Alignment string elt.
The position of all subsequent hips is decreased by one.
A function return value of zero indicates the hip was successfully deleted.
ID = 110


Name
Integer Get_hip_type(Element elt,Integer hip_no,Text &type)
Description
Get the type of the horizontal intersection point number hip_no for the Alignment string elt.
The Text type has a returned value of
Spiral
Curve
IP

if there is spiral/s and horizontal curve at the hip.
if there is a horizontal curve with no spirals at the hip.
if there are no spirals or horizontal curves at the hip.

A function return value of zero indicates the hip information was successfully returned.
ID = 397


Name
Integer Get_hip_geom(Element elt,Integer hip_no,Integer mode,Real &x,Real &y)
Description
Return the (x,y) co-ordinates of the critical horizontal points around the horizontal intersection
point hip_no (i.e. tangent spiral points, spiral curve points etc.) for the Alignment string elt.
The type of critical point (x,y) returned is specified by mode and depends on the type of the hip.
The following table gives the description of the returned co-ordinate (x,y) and whether or not the
mode is applicable for the given HIP type (Y means applicable, N means not applicable).
Mode

Returned co-ordinate

HIP

HIP Type
Curve
Spiral

0
1
2
3
4
5

HIP co-ords
start tangent
end tangent
curve centre
spiral-curve
curve-spiral

Y
N
N
N
N
N

Y
Y TC
Y CT
Y
N
N

Y
Y TS
Y ST
Y
Y
Y

A function return value of zero indicates the hip information was successfully returned and that
the mode was appropriate for the HIP type of the hip hip_no.
ID = 395


Name
Integer Append_vip(Element elt,Real ch,Real ht)
Description
Append a vertical intersection point (vip) with chainage-height co-ordinates (ch,ht) to the
Element elt. The parabolic curve length is set to zero.
The order in which the vips are appended is taken as the order of the vips in the Alignment string.
The vips must be appended in order of increasing chainage along the Alignment string.
Append_vip is used to place the first vip as well as the subsequent vips.
A function return value of zero indicates the vip was appended successfully.
ID = 96


Name
Integer Append_vip(Element elt,Real ch,Real ht,Real parabolic)
Description
Append to the Element elt a vertical intersection point (vip) with chainage-height co-ordinates
(ch,ht) and a parabolic curve of length parabolic.
A parabolic curve length of zero indicates no curve is present.
A function return value of zero indicates the vip was appended successfully.
ID = 97


Name
Integer Append_vip(Element elt,Real ch,Real ht,Real length,Integer mode)
Description
Append to the Element elt a vertical intersection point (vip) with chainage-height co-ordinates
(ch,ht) and a curve of length length.
If mode = 0 or 1, the curve is a parabolic vertical curve
If mode = 2, the curve is a circular vertical curve
A curve length of zero indicates no curve is present.
A function return value of zero indicates the vip was appended successfully.
ID = 98


Name
Integer Get_vip_points(Element elt,Integer &num_pts)
Description
Get the number of vips, num_pts, in the Alignment string elt.
A function return value of zero indicates the number of vip points was successfully returned.
ID = 111


Name
Integer Get_vip_data(Element elt,Integer i,Real &ch,Real &ht)
Description
Get the chainage-height co-ordinates (ch,ht) of the ith vip point for the Alignment string elt.
A function return value of zero indicates the vip data was successfully returned.
ID = 112


Name
Integer Get_vip_data(Element elt,Integer i,Real &ch,Real &ht,Real &parabolic)
Description
Get the chainage-height co-ordinates (ch,ht) and the parabolic curve length parabolic for the ith
vip point of the Alignment string elt.
A function return value of zero indicates the vip data was successfully returned.
ID = 113


Name

Page 624

Alignment String Element

Chapter 5 12dPL Library Calls

Integer Get_vip_data(Element elt,Integer i,Real &ch,Real &ht,Real &value,Integer &mode)
Description
Get the chainage-height co-ordinates (ch,ht) and the curve length value for the ith vip point of
the Alignment string elt.
If mode = 0 or 1, the curve is a parabolic vertical curve
If mode = 2, the curve is a circular vertical curve
A curve length of zero indicates no curve is present.
A function return value of zero indicates the vip data was successfully returned.
ID = 114


Name
Integer Set_vip_data(Element elt,Integer i,Real ch,Real ht)
Description
Modify the chainage-height co-ordinates (ch,ht) of the ith vip point for the Alignment string elt.
The existing parabolic curve length is not altered.
The ith vip point must already exist.
A function return value of zero indicates the vip data was successfully set.
ID = 115


Name
Integer Set_vip_data(Element elt,Integer i,Real ch,Real ht,Real parabolic)
Description
Modify the chainage-height co-ordinates (ch,ht) and the parabolic curve length parabolic, for the
ith vip point of the Alignment string elt.
The ith vip point must already exist.
A function return value of zero indicates the vip data was successfully set.
ID = 116


Name
Integer Set_vip_data(Element elt,Integer i,Real ch,Real ht,Real value,Integer mode)
Description
Modify the chainage-height co-ordinates (ch,ht) and the curve length value, for the i’th vip point
of the Alignment string elt.
If mode = 0 or 1, the curve is set to be a parabolic vertical curve
If mode = 2, the curve is set to be a circular vertical curve
A curve length of zero indicates no curve is present.
A function return value of zero indicates the vip data was successfully returned.
ID = 117


Name
Integer Insert_vip(Element elt,Integer i,Real ch,Real ht)
Description
Insert a new vip with chainage-height co-ordinates (ch,ht) before the existing i’th vip point.
The parabolic curve length is set to zero.
The inserted vip becomes the ith vip and the position of all subsequent vips increases by one.
If i is greater than number of vips, then the new vip is appended to the string.
If i is less than one, then the new vip is prepended to the string.
A function return value of zero indicates that the vip was successfully inserted.
ID = 118


Name
Integer Insert_vip(Element elt,Integer i,Real ch,Real ht,Real parabolic)
Description
Insert a new vip with chainage-height co-ordinates (ch,ht) and parabolic length parabolic before
the existing ith vip point.
The inserted vip becomes the ith vip and the position of all subsequent vips increases by one.
If i is greater than number of vips, then the new vip is appended to the string.
If i is less than one, then the new vip is prepended to the string.
A function return value of zero indicates that the vip was successfully inserted.
ID = 119


Name
Integer Insert_vip(Element elt,Integer i,Real ch,Real ht,Real value,Integer mode)
Description
Insert a new vip with chainage-height co-ordinates (ch,ht) and curve length value before the
existing i’th vip point.
The inserted vip becomes the ith vip and the position of all subsequent vips increases by one.
If i is greater than number of vips, then the new vip is appended to the string.
If i is less than one, then the new vip is prepended to the string.
If mode = 0 or 1, the curve is set to be a parabolic vertical curve
If mode = 2, the curve is set to be a circular vertical curve
A curve length of zero indicates no curve is present.
A function return value of zero indicates that the vip was successfully inserted.
ID = 120


Name
Page 626

Alignment String Element

Chapter 5 12dPL Library Calls

Integer Delete_vip(Element elt,Integer i)
Description
Delete the ith vip from the Alignment string elt.
The position of all subsequent vips is decreased by one.
A function return value of zero indicates that the vip was successfully deleted.
ID = 121


Name
Integer Calc_alignment(Element elt)
Description
Use all the horizontal and vertical data to calculate the full geometry for the Alignment string.
A Calc_alignment must be done before the Alignment string can be used in 12d Model.
A function return value of zero indicates the geometry of the alignment was successfully
calculated.
ID = 99


Name
Integer Get_vip_type(Element elt,Integer vip_no,Text &type)
Description
Get the type of the vertical intersection point number vip_no for the Alignment string elt.
The Text type has a returned value of
VC
Curve
IP

if there is a parabolic curve at the vip.
if there is a circular curve at the vip.
if there is no vertical curves at the vip.

A function return value of zero indicates the vip information was successfully returned.
ID = 398


Name
Integer Get_vip_geom(Element elt,Integer vip_no,Integer mode,Real &chainage,Real &height)
Description
Return the chainage and height co-ordinates of the critical points (tangent points, curve centre)
for vertical intersection point number vip_no of the Alignment string elt.
The type of critical point (chainage,height) returned is given by mode and depends on the type of
the vip.
The following table gives the description of the returned co-ordinates (chainage,height) and
states whether the mode is applicable or not for the given VIP type (Y means applicable, N
means not applicable).
VIP Type

Alignment String Element

Page 627

12d Model Programming Language Manual

Mode

Returned co-ordinate

VIP

VC

Curve

0

VIP co-ords

Y

Y

Y

1

start tangent

N

Y TC

Y TC

2

end tangent

N

Y CT

Y CT

3

curve centre

N

N

Y

A function return value of zero indicates that the vip information was successfully returned and
that the mode was appropriate for the VIP type of the vip number vip_no.
ID = 396


Name
Integer Get_hip_id(Element elt,Integer position,Integer &id)
Description
<no description>
ID = 1451


Name
Integer Get_vip_id(Element elt,Integer position,Integer &id)
Description
<no description>
ID = 1452


Name
Integer Select_string(Text msg,Element &string)
Description
Write the message msg to the 12d Model Output Window and wait until a selection is made.
If a pickable Element is selected, then return the Element picked by the user in string and the
function return value is 1.
If no pickable Element is picked and the function returns, then the function returns codes are:
-1
0
1
2
ID = 29


Name
Integer Select_string(Text msg,Element &string,Real &x,Real &y,Real &z,Real &ch,Real &ht)
Description
Write the message msg to the 12d Model Output Window and then return the Element picked
by the user. The co-ordinates of the picked point are also returned.
The picked Element is returned in the Element string.
The co-ordinates and chainage of the picked point on the Element string are (x,y,z) and ch
respectively.
The value ht is reserved for future use and should be ignored.
A function return value of
-1
0
1
2
ID = 214


Name
Integer Select_string(Text msg,Element &string,Real &x,Real &y,Real &z,Real &ch,Real &ht, Integer
&dir)
Description
Write the message msg to the 12d Model Output Window and then return the Element picked by
the user. The co-ordinates of the picked point are also returned plus whether the string selecting
was picked in the same direction as the string, or the opposite direction to the string.
The picked Element is returned in the Element string.
The co-ordinates and chainage of the picked point on the Element string are (x,y,z) and ch
respectively.
The value ht is reserved for future use and should be ignored.
The value dir indicates if the picking motion was in the same direction as the selected string, or
in the opposite direction.
dir =
dir =

when the picking motion was in the same direction as the selected string.
when the picking motion was in the opposite direction as the selected string.

A function return value of
-1
0
1
2

indicates cancel was chosen from the pick-ops menu.
pick unsuccessful
pick was successful
a cursor pick

ID = 547


Name
Integer Element_draw(Element elt,Integer col_num)
Description
Draw the Element elt in the colour number col_num on all the views that elt is displayed on.
A function return value of zero indicates that elt was drawn successfully.
ID = 372


Name
Integer Element_draw(Element elt)
Description
Draw the Element elt in its natural colour on all the views that elt is displayed on.
A function return value of zero indicates that elt was drawn successfully.
ID = 371


Name
Integer String_closed(Element elt,Integer &closed)
Description
Checks to see if the Element elt is closed. That is, check if the first and the last points of the
element are the same. The close status is returned as closed.
If closed is
1

then elt is closed

0

then elt is not closed (i.e. open)

A zero function return value indicates that the closure check was successful.
ID = 368


Name
Integer String_open(Element elt)
Description
Open the Element elt.
That is, if the first and the last points of the elt are the same, then delete the last point of elt.
A function return value of zero indicates that elt was successfully opened.
ID = 366


Name
Integer String_close(Element elt)
Description
Close the Element elt.
That is, if the first and the last points of elt are not the same, then add a point to the end of elt
which is the same as the first point of elt.
A function return value of zero indicates that elt was successfully closed.
ID = 367


Name
Integer Get_length(Element string,Real &length)
Description
Get the plan length of the Element string (which equals the end chainage minus the start
chainage) and return the plan length in length.
General Element Operations

Page 631

12d Model Programming Language Manual

A function return value of zero indicates the plan length was successfully returned.
ID = 122


Name
Integer Get_length_3d(Element string,Real &length)
Description
Get the 3d length of the Element string and return the 3d length in length.
A function return value of zero indicates the 3d length was successfully returned.
ID = 359


Name
Integer Get_length_3d(Element string,Real ch,Real &length)
Description
Get the 3d length of the Element string from the start of the string up the given chainage ch.
Return the 3d length in length.
A function return value of zero indicates the 3d length was successfully returned.
ID = 2681


Name
Integer Plan_area(Element string,Real &plan_area)
Description
Calculate the plan area of the Element string. If the Element is not closed, then the first and last
points are joined before calculating the area. For an arc, the plan area of the sector is returned.
The plan area is returned in the Real plan_area.
A function return value of zero indicates the plan area was successfully returned.
ID = 221


Name
Integer Get_position(Element elt,Real ch,Real &x,Real &y,Real &z,Real &inst_dir)
Description
For the Element elt, get the (x,y,z) position and instantaneous direction (inst_dir - as an angle,
measured in radians) of the point at chainage ch on elt.
A function return value of zero indicates success.

Page 632

General Element Operations

Chapter 5 12dPL Library Calls

ID = 190


Name
Integer Get_position(Element elt,Real ch,Real &x,Real &y,Real &z,Real &inst_dir,Real &rad,Real
&inst_grade)
Description
For a Element, elt, of type Alignment only, get the (x,y,z) position, radius rad, instantaneous
direction (inst_dir - as an angle, measured in radians) and instantaneous grade (inst_grade) of
a point on elt at chainage ch.
A function return value of zero indicates success.
ID = 471


Name
Integer Drop_point(Element elt,Real xd,Real yd,Real zd,Real &xf,Real &yf,Real &zf,Real &ch,Real
&inst_dir,Real &off)
Description
In plan, drop the point (xd,yd) perpendicularly onto the Element elt. If the point cannot be
dropped onto any segment of the Element, then the point is dropped onto the closest end point.
A z-value for the dropped point is created by interpolation.
The position of the dropped point on the Element is returned in xf, yf and zf. The chainage of the
dropped point on the string is ch and inst_dir the instantaneous direction (as an angle,
measured in radians) at the dropped point.
Off is the plan distance from the original point to the dropped point on the string.
A function return value of zero indicates that the drop was successful.
ID = 191


Name
Integer Drop_point(Element elt,Real xd,Real yd,Real zd,Real &xf,Real &yf,Real &zf,Real &ch,Real
&inst_dir,Real &off,Segment &segment)
Description
In plan, drop the point (xd,yd) perpendicularly onto the Element elt. If the point cannot be
dropped onto any segment of the Element, then the point is dropped onto the closest end point.
A z-value for the dropped point is created by interpolation.
The position of the dropped point on the Element is returned in xf, yf and zf. The chainage of the
dropped point on the string is ch and inst_dir the instantaneous direction (as an angle,
measured in radians) at the dropped point.
Off is the plan distance from the original point to the dropped point on the string.
Segment segment is the link of the string that the point drops onto.

General Element Operations

Page 633

12d Model Programming Language Manual

A function return value of zero indicates that the drop was successful.
ID = 302


Name
Integer Parallel(Element elt,Real distance,Element &parallelled)
Description
Plan parallel the Element elt by the distance distance.
The parallelled Element is returned as the Element parallelled. The z-values are not modified,
i.e. they are the same as for elt.
A function return value of zero indicates the parallel was successful.
ID = 365


Name
Integer String_self_intersects(Element elt,Integer &intersects)
Description
Find the number of self intersections for the Element elt.
The number of self intersections is returned as intersects.
A function return value of zero indicates that there were no errors in the function.
Note
For Elements of type Alignment, Arc, Circle and Text the number of intersects is set to negative.
ID = 328


Name
Integer Loop_clean(Element elt,Point ok_pt,Element &new_elt)

Page 634

General Element Operations

Chapter 5 12dPL Library Calls

Description
This routine tries to remove any plan loops in the Element elt.
If elt is closed, then the function assumes that the Point ok_pt is near a segment of the string
that will also be in the cleaned string.
If elt is open, then the function starts cleaning from the end of the string closest to the Point
ok_pt.
The cleaned Element is returned as Element new_elt.
A function return value of zero indicates the clean was successful.
Note
Loop_clean is not defined for the Elements of type Alignment, Arc, Circle and Text
ID = 329


Name
Integer Get_read_locks(Element elt,Integer &num_locks)
Description
For a valid Element elt, return the number of read locks on elt in num_locks.
Note: There are no 12dPL functions that a macro programmer can use to set read locks. They
are automatically assigned and removed as required by various 12dPL functions.
A function return value of zero indicates the number of read locks was successfully returned.
ID = 1453


Name
Integer Get_write_locks(Element elt,Integer &num_locks)
Description
For a valid Element elt, return the number of write locks on elt in num_locks.
Note: There are no 12dPL functions that a macro programmer can use to set write locks. They
are automatically assigned and removed as required by various 12dPL functions.
A function return value of zero indicates the number of write locks was successfully returned.
ID = 1454


Name
Integer String_replace(Element from,Element &to)
Description

General Element Operations

Page 635

12d Model Programming Language Manual

Copy the contents of the Element from and use them to replace the contents of the Element to.
The id/Uid of to is not replaced.
The Elements to and from must be strings and also be the same string types. For example,
both of type Super.
Note: this will not work for Elements of type Tin.
A function return value of zero indicates the replace was successful.
ID = 1176


Name
Integer Valid_string_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid string name by substituting spaces for any illegal characters
in old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2277


Name
Integer Valid_model_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid model name by substituting spaces for any illegal
characters in old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2278


Name
Integer Valid_tin_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid tin name by substituting spaces for any illegal characters in
old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2279


Name
Integer Valid_attribute_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid attribute name by substituting spaces for any illegal
characters in old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2280


Name

Creating Valid Names

Page 637

12d Model Programming Language Manual

Integer Valid_linestyle_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid linestyle name by substituting spaces for any illegal
characters in old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2281


Name
Integer Valid_symbol_name(Text old_name,Text &valid_name)
Description
Convert the Text old_name to a valid symbol name by substituting spaces for any illegal
characters in old_name. The new name is returned in valid_name.
A function return value of zero indicates the function was successful.
ID = 2282


Name
XML_Document Create_XML_document()
Description
This call creates a new XML document. This is the entry point for all macro code that works with
XML. Existing files can then be read into the document, or the code may start to build up nodes
into the document.
ID = 2436


Name
Integer Read_XML_document(XML_Document doc,Text file)
Description
Reads the supplied file and loads the nodes into the supplied XML Document object.
Returns 0 if successful.
ID = 2419


Name
Integer Write_XML_document(XML_Document doc,Text file)
Description
Writes the supplied XML Document to the given file name.
Returns 0 if successful.
ID = 2420


Name
Integer Get_XML_declaration(XML_Document doc,Text &version,Text &encoding,Integer &standalone)
Description
Finds and returns the values from the XML declaration in the given document. Not all documents
may contain XML declarations.
Returns 0 if successful.
ID = 2437


Name
Integer Set_XML_declaration(XML_Document doc,Text version,Text encoding,Integer standalone)
Description
This call sets the details for the XML declaration. If the document does not already contain an
XML declaration, one will be added to the top of the document.
Returns 0 if successful.
ID = 2438


Name
XML_Node Create_node(Text name)
Description
This call creates a new XML node. This node can have its value set, or have other children
nodes appended to it. It must also be either set as the root node (see Set_Root_Node) or
appended to another node (see Append_Node) to become part of a document.
ID = 2435


Name
Integer Get_root_node(XML_Document doc,XML_Node &node)
Description
This call finds and retrieves the node at the root of the document. This is the top level node. If
there is no root node, the call will return non 0.
Returns 0 if successful.
ID = 2421


Name
Integer Set_root_node(XML_Document,XML_Node &node)
Description
This call sets the root node (the top level node) for the given document. There must be at most
one root node in a document.
ID = 2422


Name
Integer Get_number_of_nodes(XML_Node node)
Description

Page 640

XML

Chapter 5 12dPL Library Calls

This call returns the number of children nodes for the given nodes. A node may contain 0 or more
children.
ID = 2423


Name
Integer Get_child_node(XML_Node node,Integer index,XML_Node &child_node)
Description
This call retrieves the n'th child, as specified by index, of a parent node and stores it in the
child_node argument.
Returns 0 if successful.
ID = 2424


Name
Integer Get_child_node(XML_Node node,Text name,XML_Node &child_node)
Description
This call retrieves the first instance of a child of a parent node, by its name. If there is more than
one element of the same name, this call will only return the first. The retrieved node will be stored
in the child_node argument.
This call will return 0 if successful.
ID = 2439


Name
Integer Append_node(XML_Node parent,XML_Node new_node)
Description
This call appends a child node to a parent node. A parent node may contain 0 or more children
nodes.
This call will return 0 if successful.
ID = 2425


Name
Integer Remove_node(XML_Node parent,Integer index)
Description
This call removes the n'th child node, as given by index, from the supplied parent node.
This call will return 0 if successful.
ID = 2426


Name
Integer Get_parent_node(XML_Node child,XML_Node &parent)
Description
This call will find the parent node of the supplied child and store it in the parent argument.
This call will return 0 if successful.
ID = 2427


Name
Integer Get_next_sibling_node(XML_Node node,XML_Node &sibling)
Description
Given a node, this call will retrieve the next sibling, or same level node.
In the following example, Child2 is the next sibling of Child1.
<Parent>
<Child1/>
<Child2/>
</Parent>
This call will return 0 if successful.
ID = 2428


Name
Integer Get_prev_sibling_node(XML_Node node,XML_Node &sibling)
Description
Given a node, this call will retrieve the previous sibling, or same level node.
In the following example, Child1 is the previous sibling of Child2.
<Parent>
<Child1/>
<Child2/>
</Parent>
This call will return 0 if successful.
ID = 2429


Name
Integer Get_node_name(XML_Node node,Text &name)
Description
This call will retrieve the name of a supplied node and store it in the name argument.
The name of a node is the value within the brackets or tags. In the following example, MyNode is
the name of the node.
<MyNode>1234</MyNode>
This call will return 0 if successful.
ID = 2433


Name
Integer Get_node_attribute(XML_Node node,Text name,Text &value)
Description
This call will try find an attribute of given name belonging to the supplied node, and will store the
value in the value attribute.
In the following example, the data stored in value will be: MyAttributeData
<MyNode MyAttribute="MyAttributeData" />
This call will return 0 if successful.
ID = 2440


Name
Integer Set_node_attribute(XML_Node node,Text name,Text value)
Description
This call will set the value of an attribute attached to a node. If it does not exist, the attribute will
be created.
This call will return 0 if successful.
ID = 2441


Name
Integer Remove_node_attribute(XML_Node node,Text name)
Description
This call will attempt to remove a node of a given name from the supplied node.
This call will return 0 if successful.
ID = 2442


Name
Integer Is_text_node(XML_node &node)
Description
This call will attempt to determine if a node is a text only node or not.
A text node is one that contains only text, and no other child nodes.
This call will return 1 if the node is a text node.
ID = 2430


Name

XML

Page 643

12d Model Programming Language Manual

Integer Get_node_text(XML_Node &node,Text &text)
Description
This call will attempt to retrieve the internal text value of a node and store it in text.
Not all nodes may contain text.
In the following example, the value of text will be set to MyText
<MyNode>MyText</MyNode>
This call will return 0 if successful.
ID = 2431


Name
Integer Set_node_text(XML_Node &node,Text value)
Description
This call will set the internal text of node to the value.
This call will return 0 if successful.
ID = 2432


Name
XML_Node Create_text_node(Text name,Text value)
Description
This call will create a new text node of the given name and set the internal text to the given value.
This call will return the created node.
ID = 2434


Name
Integer Map_file_create(Map_File &file)
Description
Create a mapping file. The file unit is returned as Map_file file.
A function return value of zero indicates the file was opened successfully.
ID = 864


Name
Integer Map_file_open(Text file_name, Text prefix, Integer use_ptline,Map_File &file)
Description
Open up a mapping file to read.
The file unit is returned as Map_file file.
The prefix of models is given as Text prefix.
The string type is given as Integer use_ptline,
0 – point string
1 – line sting.
A function return value of zero indicates the file was opened successfully.
ID = 865


Name
Integer Map_file_close(Map_File file)
Description
Close a mapping file. The file being closed is Map_file file.
A function return value of zero indicates the file was closed successfully.
ID = 866


Name
Integer Map_file_number_of_keys(Map_File file,Integer &number)
Description
Get the number of keys in a mapping file.
The file is given as Map_file file.
The number of keys is returned in Integer number.
A function return value of zero indicates the number was returned successfully.
ID = 868


Name
Integer Map_file_add_key(Map_File file,Text key,Text name,Text model,Integer colour,Integer ptln,Text
style)
Description
Add key to a mapping file.
The file is given in Map_file file.
The key is given in Text key.
The string name is given in Text name.
The model name is given in Text model.
The string colour is given in Integer colour.
The string type is given in Integer ptln.
The string style is given in Text style.
A function return value of zero indicates the key was added successfully.
ID = 869


Name
Integer Map_file_get_key(Map_File file,Integer n,Text &key,Text &name,Text &model, Integer
&colour,Integer &ptln,Text &style)
Description
Get nth key’s data from a mapping file.
The file is given in Map_file file.
The key is returned in Text key.
The string name is returned in Text name.
The model name is returned in Text model.
The string colour is returned in Integer colour.
The string type is returned in Integer ptln.
The string style is returned in Text style.
A function return value of zero indicates the key was returned successfully.
ID = 870


Name
Integer Map_file_find_key(Map_File file,Text key,Integer &number)
Description
Find the record number from a mapping file that contains the given key.
The file unit is given in Map_file file.

Page 646

Map File

Chapter 5 12dPL Library Calls

The record number is returned in Integer number.
A function return value of zero indicates the key was find successfully.
ID = 871


Name
Integer Set_message_mode(Integer mode)
Description
When macros are running, progress information can be displayed in the information/error
message area. Most 12dPL computational intensive functions have standard messages that can
be displayed. For example, when triangulating, regular messages showing the number of points
triangulated can be displayed. Or the message running with the ticker character "/" rotating
through 360 degrees.
The user can have the standard 12dPL messages displayed, or replace them at any time by a
user defined message (set using the function Set_message_text).
If mode is set to
0
the user defined message
1
the standard 12dPL message
is displayed in the information/error message area.
A function return value of zero indicates the mode was successfully set.
ID = 427


Name
void Set_message_text(Text msg)
Description
Set the user defined information message to msg. This is a prefix for the ticker "/".
When the message mode is set to 0 (using the function Set_message_mode), msg is displayed
in the information/error message area. The message msg is followed by a rotating ticker (/) to
indicate to the user that the macro is running.
A function return value of zero indicates the message was successfully set.
ID = 426


Name
void Prompt(Text msg)
Description
Print the message msg to the prompt message area of the macro console.

prompt message area

If another message is written to the prompt message area then the previous message will be

Page 650

Macro Console

Chapter

overwritten by the new message.
ID = 34


Name
Integer Prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then wait for the user to type text into
the user reply area of the Macro Console. When <enter> is pressed then the text in the user
reply area is returned in ret.
That is, write out the message msg and get a Text ret from the Macro Console when the text is
terminated by pressing <enter>.
The reply is returned in Text ret.
A function return value of zero indicates the text is returned successfully.
ID = 28


Name
Integer Prompt(Text msg,Integer &ret)
Description
Print the message msg to the prompt message area and then read back an Integer from the
user reply area of the Macro Console.
That is, write out the message msg and wait for an integer reply from the Macro Console. The
reply is terminated by pressing <enter>.
The reply is returned in Integer ret.
A function return value of zero indicates that the Integer was returned successfully.
ID = 26


Name
Integer Prompt(Text msg,Real &ret)
Description
Print the message msg to the prompt message area and then read back a Real from the user
reply area of the Macro Console. The reply is terminated by pressing <enter>.
The reply is returned in Real ret.
A function return value of zero indicates that the Real was returned successfully.
ID = 27


Name
Integer Colour_prompt(Text msg,Text &ret)

Macro Console

Page 651

12d Model Programming Language Manual

Description
Print the message msg to the prompt message area of the Macro Console and then read back
text from the user reply area of the Macro Console as the name of a 12d Model colour.
If LB is clicked on the colour choice icon at the right hand end of the user reply area, a list of all
existing colours is placed in a pop-up. If a colour is selected from the pop -up (using LB), the
colour name is written to the user reply area.
The reply, either typed or selected from the colour pop-up, is then terminated by pressing
<Enter>.

information/error message area

prompt message area
colour choice icon
user reply area

colour choice pop up

If the text is a valid colour then a function return value of zero is returned and the colour name is
returned in ret.
If the text is not a valid colour name, then the message Error - invalid colour is written to the
information message area and a non-zero function return value is returned.

information/error message area

A function return value of zero indicates the Text ret is a valid colour name and is successfully

Page 652

Macro Console

Chapter

returned.
ID = 404


Name
Integer Error_prompt(Text msg)
Description
Print the message msg to the information/error message area of the Macro Console, and
writes Press return to continue to the prompt message area and then waits for an <enter> in the
user reply area before the macro continues.

information/error
message area
prompt message area
user reply area
A function return value of zero indicates the function terminated successfully.
ID = 419


Name
Integer Choice_prompt(Text msg,Integer no_choices,Text choices[],Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the choice icon at the right hand end of the user reply area, user reply area,
the list of text given in the Text array choices is placed in a pop-up. If one of the choices is
selected from the pop-up (using LB), the choice is placed in the user reply area.
The reply, either typed or selected from the choice pop-up, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the text is returned successfully.
ID = 421


Name
Integer File_prompt(Text msg,Text wild_card_key,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the folder icon at the right hand end of the user reply area, a list of all files in

Macro Console

Page 653

12d Model Programming Language Manual

the current area which match the wild_card_key (for example, *.dat) is placed in a pop-up. If a
file is selected from the pop-up (using LB), the file name is placed in the user reply area.
If a name is entered without a dot ending (e.g. fred and not fred.csv say) then the ending after the
dot in the wild_card_key is automatically added to the name.
For example, if wild_card_key = "*.rpt" and "fred" is type in as the file name, then ret will be
returned as ret = "fred.rpt".
The reply, either typed or selected from the file pop-up, must be terminated by pressing <Enter>
for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 405


Name
Integer Model_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the icon at the right hand end of the user reply area, a list of all existing
models is placed in a pop-up. If a model is selected from the pop-up (using LB), the model name
is placed in the user reply area.
MB for "Same As" also applies. That is, If MB is clicked in the user reply area and then a string
from a model on a view is selected, then the name of the model containing the selected string is
written to the user reply area.
msg written to prompt message area
Click LB to on the icon to
bring up the list of models
to select from

user reply area
The reply, either typed or selected from the model pop-up or Same As, must be terminated by
pressing <Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 401


Name
Integer Template_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.

Page 654

Macro Console

Chapter

If LB is pressed on the icon at the right hand end of the user reply area, a list of all existing
templates is placed in a pop-up. If a template is selected from the pop-up (using LB), the
template name is placed in the user reply area.
The reply, either typed or selected from the template popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the text is returned successfully.
ID = 403


Name
Integer Tin_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the tin icon at the right hand end of the user reply area, a list of all existing tins
is placed in a pop-up. If a tin is selected from the pop-up (using LB), the Tin name is placed in the
user reply area.
The reply, either typed or selected from the Tin popup, must be terminated by pressing <Enter>
for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 402


Name
Integer Tin_prompt(Text msg,Integer mode,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the tin icon at the right hand end of the user reply area, a list of all existing tins
is placed in a pop-up. If a tin is selected from the pop-up (using LB), the Tin name is placed in the
user reply area.
The value of mode determines whether Super Tins are listed in the pop-up.
Mode

Description

0

Don’t list SuperTin.

1

List SuperTin.

The reply, either typed or selected from the Tin pop-up, must be terminated by pressing <Enter>
for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 684


Name
Integer View_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the view icon at the right hand end of the user reply area, a list of all existing
views is placed in a pop-up. If a view is selected from the pop-up (using LB), the view name is
placed in the user reply area.
The reply, either typed or selected from the view popup, must be terminated by pressing <Enter>
for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 406


Name
Integer Yes_no_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the choice icon at the right hand end of the user reply area, a yes/no pop-up
is placed on the screen. If yes or no is selected from the pop-up (using LB), the selected test is
placed in the user reply area.
The reply, either typed or selected from the yes/no popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 420


Name
Integer Plotter_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the plotter icon at the right hand end of the user reply area, a list of all existing
plotters is placed in a pop-up. If a plotter is selected from the pop-up (using LB), the plotter name
is placed in the user reply area.
The reply, either typed or selected from the plotter popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 817


Name
Integer Sheet_size_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existing
sheet sizes is placed in a pop-up. If a sheet size is selected from the pop-up (using LB), the
sheet size name is placed in the user reply area.
The reply, either typed or selected from the sheet_size popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 818


Name
Integer Linestyle_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the linestyle icon at the right hand end of the user reply area, a list of all
existing linestyles is placed in a pop-up. If a linestyle is selected from the pop-up (using LB), the
linestyle name is placed in the user reply area.
The reply, either typed or selected from the linestyle popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 819


Name
Integer Textstyle_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the textstyle icon at the right hand end of the user reply area, a list of all
existing textstyles is placed in a pop-up. If a textstyle is selected from the pop-up (using LB), the
textstyle name is placed in the user reply area.
The reply, either typed or selected from the textstyle popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.

Macro Console

Page 657

12d Model Programming Language Manual

A function return value of zero indicates the Text ret is returned successfully.
ID = 820


Name
Integer Justify_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existing
justifications is placed in a pop-up. If a Justify is selected from the pop-up (using LB), the Justify
name is placed in the user reply area.
The reply, either typed or selected from the Justify popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 821


Name
Integer Angle_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the angle icon at the right hand end of the user reply area, a list of Angle
measure options is placed in a pop-up. If a Angle is selected from the pop-up (using LB), the
Angle name is placed in the user reply area.
The reply, either typed or selected from the Angle popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 822


Name
Integer Function_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the function icon at the right hand end of the user reply area, a list of all
existing 12d Model Functions is placed in a pop-up. If a Function is selected from the pop-up
(using LB), the Function name is placed in the user reply area.
The reply, either typed or selected from the Function popup, must be terminated by pressing

Page 658

Macro Console

Chapter

<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 823


Name
Integer Project_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the icon at the right hand end of the user reply area, a list of all existing
Projects in the folder is placed in a pop-up. If a Project is selected from the pop-up (using LB), the
Project name is placed in the user reply area.
The reply, either typed or selected from the Project popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 824


Name
Integer Directory_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the folder icon at the right hand end of the user reply area, the Select Folder
dialogue is opened. If a Folder is selected by clicking on it with LB and then clicking on the Select
Folder button, the Folder name is placed in the user reply area.
The reply, either typed or selected from the Select Folder dialogue, must be terminated by
pressing <Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 825


Name
Integer Text_units_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existing
Text units is placed in a pop-up. If a Text_units is selected from the pop-up (using LB), the Text

Macro Console

Page 659

12d Model Programming Language Manual

units name is placed in the user reply area.
The reply, either typed or selected from the Text_units popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 826


Name
Integer XYZ_prompt(Text msg,Real &x,Real &y,Real &z)
Description
Print the message msg to the prompt message area and then read back what must be xvalue y-value z- value with the values separated by one or more spaces.
If LB is clicked on the pick icon at the right hand end of the user reply area, an XYZ pick is
started and when a pick is made, the coordinates of the pick, separated by spaces, are written in
the user reply area.
The reply, either typed or selected from the Pick, must be terminated by pressing <Enter> for the
macro to continue.
The values are returned in x, y and z.
A function return value of zero indicates values x, y and z are successfully returned.
ID = 827


Name
Integer Name_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user
reply area of the Macro Console.
If LB is clicked on the Name icon at the right hand end of the user reply area, a list of all existing
Names is placed in a pop-up. If a Name is selected from the pop-up (using LB), the Name is
placed in the user reply area.
The reply, either typed or selected from the Name popup, must be terminated by pressing
<Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 828


Name
Integer Panel_prompt(Text panel_name,Integer interactive,Integer no_field,Text field_name[],Text
field_value[])
Description

Page 660

Macro Console

Chapter

Pop up a panel of the name panel_name.
No_field specifies how many fields you wish to fill in for the panel.
The name of each field is specified in Field_name array.
The value of each field is specified in field_value array.
If interactive is 1, the panel is displayed and remains until the finish button is selected.
If interactive is 0, the panel is displayed, runs the option and then closes.
A function return value of zero indicates success.
See example Defining and Using Panel_prompt
ID = 685


Name
Integer Get_cursor_position(Integer &x,Integer &y)
Description
Get the cursor position (x,y).
The units of x and y are screen units (pixels).
The type of x and y must be Integer.
A function return value of zero indicates the position was returned successfully.
ID = 1329


Name
Integer Set_cursor_position(Integer x,Integer y)
Description
Set the cursor position with the coordinates (x, y).
The units of x and y are screen units (pixels).
A function return value of zero indicates the position was successfully set.
ID = 1330


Name
Panel Create_panel(Text title_text)
Description
Create a panel with the title title_text.
If LB is clicked on the X on the top right corner of the panel, the text "Panel Quit" is returned as
the cmd argument to Wait_on_widgets.

Click LB on X to send the
"Panel Quit" command

Click LB on the Widows icon to
bring up the Windows panel
If LB is clicked on the Windows icon on the top left hand corner of the panel,

Click LB on X to send the
"Panel About" command
Click LB on X to send the
"Panel About" command

See Wait_on_widgets(Integer &id,Text &cmd,Text &msg) .
For an example of a panel with Widgets Tin_Box, Buttons, Message_Box and Horizontal and
Vertical Groups etc, see Panel Example:
The function return value is the created Panel.
Note: the Show_widget(Panel panel) call must be made to display the panel on the screen - see
Panel Example: .
ID = 843


Name
Integer Append(Widget widget,Panel panel)

Panels and Widgets

Page 667

12d Model Programming Language Manual

Description
Append the Widget widget to the Panel panel.
The Panel displays the Widgets from the top in the order that the Widgets are Appended to the
Panel. That is, the first Widget appended is at the top of the Panel. The last Widget appended is
at the bottom of the Widget.
Rather than a Panel having just a simple structure of a number of Widgets appended to the
Panel, Horizontal and Vertical grouping can be used to collect the Widgets together in logical
fashions and then the Horizontal and Vertical groups are Appended to the Panel using this
Append(Widget widget, Panel panel) call. There are even more complicated groupings allowed
including Panel pages, Grid Controls and Trees.
See Horizontal Group , Vertical Group , Panel Page , GridCtrl_Box ,Tree Box Calls
A function return value of zero indicates the widget was appended successfully.
For an example of a panel with Widgets Tin_Box, Buttons, Message_Box and Horizontal and
Vertical Groups etc, see Panel Example:
ID = 852


Name
Horizontal_Group Create_horizontal_group(Integer mode)
Description
Create a Widget of type Horizontal_Group.
A Horizontal_Group is used to collect a number of Widgets together. The Widgets are added to
the Horizontal_Group using the Append(Widget widget,Horizontal_Group group) call. The Widgets
are automatically spaced horizontally in the order that they are appended.
mode has the values (defined in set_ups.h)
// modes for Horizontal_Group (note -1 is also allowed)
For BALANCE_WIDGETS_OVER_WIDTH = 1
the widgets in the horizontal group are all given the same width and are evenly spaced
horizontally. So the widgets all have the size of what the largest widget needed.
For ALL_WIDGETS_OWN_WIDTH = 2
the widgets in the horizontal group are all their own size all.
For COMPRESS_WIDGETS_OVER_WIDTH = 4
.
The function return value is the created Horizontal_Group.
ID = 845


Name
Horizontal_Group Create_button_group()
Description
Create a Widget of type Horizontal_Group to hold Widgets of type Button.
A Horizontal_Group is used to collect a number of Widgets together. The Widgets are added to
the Horizontal_Group using the Append(Widget widget,Horizontal_Group group) call. The Widgets
are automatically spaced horizontally in the order that they are appended.
The Create_button_group goes a bit further than Create_horizontal_group in making the button
spacing more even.
The function return value is the created Horizontal_Group.
ID = 846


Name
Integer Append(Widget widget,Horizontal_Group group)

Page 670

Panels and Widgets

Chapter

Description
Append the Widget widget to the Horizontal_Group group.
A Horizontal_Group is used to collect a number of Widgets together and the Widgets are added
to the Horizontal_Group using this call. The Widgets are automatically spaced horizontally in the
order that they are appended.
A function return value of zero indicates the Widget was appended successfully.
ID = 853


Name
Integer Set_border(Horizontal_Group group,Text text)
Description
Set a border for the Horizontal_Group group with Text text.on the top left side of the border.
If text is blank, the border is removed.

Horizontal_Group of two Buttons
with no border

Horizontal_Group of two Buttons
with border and text "Buttons"

A function return value of zero indicates the border was successfully set.
ID = 1098


Name
Integer Set_border(Horizontal_Group group,Integer bx,Integer by)
Description
Set a gap around the border of the Horizontal_Group group.
bx sets the left and right side gap around the border.
by sets the top and bottom side gap around of the border.
The units of bx and by are screen units (pixels).
A function return value of zero indicates the border gap was successfully set.

Panels and Widgets

Page 671

12d Model Programming Language Manual

Horizontal_Group of two Buttons
with default border gaps
and text "Buttons"

Horizontal_Group of two Buttons
with border gaps bx =10 and by = 20
and text "Buttons"

ID = 858


Name
Integer Set_gap(Horizontal_Group group,Integer gap)
Description
Set a horizontal gap of at least gap screen units (pixels) between the Widgets of the
Horizontal_Group group.
A function return value of zero indicates the vertical gap was successfully set.
ID = 1506


Name
Vertical_Group Create_vertical_group(Integer mode)
Description
Create a widget of type Vertical_Group.
A Vertical_Group is used to collect a number of Widgets together. The Widgets are added to the
Vertical_Group using the Append(Widget widget,Vertical_Group group) call. All the Widgets
appended to the Vertical_Group are given the same width. The Widgets are automatically
spaced vertically in the order that they are appended to the Vertical_Group.
mode has the values (defined in set_ups.h)
// modes for Vertical_Group (note -1 is also allowed)
For BALANCE_WIDGETS_OVER_HEIGHT = 1
the widgets in the vertical group are evenly spaced vertically.
For ALL_WIDGETS_OWN_HEIGHT

=2

For ALL_WIDGETS_OWN_LENGTH = 4

The function return value is the created Vertical_Group.
ID = 844


Name
Integer Append(Widget widget,Vertical_Group group)
Description
Append the Widget widget to the Vertical_Group group.
A function return value of zero indicates the widget was appended successfully.
ID = 854


Name
Integer Set_border(Vertical_Group group,Text text)
Description
Set a border of the Vertical_Group group with Text text.on the top left side of the border. If text is
blank, the border is removed.

Panels and Widgets

Page 673

12d Model Programming Language Manual

A function return value of zero indicates the border was successfully set.

The tins are a Vertical_Group of
4 Widgets with no border

The same Vertical_Group of 4 Widgets
with border and text "Tins"
Note that for the left and right gaps that
the width of the panel doesn’t change
but the gap from the sides of the panel
to the box is increased

ID = 1099


Name
Integer Set_border(Vertical_Group group,Integer bx,Integer by)
Description
Set a gap around the border of the Vertical_Group group.
bx sets the left and right side gap around the border.
by sets the top and bottom side gap around of the border.
The units of bx and by are screen units (pixels).
A function return value of zero indicates the border gap was successfully set.

Vertical_Group of 4 Widgets
with default border gaps
and text "Tins"

Vertical_Group of 4 Widgets
with border gaps bx =10 and by = 20
and text "Tins"
Note that for the left and right gaps that
the width of the panel doesn’t change
but the gap from the sides of the panel
to the box is increased

Page 674

Panels and Widgets

Chapter

ID = 859


Name
Integer Set_gap(Vertical_Group group,Integer gap)
Description
Set a vertical gap of at least gap screen units (pixels) between the Widgets of the Vertical_Group
group.
A function return value of zero indicates the vertical gap was successfully set.
ID = 1507


Name
Integer Wait_on_widgets(Integer &id,Text &cmd,Text &msg)
Description
When the user activates a Widget displayed on the screen (for example by clicking on a Button
Widget), the id, cmd and msg from the widget is passed back to Wait_on_widgets.
id is the id of the Widget that has been activated.
cmd is the command text that is returned from the Widget.
msg is the message text that is returned from the Widget.
A function return value of zero indicates the data was successfully returned.
Note: for a Button, the returned cmd is the Text reply given when the Button was created. See
Create_button(Text title_text,Text reply) .
ID = 857


Name
Integer Use_browse_button(Widget widget,Integer mode)
Description
Set whether the browse button is available for Widget widget.
If mode = 1 use the browse button
if mode = 0 don’t use the browse button.
The default value for a Widget is mode = 1.
If the browse button is not used, the space where the button would be, is removed.
Note: This call must be made before the Panel that contains the widget is shown.
A function return value of zero indicates the value was valid.

Browse button of a Widget
Use_browse_button mode = 1
Use_browse_button mode = 0

ID = 1095


Name
Integer Show_browse_button(Widget widget,Integer mode)
Description
This calls you to show or hide the browse button for the Widget widget.

Page 676

Panels and Widgets

Chapter

If mode = 1 show the browse button
if mode = 0 don’t show the browse button.
The default value for a Widget is mode = 1.
This call can be made after the Widget has been added to a panel and allows the Browse button
of the Widget to be turned on and off under the programmers control.
Note if Use_browse_button was called with a mode of 0 then this call is ineffective. See
Use_browse_button(Widget widget,Integer mode)
A function return value of zero indicates the mode was successfully set.
Browse Button of
the Tin_Box Widget
Show_browse_button mode = 1
Show_browse_button mode = 0
ID = 1096


Name
Integer Set_enable(Widget widget,Integer mode)
Description
Set the enabled mode for the Widget widget.
If

mode = 1
mode = 0

the Widget is to be enabled
the Widget is not to be enabled.

The default value for a Widget is mode = 1.
Note If the widget is not enabled, it will be greyed out in the standard Windows fashion and no
interaction with the Widget is possible.
A function return value of zero indicates the mode was successfully set.

Set_enable mode = 1
Set_enable mode = 0

All parts of the disabled Widget are greyed out
ID = 1101


Name
Integer Get_enable(Widget widget,Integer &mode)
Description
Check if the Widget widget is enabled or disabled. See Set_enable(Widget widget,Integer

Panels and Widgets

Page 677

12d Model Programming Language Manual

mode)
Return the Integer mode where
mode = 1 if the Widget is enabled
mode = 0 if the Widget is not enabled.
A function return value of zero indicates the mode was returned successfully.
ID = 1100


Name
Integer Set_optional(Widget widget,Integer mode)
Description
Set the optional mode for the Widget widget.
That is, if the Widget field is blank, the title text to the left is greyed out, signifying that this Widget
is optional.
If

mode = 1
mode = 0

the widget is optional
the widget is not optional.

The default value for a Widget is mode = 0.
If this mode is used (i.e. 1), the widget must be able to accept a blank response for the field, or
assume a reasonable value.
A function return value of zero indicates the mode was successfully set.

Set_optional mode = 0
Widget title
greyed out

Set_optional mode = 1

Note: not all Widgets can be set to be optional.
For example Choice_Box, Named_Tick_Box, Source_Box,
ID = 1324


Name
Integer Get_optional(Widget widget,Integer &mode)
Description
Check if the Widget widget is optional. That is, the Widget does not have to be answered.See
Set_optional(Widget widget,Integer mode)
Return the Integer mode where
mode = 1 if the Widget is optional
mode = 0 if the Widget is not optional.
A function return value of zero indicates the mode was returned successfully.
ID = 1325


Name
Integer Set_visible(Widget widget,Integer mode)
Description
Set the visible mode for the Widget widget.
If

mode = 1
mode = 0

the widget is visible, and not displayed on the panel
the widget is not visible and not displayed.

Even if the widget is invisible, it still takes the same space on a panel.
The default value for a Widget is visible. That is, mode = 1.
A function return value of zero indicates the visibility was successfully set.

Widget is visible
Set_visible mode = 1

Widget is invisible
Set_visible mode = 0
Space is still left where
the Widget is even though
it is invisible

ID = 1614


Name
Integer Get_visible(Widget widget,Integer &mode)
Description
Get the visibility mode for the Widget widget.
Return the Integer mode where
mode = 1 if the Widget is visible
mode = 0 if the Widget is not visible.
A function return value of zero indicates the visibility was returned successfully.
ID = 1615


Name
Integer Set_name(Widget widget,Text text)
Description
Set the title text of the Widget widget.
A Widget is usually given a title when it is first created This call can be made after the Widget has
been added to a panel and allows the title of the Widget to be changed under the programmers

Panels and Widgets

Page 679

12d Model Programming Language Manual

control.
A function return value of zero indicates the title was successfully set.
ID = 1326


Name
Integer Get_name(Widget widget,Text &text)
Description
Get the title text from the Widget widget.
A function return value of zero indicates the text was returned successfully.
ID = 1327


Name
Integer Set_error_message(Widget widget,Text text)
Description
This call is used to set the error message for a Widget if it is validated and there is an error.
LJG ?
When there is an error, text is sent to the associated Message_Box of the widget, the focus is
set to the widget and the cursor is moved to the widget.
A function return value of zero indicates the text was successfully set.
ID = 1437


Name
Integer Set_width_in_chars(Widget widget,Integer num_char)
Description
Set the Widget widget to be num_char characters wide.
A function return value of zero indicates the width was set successful.
ID = 1042


Name
Integer Show_widget(Widget widget)
Description
Show the Widget widget at the cursor’s current position.
Note: The call Show_widget(Widget widget,Integer x,Integer y) allows you to give the screen
coordinates to position the Widget. See Show_widget(Widget widget,Integer x,Integer y) .
A function return value of zero indicates the widget was shown successfully.
ID = 855


Name
Integer Show_widget(Widget widget,Integer x,Integer y)
Description
Show the Widget widget at the screen coordinates x, y. The units for x and y are pixels.
A function return value of zero indicates the widget was shown successfully.
ID = 1039


Name
Integer Hide_widget(Widget widget)
Description
Hide the Widget widget. That is, don’t display the Widget on the screen.
Note the Widget still exists but it is not visible on the screen. The Widget will appear again by
calling Show_widget. See Show_widget(Widget widget) .
A function return value of zero indicates the widget was hidden successfully.
ID = 856


Name
Integer Set_size(Widget widget,Integer x,Integer y)
Description
Set the size in screen units (pixels) of the Widget widget with the width x and height y.
The type of x and y must be Integer.
A function return value of zero indicates the size was successfully set.
ID = 1365


Name
Integer Get_size(Widget widget,Integer &x,Integer &y)
Description
Get the size in screen units (pixels) of the Widget widget in x and y.
The type of x and y must be Integer.
A function return value of zero indicates the size was returned successfully.
ID = 1331


Name

Panels and Widgets

Page 681

12d Model Programming Language Manual

Integer Get_widget_size(Widget widget,Integer &w,Integer &h)
Description
Get the size of the Widget widget in screen units (pixels)
The width of widget is returned in w and the height of widget is returned in h.
A function return value of zero indicates the size was successfully returned.
ID = 1041


Name
Integer Set_cursor_position(Widget widget)
Description
Move the cursor position to the Widget widget.
A function return value of zero indicates the position was successfully set.
ID = 1059


Name
Integer Get_widget_position(Widget widget,Integer &x,Integer &y)
Description
Get the screen position of the Widget widget.
The position of the widget is returned in x, y. The units of x and y are screen units (pixels).
A function return value of zero indicates the position was successfully returned.
ID = 1040


Name
Integer Get_position(Widget widget,Integer &x,Integer &y)
Description
Get the screen position of the Widget widget.
The position of the widget is returned in x, y. The units of x and y are screen units (pixels).
A function return value of zero indicates the position was successfully returned.
ID = 1366


Name
Integer Get_id(Widget widget)
Description
When a Widget is created, it is given a unique identifying number (id) in the project.
This function get the id of the Widget widget and returns id as the function return value.

Page 682

Panels and Widgets

Chapter

That is, the Integer function return value is the Widget id.
D = 879

Set_focus(Widget widget)
Name
Integer Set_focus(Widget widget)
Description
Set the focus to the typed input area for an Input Widget widget, or on the button for a Button
Widget widget.
After this call all typed input will go to this widget.
A function return value of zero indicates the focus was successfully set.
ID = 1097


Name
Integer Set_tooltip(Widget widget,Text tip)
Description
Sets the tool tip message for the Widget widget to tip.
When the user hovers over widget, this message tip will be displayed as a Windows tooltip.
A function return value of zero indicates the tooltip was successfully set.

Tooltip shown as cursor
goes over the Widget
ID = 1363


Name
Integer Get_tooltip(Widget widget,Text &tip)
Description
Queries the current tool tip message and returns the message in tip.
A function return value of zero indicates the tooltip was successfully returned.
ID = 1364


Name
Integer Set_help(Widget widget,Integer help_num)
Description
For the Widget widget, the help number for widget is set to help_num.
This is currently not used.
A function return value of zero indicates the help number was successfully set.
Note: See Help Button for creating a Help button that allows the macro to access the 12d Model
Extra Help system.
ID = 1312


Name
Integer Get_help(Widget widget,Integer &help_num)
Description
Get the help number for Widget widget and return it in help_num.

Page 686

Panels and Widgets

Chapter

The type of help must be integer.
A function return value of zero indicates the help number was successfully returned.
Note: See Help Button for creating a Help button that allows the macro to access the 12d Model
Extra Help system.
ID = 1313


Name
Integer Set_help(Widget widget,Text help_message)
Description
For the Widget widget, the help message for widget is set to help_message.
This help message will be sent back to 12d Model via Wait_on_widgets(Integer &id,Text
&cmd,Text &msg) with command cmd equal to “Help”, and msg equal to help_message.
So a sample bit of code to handle help is
Wait_on_widgets(id,cmd,msg);
if (cmd == “Help”) {;
Winhelp(panel,"12d.hlp",'a',msg);

// in the Winhelp file 12d.hlp,
// find and display the a table entry msg

continue;
}
A function return value of zero indicates the text was successfully set.
ID = 1314


Name
Integer Get_help(Widget widget,Text &help_message)
Description
Queries the current help message for a widget and returns the message in help_mesage.
A function return value of zero indicates the message was successfully returned.
ID = 1315


Name
Integer Winhelp(Widget widget,Text help_file,Text key)
Description
Calls the Windows help system to display the key from the k table of the Windows help file
help_file. The Windows help file help_file must exist and be in a location that can be found.
A function return value of zero indicates the function was successful.
ID = 1316


Name
Integer Winhelp(Widget widget,Text help_file,Integer table,Text key)
Description
Calls the Windows help system to display the key from the named table of the help file help_file.
table takes the form ‘a’, ‘k’ etc. The Windows help file help_file must exist and be in a location
that can be found.
A function return value of zero indicates the function was successful.
ID = 1317


Name
Integer Winhelp(Widget widget,Text help_file,Integer help_id)
Description
Calls the Windows help system to display the key from the k table of the help file help_file. The
Windows help file help_file must exist and be in a location that can be found.
A function return value of zero indicates the function was successful.
ID = 1318


Name
Integer Winhelp(Widget widget,Text help_file,Integer helpid,Integer popup)
Description
Calls the Windows help system to display the help with help number help_id from the k table of
the help file help_file. The Windows help file help_file must exist and be in a location that can be
found. The value popup is used to determine whether the help information appears as a popup
style help or normal help.
LJG? what are the values for popup
A function return value of zero indicates the function was successful.
ID = 1319


Name
Widget_Pages Create_widget_pages()
Description
A Widget_Pages object allows a number of controls to exist in the same physical location on a
dialog. This is very handy if you want a field to change between a Model_Box, View_Box or the
like.
A bit of sample code might look like,
Vertical_Group vgroup1 = Create_vertical_group(0);
Model_Box mbox = Create_model_box(…);
Append(mbox,vgroup1);
Vertical_Group vgroup2 = Create_vertical_group(0);
View_Box vbox = Create_view_box(…);
Append(vbox,vgroup2);
Widget_Pages pages = Create_widget_pages();
Append(vgroup1,pages);
Append(vgroup2,pages);
Set_page(page,1)
// this shows the 1st page - vgroup1
The function return value is the created Widget_pages.
ID = 1243


Name
Integer Append(Widget widget,Widget_Pages pages)
Description
Append Widget widget into the Widget_Pages pages.
For each item appended, another page is created.
If you want more than 1 item on a page, add each item to a Horizontal_Group, Vertical_Group.
A function return value of zero indicates the widget was appended successfully.
ID = 1244


Name
Integer Set_page(Widget_Pages pages,Integer n)
Description
Show (display on the screen) the n’th page of the Widget_Pages pages.
Note the "n’th page" is the n’th widget appended to the Widget_Pages pages.
All the controls associated with the n’th page_no are shown.
A function return value of zero indicates the page was successfully set.

Panels and Widgets

Page 689

12d Model Programming Language Manual

ID = 1245


Name
Integer Set_page(Widget_Pages pages,Widget widget)
Description
Show (display on the screen) the page of pages containing the Widget widget.
All the controls associated with the widget are shown.
A function return value of zero indicates the page was successfully set.
ID = 1606


Name
Integer Get_page(Widget_Pages pages,Widget widget,Integer &page_no)
Description
For the Widget_Pages pages, get the page number of the page containing the Widget widget.
Note the "n’th page" of a Widget_Pages is the n’th widget appended to the Widget_Pages.
The page n umber is returned as page_no.
A function return value of zero indicates the page number was successfully returned.
ID = 1607


Name
Angle_Box Create_angle_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Angle_Box for inputting and validating angles. See Angle_Box .
An angle is typed into the Angle_Box in hp notation (i.e. ddd.mmssss) but after it is validated it is
displayed in degrees, minutes and seconds. However the validated angle is stored in the
Angle_Box as a Real in radians.
The Angle_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Angle_Box validation messages.
The function return value is the created Angle_Box.
ID = 886


Name
Integer Set_data(Angle_Box box,Real angle)
Description
Set the data for the Angle_Box box to the Real value angle.
angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
A function return value of zero indicates the data was successfully set.
ID = 888


Name
Integer Set_data(Angle_Box box,Text text_data)
Description
Set the text displayed in the Angle_Box box to the Text text_data.
Note that text_data should be in degrees, minutes and seconds using the hp notation (i.e.
ddd.mmssss) BUT the text_data can be any text at all and may not even be a valid angle (in
degrees in hp notation). This may lead to an error when the Angle_Box is validated.
A function return value of zero indicates the data was successfully set, even if the text_data will
not validate.
ID = 1515


Name
Integer Get_data(Angle_Box box,Text &text_data)

Panels and Widgets

Page 693

12d Model Programming Language Manual

Get the actual text displayed in the Angle_Box box and return it in text_data.
Note that this is just the text in the Angle_Box. It may be any text at all and may not even be a
valid angle (in degrees in hp notation). To get the validated data from the Angle_box, use
Validate. See Validate(Angle_Box box,Real &angle) .
A function return value of zero indicates the data was successfully returned.
ID = 889


Name
Integer Validate(Angle_Box box,Real &angle)
Description
Validate the contents of the Angle_Box box and return the angle in radians angle.
angle is in radians and is measured in a counterclockwise direction from the positive x-axis.
The function returns the value of:
NO_NAME if the Widget Angle_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 887


Name
Attributes_Box Create_attributes_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Attributes_Box. See Attributes_Box .
The Attributes_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Attribute_Box validation messages.
The function return value is the created Attributes_Box.
ID = 2210


Name
Integer Set_data(Attributes_Box box,Attributes &data)
Description
Set the data of type Attributes for the Attributes_Box box to data.
A function return value of zero indicates the data was successfully set.
ID = 2213


Name
Integer Set_data(Attributes_Box box,Text text_data)
Description
Set the data of type Text for the Attributes_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 2214


Name
Integer Get_data(Attributes_Box box,Text &text_data)
Description
Get the data of type Text from the Attributes_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 2212


Name
Integer Validate(Attributes_Box box,Attributes &result)

Panels and Widgets

Page 695

12d Model Programming Language Manual

Description
Validate the contents of Attributes_Box box and return the Attributes in result.
The function returns the value of:
NO_NAME if the Widget Attributes_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2211


Name
Billboard_Box Create_billboard_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Billboard_Box. See Billboard_Box .
The Billboard_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Billboard_Box validation messages.
The function return value is the created Billboard_Box.
ID = 1871


Name
Integer Set_data(Billboard_Box box,Text text_data)
Description
Set the data of type Text for the Billboard_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1873


Name
Integer Get_data(Billboard_Box box,Text &text_data)
Description
Get the data of type Text from the Billboard_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1874


Name
Integer Validate(Billboard_Box box,Text &result)
Description
Validate the contents of Billboard_Box box and return the name of the billboard in Text result.
The function returns the value of:
NO_NAME if the Widget Billboard_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values

Panels and Widgets

Page 697

12d Model Programming Language Manual

ID = 1872


Name
Bitmap_Fill_Box Create_bitmap_fill_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Bitmap_Fill_Box. See Bitmap_Fill_Box .
The Bitmap_Fill_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Bitmap_Fill_Box validation messages.
The function return value is the created Bitmap_Fill_Box.
ID = 1879


Name
Integer Validate(Bitmap_Fill_Box box,Text &result)
Description
Validate the contents of Bitmap_Fill_Box box and return the name of the bitmap in Text result.
The function returns the value of:
NO_NAME if the Widget Bitmap_Fill_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1880


Name
Integer Set_data(Bitmap_Fill_Box box,Text text_data)
Description
Set the data of type Text for the Bitmap_Fill_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1881


Name
Integer Get_data(Bitmap_Fill_Box box,Text &text_data)
Description
Get the data of type Text from the Bitmap_Fill_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.

Panels and Widgets

Page 699

12d Model Programming Language Manual

ID = 1882


Name
Chainage_Box Create_chainage_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Chainage_Box. See Chainage_Box .
The Chainage_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Chainage_Box validation messages.
The function return value is the created Chainage_Box.
ID = 2203


Name
Integer Validate(Chainage_Box box,Real &result)
Description
Validate the contents of Chainage_Box box and return the chainage in Real result.
The function returns the value of:
NO_NAME if the Widget Chainage_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2204


Name
Integer Get_data(Chainage_Box box,Text &text_data)
Description

Page 702

Panels and Widgets

Chapter

Get the data of type Text from the Chainage_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 2205


Name
Integer Set_data(Chainage_Box box,Real real_data)
Description
Set the data of type Real for the Chainage_Box box to real_data.
A function return value of zero indicates the data was successfully set.
ID = 2206


Name
Integer Set_data(Chainage_Box box,Text text_data)
Description
Set the data of type Text for the Chainage_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 2207


Name
Choice_Box Create_choice_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Choice_Box. See Choice_Box .
The Choice_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Choice_Box validation messages.
The function return value is the created Choice_Box.
ID = 890


Name
Integer Validate(Choice_Box box,Text &result)
Description
Validate the contents of Choice_Box box and return the Text result.
The function returns the value of:
NO_NAME if the Widget Choice_Box is optional and the box is left empty
1 if no other return code is needed and result is valid.
-1 if there is an invalid choice.
zero if there is a drastic error.
So a function return value of zero indicates that there is an error as well as other values.
Warning this is the opposite of most 12dPL function return values
Double Warning: most times the function return code is not zero even when you think it should
be. The actual value of the function return code must be checked to see what is going on. For
example, when there is an incorrect choice, the function return value is -2.
ID = 891


Name
Integer Get_data(Choice_Box box,Text &text_data)
Description
Get the data of type Text from the Choice_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 893


Name
Integer Set_data(Choice_Box box,Text text_data)
Description
Set the data of type Text for the Choice_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 892


Name
Integer Set_data(Choice_Box box,Integer nc,Text choices[])
Description
Set the values available in the choice list. There are nc items in the choices list for the
Choice_Box box.
For example

Panels and Widgets

Page 705

12d Model Programming Language Manual

Text choices[3];
choices[1] = "top";
choices[2] = "middle";
choices[3] = "bottom";
Choice_Box choice_box = Create_choice_box("Pick from list",message);
Set_data(choice_box,3,choices);
Note: To be valid, any data typed into the Choice_Box information area must be from the
choices list.
A function return value of zero indicates the nc’th data in the choices list was successfully set.
ID = 997


Name
Colour_Box Create_colour_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Colour_Box. See Colour_Box .
The Colour_Box is created with the title title_text.

Page 708

Panels and Widgets

Chapter

The Message_Box message is normally the message box for the panel and is used to display
Colour_Box validation messages.
The function return value is the created Colour_Box.
ID = 894


Name
Integer Validate(Colour_Box box,Integer &col_num)
Description
Validate the contents of Colour_Box box and return the Integer colour number I in col_num.
The function returns the value of:
NO_NAME if the Widget Colour_Box is optional and the box is left empty
-1 if the text in the Colour_Box is not a valid colour number or colour name.
TRUE (1) if no other return code is needed and col_num is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error. For example, the Colour_Box is
not optional and is left blank.
Warning this is the opposite of most 12dPL function return values
Double Warning the function return can be non zero but the col_num is unusable.
ID = 895


Name
Integer Set_data(Colour_Box box,Integer colour_num)
Description
Set the data for the Colour_Box box to be the colour number colour_num.
This is the colour number that will be first displayed in the Colour_Box.
colour_num must be Integer.
A function return value of zero indicates the colour number was successfully set.
ID = 896


Name
Integer Set_data(Colour_Box box,Text text_data)
Description
Set the data of type Text for the Colour_Box box to text_data.
This is the colour name that will be first displayed in the Colour_Box.
A function return value of zero indicates the data was successfully set.
ID = 1328


Name
Integer Get_data(Colour_Box box,Text &text_data)
Description
Get the data of type Text from the Colour_Box box and return it in text_data.
This is the colour name entered into the Colour_Box.
A function return value of zero indicates the data was successfully returned.
ID = 897


Name
Date_Time_Box Create_date_time_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Date_Time_Box. See Date_Time_Box .
The Date_Time_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Date_Time_Box validation messages.
The function return value is the created Date_Time_Box.
ID = 1883


Name
Integer Validate(Date_Time_Box box,Text &data)
Description
Validate the contents of Date_Time_Box box and return the time in Text data.
The function returns the value of:
NO_NAME if the Widget Date_Time_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and data is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1884


Name
Integer Set_data(Date_Time_Box box,Text text_data)
Description
Set the data of type Text for the Date_Time_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1885


Name
Integer Get_data(Date_Time_Box box,Text &text_data)
Description
Get the data of type Text from the Date_Time_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.

Panels and Widgets

Page 711

12d Model Programming Language Manual

ID = 1886


Name
Integer Get_data(Date_Time_Box box,Integer &integer_data)
Description
Get the data of type Integer from the Date_Time_Box box and return it in integer_data.
A function return value of zero indicates the data was successfully returned.
ID = 2284


Name
Integer Get_data(Date_Time_Box box,Real &real_data)
Description
Get the data of type Real from the Date_Time_Box box and return it in real_data.
A function return value of zero indicates the data was successfully returned.
ID = 2286


Name
Directory_Box Create_directory_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Directory_Box. See Directory_Box .
The Directory_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Directory_Box validation messages.
The value of mode is listed in the Appendix A - Directory mode
The function return value is the created Directory_Box.
ID = 898


Name
Integer Validate(Directory_Box box,Integer mode,Text &result)
Description
Validate the contents of Directory_Box box and return the Text result.
The value of mode is listed in the Appendix A - Directory mode. See Directory Mode
The function returns the value of:
NO_NAME if the Widget Directory_Box is optional and the box is left empty
NO_DIRECTORY, DIRECTORY_EXISTS, or NEW_DIRECTORY.
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 899


Name
Integer Get_data(Directory_Box box,Text &text_data)
Description
Get the data of type Text from the Directory_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 901


Name
Integer Set_data(Directory_Box box,Text text_data)
Description
Set the data of type Text for the Directory_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 900


Name
Draw_Box Create_draw_box(Integer box_width,Integer box_height,Integer border)

Panels and Widgets

Page 717

12d Model Programming Language Manual

Description
Create an input Widget of type Draw_Box with the drawing area defined by the parameters
box_width, box_height and border which are all in screen units (pixels).See Draw_Box .
The function return value is the created Draw_Box.
ID = 1337


Name
Integer Get_size(Draw_Box,Integer &actual_width,Integer &actual_height)
Description
Get the width and height in pixels of the Draw_Box drawing area on the panel and return the
values in actual_width and actual_height. See Draw_Box for the calculations of width and
height.
A function return value of zero indicates the width and height were successfully returned.
ID = 1352


Name
Integer Set_origin(Draw_Box box,Real x,Real y)
Description
Set the coordinates of the left hand bottom corner of the Draw_Box box to (x,y) where x and y
are given in the units of the Draw_Box.
A function return value of zero indicates the origin was successfully set.
ID = 1340


Name
Integer Set_scale(Draw_Box box,Real xs,Real ys)
Description
Change the units for the x-axis and the y-axis of the Draw_Box box.
The new length of one unit in the x-direction is xs times the previous unit length on the x-axis.
For example, if xs = 0.5, then the new unit length along the x-axis is half the size of the previous
unit length.
Similarly, the new length of one unit in the y-direction is ys times the previous unit length on the
y-axis.
A function return value of zero indicates the scales were successfully set.
ID = 1341


Name
Integer Start_batch_draw(Draw_Box box)
Description
Page 718

Panels and Widgets

Chapter

The Start_batch_draw command must be given before any drawing calls for the Draw_Box box
are made.
Any drawing calls made before Start_batch_draw is called will do nothing and return a non-zero
function return code (that is, the call was not successful).
A function return value of zero indicates the batch draw call was successful.
ID = 1361


Name
Integer End_batch_draw(Draw_Box box)
Description
<no description>
ID = 1362


Name
Integer Clear(Draw_Box box,Integer r,Integer g,Integer b)
Description
Clear the Draw_Box box and then fill box with a colour given by r, g and b.
The colour is given in rgb which requires three Integers with values between 0 and 255, one
each for red, green and blue. The red, green and blue values are given in r, g and b respectively.
If Clear is called before a Start_batch_draw (box) call is made, then the Clear fails and a nonzero function return value is returned.
A function return value of zero indicates the clear was successful.
ID = 1344


Name
Integer Set_colour(Draw_Box box,Integer colour_num)
Description
For the Draw_Box box, set the drawing colour for following line work to have the 12d Model
colour colour_num.
A function return value of zero indicates the set was successful.
ID = 1342


Name
Integer Set_colour(Draw_Box box,Integer r,Integer g,Integer b)
Description
For the Draw_Box box, set the drawing colour for following line work to have the an rgb colour.
The colour is given in rgb which requires three Integers with values between 0 and 255, one

Panels and Widgets

Page 719

12d Model Programming Language Manual

each for red, green and blue.
The red, green and blue values are given in r, g and b respectively.
A function return value of zero indicates the set was successful.
ID = 1343


Name
Integer Move_to(Draw_Box box,Real x,Real y)
Description
For the Draw_Box box, move the current position of the drawing nib to (x, y) where x and y are
given in the units of the Draw_Box.
If Move_to is called before a Start_batch_draw (box) call is made, then the Move_to fails and a
non-zero function return value is returned.
A function return value of zero indicates the move was successful.
ID = 1338


Name
Integer Draw_to(Draw_Box box,Real x,Real y)
Description
For the Draw_Box box, draw from the current position to (x, y) where x and y are given in the
units of the Draw_Box.
If Draw_to is called before a Start_batch_draw (box) call is made, then the Draw_to fails and a
non-zero function return value is returned.
A function return value of zero indicates the draw was successful.
ID = 1339


Name
Integer Draw_polyline(Draw_Box box,Integer num_pts,Real x[],Real y[])
Description
For the Draw_Box box, draw the polyline of num_pts points with the x-coordinates given in the
array x[], and the y-coordinates in the array y[].
If Draw_polyline is called before a Start_batch_draw (box) call is made, then the Draw_polyline
fails and a non-zero function return value is returned.
A function return value of zero indicates the draw was successful.
ID = 1355


Name
Integer Set_text_colour(Draw_Box box,Integer r,Integer g,Integer b)

Page 720

Panels and Widgets

Chapter

Description
Set the colour used for the drawing text in the Draw_Box box.
The colour is given in rgb which requires three Integers with values between 0 and 255, one
each for red, green and blue.
The red, green and blue values are given in r, g and b respectively.
A function return value of zero indicates the colour was successfully set.
ID = 1346


Name
Integer Set_text_font(Draw_Box box,Text font)
Description
For the Draw_Box box, set the font for the following text calls to be the True Type Font font.
A function return value of zero indicates the text font was successfully set.
ID = 1349


Name
Integer Set_text_weight(Draw_Box box,Integer weight)
Description
Set the text weight weight for the Draw_Box box.
A function return value of zero indicates the weight was successfully set.
ID = 1350


Name
Integer Set_text_align(Draw_Box box,Integer mode)
Description
Set the text alignment to mode for any text drawn in the Draw_Box box after the Set_text_align
call.
The values for mode are given in Text Alignment Modes for Draw_Box . The file set_ups.h needs
to be included for the modes to be defined.
The default mode is that the coordinates of the text are for the top left of the bounding box
surrounding the text.
A function return value of zero indicates the text alignment was successfully set.
ID = 1351


Name
Integer Draw_text(Draw_Box box,Real x,Real y,Real size,Real angle,Text txt)
Description

Panels and Widgets

Page 721

12d Model Programming Language Manual

In the Draw_Box box, draw the text txt at the position (x,y) where the coordinates (x,y) are in the
Draw_Box’s coordinate system.
The text has size size (in pixels), and the rotation angle of angle radians.
If Draw_text is called before a Start_batch_draw (box) call is made, then the Draw_text fails and
a non-zero function return value is returned.
A function return value of zero indicates the text was successfully drawn.
ID = 1345


Name
File_Box Create_file_box(Text title_text,Message_Box message,Integer mode,Text wild)
Description
Create an input Widget of type File_Box for inputting and validating files.
The File_Box is created with the title title_text (see File_Box ).
The Message_Box message is normally the message box for the panel and is used to display
File_Box validation messages.
If <enter> is typed into the File_Box, automatic validation is performed by the File_Box according
to mode. What the validation is, what messages are written to Message_Box, and what actions
automatically occur, depend on the value of mode.
For example,
CHECK_FILE_NEW

20 // if the file doesn’t exists, the message says "will be created"
// if it exist, the messages says "ERROR"

The values for mode and their actions are listed in Appendix A (see File Mode ).
If LB is clicked on the icon at the right hand end of the File_Box, a list of the files in the current
area which match the wild card text wild (for example, *.dat) Is placed in a pop-up. If a file is
selected from the pop-up (using LB), the file name is placed in the information area of the
File_Box and validation performed according to mode.
The function return value is the created File_Box.
Special Note:
#include "set_ups.h" must be in the macro code to define CHECK_FILE_NEW etc.
ID = 906


Name
Integer Validate(File_Box box,Integer mode,Text &result)
Description
Validate the contents of File_Box box and return the text typed into the File_Box in result.
The value of mode is listed in the Appendix A - File mode. See File Mode .
The function returns the value of:
NO_NAME if the Widget File_Box is optional and the box is left empty
NO_FILE, FILE_EXISTS, or NO_FILE_ACCESS.
TRUE (1) if no other return code is needed and result is valid.
Page 724

Panels and Widgets

Chapter

FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 907


Name
Integer Get_data(File_Box box,Text &text_data)
Description
Get the data of type Text from the File_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 909


Name
Integer Set_data(File_Box box,Text text_data)
Description
Set the data of type Text for the File_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 908


Name
Integer Get_wildcard(File_Box box,Text &data)
Description
Get the wildcard from the File_Box box.
The type of data must be Text.
A function return value of zero indicates the wildcard data was returned successfully.
ID = 1321


Name
Integer Set_wildcard(File_Box box,Text text_data)
Description
Set the wildcard to the File_Box box.
The type of data must be Text.
A function return value of zero indicates the wildcard data was successfully set.
ID = 1320


Name
Integer Get_directory(File_Box box,Text &data)
Description
Get folder for the file from the File_Box box and return the folder in data.
A function return value of zero indicates the directory data was returned successfully.
ID = 1323


Name
Integer Set_directory(File_Box box,Text text_data)
Description
Set the folder to the file in the File_Box box to the Text data.
A function return value of zero indicates the directory data was successfully set.
ID = 1322


Name
Function_Box Create_function_box(Text title_text,Message_Box message,Integer mode,Integer type)
Description
Create an input Widget of type Function_Box for inputting and validating Functions. See
Function_Box .
The Function_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Function_Box validation messages.
The value of mode is listed in the Appendix A - Function mode. See Function Mode .
LJG? What is type? It also needs to be in Appendix A.
The function return value is the created Function_Box.
ID = 1183


Name
Integer Validate(Function_Box box,Integer mode,Function &result)
Description
Validate the contents of Function_Box box and return the Function result.
The value of mode is listed in the Appendix A - Function mode. See Function Mode
The function returns the value of:
NO_NAME if the Widget Function_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1184


Name
Integer Get_data(Function_Box box,Text &text_data)
Page 728

Panels and Widgets

Chapter

Description
Get the data of type Text from the Function_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1185


Name
Integer Set_data(Function_Box box,Text text_data)
Description
Set the data of type Text for the Function_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1186


Name
Integer Get_type(Function_Box box,Integer &type)
Description
Get the function Integer type from the Function_Box box and return it in type.
A function return value of zero indicates the type was returned successfully.
ID = 1334


Name
Integer Set_type(Function_Box box,Integer type)
Description
Set the function Integer type for the Function_Box box to type.
The type of type must be Integer.
A function return value of zero indicates the type was successfully set.
ID = 1333


Name
Integer Get_type(Function_Box box,Text &type)
Description
Get the function Text type from the Function_Box box and return it in type.
A function return value of zero indicates the type was returned successfully.
ID = 1336


Name
Integer Set_type(Function_Box box,Text type)
Description
Set the function Text type for the Function_Box box to type.
A function return value of zero indicates the type was successfully set.
ID = 1335


Name
HyperLink_Box Create_hyperlink_box(Text hyperlink,Message_Box message)
Description
Create an input Widget of type HyperLink_Box. See HyperLink_Box .
The Hyperlink_Box is created with the Text in hyperlink. This text should be a hyperlink.
When the user clicks on the HyperLink then the HyperLink will be activated,
The Message_Box message is normally the message box for the panel and is used to display
Hyperlink_Box validation messages.
The function return value is the created Hyperlink_Box.
ID = 1887


Name
Integer Validate(HyperLink_Box box,Text &result)
Description
Validate the contents of HyperLink_Box box and return the name of the hyperlink in Text result.
The function returns the value of:
NO_NAME if the Widget HyperLink_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1888


Name

Panels and Widgets

Page 731

12d Model Programming Language Manual

Integer Set_data(HyperLink_Box box,Text text_data)
Description
Set the data of type Text for the Hyperlink_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1889


Name
Integer Get_data(HyperLink_Box box,Text &text_data)
Description
Get the data of type Text from the Hyperlink_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1890


Name
Input_Box Create_input_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Input_Box. See Input_Box .
The Input_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Input_Box validation messages.
The function return value is the created Input_Box.
ID = 910


Name
Integer Validate(Input_Box box,Text &result)
Description
Validate the contents of Input_Box box and return the Text result.
This call is almost not required as the box either has text or it does not but it is required to know if
the Input_Box was optional and nothing was typed in.
The function returns the value of:
NO_NAME if the Widget Input_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 911


Name
Integer Get_data(Input_Box box,Text &text_data)
Description
Get the data of type Text from the Input_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 913


Name
Integer Set_data(Input_Box box,Text text_data)
Description
Set the data of type Text for the Input_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 912


Name
Integer_Box Create_integer_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Integer_Box. See Integer_Box .
The Integer_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Integer_Box validation messages.
The function return value is the created Integer_Box.
ID = 914


Name
Integer Validate(Integer_Box box,Integer &result)
Description
Validate result (of type Integer) in the Integer_Box box.
Validate the contents of Integer_Box box and return the Integer result.
The function returns the value of:
NO_NAME if the Widget Integer_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 915


Name
Integer Get_data(Integer_Box box,Text &text_data)
Description
Get the data of type Text from the Input_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 917


Name
Integer Set_data(Integer_Box box,Integer integer_data)
Description
Set the data of type Integer for the Integer_Box box to integer_data.
A function return value of zero indicates the data was successfully set.
ID = 916


Name
Integer Set_data(Integer_Box box,Text text_data)
Description
Set the data of type Text for the Integer_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1517


Name
Justify_Box Create_justify_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Justify_Box. See Justify_Box .
The Justify_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Justify_Box validation messages.
The function return value is the created Justify_Box.
ID = 918


Name
Integer Validate(Justify_Box box,Integer &result)
Description
Validate the contents of Justify_Box box and return the Integer result.
The function returns the value of:
NO_NAME if the Widget Justify_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 919


Name
Integer Get_data(Justify_Box box,Text &text_data)
Description
Get the data of type Text from the Justify_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 921


Name
Integer Set_data(Justify_Box box,Integer integer_data)
Description
Set the data of type Integer for the Justify_Box box to integer_data.
integer_data represents the text justification and can have the values 1 to 9.
A function return value of zero indicates the data was successfully set.
ID = 920


Name
Integer Set_data(Justify_Box box,Text text_data)
Description
Set the data of type Text for the Justify_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1518


Name
Linestyle_Box Create_linestyle_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Linestyle_Box. See Linestyle_Box .
The Linestyle_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Linestyle_Box validation messages.
The value of mode is listed in the Appendix A - Linestyle mode. See Linestyle Mode .
The function return value is the created Linestyle_Box.
ID = 922


Name
Integer Validate(Linestyle_Box box,Integer mode,Text &result)
Description
Validate the contents of Linestyle_Box box and return the name of the linestyle in Text result.
The value of mode is listed in the Appendix A - Linestyle mode. See Linestyle Mode
The function returns the value of:
NO_NAME if the Widget Linestyle_Box is optional and the box is left empty
LINESTYLE_EXISTS or NO_LINESTYLE.
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 923


Name
Integer Get_data(Linestyle_Box box,Text &text_data)
Description
Get the data of type Text from the Linestyle_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 925


Name
Integer Set_data(Linestyle_Box box,Text text_data)
Description
Set the data of type Text for the Linestyle_Box box to text_data.

Panels and Widgets

Page 743

12d Model Programming Language Manual

A function return value of zero indicates the data was successfully set.
ID = 924


Name
List_Box Create_list_box(Text title_text,Message_Box message,Integer nlines)
Description
Create an input Widget of type List_Box. See List_Box .
The List_Box is created with the title title_text.
The number of lines nline will be created in the List_Box.
The Message_Box message is normally the message box for the panel and is used to display
List_Box validation messages.
The function return value is the created List_Box.
ID = 1278


Name
Integer Get_number_of_items(List_Box box,Integer &count)
Description
For the List_Box box, get the number of items in the list and return the number in count.
A function return value of zero indicates that count is successfully returned.
ID = 1546


Name
Integer Set_sort(List_Box box,Integer mode)
Description
Set the sort mode for the List_Box box depending on the Integer mode.
If mode is 0 then the sort is ascending,
If mode is 1 then the sort is descending.
A function return value of zero indicates the sort was successfully set.
ID = 1279


Name
Integer Get_sort(List_Box box,Integer &mode)
Description
Get the sort mode from the List_Box box and return it in mode.
If mode is 0 then the sort is ascending,
If mode is 1 then the sort is descending.
A function return value of zero indicates the mode was returned successfully.
ID = 1280


Name
Map_File_Box Create_map_file_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Map_File_Box. See Map_File_Box .
The Map_File_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Map_File_Box validation messages.
The value of mode is listed in the Appendix A - File mode. See LJG? Map File Modes need to be
added to Appendix.
The function return value is the created Map_File_Box.
ID = 926


Name
Integer Validate(Map_File_Box box,Integer mode,Text &result)
Description
Validate the contents of Map_File_Box box and return the Text result.
The value of mode is listed in the Appendix A - File mode. See File Mode
The function returns the value of:
NO_NAME if the Widget Map_File_Box is optional and the box is left empty
NO_FILE, FILE_EXISTS or NO_FILE_ACCESS
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 927


Name
Integer Get_data(Map_File_Box box,Text &text_data)
Description
Get the data of type Text from the Map_File_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 929


Name

Panels and Widgets

Page 747

12d Model Programming Language Manual

Integer Set_data(Map_File_Box box,Text text_data)
Description
Set the data of type Text for the Map_File_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 928


Name
Model_Box Create_model_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Model_Box for inputting and validating Models.
The Model_Box is created with the title title_text (see Model_Box ).
The Message_Box message is normally the message box for the panel and is used to display
Model_Box validation messages.
If <enter> is typed into the Model_Box automatic validation is performed by the Model_Box
according to mode. What the validation is, what messages are written to Message_Box, and
what actions automatically occur, depend on the value of mode.
For example,
CHECK_MODEL_MUST_EXIST

7 // if the model exists, the message says "exists".
// if it doesn’t exist, the messages says "ERROR"

The values for mode and their actions are listed in Appendix A (see Model Mode ).
If LB is clicked on the icon at the right hand end of the Model_Box, a list of all existing models is
placed in a pop-up. If a model is selected from the pop-up (using LB), the model name is placed
in the information area of the Model_Box and validation performed according to mode.
MB for "Same As" also applies. That is, If MB is clicked in the information area and then a string
from a model on a view is selected, then the name of the model containing the selected string is
written to the information area and validation performed according to mode.
The function return value is the created Model_Box.
Special Note:
#include "set_ups.h" must be in the macro code to define CHECK_MODEL_MUST_EXIST etc.
ID = 848


Name
Integer Validate(Model_Box box,Integer mode,Model &result)
Description
Validate the contents of the Model_Box box and return the Model result.

Page 750

Panels and Widgets

Chapter

The value of mode will determine what validation occurs, what messages are written to the
Message_Box, what actions are taken and what the function return value is.
The values for mode and the actions are listed in Appendix A (see Model Mode ).
The function return value depends on mode and are given in Appendix A (see Model Mode ).
A function return value of zero indicates that there is a drastic error.
Warning this is the opposite of most 12dPL function return values
Double Warning: most times the function return code is not zero even when you think it should
be. The actual value of the function return code must be checked to see what is going on. For
example, when mode = CHECK_MODEL_MUST_EXIST will return NO_MODEL if the model
name is not blank and no model of that name exist (NO_MODEL does not equal zero).
ID = 880


Name
Integer Get_data(Model_Box box,Text &text_data)
Description
Get the data of type Text from the Model_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 885


Name
Integer Set_data(Model_Box box,Text text_data)
Description
Set the data of type Text for the Model_Box box as the Text text_data.
A function return value of zero indicates the data was successfully set.
ID = 884


Name
Name_Box Create_name_box(Text title_text,Message_Box message)

Panels and Widgets

Page 753

12d Model Programming Language Manual

Description
Create an input Widget of type Name_Box. See Name_Box .
The Name_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Name_Box validation messages.
The function return value is the created Name_Box.
ID = 930


Name
Integer Validate(Name_Box box,Text &result)
Description
Validate the contents of Name_Box box and return the Text result.
The function returns the value of:
NO_NAME if the Widget Name_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (0) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 931


Name
Integer Get_data(Name_Box box,Text &text_data)
Description
Get the data of type Text from the Name_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 933


Name
Integer Set_data(Name_Box box,Text text_data)
Description
Set the data of type Text for the Name_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 932


Name
Named_Tick_Box Create_named_tick_box(Text title_text,Integer state,Text response)
Description
Create an input Widget of type Named_Tick_Box. See Named_Tick_Box .
The Named_Tick_Box is created with the Text title_text.
The Integer state specifies the ticked/unticked state of the box:
state = 0

set the box as unticked

Panels and Widgets

Page 755

12d Model Programming Language Manual

state = 1

set the box as ticked

The Text response returns the msg when calling the Wait_on_widgets function.
The function return value is the created Named_Tick_Box.
ID = 849


Name
Integer Validate(Named_Tick_Box box,Integer &result)
Description
Validate the contents of Named_Tick_Box box and return the Integer result.
result = 0
result = 1

if the tick box is unticked
if the tick box is ticked

A function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 974


Name
Integer Set_data(Named_Tick_Box box,Integer state)
Description
Set the state of the Named_Tick_Box to
ticked
unticked

if state = 1
if state = 0

A function return value of zero indicates the data was successfully set.
ID = 2239


Name
Integer Get_data(Named_Tick_Box box,Text &text_data)
Description
Get the data of type Text from the Named_Tick_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 976


Name
Integer Set_data(Named_Tick_Box box,Text text_data)
Description
Set the data of type Text for the Named_Tick_Box box to text_data.
A function return value of zero indicates the data was successfully set.

Page 756

Panels and Widgets

Chapter

ID = 975


Name
New_Select_Box Create_new_select_box(Text title_text,Text select_title,Integer mode,Message_Box
message)
Description
Create an input Widget of type New_Select_Box. See New_Select_Box .
The New_Select_Box is created with the title title_text.
The Select title displayed in the screen message area is select_title.
The value of mode is listed in the Appendix A - Select mode. See Select Mode .
The Message_Box message is normally the message box for the panel and is used to display
New_Select_Box validation messages.
Note that the New_Select_Box only picks strings and does not return information if a cursor pick
is made. The Select_Box allows for cursor picks.
The function return value is the created New_Select_Box.
ID = 2240


Name
Integer Validate(New_Select_Box select,Element &string)
Description
Validate the contents of New_Select_Box select and return the selected Element in string.
The function returns the value of:
NO_NAME if the Widget New_Select_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.

Panels and Widgets

Page 759

12d Model Programming Language Manual

Warning this is the opposite of most 12dPL function return values
ID = 2241


Name
Integer Validate(New_Select_Box select,Element &string,Integer silent)
Description
Validate the contents of New_Select_Box select and return the selected Element in string.
If silent = 0, and there is an error, a message is written and the cursor goes back to the box.
If silent = 1 and there is an error, no message or movement of cursor is done.
The function returns the value of:
NO_NAME if the Widget New_Select_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2242


Name
Integer Set_data(New_Select_Box select,Element string)
Description
Set the data of for the New_Select_Box select to string.
A function return value of zero indicates the data was successfully set.
ID = 2243


Name
Integer Set_data(New_Select_Box select,Text model_string)
Description
Set the Element of the New_Select_Box box by giving the model name and string name as a
Text model_string in the form "model_name->string_name".
A function return value of zero indicates the data was successfully set.
ID = 2244


Name
Integer Get_data(New_Select_Box select,Text &model_string)
Description

Page 760

Panels and Widgets

Chapter

Get the model and string name of the Element in the New_Select_Box box and return it in Text
model_string.
Note: the model and string name is in the form "model_name->string_name" so only one Text is
required.
A function return value of zero indicates the data was successfully returned.
ID = 2245


Name
New_XYZ_Box Create_new_xyz_box(Text title_text,Message_Box message)
Description
Create an input Widget of type New_XYZ_Box. See New_XYZ_Box .
The New_XYZ_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
New_XYZ_Box validation messages.
The function return value is the created New_XYZ_Box.

Panels and Widgets

Page 763

12d Model Programming Language Manual

ID = 2252


Name
Integer Validate(New_XYZ_Box box,Real &x,Real &y,Real &z)
Description
Validate the contents of the New_XYZ_Box box and check that it decodes to three Reals.
The three Reals are returned in x, y, and z.
The function returns the value of:
NO_NAME if the Widget New_XYZ_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and x, y and z are valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2253


Name
Integer Get_data(New_XYZ_Box box,Text &text_data)
Description
Get the data of type Text from the New_XYZ_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 2254


Name
Integer Set_data(New_XYZ_Box box,Real x,Real y,Real z)
Description
Set the x y z data (all of type Real) for the New_XYZ_Box box to the values x, y and z.
A function return value of zero indicates the data was successfully set.
ID = 2255


Name
Integer Set_data(New_XYZ_Box box,Text text_data)
Description
Set the data of type Text for the New_XYZ_Box box to text_data.
A function return value of zero indicates the data was successfully set.

Page 764

Panels and Widgets

Chapter

ID = 2256


Name
Plotter_Box Create_plotter_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Plotter_Box. See Plotter_Box .
The Plotter_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Plotter_Box validation messages.
The function return value is the created Plotter_Box.
ID = 934


Name
Integer Validate(Plotter_Box box,Text &result)
Description
Validate the contents of Plotter_Box box and return the Text result.
The function returns the value of:
NO_NAME if the Widget Plotter_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (0) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 935


Name
Integer Get_data(Plotter_Box box,Text &text_data)
Description
Get the data of type Text from the Plotter_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 937


Name
Integer Set_data(Plotter_Box box,Text text_data)
Description
Set the data of type Text for the Plotter_Box box to text_data.
A function return value of zero indicates the data was successfully set.
Page 766

Panels and Widgets

Chapter

ID = 936


Name
Integer Validate(Plotter_Box box,Text &plotter_mode,Text &plotter_names,Text &plotter_type)
Description
<no description>
ID = 2465


Name
Integer Set_data(Plotter_Box box,Text plotter_mode,Text plotter_names,Text plotter_type)
Description
<no description>
ID = 2466


Name
Integer Get_data(Plotter_Box box,Text &plotter_mode,Text &plotter_names,Text &plotter_type)
Description
<no description>
ID = 2467


Name
Polygon_Box Create_polygon_box(Text title_text,Text select_title,Integer mode,Message_Box message)
Description
Create an input Widget of type Polygon_Box. See Polygon_Box .
The Polygon_Box is created with the title title_text.
LJG? select_title
LJG? mode
The Message_Box message is normally the message box for the panel and is used to display
Polygon_Box validation messages.
The function return value is the created Polygon_Box.
ID = 2246


Name
Integer Validate(Polygon_Box select,Element &string)
Description
Validate the contents of Polygon_Box select and return the selected Element in string.
If there is an error, a message is written and the cursor goes back to the Polygon_Box.
The function returns the value of:
NO_NAME if the Widget Polygon_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2247


Name
Integer Validate(Polygon_Box select,Element &string,Integer silent)
Description
Validate the contents of Polygon_Box select and return the selected Element in string.
If silent = 0, and there is an error, a message is written and the cursor goes back to the
Polygon_Box.
If silent = 1 and there is an error, no message or movement of cursor is done.
The function returns the value of:
NO_NAME if the Widget Polygon_Box is optional and the box is left empty

Page 768

Panels and Widgets

Chapter

TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2248


Name
Integer Set_data(Polygon_Box select,Element string)
Description
Set the data of type Element for the Polygon_Box select to string.
A function return value of zero indicates the data was successfully set.
ID = 2249


Name
Integer Set_data(Polygon_Box select,Text string_name)
Description
Set the data of type Text for the Polygon_Box select to string_name.
A function return value of zero indicates the data was successfully set.
ID = 2250


Name
Integer Get_data(Polygon_Box select,Text &string)
Description
Get the data of type Text from the Polygon_Box select and return it in string.
A function return value of zero indicates the data was successfully returned.
ID = 2251


Name
Real_Box Create_real_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Real_Box. See Real_Box .
The Real_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Real_Box validation messages.
The function return value is the created Real_Box.
ID = 902


Name
Integer Validate(Real_Box box,Real &result)
Description
Validate the contents of Real_Box box and return the Real result.
A function return value of zero indicates the value was valid.
The function returns the value of:
NO_NAME if the Widget Real_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 903


Name
Integer Get_data(Real_Box box,Text &text_data)
Description
Get the data of type Text from the Real_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 905


Name
Integer Set_data(Real_Box box,Real real_data)
Description
Set the data of type Real for the Real_Box box to real_data.

Panels and Widgets

Page 771

12d Model Programming Language Manual

A function return value of zero indicates the data was successfully set.
ID = 904


Name
Integer Set_data(Real_Box box,Text text_data)
Description
Set the data of type Text for the Real_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1516


Name
Report_Box Create_report_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Report_Box. See Report_Box .
The Report_Box is created with the title title_text.
The Message_Box message is normally the message box for the panel and is used to display
Report_Box validation messages.
The value of mode is listed in the Appendix A - File mode.
The function return value is the created Report_Box.
ID = 938


Name
Integer Validate(Report_Box box,Integer mode,Text &result)
Description
Validate the contents of Report_Box box and return the Text result.
The value of mode is listed in the Appendix A - File mode. See File Mode
The function returns the value of:
NO_NAME if the Widget Report_Box is optional and the box is left empty
NO_FILE, FILE_EXISTS or NO_FILE_ACCESS
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 939


Name
Integer Get_data(Report_Box box,Text &text_data)

Page 774

Panels and Widgets

Chapter

Description
Get the data of type Text from the Report_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 941


Name
Integer Set_data(Report_Box box,Text text_data)
Description
Set the data of type Text for the Report_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 940


Name
Screen_Text Create_screen_text(Text text)
Description
Create a Screen_Text with the Text text. See Screen_Text .
The function return value is the created Screen_Text.
ID = 1369


Name
Integer Set_data(Screen_Text widget,Text text_data)
Description
Set the data of type Text for the Screen_Text widget to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1371


Name
Integer Get_data(Screen_Text widget,Text &text_data)
Description
Get the data of type Text from the Screen_Text widget and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1370


Name
Select_Box Create_select_box(Text title_text,Text select_title,Integer mode,Message_Box message)
Description
Create an input Widget of type Select_Box.
The Select_Box is created with the title title_text.
The Select title displayed in the screen message area is select_title.
The value of mode is listed in the Appendix A - Select mode. See Select Mode .
The Message_Box message is normally the message box for the panel and is used to display
string select validation messages.
The function return value is the created Select_Box.
ID = 882


Name
Integer Validate(Select_Box select,Element &string)
Description
Validate the Element string in the Select_Box select.
The function returns the value of:
NO_NAME if the Widget Select_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 981


Name
Integer Validate(Select_Box select,Element &string,Integer silent)
Description
Validate the Element string in the Select_Box select.
If silent = 0, and there is an error, a message is written and the cursor goes back to the box.
If silent = 1 and there is an error, no message or movement of cursor is done.
The function returns the value of SELECT_STRING indicates the string is selected successfully.

Page 778

Panels and Widgets

Chapter

ID = 1376


Name
Integer Set_data(Select_Box select,Text model_string)
Description
Set the Element in the Select_Box select by giving the model name and string name as a Text
model_string in the form "model_name->string_name"
.A function return value of zero indicates the data was successfully set.
ID = 982


Name
Integer Set_data(Select_Box select,Element string)
Description
Set the Element for the Select_Box select to string.
A function return value of zero indicates the data was successfully set.
ID = 1174


Name
Integer Get_data(Select_Box select,Text &string)
Description
Get the model and string name of the Element in Select_Box select and return it in the Text
model_string,
Note: the model and string name is in the form "model_name->string_name" so only one Text is
required.
A function return value of zero indicates the data was successfully returned.
ID = 983


Name
Integer Select_start(Select_Box select)
Description
Starts the string selection for the Select_Box select. This is the same as if the button on the
Select_Box had been clicked.
A function return value of zero indicates the start was successful.
ID = 1169


Name
Integer Select_end(Select_Box select)
Description
Cancels the string selection that is running for the Select_Box select. This is the same as if
Cancel had been selected from the Pick Ops menu.
A function return value of zero indicates the end was successful.
ID = 1170


Name
Integer Set_select_type(Select_Box select,Text type)
Description
Set the string selection type type for the Select_Box select. For example “Alignment”, “3d”.
A function return value of zero indicates the type was successfully set.
ID = 1048


Name
Integer Set_select_snap_mode(Select_Box select,Integer snap_control)
Description
Set the snap control for the Select_Box select to snap_control.
snap_control

control value

Ignore_Snap
User_Snap
Program_Snap

=0
=1
=2

A function return value of zero indicates the snap control was successfully set.
ID = 1049


Name
Integer Set_select_snap_mode(Select_Box select,Integer snap_mode,Integer snap_control,Text snap_text)
Description
Set the snap mode snap_mode and snap control snap_control for the Select_Box select.
Where snap_mode is:
Failed_Snap = -1
No_Snap
=0
Point_Snap
=1
Line_Snap
=2
Grid_Snap
=3
Intersection_Snap = 4
Cursor_Snap
=5
Name_Snap
=6

Page 780

Panels and Widgets

Chapter

Tin_Snap
Model_Snap
Height_Snap
Segment_Snap
Text_Snap
Fast_Snap
Fast_Accept

=7
=8
=9
= 11
= 12
= 13
= 14

and snap_control is
Ignore_Snap
=0
User_Snap
=1
Program_Snap = 2
The snap_text must be string name; tin name, model name respectively, otherwise, leave the
snap_text blank (“”).
A function return value of zero indicates the snap mode was successfully set.
ID = 1045


Name
Integer Get_select_direction(Select_Box select,Integer &dir)
Description
Get the selection direction dir from the string selected for the Select_Box select.
The returned dir type must be Integer.
If select without direction, the returned dir is 1, otherwise, the returned dir is:
Dir Value

Pick direction

1
-1

the direction of the string
against the direction of the string

A function return value of zero indicates the direction was successfully returned.
ID = 1051


Name
Integer Get_select_coordinate(Select_Box select,Real &x,Real &y,Real &z,Real &ch,Real &ht)
Description
Get the coordinates, chainage and height of the selected snap point of the string for the
Select_Box select.
The return values of x, y, z, ch, and ht are of type Real.
A function return value of zero indicates the values were successfully returned.
ID = 1052


Name
Select_Boxes Create_select_boxes(Integer no_boxes,Text title_text[],Text select_title[],Integer
mode[],Message_Box message)
Description
Create an input Widget of type Select_Boxes which is actually a collection of 0 or more boxes
that each acts like a Select_Box. See Select_Boxes .
no_boxes indicates the number of boxes in the boxes array.
The Select_Boxes are created with the titles given in the array title_text[].
The Screen select titles displayed in the screen message area are given in the array
select_title[].
The value of mode[] is listed in the Appendix A - Select mode.
The Message_Box message is used to display the select information.
The function return value is the created Select_Boxes.
ID = 883


Name
Integer Validate(Select_Boxes select,Integer n,Element &string)
Description
Validate the nth Element string in the Select_Box select.
The function returns the value of:
NO_NAME if the n’th box of the New_Select_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 984


Name
Integer Validate(Select_Boxes select,Integer n,Element &string,Integer silent)
Description
Validate the nth Element string in the Select_Box select.

Panels and Widgets

Page 783

12d Model Programming Language Manual

If silent = 0, and there is an error, a message is written and the cursor goes back to the box.
If silent = 1 and there is an error, no message or movement of cursor is done.
The function returns the value of:
NO_NAME if the n’th box of the New_Select_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1377


Name
Integer Set_data(Select_Boxes select,Integer n,Text model_string)
Description
Set the Element of the n’th box in the Select_Boxes select by giving the model name and string
name as a Text model_string in the form "model_name->string_name".
A function return value of zero indicates the data was successfully set.
ID = 985


Name
Integer Set_data(Select_Boxes select,Integer n,Element string)
Description
Set the data of type Element for the n’th box in the Select_Boxes select to string.
A function return value of zero indicates the data was successfully set.
ID = 1175


Name
Integer Get_data(Select_Boxes select,Integer n,Text &model_string)
Description
Get the model and string name of the Element in the n’th box of the Select_Boxes select. and
return it in the Text model_string,
Note: the model and string name is in the form "model_name->string_name" so only one Text is
required.
A function return value of zero indicates the data was successfully returned.
ID = 986


Name
Page 784

Panels and Widgets

Chapter

Integer Select_start(Select_Boxes select,Integer n)
Description
Starts the string selection for the n’th box of the Select_Boxes select. This is the same as if the
button on the n’th box of Select_Boxes had been clicked.
A function return value of zero indicates the start was successful.
ID = 1171


Name
Integer Select_end(Select_Boxes select,Integer n)
Description
Cancels the string selection that is running for the n’th box of the Select_Boxes n’th box of the
Select_Boxes select. This is the same as if Cancel had been selected from the Pick Ops menu.
A function return value of zero indicates the end was successful.
ID = 1172


Name
Integer Set_select_type(Select_Boxes select,Integer n,Text type)
Description
Set the string selection for the n’th box of the Select_Boxes select to type. For example
“Alignment”, “3d”.
A function return value of zero indicates the type was successfully set.
ID = 1053


Name
Integer Set_select_snap_mode(Select_Boxes select,Integer n,Integer control)
Description
Set the snap control for n’th box of the Select_Boxes select to control.
snap control
Ignore_Snap
User_Snap
Program_Snap

control value
0
2

A function return value of zero indicates the snap control was successfully set.
ID = 1054


Name
Integer Set_select_snap_mode(Select_Boxes select,Integer n,Integer snap_mode,Integer snap_control,Text

Panels and Widgets

Page 785

12d Model Programming Language Manual

snap_text)
Description
Set the snap mode mode and snap control snap_control for the nth box of the Select_Boxes
select.
When snap mode is:
Name_Snap
Tin_Snap
Model_Snap

6
7
8

the snap_text must be string name; tin name, model name respectively, otherwise, leave the
snap_text blank (“”).
A function return value of zero indicates the snap mode was successfully set.
ID = 1055


Name
Integer Get_select_direction(Select_Boxes select,Integer n,Integer &dir)
Description
Get the selection direction dir of the string selected for the n’th box of the Select_Boxes select.
The returned dir type must be Integer.
If select without direction, the returned dir is 1, otherwise, the returned dir is:
Dir Value
1
-1

Pick direction
the direction of the string
against the direction of the string

A function return value of zero indicates the direction was successfully returned.
ID = 1056


Name
Integer Get_select_coordinate(Select_Boxes select,Integer n,Real &x,Real &y,Real &z,Real &ch,Real
&ht)
Description
Get the coordinate, chainage and height of the snap point of the string selected for the n’th box
of the Select_Boxes select.
The return value of x, y, z, ch, and ht are of type of Real.
A function return value of zero indicates the coordinate was successfully returned.
ID = 1057


Name
Sheet_Size_Box Create_sheet_size_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Sheet_Size_Box. See Sheet_Size_Box .
The Sheet_Size_Box is created with the title title_text.
The Message_Box message is used to display sheet size information.
The function return value is the created Sheet_Size_Box.
ID = 946


Name
Integer Validate(Sheet_Size_Box box,Real &w,Real &h,Text &sheet)
Description
Validate the contents of Sheet_Size_Box box and return the width of the sheet as w, the height
of the sheet as h and the sheet size as Text sheet or blank if it is not a standard size.
The function returns the value of:
NO_NAME if the Widget Sheet_Size_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and w, h, sheet are valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 947


Name
Integer Get_data(Sheet_Size_Box box,Text &text_data)
Description
Get the data of type Text from the Sheet_Size_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 949


Name
Integer Set_data(Sheet_Size_Box box,Text text_data)
Description
Set the data of type Text for the Sheet_Size_Box box to text_data.
A function return value of zero indicates the data was successfully set.

Panels and Widgets

Page 789

12d Model Programming Language Manual

ID = 948


Name
Slider_Box Create_slider_box(Text name,Integer width,Integer height,Integer min_value,Integer
max_value,Integer tick_interval,Integer horizontal)
Description
Create an input Widget of type Slider_Box. See Slider_Box .
The Slider_Box can be horizontal or vertical.

Page 792

Panels and Widgets

Chapter

If horizontal = 1 then the Slider_Box is horizontal.
If horizontal = 0 then the Slider_Box is vertical.
The range of values returned by the Slider_Box are specified by a minimum value (min_val)
which is when the slider is at the left of a horizontal Slider_Box, or the top for a vertical
Slider_Box, and a maximum value (max_range) which is reached when the slider is at the right
of a horizontal Slider_Box, or at the bottom of a vertical Slider_Box.
min_value must be less than max_val.
Tick marks are drawn at the interval given by tick_interval on the bottom of a horizontal slider, of
to the right of a vertical slider.
The slider box is created with a width width and height height where the width and height are
given in screen units (pixels).
The function return value is the created Slider_Box.
Note: the height for a horizontal Slider_Box or the width for a vertical Slider_Box should be at
least 30 or there will be no room to display the slider and tick marks.
ID = 2706


Name
Integer Set_slider_position(Slider_Box box,Integer value)
Description
Move the slider of Slider_Box box to the position given by value units of the Slider_Box.
A function return value of zero indicates the set was successful.
ID = 2707


Name
Integer Get_slider_position(Slider_Box box,Integer &value)
Description
For the Slider_Box box, get the position of the slider in units of the Slider_Box and return the
number of units in value.
A function return value of zero indicates the get was successful.
ID = 2708


Name
Source_Box Create_source_box(Text title_text,Message_Box box,Integer flags)
Description
Create an input Widget of type Source_Box which is used to define how to select data. See
Source_Box .
The Source_Box is created with the title "Data " followed by title_text.
What Data Source Choices are displayed and hence available to select, is controlled by flags. i
If flags = 0, then all the choices are displayed.
Model
View
String
Rectangle
Trapezoid
Polygon
Lasso
Filter
Models
Favourites
All
Fence inside
Fence cross
Fence outside
Fence string
Fence points
Fence all

Source_Box_Model =
Source_Box_View =
Source_Box_String =
Source_Box_Rectangle =
Source_Box_Trapezoid =
Source_Box_Polygon =
Source_Box_Lasso =
Source_Box_Filter =
Source_Box_Models =
Source_Box_Favorites =
Source_Box_All =
Source_Box_Fence_Inside =
Source_Box_Fence_Cross =
Source_Box_Fence_Outside =
Source_Box_Fence_String =
Source_Box_Fence_Points =
Source_Box_Fence_All =

0x001 = 1
0x002 = 2
0x004 = 4
0x008 = 8
0x010 = 16
0x020
0x040
0x080
0x100
0x200
0xfff
0x01000
0x02000
0x04000
0x08000
0x10000
0xff000

Source_Box_All | Source_Box_Fence_Inside | 
Source_Box_Fence_Outside | Source_Box_Fence_Cross |
Source_Box_Fence_String
You can have just some of them by combining the ones you want with |.
For example
Source_Box_Model | Source_Box_View
Source_Box_Standard =

The Message_Box message is used to display information.
The function return value is the created Source_Box.
ID = 1675


Name
Integer Validate(Source_Box box,Dynamic_Element &elements)
Description
Validate the contents of Source_Box box and return the Dynamic_Element de_results.
The function returns the value of:
NO_NAME if the Widget Source_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and elements is valid.
-2 if there is something wrong with the choices. For example the panel field is blank.
FALSE (zero) if there is a drastic error.
Having no Elements returned in de_results is NOT an error.

Panels and Widgets

Page 795

12d Model Programming Language Manual

Always check the number of Elements in de_results and make your decisions based on that.
ierr = Get_number_of_items(de_results,no_elts);
So a function return value of zero indicates that there is a drastic error.
Warning this is the opposite of most 12dPL function return values
Double Warning: most times the function return code is non zero even when you think it should
be. For example, when nothing is entered into the box, the return code is -2, not 0.
ID = 1676


Name
Integer Set_data(Source_Box box,Text text_data)
Description
Set the data of type Text for the Source_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 2156


Name
Integer Get_data(Source_Box box,Text &text_data)
Description
Get the data of type Text from the Source_Edit_Box box and return it in text_data.
text_data describes what has been selected in the Source_Box. Because of all the choices it is
very complicated looking.
A function return value of zero indicates the data was successfully returned.
ID = 2157


Name
Integer Read_favorite(Source_Box box,Text filename)
Description
For the Source_Box box, read in and set the Source_Box selection from the file named
filename.
Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to be
saved, and passed around between different Source_Box’s.
A function return value of zero indicates filename was read and the Source_Box was
successfully set.
ID = 2158


Name

Page 796

Panels and Widgets

Chapter

Integer Write_favorite(Source_Box box,Text filename)
Description
For the Source_Box box, write out the Source_Box selection information to the file named
filename.
Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to be
saved, and passed around between different Source_Box’s.
A function return value of zero indicates the file was successfully written.
ID = 2159


Name
Symbol_Box Create_symbol_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Symbol_Box. See Symbol_Box .
The Symbol_Box is created with the title title_text.
The Message_Box message is used to display information.
LJG? mode
The function return value is the created Symbol_Box.
ID = 2170


Name
Integer Validate(Symbol_Box box,Integer mode,Text &result)
Description
Validate the contents of Symbol_Box box and return the name of the symbol in Text result.
LJG? The value of mode is listed in the Appendix A - Symbol mode. See Symbol Mode
The function returns the value of:
NO_NAME if the Widget Symbol_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 2171


Name
Integer Get_data(Symbol_Box box,Text &text_data)
Description
Get the data of type Text from the Symbol_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.

Page 800

Panels and Widgets

Chapter

ID = 2172


Name
Integer Set_data(Symbol_Box box,Text text_data)
Description
Set the data of type Text for the Symbol_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 2173


Name
Target_Box Create_target_box(Text title_text,Message_Box box,Integer flags)
Description
Create an input Widget of type Target_Box. See Target_Box .
The Target_Box is created with the title title_text.
The Message_Box message is used to display information.
LJG?flags
The function return value is the created Target_Box.
ID = 1677


Name
Integer Validate(Target_Box box)
Description
<no description>
ID = 1678


Name
Integer Validate(Target_Box box,Integer &mode,Text &text_data)
Description
<no description>
ID = 2653


Name
Template_Box Create_template_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Template_Box. See Template_Box .
The Template_Box is created with the title title_text.
The Message_Box message is used to display template information.
The value of mode is listed in the Appendix A - Template mode.
The function return value is the created Template_Box.
ID = 942


Name
Integer Validate(Template_Box box,Integer mode,Text &result)
Description
Validate the contents of Template_Box box and return the Text result.
The value of mode is listed in the Appendix A - Template mode. See Template Mode
The value result must be type of Text.
The function returns the value of:
NO_NAME if the Widget Template_Box is optional and the box is left empty
NO_TEMPLATE, TEMPLATE_EXISTS, DISK_TEMPLATE_EXISTS or NEW_TEMPLATE
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 943


Name
Integer Get_data(Template_Box box,Text &text_data)
Description
A function return value of zero indicates the data was successfully returned.
Get the data of type Text from the Template_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.

Page 804

Panels and Widgets

Chapter

ID = 945


Name
Integer Set_data(Template_Box box,Text text_data)
Description
Set the data of type Text for the Template_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 944


Name
Text_Style_Box Create_text_style_box(Text title_text,Message_Box message)

Panels and Widgets

Page 807

12d Model Programming Language Manual

Description
Create an input of type Text_Style_Box. See Text_Style_Box .
The Text_Style_Box is created with the title title_text.
The Message_Box message is used to display the text style information.
The function return value is the created Text_Style_Box.
ID = 950


Name
Integer Validate(Text_Style_Box box,Text &result)
Description
Validate the contents of Text_Style_Box box and return name of the textstyle as the Text result.
The function returns the value of:
NO_NAME if the Widget Text_Style_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 951


Name
Integer Get_data(Text_Style_Box box,Text &text_data)
Description
Get the data of type Text from the Text_Style_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 953


Name
Integer Set_data(Text_Style_Box box,Text text_data)
Description
Set the data of type Text for the Text_Style_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 952


Name
Text_Units_Box Create_text_units_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Text_Units_Box. See Text_Units_Box .
The Text_Units_Box is created with the title title_text.
The Message_Box message is used to display the text units information.
The function return value is the created Text_Units_Box.
ID = 954


Name
Integer Validate(Text_Units_Box box,Integer &result)
Description
Validate the contents of Text_Units_Box box and return the Integer result.
The function returns the value of:
NO_NAME if the Widget Text_Units_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 955


Name
Integer Get_data(Text_Units_Box box,Text &text_data)
Description
Get the data of type Text from the Text_Units_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 957


Name
Integer Set_data(Text_Units_Box box,Integer integer_data)
Description
Set the data of type Integer for the Text_Units_Box box to integer_data.
A function return value of zero indicates the data was successfully set.
ID = 956


Name
Integer Set_data(Text_Units_Box box,Text text_data)
Description
Set the data of type Text for the Text_Units_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1519


Name
Textstyle_Data_Box Create_textstyle_data_box(Text text,Message_Box box,Integer flags)
Description
Create an input Widget of type Textstyle_Data_Box. See Textstyle_Data_Box .
The Textstyle_Data_Box is created with the title title_text.
The Message_Box message is used to display the information.
LJG?flags
The function return value is the created Textstyle_Data_Box.
ID = 1671


Name
Integer Validate(Textstyle_Data_Box box,Textstyle_Data &data)
Description
Validate the contents of Textstyle_Data_Box box and return the Textstyle_Data data.
The function returns the value of:
NO_NAME if the Widget Textstyle_Data_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and data is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1672


Name
Integer Set_data(Textstyle_Data_Box box,Textstyle_Data data)
Description
Set the data of type Textstyle_Data for the Textstyle_Data_Box box to data.
A function return value of zero indicates the data was successfully set.
ID = 1673


Name
Integer Set_data(Textstyle_Data_Box box,Text text_data)
Description
Set the data of type Text for the Texstyle_Data_Box box to text_data.
Page 812

Panels and Widgets

Chapter

A function return value of zero indicates the data was successfully set.
ID = 2161


Name
Integer Get_data(Textstyle_Data_Box box,Textstyle_Data &data)
Description
Get the data of type Textstyle_Data from the Textstyle_Data_Box box and return it in data.
A function return value of zero indicates the data was successfully returned.
ID = 1674


Name
Integer Get_data(Textstyle_Data_Box box,Text &text_data)
Description
Get the data of type Text from the Textstyle_Data_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 2160


Name
Text_Edit_Box Create_text_edit_box(Text title_text,Message_Box box,Integer no_lines)
Description
Create an input Widget of type Text_Edit_Box. See Text_Edit_Box .
The Text_Edit_Box is created with the title title_text.
The Message_Box box is used to display information.
The number of lines allowed is no_lines.
The function return value is the created Text_Edit_Box.
ID = 1372


Name
Integer Set_data(Text_Edit_Box box,Text text_data)
Description
Set the data of type Text for the Text_Edit_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1374


Name
Integer Set_data(Text_Edit_Box widget,Dynamic_Text dt_data)
Description
Set the data of type Dynamic_Text for the Text_Edit_Box widget to dt_data.
A function return value of zero indicates the data was successfully set.
ID = 1617


Name
Integer Get_data(Text_Edit_Box widget,Text &text_data)
Description
Get the data of type Text from the Text_Edit_Box widget and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1373


Name
Integer Get_data(Text_Edit_Box widget,Dynamic_Text &dt_data)

Page 814

Panels and Widgets

Chapter

Description
Get the data of type Dynamic_Text from the Text_Edit_Box widget and return it in dt_data.
A function return value of zero indicates the data was successfully returned.
ID = 1616


Name
Texture_Box Create_texture_box(Text title_text,Message_Box message)
Description
Create an input Widget of type Texture_Box. See Texture_Box .
The Texture_Box is created with the title title_text.
The Message_Box message is used to display information.
The function return value is the created Texture_Box.
ID = 1875


Name
Integer Validate(Texture_Box box,Text &result)
Description
Validate the contents of Texture_Box box and return the name of the texture in Text result.
The function returns the value of:
NO_NAME if the Widget Texture_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1876


Name
Integer Set_data(Texture_Box box,Text text_data)
Description
Set the data of type Text for the Texture_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1877


Name
Integer Get_data(Texture_Box box,Text &text_data)
Description
Get the data of type Text from the Texture_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1878


Name
Tick_Box Create_tick_box(Message_Box message)
Description
Create an input Widget of type Tick_Box. See Tick_Box .
The Message_Box message is used to display the tick information.
The function return value is the created Tick_Box.
ID = 958


Name
Integer Validate(Tick_Box box,Integer &result)
Description
Validate result (of type Integer) in the Tick_Box box.
Validate the contents of Tick_Box box and return the Integer result.
result = 0
result = 1

if the tick box is unticked
if the tick box is ticked

A function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 959


Name
Integer Get_data(Tick_Box box,Text &text_data)
Description
Get the data of type Text from the Tick_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 961


Name
Integer Set_data(Tick_Box box,Text text_data)
Description
Set the data of type Text for the Tick_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 960


Name
Tin_Box Create_tin_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Tin_Box for inputting and validating Tins.
The Tin_Box is created with the title title_text (see Tin_Box ).
The Message_Box message is normally the message box for the panel and is used to display
Model_Box validation messages.
If <enter> is typed into the Tin_Box or a tin selected from the tin pop-up list, automatic validation
is performed by the Tin_Box according to mode. What the validation is, what messages are
written to Message_Box, and what actions automatically occur, depend on the value of mode.
For example,
CHECK_TIN_MUST_EXIST

// if the tins exists, the message says "exists"
// if it doesn’t exist, the messages says "ERROR"

The values for mode and their actions are listed in Appendix A (see Tin Mode ).
The function return value is the created Tin_Box.
ID = 962


Name
Integer Validate(Tin_Box box,Integer mode,Tin &result)
Description
Validate the contents of Tin_Box box and return the Tin result.
The value of mode will determine what validation occurs, what messages are written to the
Message_Box, what actions are taken and what the function return value is.
The values for mode and the actions are listed in Appendix A (see Tin Mode ).
The function return values depends on mode and are given in Appendix A (see Tin Mode ).
A function return value of zero indicates that there is a drastic error.
Warning this is the opposite of most 12dPL function return values
Double Warning: most times the function return code is not zero even when you think it should
be. The actual value of the function return code must be checked to see what is going on. For

Page 822

Panels and Widgets

Chapter

example, when mode = CHECK_TIN_MUST_EXIST will return NO_TIN if the tin name is not
blank and no tin of that name exist (NO_TIN does not equal zero).
ID = 963


Name
Integer Get_data(Tin_Box box,Text &text_data)
Description
Get the data of type Text from the Tin_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 965


Name
Integer Set_data(Tin_Box box,Text text_data)
Description
Set the data of type Text for the Tin_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 964


Name
View_Box Create_view_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type View_Box for inputting and validating Views.
The View_Box is created with the title title_text (see View_Box ).
The Message_Box message is normally the message box of the panel and is used to display the
View_Box validation messages.
If an <enter> is typed in the View_Box or a view selected from the view pop-up list, automatic
validation is performed by the View_Box according to mode - what the validation is, what
messages are written to Message_Box, and what actions automatically occur, depend on the
value of mode.
For example,
CHECK_TIN_MUST_EXIST

// if the model exists, the message says "exists" and
// if it doesn’t exist, the messages says "ERROR"

The value of mode and their actions are listed in Appendix A (see View Mode ).
The function return value is the created View_Box.
ID = 966


Name
Integer Validate(View_Box box,Integer mode,View &result)
Description
Validate the contents of View_Box box and return the View result.
The value of mode will determine what validation occurs, what messages are written to the
Message_Box, what actions are taken and what the function return value is.
The values for mode and the actions are listed in Appendix A (see View Mode ).
The function return value depends on mode and are given in Appendix A (see View Mode ).
A function return value of zero indicates that there is a drastic error.
Warning this is the opposite of most 12dPL function return values
Double Warning: most times the function return code is not zero even when you think it should
be. The actual value of the function return code must be checked to see what is going on. For
example, when mode = CHECK_TIN_MUST_EXIST will return NO_TIN if the tin name is not
blank and no tin of that name exist (NO_TIN does not equal zero).
ID = 967


Name
Integer Get_data(View_Box box,Text &text_data)
Description
Get the data of type Text from the View_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 969


Name
Integer Set_data(View_Box box,Text text_data)
Description
Set the data of type Text for the View_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 968


Name
XYZ_Box Create_xyz_box(Text title_text,Message_Box message)
Description
Create an input Widget of type XYZ_Box. See XYZ_Box .
The XYZ_Box is created with the title title_text.
The Message_Box message is used to display the XYZ information.
The function return value is the created XYZ_Box.
ID = 970


Name
Integer Validate(XYZ_Box box,Real &x,Real &y,Real &z)
Description
Validate the contents of the XYZ_Box box and check it decodes to three Reals.
The three Reals are returned in x, y, and z.
The function returns the value of:
NO_NAME if the Widget XYZ_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and x, y and z are valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 971


Name
Integer Get_data(XYZ_Box box,Text &text_data)
Description
Get the data of type Text from the XYZ_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 973


Name
Integer Set_data(XYZ_Box box,Real x,Real y,Real z)

Page 828

Panels and Widgets

Chapter

Description
Set the x y z data (all of type Real) for the XYZ_Box box to the values x, y and z.
A function return value of zero indicates the data was successfully set.
ID = 972


Name
Integer Set_data(XYZ_Box box,Text text_data)
Description
Set the data of type Text for the XYZ_Box box to text_data.
A function return value of zero indicates the data was successfully set.
ID = 1520


Name
Colour_Message_Box Create_colour_message_box(Text message_text)
Description
Create a box of type Colour_Message_Box for writing out messages. See
Colour_Message_Box .
The Colour_Message_Box is created with the text message_text displayed in it.
The background colour of the display area is set using Set_level (Colour_Message_Box, level),
or can be set with the message using Set_data(Colour_Message_Box box,Text text_data,Integer
level)).
The function return value is the created Colour_Message_Box.
ID = 2629


Name
Integer Set_data(Colour_Message_Box box,Text text_data,Integer level)
Description

Panels and Widgets

Page 831

12d Model Programming Language Manual

Set the data of type Text for the Colour_Message_Box box as the Text text_data.
If the Colour_Message_Box box is on a panel then the message text_data will be displayed in
the information area of box with the background colour of the box set by level.
A function return value of zero indicates the data was successfully set.
ID = 2632


Name
Integer Set_data(Colour_Message_Box box,Text text_data)
Description
Set the data of type Text for the Colour_Message_Box box as the Text text_data.
If the Colour_Message_Box box is on a panel then the message text_data will be displayed in
the information area of box with the background colour previously defined by the Set_level call.
A function return value of zero indicates the data was successfully set.
ID = 2631


Name
Integer Set_level(Colour_Message_Box box,Integer level)
Description

Setting level defines the background colour to use when text messages are displayed in
the information area of box. This level will be over ridden if the
Set_data(Colour_Message_Box box,Text text_data,Integer level) call is used.
For level = 1, the colour is normal.
For level = 2, the colour is yellow (for Warning)
For level = 3, the colour is red (for Error)
For level = 4, the colour is green (for Good)
If no Set_level call is made then the default level is 1.
A function return value of zero indicates the level was successfully set.
ID = 2630


Name
Message_Box Create_message_box(Text message_text)
Description
Create a box of type Message_Box for writing out messages. See Message_Box .
The Message_Box is created with the text message_text displayed in it.
The function return value is the created Message_Box.
ID = 847


Name
Integer Get_data(Message_Box box,Text &text_data)
Description
Get the data of type Text from the Message_Box box and return it in text_data.
A function return value of zero indicates the data was successfully returned.
ID = 1037


Name
Integer Set_data(Message_Box box,Text text_data)
Description
Set the data of type Text for the Message_Box box as the Text text_data.
If the Message_Box box is on a panel then the message text_data will be displayed in the

Panels and Widgets

Page 833

12d Model Programming Language Manual

information area of box.
A function return value of zero indicates the data was successfully set.
ID = 1038


Name
Log_Box Create_log_box(Text name,Integer box_width,Integer box_height)
Description
Create an input Widget of type Log_Box with the message area defined by the parameters
box_width, box_height which are in screen units (pixels).See Log_Box and Log_Lines .
A Log_Box behaves like the standard 12d Model Output Window but may be added to a Panel or
Vertical / Horizontal group.
Log_Lines are the method of passing messages to the Log_Box.
The function return value is the created Log_Box.
ID = 2671


Name
Log_Line Create_text_log_line(Text message,Integer log_level)
Description
Create a Text Log_Line with the message message and a log level log_level.
The text message is displayed in a Log_Box with the log level log_level when the Log_Line is
added to the Log_Box.
Available log levels are
0 for none,
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.

icons for log_level’s

WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2663


Name
Log_Line Create_highlight_string_log_line(Text message,Integer log_level,Uid model_id,Uid string_id)
Description
Create a Highlight String Log_Line giving a string by its model Uid model_id and string Uid
string_id, a text message and a log level log_level.
The text message is displayed in a Log_Box with the log level log_level when the Log_Line is
added to the Log_Box.
If LB is clicked on the log line, the string will be highlighted.
Available log levels are
0 for none,
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.

highlight string log line with log level 2
Clicking LB on the Highlight String log line highlights the string in each view the string is on,
and autopans to the string.

WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2664


Name
Log_Line Create_highlight_string_log_line(Text message,Integer log_level,Uid model_id,Uid
string_id,Real x,Real y,Real z)
Description
Create a Highlight String Log_Line giving a string by its model Uid model_id and string Uid
string_id, a coordinate (x,y,z) on the string, a text message and a log level log_level.

Panels and Widgets

Page 837

12d Model Programming Language Manual

The text message is displayed in a Log_Box with the log level log_level when the Log_Line is
added to the Log_Box.
If LB is clicked on the log line, the coordinate (x,y,z) on the string, and the string, will be
highlighted.
Available log levels are
0 for none,
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.

highlight string (with xyz) log line and log level 2
Clicking LB on the highlight string (with xyz) log line highlights the string at the given position
(x,y,z) in each view the string is on, and autopans to the string.

WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2665


Name
Log_Line Create_highlight_point_log_line(Text message,Integer log_level,Real x,Real y,Real z)
Description
Create a Log_Line giving a coordinate (x,y,z).
If LB is clicked on the log line, the coordinate (x,y,z) will be highlighted.
LJG? on which views?
It also displays the text message message and has a log level log_level.
Available log levels are
0 for none,
1 for General,
2 for Warning

Page 838

Panels and Widgets

Chapter

3 for Error.
Log levels other than 0 will display a small icon to indicate their status.
WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2666


Name
Log_Line Create_edit_string_log_line(Text message,Integer log_level,Uid model_id,Uid string_id)
Description
Create an Edit Log_Line giving a string by its model Uid model_id and string Uid string_id, a
text message and a log level log_level.
The text message is displayed in a Log_Box with the log level log_level when the Log_Line is
added to the Log_Box.
If LB is clicked on the log line, the string will be highlighted.
If LB is double clicked on the log line, the string is edited.
If RB is clicked on the log line then an Options menu is displayed with the choices:

Edit the string
Delete the string
Show the string properties
Not applicable
It also displays the text message message and has a log level log_level.
Available log levels are
0 for none,
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.

Panels and Widgets

Page 839

12d Model Programming Language Manual

edit string log line with log level 1
Clicking LB on the edit string log line highlights the string in each view the string is on, and
autopans to the string.

Double clicking LB on the edit string log line highlights and edits the string. That is, it
highlights the string and also brings the string up in its editor

Clicking RB on the edit string log line brings up the Options for the string

WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2667


Name
Log_Line Create_macro_log_line(Text message,Integer log_level,Text macro,Text select_cmd_line)
Description
This call creates a log line that will allow the user to run a macro when the log line is double
clicked. The macro is specified by the parameter macro and any optional arguments to be
passed to it are specified by cmd_line.
It also displays the text message message and has a log level log_level.
Available log levels are
0 for none
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.
WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.
The function return code is the created Log_Line.
ID = 2668


Name
Log_Line Create_macro_log_line(Text message,Integer log_level,Text macro,Text
select_cmd_line,Dynamic_Text menu_names,Dynamic_Text menu_command_lines)
Description
This call creates a log line that will allow the user to run a macro when the log line is double
clicked. The macro is specified by the parameter macro and any optional arguments to be
passed to it are specified by cmd_line.
This log line also provides options in a context menu when the user right clicks it. There are two
parameters required; a list of all the names to be displayed in the menu, stored in a
Dynamic_Text object called menu_names and the list of arguments to be passed down to the
macro when the menu item is selected, stored in menu_command_lines.
It also displays the text message message and has a log level log_level.
Available log levels are
0 for none,
1 for General,
2 for Warning
3 for Error.
Log levels other than 0 will display a small icon to indicate their status.
WARNING
To be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Box
box,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel using
the Show_panel call.

Panels and Widgets

Page 841

12d Model Programming Language Manual

The function return code is the created Log_Line.
ID = 2669


Name
Integer Add_log_line(Log_Box box,Log_Line line)
Description
Add the Log_Line line to the existing Log_Box box.
WARNING
To be visible, a Log_Line is added to a Log_Box using the call Add_log_line(Log_Box box,Log_Line
line) BUT this call can only be made after the Log_Box is displayed in a panel using the
Show_panel call.
A function return value of zero indicates the Log_Line was successfully added.
ID = 2672


Name
Integer Clear(Log_Box box)
Description
Clear any text and log lines from a Log_Box box.
A function return value of zero indicates the Log_Box was successfully cleared.
ID = 2673


Name
Integer Print_log_line(Log_Line line,Integer is_error)
Description
Print the Log_Line line to the 12d Model Output window.
If is_error = 1, the Output window will treat the Log_line as an error message and the Output
window will flash and/or pop up).
A function return value of zero indicates the Log_Line was successfully printed.
ID = 2670


Name
Button Create_button(Text title_text,Text reply)
Description
Create a Widget of type Button.
The Button is created with title_text a the text on the Button.
The Text reply is the command that is sent by the Button back to the macro via Wait_on_widgets
when the Button is clicked on. See Wait_on_widgets(Integer &id,Text &cmd,Text &msg) .
The function return value is the created Button.
ID = 850


Name
Integer Set_raised_button(Button button,Integer mode)
Description
Set the button raised or sank depending on the mode value.
mode
-3
0
3

value
Raise
Flat
Sink

A function return value of zero indicates the button was successfully raised.
ID = 1058


Name
Button Create_child_button(Text title_text)
Description
Not implemented.
ID = 851


Name
Button Create_finish_button(Text title_text,Text reply)
Description
Creates a Finish Button with title_text the text on the Button.
The Text reply is the command that is sent by the Button back to the macro via Wait_on_widgets
when the Button is clicked on. See Wait_on_widgets(Integer &id,Text &cmd,Text &msg) .
This is a special button and there should only be one per panel. The title_text is normally "Finish"
At the end of the processing in the macro, Set_finish_button (see Set_finish_button(Widget
panel,Integer move_cursor) ) should be called to put the cursor on the Finish button.
Set_finish_button needs to be called so that chains know that the macro has terminated
correctly.
The function return value is the created Button.
ID = 1367


Name
Integer Set_finish_button(Widget panel,Integer move_cursor)
Description
If move_cursor = 1 then the cursor is moved onto the finish button.

Panels and Widgets

Page 845

12d Model Programming Language Manual

ID = 1368


Name
Select_Button Create_select_button(Text title_text,Integer mode,Message_Box box)
Description
Create a button of type Select_Button.
This is a special Button that when clicked, allows the user to select a string.

Page 846

Panels and Widgets

Chapter

The button is created with the label text title_text.
The Message_Box box is selected to display the select information.
The value of mode is:
mode

value

SELECT_STRING
SELECT_STRINGS

5509
5510

not implemented!

Refer to the list in the Appendix A.
The function return value is the created Select_Button.
Note The Select_Button is now rarely used and has been replaced by the New_Select_Box or
the Select_Box. See New_Select_Box and Select_Box
ID = 881


Name
Integer Validate(Select_Button select,Element &string)
Description
Validate the Element string that is selected via the Select_Button select.
The function returns the value of:
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 978


Name
Integer Validate(Select_Button select,Element &string,Integer silent)
Description
Validate the contents of Select_Button select and return the selected Element in string.
If silent = 0, and there is an error, a message is written and the cursor goes back to the button.
If silent = 1 and there is an error, no message or movement of cursor is done.
The function returns the value of:
TRUE (1) if no other return code is needed and string is valid.
FALSE (zero) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 1375


Name
Integer Set_data(Select_Button select,Element string)
Description
Sets the Element for the Select_Button select to string.
A function return value of zero indicates the data was successfully set.
ID = 1173


Name
Integer Set_data(Select_Button select,Text string)
Description
Set the model and string name as a Text string in the form "model_name->string_name"
A function return value of zero indicates the data was successfully set.
ID = 979


Name
Integer Get_data(Select_Button select,Text &string)
Description
Get the model and string name for the selected string in the form "model_name->string_name".
Return the Text in string.
The returned string type must be Text.
A function return value of zero indicates the data was successfully returned.
ID = 980


Name
Integer Select_start(Select_Button select)
Description
Starts the string selection for the Select_Button select. This is the same as if the button had been
clicked.
A function return value of zero indicates the start was successful.
ID = 1167


Name
Integer Select_end(Select_Button select)
Description
Page 848

Panels and Widgets

Chapter

Cancels the string selection that is running for the Select_Button select. This is the same as if
Cancel had been selected from the Pick Ops menu.
A function return value of zero indicates the end was successful.
ID = 1168


Name
Integer Set_select_type(Select_Button select,Text type)
Description
Set the type of the string that can be selected to type for Select_Botton select. For example
“Alignment”, “3d”.
A function return value of zero indicates the type was successfully set.
ID = 1043


Name
Integer Set_select_snap_mode(Select_Button select,Integer snap_control)
Description
Set the snap control snap_control for the Select_Button select.
mode

value

Ignore_Snap

0

User_Snap

1

Program_Snap

2

A function return value of zero indicates the type was successfully set.
ID = 1044


Name
Integer Get_select_direction(Select_Button select,Integer &dir)
Description
Get the select_direction dir from the selected string.
The returned dir type must be Integer.
If select without direction, the returned dir is 1, otherwise, the returned dir:
Value
1
-1

Pick direction
the direction of the string
against the direction of the string

A function return value of zero indicates the direction was successfully returned.
ID = 1046


Name
Integer Set_select_snap_mode(Select_Button select,Integer mode,Integer control,Text text)
Description
Set the snap mode mode and snap control control
for the Select_Button select.
When snap mode is:
Name_Snap
Tin_Snap
Model_Snap

6
7
8

the snap_text must be string name; tin name, model name accordingly, otherwise, leave the
snap_text blank “”.
A function return value of zero indicates the type was successfully set.

Get_select_coordinate(Select_Button select,Real &x,Real &y,Real &z,Real
&ch,Real &ht)
Name
Integer Get_select_coordinate(Select_Button select,Real &x,Real &y,Real &z,Real &ch,Real &ht)
Description
Get the coordinate of the selected snap point.
The return value of x, y, z, ch and ht must be type of Real.
A function return value of zero indicates the coordinate was successfully returned.
ID = 1047


Name
Button Create_help_button(Panel panel,Text title_txt)
Description
Create a button with the title title_text and return it as the function return value.
To set up the file for extra help, see How to Set Up Extra Help .
ID = 2633


Name
GridCtrl_Box Create_gridctrl_box(Text name,Integer num_rows,Integer num_columns,Widget
column_widgets[],Integer show_nav,Message_Box messages,Integer width,Integer height)
Description
This call creates a new GridCtrl_Box object which can be added to Panels.
name is the name of the GridCtrl_Box and the number of rows that the grid initially has is
num_rows and the number of columns is num_columns (rows can also be added or deleted
after the GridCtrl_Box has been displayed).
column_widgets[] is an array of Widgets in column order, and each Widget is of the type for that
column. For an example see GridCtrl_Box .
If show_nav is 1 then there are navigation boxes on the side of the GridCtrl_Box.
If show_nav is 0 then there are no navigation boxes.
The width of the grid cell is width and the height of the grid cell is height, The units for width and
height are screen units (pixels).
Important note: All Boxes, even through they have names like Real_Box and Input_Box,
derived from Widgets and can be used in many options that take a Widget. For example
Show_widget. However for the array of widgets column_widgets[ ] defining the GridCtrl_Box
columns, the array values need to be Widget and so the other types derived from Widget have to
be cast to a Widget before they can be used to fill the column_widgets[] array. The cast is easily
done by simply having the following cast function defined and in your macro code.
Widget cast(Widget w)
{
return w;
}
See GridCtrl_Box for an example of using cast when defining values for column_widgets[].

GridCtrl_Box with two row and three columns with column types Real_Box, Input_Box, Tick_Box
The titles of the Widgets are the headings for the columns

show_nav = 1
so navigation boxes

Grid navigation
boxes

show_nav = 0
so navigation boxes

If the rows and columns are too large to fit inside the area defined by width and height, scroll bars
are automatically created so that all cells can be reached.

Page 854

Panels and Widgets

Chapter

A vertical scroll bar is automatically added
when the rows are wider than the
given height

A horizontal scroll bar is automatically added when
the columns are wider than the given width
The created GridCtrl_Box is returned as the function return value.
ID = 2393


Name
GridCtrl_Box Create_gridctrl_box(Text name,Integer num_rows,Integer num_columns,Widget
column_widgets[],Integer column_readonly[],Integer show_nav,Message_Box messages,Integer
width,Integer height)
Description
This call creates a new GridCtrl_Box object which can be added to Panels.
This is the same as the previous GridCtrl_Box function except that there is also the array
column_readonly[] where
column_readonly[] is an Integer array of size num_columns where a value of 1 means that the
cell is read only, and 0 means that the cell can be edited.

To set only the middle column
to be read only Integer column_readonly[3];
column_readonly[1] = 0;
column_readonly[2] = 1;
column_readonly[3] = 0;
Second column is read only

See Create_gridctrl_box(Text name,Integer num_rows,Integer num_columns,Widget
column_widgets[],Integer show_nav,Message_Box messages,Integer width,Integer height) for
more documentation for this function.

Panels and Widgets

Page 855

12d Model Programming Language Manual

The created GridCtrl_Box is returned as the function return value.
ID = 2654


Name
Integer Load_widgets_from_row(GridCtrl_Box grid,Integer row_num)
Description
Let column_widgets[] be the array that was used to define the GridCtrl_Box columns in the
Create_gridcltrl_box call. See Create_gridctrl_box(Text name,Integer num_rows,Integer
num_columns,Widget column_widgets[],Integer show_nav,Message_Box messages,Integer
width,Integer height) .
Load_widgets_from_row loads the values in row row_num of the GridCtrl_Box grid into
column_widgets[].
Load_widgets_from_row allows you to validate grid values for a row, or to get the values to use
for other purposes.
To change grid values, you first call Load_widgets_from_row to place the existing values for a
row into column_widgets[], change the values that you wish to change in column_widgets[],
and then call Load_row_from_widgets to load the new values from column_widgets[] back into
the row. SeeLoad_row_from_widgets(GridCtrl_Box grid,Integer row_num) .
Note - this call can only be made after the Show_widget call is made to display the panel
containing the GridCtrl_Box.
A function return value of zero indicates the load was successful.
ID = 2394


Name
Integer Load_row_from_widgets(GridCtrl_Box grid,Integer row_num)
Description
Let column_widgets[] be the array that was used to define the GridCtrl_Box columns in the
Create_gridcltrl_box call. See Create_gridctrl_box(Text name,Integer num_rows,Integer
num_columns,Widget column_widgets[],Integer show_nav,Message_Box messages,Integer
width,Integer height) .
Load_row_from_widgets loads the values of column_widgets[] into row row_num of the
GridCtrl_Box grid.
Note - this call can only be made after the Show_widget call is made to display the panel
containing the GridCtrl_Box.
A function return value of zero indicates the load was successful.
ID = 2395


Name
Integer Insert_row(GridCtrl_Box grid)

Page 856

Panels and Widgets

Chapter

Description
This call inserts a blank row at the bottom of the GridCtrl_Box grid.
Note - this call can only be made after the Show_widget call is made to display the panel
containing the GridCtrl_Box.
A function return value of zero indicates the insertion was successful.
ID = 2396


Name
Integer Insert_row(GridCtrl_Box grid,Integer row_num,Integer is_before)
Description
This call inserts a blank row into the GridCtrl_Box grid.
If is_before = 1, a blank row is inserted before row_num, so that the blank row becomes the
new row_num’th row. The old rows from row row_num onwards are all pushed down one row.
If is_before = 0, a blank row is after row row_num, so that the blank row becomes a new
(num_row+1)’th row. The old rows from row (num_row+1) onwards are pushed down one row.
t row number row_num of the GridCtrl_Box grid.
If you wish it to be inserted before the specified row, set is_before to 1, otherwise the row will be
inserted after.
Note: a GridCtrl_Box(grid) call should be done after the Insert_row(GridCtrl_Box grid,Integer
row_num,Integer is_before) call. See Format_grid(GridCtrl_Box grid) .
A function return value of zero indicates the insertion was successful.
ID = 2397


Name
Integer Delete_row(GridCtrl_Box grid,Integer row_num)
Description
Delete the row row_num from the GridCtrl_Box grid.
A function return value of zero indicates the row was successfully deleted.
ID = 2408


Name
Integer Delete_all_rows(GridCtrl_Box grid)
Description
Delete all the rows of the GridCtrl_Box grid.
A function return value of zero indicates the rows were successfully deleted.
ID = 2409


Name
Integer Get_row_count(GridCtrl_Box grid)
Description
This call returns the number of rows currently in a GridCtrl_Box grid as the function return value.
ID = 2398


Name
Integer Format_grid(GridCtrl_Box grid)
Description
This call formats the GridCtrl_Box grid.
This means it makes sure all columns and rows are large enough to fit any entered data.
A function return value of zero indicates the format was successful.
ID = 2399


Name
Integer Set_cell(GridCtrl_Box grid,Integer row_num,Integer col_num,Text value)
Description
For the cell with row number row_num and column number col_num of the GridCtrl_Box grid,
set the text value of the cell to text.
It is recommended that you use the Load_row_from_widgets call, as this call will not provide
any validation of data.
This call will return 0 if successful.
A function return value of zero indicates the set was successful.
ID = 2400


Name
Integer Get_cell(GridCtrl_Box grid,Integer row_num,Integer col_num,Text &value)
Description
Get the text value of the cell at row number row_num and column number col_num of the
GridCtrl_Box grid, and returns the text in value.
It is recommended that you use the Load_widgets_from_row call instead, as this call will not
provide any validation of data.
A function return value of zero indicates the get was successful.
ID = 2401


Name
Integer Set_column_width(GridCtrl_Box grid,Integer col,Integer width)
Page 858

Panels and Widgets

Chapter

Description
For the GridCtrl_Box grid, set the width of column number col to width. The units of width are
screen units (pixels).
The column can be made invisible by setting its width to 0.
A function return value of zero indicates the width was successfully set.
ID = 2402


Name
Integer Set_modified(GridCtrl_Box grid,Integer modified)
Description
This call sets the modified state of the GridCtrl_Box grid.
If modified = 0 then the modified state is set to off.
If modified = 1 then the modified state is set to on.
A function return value of zero indicates the modified state was successfully set.
ID = 2403


Name
Integer Set_warn_on_modified(GridCtrl_Box grid,Integer warn_on_modified)
Description
This call sets the warn on modified state of the GridCtrl_Box grid.
If warn_on_modified = 1 then if the panel containing grid is being closed and grid is in a modified
state, then the user is prompted to confirm that grid is to be closed.

If warn_on_modified = 0 then there is no warning when the panel containing grid is being closed
even if the panel has been modified.
Note: a GridCtrl_Box is in a in a modified state if data in the GridCtrl_Box has been changed and
the modified state has not been set off by a Set_modified(grid,0) call. See
Set_modified(GridCtrl_Box grid,Integer modified)
The default for a GridCtrl_Box is that a warning is given when attempting to close it.
A function return value of zero indicates the warn on modified state was successfully set.
ID = 2404


Name
Integer Get_selected_cells(GridCtrl_Box grid,Integer &start_row,Integer &start_col,Integer
&end_row,Integer &end_col)
Description
For the GridCtrl_Box grid, return the minimum and maximum row and column numbers for the
current selected cells (the range of the selected cells).
The minimum and maximums are returned in start_row, start_col and end_row and end_col.
Note that not all the cells in the range need to be selected.

start_row = 2
start_col= 1
end_row = 4
end_col = 4

The function return value is zero if there are selected cells and the range is returned successfully.
The function return value is non-zero is there are no selected rows.
ID = 2410


Name
Integer Set_fixed_row_count(GridCtrl_Box grid,Integer num_fixed_rows)
Description
Sets the number of fixed rows in the GridCtrl_Box grid.
Fixed rows can not be deleted or moved and rows can not be inserted between two other fixed
rows.
A function return value of zero indicates the set was successful.
ID = 2655


Name
Integer Get_fixed_row_count(GridCtrl_Box grid)

Page 860

Panels and Widgets

Chapter

Description
Gets the number of fixed rows in the GridCtrl_Box grid.
Fixed rows can not be deleted or moved and rows can not be inserted between two other fixed
rows.
The number of fixed rows is returned as the function return value.
ID = 2656


Name
Integer Set_cell_read_only(GridCtrl_Box grid,Integer row,Integer col,Integer read_only)
Description
For the GridCtrl_Box grid, set the cell specified by row row and column col as read only.
Note that colouring may be removed when grid is formatted and the format_grid message
should be trapped to reapply these settings.
A function return value of zero indicates the set was successful.
ID = 2657


Name
Integer Get_cell_read_only(GridCtrl_Box grid,Integer row,Integer col)
Description
For the GridCtrl_Box grid, check if the cell specified by row row and column column is read
only.
The function return value is:
1 if the cell is read only
zero if the cell is not read only.
ID = 2658


Name
Tree_Box Create_tree_box(Text name,Text root_item_text,Integer tree_width,Integer tree_height)
Description
This call creates a Tree_Box with the name name and with width tree_width and height
tree_height. The units for width and height are screen units (pixels).
An empty node/page at the root of the tree is created with the title root_item_text. This is called
the root page.

Page 862

Panels and Widgets

Chapter

An example of a section of the code required to create a Tree_Box with its root page is:
Tree_Box tree_box = Create_tree_box("Tree", "Tree Root", 200, 200);

The created Tree_Box is returned as the function return value.
ID = 2571


Name
Tree_Page Get_root_page(Tree_Box tree_box)
Description
Get the root page of the Tree_Box tree_box and return it as the function return value.
All Tree_Box’s automatically have a root page.
ID = 2572


Name
Tree_Page Create_tree_page(Tree_Page parent_page,Text name,Integer show_border,Integer
use_name_for_border)
Description
This call creates a new Tree_Page with the name name, as a child of the Tree_Page
parent_page.
When the right hand side of the created page exists and there is none or more than one Group
(either Horizontal_Group’s and/or Vertical_Group’s), then the right hand side can have an
optional border and be given the name of the Tree_Page as a title for the border.
If show_border = 1, a border is drawn around the right had side of the created Tree_Page.
If show_border = 0, no border is drawn around the right had side of the created Tree_Page.
If use_name_for_border = 1, name is used as the title when the border is drawn around the right
had side of the created Tree_Page.

Panels and Widgets

Page 863

12d Model Programming Language Manual

If use_name_for_border = 0, there is no title when the border is drawn around the right had side
of the created Tree_Page.

Title for border

Border around
right hand side
of "Page1"
Right hand side of
Tree_Page "Page 1"
The right hand side comes up when you
click on "Page 1" in the Tree on the left

A parent page must exist before a child page can be created. The parent page may be the root
page that is automatically created for a Tree_Box and the Get_root_page call is used to get the
root page of a Tree_Box. See Get_root_page(Tree_Box tree_box)
A Tree_Page can contain any number of children pages.

An example of a section of the code required to create a Tree_Box with its root page, and then one
child page of the root page is:
Tree_Box tree_box = Create_tree_box("Tree", "Tree Root", 200, 200);
// get the root page to add a child page called "Page 1" to
Tree_Page root_page = Get_root_page(tree_box);
Tree_Page page_1 = Create_tree_page(root_page, "Page 1", 1, 1);

The created Tree_Box is returned as the function return value.

Page 864

Panels and Widgets

Chapter

ID = 2577


Name
Integer Append(Widget widget,Tree_Page page)
Description
Append the Widget widget to the Tree_Page page.
All Widgets appended to a Tree_Page page are displayed on the right hand side of the Tree_Box
when the user clicks on page on the left hand side of the Tree_Box.
A function return value of zero indicates the Widget was successfully appended.
An example of a section of the code required to create a Tree_Box with its root page, one child
page of the root page, and some boxes to show on the right had side of the child page is:
Panel panel = Create_panel("Tree Box test");
Tree_Box tree_box = Create_tree_box("Tree", "Tree Root", 200, 200);
// get the root page to add a child page to
Tree_Page root_page = Get_root_page(tree_box);
Tree_Page page_1 = Create_tree_page(root_page, "Page 1", 1, 1);
Message_Box message_box = Create_message_box("");
Input_Box ib_1 = Create_input_box("Input box", message_box);
Real_Box db_1 = Create_real_box("Double box", message_box);
Append(ib_1,page_1);
Append(db_1,page_1);
Append(message_box,page_1);
Append(tree_box, panel);
Show_widget(panel);

ID = 2583


Name

Panels and Widgets

Page 865

12d Model Programming Language Manual

Integer Get_number_of_pages(Tree_Page page)
Description
For the Tree_Page page, return the number of child pages belonging to page as the function
return value.
ID = 2578


Name
Integer Get_page(Tree_Page parent,Integer page_index,Tree_Page &child_page)
Description
For the Tree_Page parent, find the n’th child page of parent and return the page as child_page.
A function return value of zero indicates a child page was successfully returned.
ID = 2579


Name
Has_child_page(Tree_Page parent,Tree_Page child)
Description
This call checks if the given child Tree_Page child belongs to the parent Tree_Page parent.
A non-zero function return value indicates that child is a child page of parent.
Warning this is the opposite of most 12dPL function return values
ID = 2580


Name
Integer Has_widget(Tree_Page page,Widget w)
Description
This call checks if the Tree_Page page contains the Widget w.
A non-zero function return value indicates that w is in page.
Warning this is the opposite of most 12dPL function return values
ID = 2581


Name
Text Get_page_name(Tree_Page page)
Description
For the Tree_Page page, return the Text name of page as the function return value.
ID = 2582


Name
Integer Set_page(Tree_Box tree_box,Widget w)
Description
Set the current displayed page of the Tree_Box tree to the Tree_Page that contains the Widget
w.
This is particularly useful for validation, when validation fails.
A function return value of zero indicates the page was successfully displayed.
ID = 2573


Name
Integer Set_page(Tree_Box tree_box,Tree_Page page)
Description
Set the current displayed page of the Tree_Box tree to the Tree_Page page.
A function return value of zero indicates the page was successfully displayed.
ID = 2574


Name
Integer Set_page(Tree_box tree_box,Text name)
Description
Set the current displayed page of the Tree_Box tree to the Tree_Page with name name.
A function return value of zero indicates the page was successfully displayed.
ID = 2575


Name
Integer Get_current_page(Tree_Box tree_box,Tree_Page &current_page)
Description
Get the Tree_Page that is currently selected and return it in current_page.
A function return value of zero indicates the page was successfully returned.
ID = 2576


Name
Integer Quick_sort(Integer count,Integer index[],Integer val_array[])
Description
Sort the Integer array val_array[count] of size count, and return the sort order for val_array[] in
the Index array index[]. For more information see Quick Sort .
The array index[] must be of at least size count.
A function return value of zero indicates that the sort was successful.
ID = 2745


Name
Integer Quick_sort(Integer count,Integer index[],Real val_array[])
Description
Sort the Real array val_array[count] of size count, and return the sort order for val_array[] in
the Index array index[]. For more information see Quick Sort .
The array index[] must be of at least size count.
A function return value of zero indicates that the sort was successful.
ID = 2746


Name
Integer Quick_sort(Integer count,Integer index[],Text val_array[])
Description

General

Page 869

12d Model Programming Language Manual

Sort the Text array val_array[count] of size count, and return the sort order for val_array[] in
the Index array index[]. For more information see Quick Sort .
The array index[] must be of at least size count.
A function return value of zero indicates that the sort was successful.
ID = 2747


Name
Integer Match_name(Text name,Text reg_exp)
Description
Checks to see if the Text name matches a regular expression given by Text reg_exp.
The regular expression uses
*

for a wild cards

?

for a wild character

A non-zero function return value indicates that there is a match.
A function return value of zero indicates there were no errors in the matching calculations.
Warning - this is the opposite of most 12dPL function return values
ID = 188


Name
Integer Match_name(Dynamic_Element de,Text reg_exp,Dynamic_Element &matched)
Description
Returns all the Elements from the Dynamic_Element de whose names match the regular
expression Text reg_exp.
The matching elements are returned by appended them to the Dynamic_Element matched.
A function return value of zero indicates there were no errors in the matching calculations.
ID = 189


Name
Integer Is_null(Real value)
Description
Checks to see if the Real value is null or not.
A non-zero function return value indicates the value is null.
A zero function return value indicates the value is not null.
Warning - this is the opposite of most 12dPL function return values
ID = 469


Name
void Null(Real &value)
Description
This function sets the Real value to the 12d Model null-value.
There is no function return value.
ID = 470


Name
Integer Null_ht(Dynamic_Element elements,Real height)
Description
This function examines the z-values of each point for all non-Alignment strings in the
Dynamic_Element elements, and if the z-value of the point equals height, the z-value is reset to
the null value.
A returned value of zero indicates there were no errors in the null operation.
ID = 407


Name
Integer Null_ht_range(Dynamic_Element elements,Real ht_min,Real ht_max)
Description
This function examines the z-values of each point for all non-Alignment strings in the
Dynamic_Element elements, and if the z-value of the point is between ht_min and ht_max, the
zvalue is reset to the null value.

A returned value of zero indicates there were no errors in the null operation.
ID = 408


Name
Integer Reset_null_ht(Dynamic_Element elements,Real height)
Description
This function resets all the null z-values of all points of non-Alignment strings in the
Dynamic_Element elements, to the value height.
A returned value of zero indicates there were no errors in the reset operation.
ID = 409


Name
Integer Contour(Tin tin,Real cmin,Real cmax,Real cinc,Real cont_ref,Integer cont_col,Dynamic_Element
&cont_de,Real bold_inc,Integer bold_col,Dynamic_Element &bold_de)
Description
Contour the triangulation tin between the minimum and maximum z values cmin and cmax.
The contour increment is cinc, and cref is a z value that the contours will pass through.
ccol is the colour of the normal contours and they are added to the Dynamic_Element cont_de.
bold_inc and bold_col are the increment and colour of the bold contours respectively. If
bold_inc is zero then no bold contour are produced.
Any bold contours are added to the Dynamic_Element bold_de.
A function return value of zero indicates the contouring was successful.
ID = 143


Name
Integer Tin_tin_depth_contours(Tin original,Tin new,Integer cut_colour,Integer zero_colour,Integer
fill_colour,Real interval,Real start_level,Real end_level,Integer mode,Dynamic_Element &de)
Description
Calculate depth contours (isopachs) between the triangulations original and new.
The contour increment is interval, and the range is from start_level to end_level.
cut_colour, zero_colour and fill_colour are the colours of the cut, zero and fill contours
respectively.
If the value of mode is
0

2d strings are produced with depth as the z-value

1

3d strings are produced with the depth contours projected onto the Tin original.

2

3d strings are produced with the depth contours projected onto the Tin new.

The new strings are added to the Dynamic_Element de.
A function return value of zero indicates the contouring was successful.
ID = 394


Name
Integer Tin_tin_intersect(Tin original,Tin new,Integer colour,Dynamic_Element &de)
Description
Calculate the intersection (daylight lines) between the triangulations original and new.

General

Page 873

12d Model Programming Language Manual

The intersection lines have colour colour and are added to the Dynamic_Element de.
Note
This is the same as the zero depth contours projected onto either Tin original or new (mode 1 or
2) that are produced by the function Tin_tin_depth_contours.
A function return value of zero indicates the intersection was successful.
ID = 479


Name
Integer Tin_tin_intersect(Tin original,Tin new,Integer colour,Dynamic_Element &de,Integer mode)
Description
Calculate the intersection (daylight lines) between the triangulations original and new.
The intersection lines have colour colour and are added to the Dynamic_Element de.
If mode is
0

the intersection line with z = 0 (2d string) is produced

1

the full 3d intersection is created.

A function return value of zero indicates the intersection was successful.
ID = 393


Name
Integer Drape(Tin tin,Model model,Dynamic_Element &draped_elts)
Description
Drape all the Elements in the Model model onto the Tin tin.
The draped Elements are returned in the Dynamic_Element draped_elts.
A function return value of zero indicates the drape was successful.

Drape(Tin tin,Dynamic_Element de, Dynamic_Element &draped_elts)
Name
Integer Drape(Tin tin,Dynamic_Element de, Dynamic_Element &draped_elts)
Description
Drape all the Elements in the Dynamic_Element de onto the Tin tin.
The draped Elements are returned in the Dynamic_Element draped_elts.
A function return value of zero indicates the drape was successful.

Face_drape(Tin tin,Model model, Dynamic_Element &face_draped_elts)
Name
Integer Face_drape(Tin tin,Model model, Dynamic_Element &face_draped_elts)
Description
Face drape all the Elements in the Model model onto the Tin tin.
The draped Elements are returned in the Dynamic_Element face_draped_elts.
A function return value of zero indicates the face drape was successful.

Face_drape(Tin tin,Dynamic_Element de,Dynamic_Element
&face_draped_strings)
Name
Integer Face_drape(Tin tin,Dynamic_Element de,Dynamic_Element &face_draped_strings)
Description
Face drape all the Elements in the Dynamic_Element de onto the Tin tin.
The face draped Elements are returned in the Dynamic_Element face_draped_elts.
A function return value of zero indicates the face drape was successful.
ID = 145


Name
Integer Get_drainage_intensity(Text rainfall_filename,Integer rainfall_method,Real frequency,Real
duration,Real &intensity)
Description
The Rainfall Intensity information is part of a 12d Model Rainfall File (that ends in ".12dhdyro").
The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:
Design =>Drainage-Sewer =>Rainfall editor.
12d Model comes with some Rainfall Files and others can be created by users.
The Get_drainage_intensity call returns the intensity for a given rainfall method, frequency storm
duration.
The image below are the rainfall Intensity Methods from the "AUS ACT Canberra.12dhydro" file
loaded into the Rainfall File Editor.

12d hydro
file name

durations
intensities
IFD Table Intensity Method in the Rainfall File

Page 876

General

Chapter

12d hydro
file name

ARR 1987 Intensity Method in the Rainfall File

12d hydro
file name

ARR 1977 Intensity Method in the Rainfall File

The function arguments are:
rainfall_filename is the local name of the ".12dhydro" file to get the Intensity from.
rainfall_method is one of:
"IFD Table"
"ARR 1987"
"ARR 1977"
frequency is the frequency (ARI) in years
duration is the duration in minutes

General

Page 877

12d Model Programming Language Manual

intensity is returned and is the intensity calculated from the table given by the rainfall_method,
frequency and the duration.
A function return value of zero indicates that the intensity was successfully returned.
A non zero function return indicates that there was an error getting the intensity.
The value of the non-zero function value indicates the type of error:
-999
-99
-9
-8
-4
-3
-2
-1

Error Codes
= no Drainage Analysis license
= error reading file
= no valid data found for specified method
= frequency outside valid range
= unsupported rainfall method
= error building ARR1977 storm data
= error building ARR1987 storm data
= error building IFD storm data

ID = 2209


Name
Integer Get_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text
&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integer
max_num,Integer &ret_num)
Description
The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in
".12dhdyro").
The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:
Design =>Drainage-Sewer =>Rainfall editor.
12d Model comes with some Rainfall Files and others can be created by users.
The rainfall Temporal Patterns give the mathematical description of one or more storms.
The Get_rainfall_temporal_pattern call returns the information for one storm from the rainfall
Temporal Patterns in a Rainfall File.
The image below table is the is of the rainfall Temporal Patterns from the "AUS ACT
Canberra.12dhydro" file loaded into the Rainfall File Editor.

Page 878

General

Chapter

12d hydro
file name

flag to say
run storm

Zone
filter

total length
of storm

Average Recurrence
Interval (ARI)
from to

Storm number
Storm name
or Storm ID
Temporal Patterns in the Rainfall File

interval
file name

temporal pattern values

Temporal Pattern Table from the Rainfall File

The function arguments are:
rainfall_filename is the local name of the ".12dhydro" file to get the temporal pattern

General

Page 879

12d Model Programming Language Manual

values from.
storm_num is the number of the storm in the file
The rest of the arguments of the call return values from the storm_num’th line of the Temporal
Pattern table.
run returns 1 if "Run Storm" is ticked
0 if "Run Storm" is not ticked
zone_filter returns the value from "Zone Filter"
duration returns the total length of the storm
from_ari returns the "from ARI" (Average Recurrence Interval, also known as the Frequency or
Return Period)
to_ari returns the "to ARI" (Average Recurrence Interval, also known as the Frequency or Return
Period)
interval returns the time interval for each of the values in the temporal patterns table (which give
the percentage of the total storm that occurs in that period)
pattern[ ] is an array to return the values of the temporal pattern
max_num is the maximum size of the array pattern[]
ret_num returns the actual number of values returned in pattern
A function return value of zero indicates the data was successfully returned.
ID = 2405


Name
Integer Get_rainfall_temporal_pattern(Text rainfall_filename,Text storm_name,Integer &run,Text
&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integer
max_num,Integer &ret_num)
Description
The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in
".12dhdyro").
The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:
Design =>Drainage-Sewer =>Rainfall editor.
12d Model comes with some Rainfall Files others can be created by users.
The rainfall Temporal Patterns give the mathematical description of one or more storms.
The Get_rainfall_temporal_pattern call returns the information for one storm from the rainfall
Temporal Patterns in a Rainfall File.
The image of the rainfall Temporal Patterns from the "AUS ACT Canberra.12dhydro" file loaded
into the Rainfall File Editor is given in Get_rainfall_temporal_pattern(Text
rainfall_filename,Integer storm_num,Integer &run,Text &zone_filter,Real &duration,Real
&from_ari,Real &to_ari,Real &interval,Real pattern[],Integer max_num,Integer &ret_num) .
The difference between the two calls is that in the other call, the required storm in the Temporal
Patterns is given by a line number whereas in this function the storm is found by giving a storm
ID (storm name).


ID = 2406


Name
Integer Volume(Tin tin_1,Real ht,Element poly,Real ang,Real sep,Text report_name,Integer
report_mode,Real &cut,Real &fill,Real &balance)
Description
Calculate the volume from a tin tin_1 to a height ht inside the polygon poly using the end area
method. The sections used for the end area calculations are taken at the angle ang with a
separation of sep.
A report file is created called report_name which contains cut, fill and balance information.
If report_mode is equal to
0
1

only the total cut, fill and balance is given
the cut and fill value for every section is given.

If the file report_name is blank (""), no report is created.
The variables cut, fill and balance return the total cut, fill and balance.
A function return value of zero indicates the volume calculation was successful.
ID = 147


Name
Integer Volume(Tin tin_1,Tin tin_2,Element poly,Real ang,Real sep,Text report_name,Integer
report_mode,Real &cut,Real &fill,Real &balance)
Description
Calculate the volume from tin tin_1 to tin tin_2 inside the polygon poly using the end area
method. The sections used for the end area calculations are taken at the angle ang with a
separation of sep.
A report file is created called report_name which contains cut, fill and balance information.
If report_mode is equal to
0
1

only the total cut, fill and balance is given
the cut and fill value for every section is given.

If the file report_name is blank (""), no report is created.
The variables cut, fill and balance return the total cut, fill and balance.
A function return value of zero indicates the volume calculation was successful.
ID = 148


Name
Integer Volume_exact(Tin tin_1,Real ht,Element poly,Real &cut,Real &fill,Real &balance)
Description
Calculate the volume from a tin tin_1 to a height ht inside the polygon poly using the exact
method.
The variables cut, fill and balance return the total cut, fill and balance.
A function return value of zero indicates the volume calculation was successful.
ID = 149


Name
Integer Volume_exact(Tin tin_1,Tin tin_2,Element poly,Real &cut,Real &fill,Real &balance)
Description
Calculate the volume between tin tin_1 and tin tin_2 inside the polygon poly using the exact
method.
The variables cut, fill and balance return the total cut, fill and balance.
A function return value of zero indicates the volume calculation was successful.
ID = 150


Name
Integer Interface(Tin tin,Element string,Real cut_slope,Real fill_slope,Real sep,Real search_dist,Integer
side,Element &interface_string)
Description
Perform an interface to the tin tin along the Element string.
Use cut and fill slopes of value cut_slope and fill_slope and a distance between sections of
sep. The units for slopes is 1:x.
Search to a maximum distance search_dist to find an intersection with the tin.
If side is negative, the interface is made to the left hand side of the string.
If side is positive, the interface is made to the right hand side of the string.
The resulting string is returned as the Element interface_string.
A function return value of zero indicates the interface was successful.
ID = 151


Name
Integer Interface(Tin tin,Element string,Real cut_slope,Real fill_slope,Real sep,Real search_dist,Integer
side,Element &interface_string,Dynamic_Element &tadpoles)
Description
Perform the interface as given in the previous function with the addition that slope lines are
created and returned in the Dynamic_Element tadpoles.
A function return value of zero indicates the interface was successful.
ID = 152


Name
Integer Template_exists(Text template_name)
Description
Checks to see if a template with the name template_name exists in the project.
A non-zero function return value indicates the template does exist.
A zero function return value indicates that no template of that name exists.
Warning - this is the opposite of most 12dPL function return values
ID = 201


Name
Integer Get_project_templates(Dynamic_Text &template_names)
Description
Get the names of all the templates in the project.
The dynamic array of template names is returned in the Dynamic_Text template_names.
A function return value of zero indicates success.
ID = 233


Name
Integer Template_rename(Text original_name,Text new_name)
Description
Change the name of the Template original_name to the new name new_name.
A function return value of zero indicates the rename was successful.
ID = 424


Name
Integer Apply(Real xpos,Real ypos,Real zpos,Real ang,Tin tin,Text template,Element &xsect)
Description
Applies the templates template at the point (xpos,ypos,zpos) going out at the plan angle, ang.
The Tin tin is used as the surface for any interface calculations and the calculated section is
returned as the Element xsect.
A function return value of zero indicates the apply was successful.
ID = 399


Name
Integer Apply(Element string,Real start_ch,Real end_ch,Real sep,Tin tin,Text left_template,Text
right_template,Real &cut,Real &fill,Real &balance)
Description
Applies the templates left_template and right_template to the Element string going from start
chainage start_ch to end chainage end_ch with distance sep between each section. The Tin tin
is used as the surface for any interface calculations.
The variables cut, fill and balance return the total cut, fill and balance for the apply.
A function return value of zero indicates the apply was successful.
ID = 195


Name
Integer Apply(Element string,Real start_ch,Real end_ch,Real sep,Tin tin,Text left_template,Text
right_template,Real &cut,Real &fill,Real &balance,Text report)
Description
Applies templates as for the previous function with the addition of a report being created with the
name report.
A function return value of zero indicates the apply was successful.
ID = 196


Name
Integer Apply(Element string,Real start_ch,Real end_ch,Real sep,Tin tin,Text left_template,Text
right_template,Real &cut,Real &fill,Real &balance,Text report,Integer do_strings,Dynamic_Element
&strings,Integer do_sections,Dynamic_Element &sections,Integer section_colour,Integer
do_polygons,Dynamic_Element &polygons,Integer do_differences,Dynamic_Element &diffs,Integer
difference_colour)
Description
Applies templates as for the previous function with the additions:
If do_strings is non-zero, the strings are returned in strings.
If do_sections is non-zero, design sections of colour section_colour are returned in sections.
If do_polygons is non-zero, polygons are returned in polygons.
If do_differences is non-zero, difference sections of colour difference_colour are returned in
diffs.
A function return value of zero indicates the apply was successful.
ID = 197


Name
Integer Apply_many(Element string,Real separation,Tin tin,Text many_template_file,Real &cut,Real
&fill,Real &balance)
Description
Applies the templates as specified in the file many_template_file to the Element string with
distance sep between each section. The Tin tin is used as the surface for any interface
calculations.
The variables cut, fill and balance return the total cut, fill and balance for the apply.
A function return value of zero indicates success.
ID = 198


Name
Integer Apply_many(Element string,Real separation,Tin tin,Text many_template_file,Real
&cut_volume,Real &fill_volume,Real &balance_volume,Text report)
Description
Applies templates as for the previous function with the addition of a report being created with the
name report.
A function return value of zero indicates success.
ID = 199


Name
Integer Apply_many(Element string,Real separation,Tin tin,Text many_template_file,Real &cut,Real
&fill,Real &balance,Text report,Integer do_strings,Dynamic_Element &strings,Integer
do_sections,Dynamic_Element &sections,Integer section_colour,Integer do_polygons,Dynamic_Element
&polygons,Integer do_difference,Dynamic_Element &diffs,Integer difference_colour)
Description
Applies templates as for the previous function with the additions:
If do_strings is non-zero, the strings are returned in strings.
If do_sections is non-zero, design sections of colour section_colour are returned in sections.
If do_polygons is non-zero, polygons are returned in polygons.
If do_differences is non-zero, difference sections of colour difference_colour are returned in
diffs.
A function return value of zero indicates the apply was successful.
ID = 200


Name
Integer String_reverse(Element in,Element &out)
Description
This functions creates a reversed copy of the string Element in and the reversed string is
returned in out. That is, the chainage of string out starts at the end of the original string in and
goes to the beginning of the original string in.
If successful, the new reversed string is returned in Element out.
A function return value of zero indicates the reverse was successful.
ID = 1134


Name
Integer Extend_string(Element elt,Real before,Real after,Element &newelt)
Description
Extend the start and end of the string in Element elt.
The start of the string is extended by Real before.
The end of the string is extended by Real after.
If successful, the new element is returned in Element newelt.
A function return value of zero indicates the chainage was returned successfully.
ID = 664


Name
Integer Clip_string(Element string,Real chainage1,Real chainage2, Element &left_string,Element
&mid_string,Element &right_string)
Description
Clip a string about 2 chainages for the Element string. This will result in 3 new strings being
created.
The part that exists before Real chainage1 is returned in Element left_string.
The part that exists after Real chainage2 is returned in Element right_string.
The part that exists between Real chainage1 and Real chainage2 is returned in Element
mid_string.
A function return value of zero indicates the clip was successful.
Note
If the string is closed, right_string is not used.
If chainage1 is on or before the start of the string, left_string is not used.
If chainage2 is on or after the end of the string, right_string is not used.
If chainage1 is greater than chainage2, they are first swapped.

General

Page 889

12d Model Programming Language Manual

ID = 542


Name
Integer Clip_string(Element string,Integer direction,Real chainage1,Real chainage2,Element
&left_string,Element &mid_string,Element &right_string)
Description
Clip a string about 2 chainages for the string Element string. This will result in 3 new strings
being created. The clipped parts are returned relative to Integer direction. If direction is
negative, string is first reversed before being clipped.
The part that exists before Real chainage1 is returned in Element left_string.
The part that exists after Real chainage2 is returned in Element right_string.
The part that exists between Real chainage1 and Real chainage2 is returned in Element
mid_string.
A function return value of zero indicates the clip was successful.
Note
If the string is closed, right_string is not used.
If chainage1 is on or before the start of the string, left_string is not used.
If chainage2 is on or after the end of the string, right_string is not used.
If chainage1 is greater than chainage2, they are first swapped.
ID = 549


Name
Integer Polygons_clip(Integer npts_clip,Real xclip[],Real yclip[],Integer npts_in,Real xarray_in[],Real
yarray_in [],Real zarray_in [],Integer &npts_out,Real xarray_out[],Real yarray_out[],Real
yarray_out[])
Description
ID = 1440


Name
Integer Split_string(Element string,Real chainage,Element &string1,Element &string2)
Description
Split a string about a chainage for ELement string
This will result in 2 new strings being created.
The part that exists before Real chainage is returned in Element string1.
The part that exists after Real chainage is returned in Element string2.
A function return value of zero indicates the split was successful.

Page 890

General

Chapter

ID = 543


Name
Integer Join_strings(Element string1,Real x1,Real y1,Real z1,Element string2,Real x2,Real y2,Real
z2,Element &joined_string)
Description
Join the 2 strings Element string1 and Element string2 together to form 1 new string. The end of
string1 closest to x1,y1,z1 is joined to the end of string2 closest to x2,y2,z2.
The joined string is returned in Element joined_string.
A function return value of zero indicates the interface was successful.
Note
If the ends joined are no coincident, then a line between the ends is inserted.
The joined string is always of a type that preserves as much as possible about the original
strings.
If you join 2 strings of the same type, the joined string is of the same type.
ID = 544


Name
Integer Rectangle_clip(Real x1,Real y1,Real x2,Real y2,Integer npts_in,Real xarray_in [],Real yarray_in
[],Integer &npts_out,Real xarray_out[],Real yarray_out[])
Description
<no description>
ID = 1438


Name
Integer Place_mesh(Real x,Real y,Real z,Integer source_type,Text source_name,Vector3 offset,Vector3
rotate,Vector3 scale,Element &mesh_string)
Description
This call places a mesh on the vertex of a new super string, at the co-ordinate specified by
parameters x, y, z.
The source_type determines where the mesh will be loaded from: 
source_type = 0 for the Mesh Library
, 1 for from a file
The source_name specifies the name of the mesh in the library or file, as defined by the
source_type parameter.
You can also set any additional offset, rotation or scale parameters in the offset, rotate or scale
vectors. If you are not intending to set additional parameters, you must set them to at least
default values:
offset(0.0, 0.0, 0.0)
rotate(0.0, 0.0, 0.0)
scale(1.0, 1.0, 1.0);
The created super string will be stored in the element mesh_string.
This function returns 0 if it succeeds and non zero if it fails.
ID = 2803


Name
Integer Place_mesh(Real x,Real y,Real z,Text mesh_name,Vector3 offset,Vector3 rotate,Vector3 scale,Tin
anchor_tin,Element &mesh_string)
Description
This call places a mesh from the mesh library on the vertex of a new super string, at the coordinate specified by parameters x, y, z and anchors it to the tin anchor_tin.
The Text mesh_name specifies the name of the mesh in the library.
You can also set any additional offset, rotation or scale parameters in the offset, rotate or scale
vectors. If you are not intending to set additional parameters, you must set them to at least
default values:
offset(0.0, 0.0, 0.0)
rotate(0.0, 0.0, 0.0)
scale(1.0, 1.0, 1.0);
The created super string will be stored in the Element mesh_string.
This function returns 0 if it succeeds and non zero if it fails.
ID = 2804


Name
Integer Affine(Dynamic_Element elements,Real rotate_x,Real rotate_y,Real scale_x,Real scale_y,Real
dx,Real dy)
Description
Apply to all the elements in the Dynamic_Element elements, the Affine transformation with
parameters:
X axis rotation rotate_x (in radians)
Y axis rotation rotate_y (in radians)
X scale factor

scale_x

Y scale factor

scale_y

Translation

(dx,dy)

A function return value of zero indicates the transformation was successful.
ID = 414


Name
Integer Run_chain(Text chain)
Description
Run the chain in the file named chain.
A function return value of zero indicates the chain was successfully run.
ID = 2096


Name
Integer Convert(Dynamic_Element in_de,Integer mode,Integer pass_others,Dynamic_Element &out_de)
Description
Convert the strings in Dynamic_Element in_de using Integer mode and when mode equals
1

convert 2d to 3d

2

convert 3d to 2d if the 3d string has constant z

3

convert 4d to 3d (the text is dropped at each point)

The converted strings are returned by appending them to the Dynamic_Element out_de.
If Integer pass_others is non zero, any strings in in_de that cannot be converted will be copied
to out_de.
A function return value of zero indicates the conversion was successful.
ID = 139


Name
Integer Convert(Element elt,Text type,Element &newelt)
Description
Tries to convert the Element elt to the Element type given by Text type.
If successful, the new element is returned in Element newelt.
A function return value of zero indicates the conversion was successful.
ID = 655


Name
Integer Cut_strings(Dynamic_Element seed,Dynamic_Element strings,Dynamic_Element &result)
Description
Cut all the strings from the list Dynamic_Element seed with the strings from the list
Dynamic_Element strings and add to Dynamic_Element result.
The strings created are 4d strings which have at each vertex the string cut.
Cuts are only considered valid if they have heights. Any cut at a point where
the string height is null, will not be included.
A function return value of zero indicates the cut calculations was successful.
ID = 541


Name
Integer Cut_strings_with_nulls(Dynamic_Element seed,Dynamic_Element strings,Dynamic_Element
&result)
Description
Cut all the strings from the list Dynamic_Element seed with the strings from the list
Dynamic_Element strings and add to Dynamic_Element result.
The strings created are 4d strings which have at each vertex the string cut.
A function return value of zero indicates the cut calculations was successful.
ID = 548


Name
Integer Factor(Dynamic_Element elements,Real xf,Real yf,Real zf)
Description
Multiply all the co-ordinates of all the elements in the Dynamic_Element elements by the factors
(xf,yf,zf).
A function return value of zero indicates the factor was successful.
ID = 411


Name
Integer Fence(Dynamic_Element data_to_fence,Integer mode,Element user_poly,Dynamic_Element
&ret_inside,Dynamic_Element &ret_outside)
Description
This function fences all the Elements in the Dynamic_Element data_to_list against the user
supplied polygon Element user_poly.
The fence mode is given by Integer mode and when mode equals
0
1
2

get the inside of the polygon
get the outside of the polygon
get the inside and the outside of the polygon

If the inside is required, the data is returned by appending it to the Dynamic_Element ret_inside.
If the outside is required, the data is returned by appending it to the Dynamic_Element
ret_outside
A returned value of zero indicates there were no errors in the fence operation.

Fence(Dynamic_Element data_to_fence,Integer mode,Dynamic_Element
polygon_list,Dynamic_Element &ret_inside,Dynamic_Element &ret_outside)
Name
Integer Fence(Dynamic_Element data_to_fence,Integer mode,Dynamic_Element
polygon_list,Dynamic_Element &ret_inside,Dynamic_Element &ret_outside)
Description
This function fences all the Elements in the Dynamic_Element data_to_list against one or more
user supplied polygons given in the Dynamic_Element polygon_list.
The fence mode is given by Integer mode and when mode equals
0
1
2

get the inside of each of the polygons
get the outside of all the polygons
get the inside and the outside of the polygons

If the inside is required, the data is returned by appending it to the Dynamic_Element ret_inside.
If the outside is required, the data is returned by appending it to the Dynamic_Element
ret_outside
A returned value of zero indicates there were no errors in the fence operation Head to Tail
ID = 137


Name
Integer Filter(Dynamic_Element in_de,Integer mode,Integer pass_others,Real
tolerance,Dynamic_Element &out_de)
Description
Filter removes points from 2d and/or 3d strings that do not deviate by more than the distance
tolerance from the straight lines joining successive string points.
Hence the function Filter filters the data from in_de where mode means:
0

only 2d strings are filtered.

1

2d and 3d strings are filtered.

The filtered data is placed in the Dynamic_Element out_de.
If pass_others is non-zero, elements that can't be processed using the mode will be copied to
out_de.
A function return value of zero indicates the filter was successful.
ID = 140


Name
Integer Head_to_tail(Dynamic_Element in_list,Dynamic_Element &out_list)
Description
Perform head to tail processing on the data in Dynamic_Element in_list.
The resulting elements are returned by appending them to the Dynamic_Element out_list.
A function return value of zero indicates there were no errors in the head to tail process.
ID = 138


Name
Integer Helmert(Dynamic_Element elements,Real rotate,Real scale,Real dx,Real dy)
Description
Apply to all the elements in the Dynamic_Element elements, the Helmert transformation with
parameters:
Rotation

rotate (in radians)

Scale factor

scale

Translation

(dx,dy)

A function return value of zero indicates the transformation was successful.
ID = 413


Name
Integer Rotate(Dynamic_Element elements,Real xorg,Real yorg,Real ang)
Description
Rotate all the elements in the Dynamic_Element elements about the centre point (xorg,yorg)
through the angle ang.
A function return value of zero indicates the rotate was successful.
ID = 410


Name
Integer Swap_xy(Dynamic_Element elements)
Description
Swap the x and y co-ordinates for all the elements in the Dynamic_Element elements.
A function return value of zero indicates the swap was successful.
ID = 412


Name
Integer Translate(Dynamic_Element elements,Real dx,Real dy,Real dz)
Description
Translate translates all the elements in the Dynamic_Element elements by the amount
(dx,dy,dz).
A function return value of zero indicates the translate was successful.
ID = 400


Name
Integer Create_macro_function(Text function_name,Macro_Function &func)
Description
Create a user defined 12d Model Function with the name function_name and return the created
Function as func.
If a Function with the name function_name already exists, the function fails and a non-zero
function return value is returned.
A function return value of zero indicates the Function was successfully created.
ID = 1135


Name
Integer Function_recalc(Function func)
Description
Recalc (i.e. re-run) the Function func.
A function return value of zero indicates the recalc was successful.
ID = 1138


Name
Integer Function_exists(Text function_name)
Description
Checks to see if a 12d or user 12d Function with the name function_name exists.
A non-zero function return value indicates a Function does exist.
A zero function return value indicates that no Function of name function_name exists.
Warning - this is the opposite of most 12dPL function return values.
ID = 1141


Name
Integer Function_rename(Text original_name,Text new_name)
Description
Change the name of the Function original_name to the new name new_name.
A function return value of zero indicates the rename was successful.
ID = 425


Name
Integer Get_name(Function func,Text &name)

Page 912

12d Model Macro_Functions

Chapter

Description
Get the name of the Function func and return it in name.
A function return value of zero indicates the Function name was successfully returned.
ID = 1455


Name
Function Get_function(Text function_name)
Description
Get the Function with the name function_name and return it as the function return value.
LJG? what if the function does not exist?
The existence of a function with the name function_name can first be checked by the call
Function_exists(function_name).
ID = 1140


Name
Integer Get_macro_function(Text function_name,Macro_Function &func)
Description
Get the Macro Function with the name function_name and return it as func.
If the Function named function_name does not exist, or it does exist but is not a Macro
Function, then the function fails and a non-zero function return value is returned.
A function return value of zero indicates the Macro Function was successfully returned.
ID = 1142


Name
Integer Get_all_functions(Dynamic_Text &functions)
Description
Get all names of the 12d and user defined Function currently in the project. The Function names
are returned in the Dynamic_Text functions.
A function return value of zero indicates the Function names are returned successfully.
ID = 1139


Name
Integer Function_delete(Text function_name)
Description
Delete the Function with the name function_name.
Note that the data in the function is not deleted.

12d Model Macro_Functions

Page 913

12d Model Programming Language Manual

If a Function with the name function_name does not exist, the function fails and a non-zero
function return value is returned.
A function return value of zero indicates the Function was successfully deleted.
ID = 1137


Name
Integer Get_time_created(Function func,Integer &time)
Description
Get the time that the Function func was created and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2117


Name
Integer Get_time_updated(Function func,Integer &time)
Description
Get the time that the Function func was last updated and return the time in time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully returned.
ID = 2118


Name
Integer Set_time_updated(Function func,Integer time)
Description
Set the update time for the Function func to time.
The time time is given as seconds since January 1 1970.
A function return value of zero indicates the time was successfully set.
ID = 2119


Name
Integer Add_dependancy_file(Macro_Function func,Text name,Text file)
Description
Record in the Macro Function func, that the disk file named file is dependant on func and on a
recalc of func, needs to be checked for changes from the last time that func was recalced.
The dependency is added with the unique name name.
If a dependency called name already exists, a non-zero function return value is returned and no

Page 914

12d Model Macro_Functions

Chapter

dependency is added.
A function return value of zero indicates the dependency was successfully set.
ID = 1143


Name
Integer Add_dependancy_model(Macro_Function func,Text name,Model model)
Description
Record in the Macro Function func, that the Model model is dependant on func and on a recalc
of func, needs to be checked for changes from the last time that func was recalced.
If a dependency called name already exists, a non-zero function return value is returned and no
dependency is added.
A function return value of zero indicates the dependency was successfully set.
ID = 1144


Name
Integer Add_dependancy_tin(Macro_Function func,Text name,Tin tin)
Description
Record in the Macro Function func, that the Tin tin is dependant on func and on a recalc of
func, needs to be checked for changes from the last time that func was recalced.
If a dependency called name already exists, a non-zero function return value is returned and no
dependency is added.
A function return value of zero indicates the dependency was successfully set.
ID = 1145


Name
Integer Add_dependancy_template(Macro_Function func,Text name,Text template)
Description
Record in the Macro Function func, that the template name template is dependant on func and
on a recalc of func, needs to be checked for changes from the last time that func was recalced.
If a dependency called name already exists, a non-zero function return value is returned and no
dependency is added.
A function return value of zero indicates the dependency was successfully set.
ID = 1146


Name
Integer Add_dependancy_element(Macro_Function func,Text name,Element elt)

12d Model Macro_Functions

Page 915

12d Model Programming Language Manual

Description
Record in the Macro Function func, that the Element elt is dependant on func and on a recalc of
func, needs to be checked for changes from the last time that func was recalced.
If a dependency called name already exists, a non-zero function return value is returned and no
dependency is added.
A function return value of zero indicates the dependency was successfully set.
ID = 1147


Name
Integer Get_number_of_dependancies(Macro_Function func,Integer &count)
Description
For the Macro_Function func, return the number of dependencies that exist for func and return
the number in count.
A function return value of zero indicates the count was successfully returned.
ID = 1148


Name
Integer Get_dependancy_name(Macro_Function func,Integer i,Text &name)
Description
For the Macro_Function func, return the name of the i’th dependencies in name.
A function return value of zero indicates the name was successfully returned.
ID = 1149


Name
Integer Get_dependancy_type(Macro_Function func,Integer i,Text &type)
Description
For the Macro_Function func, return the type of the i’th dependencies as the Text type.
The valid types are:
unknown
File
Element
Model
Template
Tin
Integer
Real
Text
A function return value of zero indicates the type was successfully returned.
ID = 1150


Name
Integer Get_dependancy_file(Macro_Function func,Integer i,Text &file)
Description
For the Macro_Function func, if the i’th dependency is a file then return the name of the file in
name.
If the i’th dependency is not a file then a non-zero function return value is returned.
A function return value of zero indicates the file name was successfully returned.
ID = 1151


Name
Integer Get_dependancy_model(Macro_Function func,Integer i,Model &model)
Description
For the Macro_Function func, if the i’th dependency is a Model then return the Model in model.
If the i’th dependency is not a Model then a non-zero function return value is returned.
A function return value of zero indicates the Model was successfully returned.
ID = 1152


Name
Integer Get_dependancy_tin(Macro_Function func,Integer i,Tin &tin)
Description
For the Macro_Function func, if the i’th dependency is a Tin then return the Tin in tin.
If the i’th dependency is not a Tin then a non-zero function return value is returned.
A function return value of zero indicates the Tin was successfully returned.
ID = 1153


Name
Integer Get_dependancy_template(Macro_Function func,Integer i,Text &template)
Description
For the Macro_Function func, if the i’th dependency is a Template then return the template name
in template.
If the i’th dependency is not a Template then a non-zero function return value is returned.
A function return value of zero indicates the Tin was successfully returned.
ID = 1154


Name

12d Model Macro_Functions

Page 917

12d Model Programming Language Manual

Integer Get_dependancy_element(Macro_Function func,Integer i,Element &element)
Description
For the Macro_Function func, if the i’th dependency is an Element then return the Element in elt.
If the i’th dependency is not an Element then a non-zero function return value is returned.
A function return value of zero indicates the Element was successfully returned.
ID = 1155


Name
Integer Get_dependancy_data(Macro_Function func,Integer i,Text &text)
Description
For the Macro_Function func, a text description of the i’th dependency is returned in text.
For an Element, the text description is: model_name->element_name is return in text.
For a File/Model/Template/Tin, the text description is the name of the File/Model/Template/Tin.
For an Integer, the text description is the Integer converted to Text.
For a Real, the text description is the Real converted to Text. LJG? how many decimals
For a Text, the text description is just the text.
A function return value of zero indicates the Macro_Function description was successfully
returned.
ID = 1156


Name
Integer Get_dependancy_type(Macro_Function func,Text name,Text &type)
Description
For the Macro_Function func, return the type of the dependency with the name name as the Text
type.
The valid types are:
unknown
File
Element
Model
Template
Tin
Integer
Real
Text

// not implemented or accessible from macros
// not implemented or accessible from macros
// not implemented or accessible from macros

If a dependency called name does not exist then a non-zero function return value is returned.
A function return value of zero indicates the type was successfully returned.
ID = 1157


Name

Page 918

12d Model Macro_Functions

Chapter

Integer Get_dependancy_file(Macro_Function func,Text name,Text &file)
Description
For the Macro_Function func, get the dependency called name and if it is a File, return the file
name as file.
If no dependency called name exists, or it does exist and it is not a file, then a non-zero function
return value is returned.
LJG? if error, is text returned as blank?
A function return value of zero indicates the file name was successfully returned.
ID = 1158


Name
Integer Get_dependancy_model(Macro_Function func,Text name,Model &model)
Description
For the Macro_Function func, get the dependency called name and if it is a Model, return the
Model as model.
If no dependency called name exists, or it does exist and it is not a Model, then a non-zero
function return value is returned.
LJG? if error, is model returned as null?
A function return value of zero indicates the Model was successfully returned.
ID = 1159


Name
Integer Get_dependancy_tin(Macro_Function func,Text name,Tin &tin)
Description
For the Macro_Function func, get the dependency called name and if it is a Tin, return the Tin as
tin.
If no dependency called name exists, or it does exist and it is not a Tin, then a non-zero function
return value is returned.
LJG? if error, is tin returned as null?
A function return value of zero indicates the Tin was successfully returned.
ID = 1160


Name
Integer Get_dependancy_template(Macro_Function func,Text name,Text &template)
Description
For the Macro_Function func, get the dependency called name and if it is a Template, return the
Template name as template.
If no dependency called name exists, or it does exist and it is not a Template, then a non-zero

12d Model Macro_Functions

Page 919

12d Model Programming Language Manual

function return value is returned.
LJG? if error, is template returned as blank?
A function return value of zero indicates the template name was successfully returned.
ID = 1161


Name
Integer Get_dependancy_element(Macro_Function func,Text name,Element &element)
Description
For the Macro_Function func, get the dependency called name and if it is an Element, return the
Element as elt.
If no dependency called name exists, or it does exist and it is not an Element, then a non-zero
function return value is returned.
LJG? if error, is elt returned as null?
A function return value of zero indicates the Element was successfully returned.
ID = 1162


Name
Integer Get_dependancy_data(Macro_Function func,Text name,Text &text)
Description
For the Macro_Function func, get the dependency called name and if it is a Text, return the Text
as text.
If no dependency called name exists, or it does exist and it is not a Text, then a non-zero function
return value is returned.
LJG? if error, is text returned as blank?
A function return value of zero indicates the Text was successfully returned.
ID = 1163


Name
Integer Delete_dependancy(Macro_Function func,Text name)
Description
For the Macro_Function func, if the dependency called name exist then it is deleted from the list
of dependencies for func.
Warning: if a dependency is deleted then the dependency number of all dependencies after the
deleted one will be reduced by one.
If no dependency called name exists then a non-zero function return value is returned.
A function return value of zero indicates the dependency was successfully deleted.
ID = 1164


Name
Integer Delete_all_dependancies(Macro_Function func)
Description
For the Macro_Function func, delete all the dependencies.
A function return value of zero indicates all the dependency were successfully deleted.
ID = 1165


Name
Integer Get_id(Function func,Uid &id)
Description
For the Function/Macro_Function func, get its unique Uid in the Project and return it in id.
A function return value of zero indicates the Uid was successfully returned.
ID = 1909


Name
Integer Get_id(Function func,Integer &id)
Description
For the Function/Macro_Function func, get its unique id in the Project and return it in id.
A function return value of zero indicates the id was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_id(Function func,Uid &id) instead.
ID = 1177


Name
Integer Get_function_id(Element elt,Uid &id)
Description
For an Element elt, check if it has a function Uid and if it has, return it in id.
LJG? What if it doesn’t have a function Uid. Is that a error return code or is something like 0
returned?
A function return value of zero indicates the Uid was successfully returned.
ID = 1910


Name
Integer Get_function_id(Element elt,Integer &id)
Description

12d Model Macro_Functions

Page 921

12d Model Programming Language Manual

For an Element elt, check if it has a function id and if it has, return it in id.
LJG? What if it doesn’t have a function id. Is that a error return code or is something like 0
returned?
A function return value of zero indicates the id was successfully returned.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_function_id(Element elt,Uid &id) instead.
ID = 1178


Name
Integer Set_function_id(Element elt,Uid id)
Description
For an Element elt, set its function Uid to id.
A function return value of zero indicates the function Uid was successfully set.
ID = 1911


Name
Integer Set_function_id(Element elt,Integer id)
Description
For an Element elt, set its function id to id.
A function return value of zero indicates the function id was successfully set.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Set_function_id(Element elt,Uid id) instead.
ID = 1179


Name
Function Get_function(Uid function_id)
Description
Find the Function/Macro_Function with the Uid function_id.
The Function is returned as the function return value.
If there is no Function/Macro_Function with the Uid function_id, then a null Function/
Macro_Function is returned as the function return value.
ID = 1916


Name
Function Get_function(Integer function_id)
Description
Find the Function/Macro_Function with the Id function_id.
Page 922

12d Model Macro_Functions

Chapter

The Function is returned as the function return value.
If there is no Function/Macro_Function with the Id function_id, then a null Function/
Macro_Function is returned as the function return value.
Deprecation Warning - this function has now been deprecated and will no longer exist unless
special compile flags are used. Use Get_function(Uid function_id) instead.
ID = 1188


Name
Integer Function_exists(Uid function_id)
Description
Checks to see if a Function/Macro_Function with Uid function_id exists.
A non-zero function return value indicates that a Function does exist.
A zero function return value indicates that no Function exists.
Warning this is the opposite of most 12dPL function return values
ID = 1915


Name
Integer Function_attribute_exists(Macro_Function fcn,Text att_name)
Integer Function_attribute_exists(Function fcn,Text att_name)
Description
Checks to see if an attribute with the name att_name exists for the Macro_Function/Function
fcn.
A non-zero function return value indicates that the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1109


Name
Integer Function_attribute_exists(Function fcn,Text name,Integer &no)
Integer Function_attribute_exists(Macro_Function fcn,Text name,Integer &no)
Description
Checks to see if an attribute with the name att_name exists for the Macro_Function/Function
fcn.
If the attribute exists, its position is returned in Integer no.
This position can be used in other Attribute functions described below.

12d Model Macro_Functions

Page 923

12d Model Programming Language Manual

A non-zero function return value indicates the attribute does exist.
A zero function return value indicates that no attribute of that name exists.
Warning this is the opposite of most 12dPL function return values
ID = 1110


Name
Integer Function_attribute_delete(Macro_Function fcn,Text att_name)
Integer Function_attribute_delete(Function fcn,Text att_name)
Description
Delete the attribute with the name att_name from the Macro_Function/Function fcn.
A function return value of zero indicates the attribute was deleted.
ID = 1111


Name
Integer Function_attribute_delete(Macro_Function fcn,Integer att_no)
Integer Function_attribute_delete(Function fcn,Integer att_no)
Description
Delete the attribute with the number att_no from the Macro_Function/Function fcn.
A function return value of zero indicates the attribute was deleted.
ID = 1112


Name
Integer Function_attribute_delete_all(Function fcn)
Integer Function_attribute_delete_all(Macro_Function fcn)
Description
Delete all the attributes from the Macro_Function/Function fcn.
A function return value of zero indicates all the attribute were deleted.
ID = 1113


Name

Page 924

12d Model Macro_Functions

Chapter

Integer Function_attribute_dump(Function fcn)
Integer Function_attribute_dump(Macro_Function fcn)
Description
Write out information about the Macro_Function/Function attributes to the Output Window.
A function return value of zero indicates the function was successful.
ID = 1114


Name
Integer Function_attribute_debug(Macro_Function fcn)
Integer Function_attribute_debug(Function fcn)
Description
Write out even more information about the Macro_Function/Function attributes to the Output
Window.
A function return value of zero indicates the function was successful.
ID = 1115


Name
Integer Get_function_number_of_attributes(Function fcn,Integer &no_atts)
Integer Get_function_number_of_attributes(Macro_Function fcn,Integer &no_atts)
Description
Get the number of top level attributes in the Macro_Function/Function fcn and return it in
no_atts.
A function return value of zero indicates the number is successfully returned
ID = 1116


Name
Integer Get_function_attribute(Macro_Function fcn,Text att_name,Text &att)
Integer Get_function_attribute(Function fcn,Text att_name,Text &txt)
Description
For the Macro_Function/Function fcn, get the attribute called att_name and return the attribute
value in txt. The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
12d Model Macro_Functions

Page 925

12d Model Programming Language Manual

att_name.
ID = 1117


Name
Integer Get_function_attribute(Macro_Function fcn,Text att_name,Integer &int)
Integer Get_function_attribute(Function fcn,Text att_name,Integer &int)
Description
For the Macro_Function/Function fcn, get the attribute called att_name and return the attribute
value in int. The attribute must be of type Integer.
If the attribute is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1118


Name
Integer Get_function_attribute(Function fcn,Text att_name,Real &real)
Integer Get_function_attribute(Macro_Function fcn,Text att_name,Real &real)
Description
For the Macro_Function/Function fcn, get the attribute called att_name and return the attribute
value in real. The attribute must be of type Real.
If the attribute is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1119


Name
Integer Get_function_attribute(Function fcn,Integer att_no,Text &txt)
Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Text &txt)
Description
For the Macro_Function/Function fcn, get the attribute with attribute number att_no and return
the attribute value in txt. The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.

Page 926

12d Model Macro_Functions

Chapter

A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1120


Name
Integer Get_function_attribute(Function fcn,Integer att_no,Integer &int)
Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Integer &int)
Description
For the Macro_Function/Function fcn, get the attribute with attribute number att_no and return
the attribute value in int. The attribute must be of type Integer.
If the attribute is not of type Integer then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1121


Name
Integer Get_function_attribute(Function fcn,Integer att_no,Real real)
Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Real real)
Description
For the Macro_Function/Function fcn, get the attribute with attribute number att_no and return
the attribute value in real. The attribute must be of type Real.
If the attribute is not of type Real then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1122


Name
Integer Get_function_attribute_name(Macro_Function fcn,Integer att_no,Text &txt)
Integer Get_function_attribute_name(Function fcn,Integer att_no,Text &txt)
Description
For the Macro_Function/Function fcn, get the attribute with attribute number att_no and return

12d Model Macro_Functions

Page 927

12d Model Programming Language Manual

the attribute value in txt. The attribute must be of type Text.
If the attribute is not of type Text then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1123


Name
Integer Get_function_attribute_type(Macro_Function fcn,Text att_name,Integer &att_type)
Integer Get_function_attribute_type(Function fcn,Text att_name,Integer &att_type)
Description
For the Macro_Function/Function fcn, get the type of the attribute called att_name and return
the attribute type in att_type.
A function return value of zero indicates the attribute type is successfully returned.
ID = 1124


Name
Integer Get_function_attribute_type(Function fcn,Integer att_no,Integer &att_type)
Integer Get_function_attribute_type(Macro_Function fcn,Integer att_no,Integer &att_type)
Description
For the Macro_Function/Function fcn, get the type of the attribute with attribute number att_no
and return the attribute type in att_type.
A function return value of zero indicates the attribute type is successfully returned.
ID = 1125


Name
Integer Get_function_attribute_length(Function fcn,Text att_name,Integer &att_len)
Integer Get_function_attribute_length(Macro_Function fcn,Text att_name,Integer &att_len)
Description
For the Macro_Function/Function fcn, get the length in bytes of the attribute of name att_name.
The number of bytes is returned in att_len.

Page 928

12d Model Macro_Functions

Chapter

This is mainly for use with attributes of types Text and Binary (blobs)
A function return value of zero indicates the attribute length is successfully returned.
ID = 1126


Name
Integer Get_function_attribute_length(Function fcn,Integer att_no,Integer &att_len)
Integer Get_function_attribute_length(Macro_Function fcn,Integer att_no,Integer &att_len)
Description
For the Macro_Function/Function fcn, get the length in bytes of the attribute with attribute
number att_no. The number of bytes is returned in att_len.
This is mainly for use with attributes of types Text and Binary (blobs)
A function return value of zero indicates the attribute length is successfully returned.
ID = 1127


Name
Integer Set_function_attribute(Function fcn,Text att_name,Text txt)
Integer Set_function_attribute(Macro_Function fcn,Text att_name,Text txt)
Description
For the Macro_Function/Function fcn,
if the attribute called att_name does not exist then create it as type Text and give it the value
txt.
if the attribute called att_name does exist and it is type Text, then set its value to txt.
If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1128


Name
Integer Set_function_attribute(Function fcn,Text att_name,Integer int)
Integer Set_function_attribute(Macro_Function fcn,Text att_name,Integer int)
Description

12d Model Macro_Functions

Page 929

12d Model Programming Language Manual

For the Macro_Function/Function fcn,
if the attribute called att_name does not exist then create it as type Integer and give it the value
int.
if the attribute called att_name does exist and it is type Integer, then set its value to int.
If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1129


Name
Integer Set_function_attribute(Macro_Function fcn,Text att_name,Real real)
Integer Set_function_attribute(Function fcn,Text att_name,Real real)
Description
For the Macro_Function/Function fcn,
if the attribute called att_name does not exist then create it as type Real and give it the value
real.
if the attribute called att_name does exist and it is type Real, then set its value to real.
If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute called
att_name.
ID = 1130


Name
Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Text txt)
Integer Set_function_attribute(Function fcn,Integer att_no,Text txt)
Description
For the Macro_Function/Function fcn,
if the attribute with attribute number att_no does not exist then create it as type Text and give it
the value txt.
if the attribute with attribute number att_no does exist and it is type Text, then set its value to
txt.
If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute with
attribute number att_no.

Page 930

12d Model Macro_Functions

Chapter

ID = 1131


Name
Integer Set_function_attribute(Function fcn,Integer att_no,Integer int)
Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Integer int)
Description
For the Macro_Function/Function fcn,
if the attribute with attribute number att_no does not exist then create it as type Integer and
give it the value int.
if the attribute with attribute number att_no does exist and it is type Integer, then set its value to
int.
If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zero
return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1132


Name
Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Real real)
Integer Set_function_attribute(Function fcn,Integer att_no,Real real)
Description
For the Macro_Function/Function fcn,
if the attribute with attribute number att_no does not exist then create it as type Real and give
it the value real.
if the attribute with attribute number att_no does exist and it is type Real, then set its value to
real.
If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zero return
value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_function_attribute_type call can be used to get the type of the attribute with
attribute number att_no.
ID = 1133


Name
Integer Get_function_attributes(Function fcn,Attributes &att)

12d Model Macro_Functions

Page 931

12d Model Programming Language Manual

Integer Get_function_attributes(Macro_Function fcn,Attributes &att)
Description
For the Function/Macro_Function fcn, return the Attributes for the Function/Macro_Function as
att.
If fcn has no Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute is successfully returned.
ID = 1992


Name
Integer Set_function_attributes(Function fcn,Attributes att)
Integer Set_function_attributes(Macro_Function fcn,Attributes att)
Description
For the Function/Macro_Function fcn, set the Attributes for the Function/Macro_Function fcn to
att.
A function return value of zero indicates the attribute is successfully set.
ID = 1993


Name
Integer Get_function_attribute(Function fcn,Text att_name,Uid &uid)
Integer Get_function_attribute(Macro_Function fcn,Text att_name,Uid &uid)
Description
From the Function/Macro_Function fcn, get the attribute called att_name and return the attribute
value in uid. The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1994


Name
Integer Get_function_attribute(Macro_Function fcn,Text att_name,Attributes &att)
Integer Get_function_attribute(Function fcn,Text att_name,Attributes &att)
Description
From the Function/Macro_Function fcn, get the attribute called att_name and return the attribute
value in att. The attribute must be of type Attributes.

Page 932

12d Model Macro_Functions

Chapter

If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1995


Name
Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Uid &uid)
Integer Get_function_attribute(Function fcn,Integer att_no,Uid &uid)
Description
From the Function/Macro_Function fcn, get the attribute with number att_no and return the
attribute value in uid. The attribute must be of type Uid.
If the attribute is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1996


Name
Integer Get_function_attribute(Function fcn,Integer att_no,Attributes &att)
Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Attributes &att)
Description
From the Function/Macro_Function fcn, get the attribute with number att_no and return the
attribute value in att. The attribute must be of type Attributes.
If the attribute is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully returned.
Note - the Get_attribute_type call can be used to get the type of the attribute with attribute
number att_no.
ID = 1997


Name
Integer Set_function_attribute(Function fcn,Text att_name,Uid uid)
Integer Set_function_attribute(Macro_Function fcn,Text att_name,Uid uid)
Description
For the Function/Macro_Function fcn,

12d Model Macro_Functions

Page 933

12d Model Programming Language Manual

if the attribute called att_name does not exist then create it as type Uid and give it the value
uid.
if the attribute called att_name does exist and it is type Uid, then set its value to att.
If the attribute exists and is not of type Uid then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1998


Name
Integer Set_function_attribute(Macro_Function fcn,Text att_name,Attributes att)
Integer Set_function_attribute(Function fcn,Text att_name,Attributes att)
Description
For the Function/Macro_Function fcn,
if the attribute called att_name does not exist then create it as type Attributes and give it the
value att.
if the attribute called att_name does exist and it is type Attributes, then set its value to att.
If the attribute exists and is not of type Attributes then a non-zero return value is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.
ID = 1999


Name
Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Uid uid)
Integer Set_function_attribute(Function fcn,Integer att_no,Uid uid)
Description
For the Function/Macro_Function fcn, if the attribute number att_no exists and it is of type Uid,
then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Uid then a non-zero return value is
returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2000


Name
Integer Set_function_attribute(Function fcn,Integer att_no,Attributes att)
Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Attributes att)
Description
For the Function/Macro_Function fcn, if the attribute number att_no exists and it is of type
Attributes, then its value is set to att.
If there is no attribute with number att_no then nothing can be done and a non-zero return code
is returned.
If the attribute of number att_no exists and is not of type Attributes then a non-zero return value
is returned.
A function return value of zero indicates the attribute value is successfully set.
Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.
ID = 2001


Name
Function_Property_Collection Create_function_property_collection()
Description
Create a Function_Property_Collection.
Function_Property_Collection’s are used to transfer information about a function such as the
Apply Many function instead of needing a large number of function calls which would need to be
updated every time a new parameter was added to the Apply Many,
The function return value is the created Function_Property_Collection.
ID = 2726


Name
Integer Set_property(Function_Property_Collection collection,Text name,Integer int_val)
Description
In the Function Property Collection collection, set the value of the Integer property called name
to int_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2727


Name
Integer Set_property(Function_Property_Collection collection,Text name,Real real_val)
Description
In the Function Property Collection collection, set the value of the Real property called name to
real_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2728


Name
Integer Set_property(Function_Property_Collection collection,Text name,Text txt_val)
Description
In the Function Property Collection collection, set the value of the Text property called name to

Page 936

12d Model Macro_Functions

Chapter

txt_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2729


Name
Integer Set_property_colour(Function_Property_Collection collection,Text name,Text colour_name)
Description
In the Function Property Collection collection, set the value of the Colour property called name
to the colour given by colour_name.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2730


Name
Integer Set_property(Function_Property_Collection collection,Text name,Element element)
Description
In the Function Property Collection collection, set the value of the Element property called
name to element.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2731


Name
Integer Set_property(Function_Property_Collection collection,Text name,Tin tin)
Description
In the Function Property Collection collection, set the tin of the Tin property called name to tin.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.

12d Model Macro_Functions

Page 937

12d Model Programming Language Manual

ID = 2732


Name
Integer Set_property(Function_Property_Collection collection,Text name,Model model)
Description
In the Function Property Collection collection, set the model of the Model property called name
to model.
For more information on which properties are available for the function in question, please see
the section Function Properties .
LJG? is it non-zero return if name doesn’t exist or it is not Integer property?
A function return value of zero indicates the value is successfully set.
ID = 2733


Name
Integer Get_property(Function_Property_Collection collection,Text name,Integer &int_val)
Description
From the Function Property Collection collection, get the value of the Integer property called
name and return it in int_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Integer.
A function return value of zero indicates the value was successfully returned.
ID = 2737


Name
Integer Get_property(Function_Property_Collection collection,Text name,Real &real_val)
Description
From the Function Property Collection collection, get the value of the Real property called name
and return it in real_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Real.
A function return value of zero indicates the value was successfully returned.
ID = 2738


Name
Integer Get_property(Function_Property_Collection collection,Text name,Text &txt_val)
Description
From the Function Property Collection collection, get the value of the Text property called name
and return it in txt_val.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Text.
A function return value of zero indicates the value was successfully returned.
ID = 2739


Name
Integer Get_property(Function_Property_Collection collection,Text name,Tin &tin)
Description
From the Function Property Collection collection, get the Tin from the Tin property called name
and return it in tin.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Tin.
A function return value of zero indicates the value was successfully returned.
ID = 2740


Name
Integer Get_property(Function_Property_Collection collection,Text name,Element &element)
Description
From the Function Property Collection collection, get the Element from the Element property
called name and return it in element.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Element.
A function return value of zero indicates the value was successfully returned.
ID = 2741


Name
Integer Get_property(Function_Property_Collection collection,Text name,Model &model)
Description

12d Model Macro_Functions

Page 939

12d Model Programming Language Manual

From the Function Property Collection collection, get the Model from the Tin property called
name and return it in model.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Model.
A function return value of zero indicates the value was successfully returned.
ID = 2742


Name
Integer Get_property_colour(Function_Property_Collection collection,Text name,Text &colour_name)
Description
From the Function Property Collection collection, get the Colour from the Colour property called
name and return the name of the colour in colour_name.
For more information on which properties are available for the function in question, please see
the section Function Properties .
The function return value is non zero if there is no property called name, or if it does exist, it is
not of type Colour.
A function return value of zero indicates the value was successfully returned.
ID = 2743


Name
Integer Create_apply_many_function(Text function_name,Function_Property_Collection
properties,Apply_Many_Function &function,Text &msg)
Description
Create an Apply Many function with the function name function_name using the values supplied
in the Function_Property_Collection properties.
For more information on which properties are available, please see Apply Many Function
Properties .
Any errors such as missing properties, or properties of an incorrect type, will be reported in the
Text msg.
A non zero function return value indicates that there was a problem creating the Apply Many
function.
A function return value of zero indicates the Apply Many was successfully created.
ID = 2734


Name
Integer Set_apply_many_function_properties(Apply_Many_Function function,
Page 940

12d Model Macro_Functions

Chapter

Function_Property_Collection properties,Text &msg)
Description
For the Apply_Many_Function function, set the values of function to be those in the
Function_Property_Collection properties.
For more information on which properties are available, please see Apply Many Function
Properties .
Any errors such as missing properties, or properties of an incorrect type, will be reported in the
Text msg.
A non zero function return value indicates that there was a problem creating the Apply Many
function.
A function return value of zero indicates the Apply Many was successfully created.
ID = 2735


Name
Integer Get_apply_many_function_properties(Apply_Many_Function
function,Function_Property_Collection &properties)
Description
Load the values of the Function_Property_Collection properties from the Apply Many Function
function.
For more information on which properties are available, please see Apply Many Function
Properties .
A function return value of zero indicates the get was successful.
ID = 2736


Name
Integer Get_apply_many_function(Text name, Apply_Many_Function &function)
Description
Get and existing 12d Model Apply Many Function with the name name and create an
Apply_Many_Function with the values from the existing 12d MOdel Apply Many Function.
A non zero function return value indicates that there was no 12d Model Apply Many Function with
the name name, or thee was a problem creating the Apply_Many_Function.
A function return value of zero indicates the creation of the Apply_Many_Function was
successful.
ID = 2748


Name
tin
Mtf
Separation
start_chainage
end_chainage
left_prefix
right_prefix
Reference
Hinge
report_file
road_surface_strings
road_surface_sections
road_surface_colour
boxing_strings_N
boxing_sections_N
boxing_colour_N
difference_sections
difference_colour
polygons_model
road_boundary_model
create_arcs

chord_arc_tolerance
volume_correction
partial_interfaces
sections_as_4d
copy_hinge

Page 942

Type
Tin / Text
Text
Real
Real

Description
The tin to be used by the apply many
The mtf used by the apply many
The separation between sections
The optional start chainage for the apply
many
Real
The optional end chainage for the apply
many
Text
The optional left prefix for template names
Text
The optional right prefix for template names
Element
The centreline / reference string to run the
apply many down
Element
The optional hinge string
Text
The optional report file
Model/Text The road strings model to be created by the
apply many
Model/Text The road sections model to be created by the
apply many
Text
The name of the colour for the road surface
strings and sections
Model/Text The optional model or name of a model for
boxing strings for layer N (1 to 8)
Model/ Text The optional model or name of a model for
boxing sections for layer N (1 to 8)
Text
The optional name of the colour for the
strings created for boxing layer N (1 to 8)
Model/Text The optional model or name of a model for
difference sections
Text
The name of the colour for difference
sections
Model/Text The optional model or name of a model for
apply many polygons
Model/Text The optional model or name of a model for
the road boundary
Integer
What type of arcs to create
0 - no arcs
1 - alignments
2 - polylines
3 - super strings
Real
The chord arc tolerance value
Integer
Whether or not to perform volume correction
(0 or 1)
Integer
Whether or not to create partial interfaces (0
or 1)
Integer
Whether or not to create sections as 4d
strings (0 or 1)
Integer
Whether or not to copy the hinge string (0 or
1)
12d Model Macro_Functions

Chapter

use_stripping
show_stripping_volumes

Integer
Integer

calculate_natural_surface_to_de
sign_volumes
calculate_road_to_subgrade_vol
ume
calculate_inter_boxing_layer_v
olumes
map_file
create_road_tin
road_tin
road_tin_colour
road_tin_model

Integer

Text
Integer
Tin/Text
Text
Model/Text

create_depth_range_polygons

Integer

depth_range_file

Text

depth_range_polygons_model

Model/Text

road_tin_number_extra_models

Integer

road_tin_extra_model_N

Model/Text

calculate_sight_distance

Integer

sight_distance_min
sight_distance_max
sight_distance_eye_height
sight_distance_eye_offset

Real
Real
Real
Real

sight_distance_target_height
sight_distance_target_offset
sight_distance_calc_interval
sight_distance_trial_interval
sight_distance_report

Real
Real
Real
Real
Text

create_separation_barrier_lines

Integer

barrier_distance
min_barrier_road_length
min_barrier_line_length
min_barrier_between
filter_cross_sections

Real
Real
Real
Real
Integer

filter_sections_model

Model/Text

filter_sections_colour

Text

Integer
Integer

Whether or not to use stripping (0 or 1)
Whether or not to show detailed stripping
volumes (0 or 1)
Whether or not to calculate natural surface to
design volumes (0 or 1)
Whether or not to calculate road to subgrade
volumes (0 or 1)
Whether or not to calculate inter boxing
layer volumes (0 or 1)
The optional name of a map file to create
Whether or not to create a tin (0 or 1)
The tin or the name of the tin to create
The name of the colour for the created tin
The model or the name of the model to
create the tin in
Whether or not to create depth range
polygons (0 or 1)
The name of the depth range file to use when
creating depth range polygons
The model or name of the model to create
depth range polygons in
The optional number of extra models for the
road tin
The model or name of the Nth model to be
used as an extra model for the road tin
Whether or not to calculate sight distances (0
or 1)
The minimum sight distance
The maximum sight distance
The eye height for the sight distance calcs
The eye offset for the sight distance calcs
The target height for the sight distance calcs
The target offset for the sight distance calcs
The calc interval for the sight distance calcs
The trial interval for the sight distance calcs
The optional report for the sight distance
calc
Whether or not to create separation and
barrier lines (0 or 1)
The barrier distance
The min barrier road length
The min barrier line length
The min distance between barriers
Whether or not to filter cross sections (0 or
1)
The model or name of model for filtered
cross sections
The name of the colour for filtered cross
sections

12d Model Macro_Functions

Page 943

12d Model Programming Language Manual

filter_sections_interval
filter_sections_tolerance

Real
Real

filter_sections_include_start

Integer

filter_sections_include_end

Integer

filter_sections_include_equalitie
s
filter_sections_include_h_tange
nt
filter_sections_include_v_tange
nt
filter_sections_include_crest_sa
g
filter_sections_spc_file

Integer

generate_long_section_plot

Integer

long_section_ppf
long_section_plotter_type

Text
Text

long_section_plot_stem
long_section_plot_clean

Text
Integer

generate_cross_section_plot

Integer

cross_section_ppf
cross_section_plotter_type

Text
Text

cross_section_plot_stem
cross_section_plot_clean

Text
Integer

create_tadpoles
tadpole_model
tadpole_interval
tadpole_search_width
tadpole_search_side

Integer
Model/Text
Real
Real
Integer

tadpole_count
tadpole_N_string_1_name

Integer
Text

tadpole_N_string_2_name

Text

tadpole_N_start_ch

Real

Page 944

Integer
Integer
Integer
Text

The interval at which to filter cross sections
The culling tolerance for filtering cross
sections
Whether or not to include the start section (0
or 1)
Whether or not to include the end section (0
or 1)
Whether or not to include equalities (0 or 1)
Whether or not to include horizontal tangent
sections (0 or 1)
Whether or not to include vertical tangent
sections (0 or 1)
Whether or not to include crest/sag sections
(0 or 1)
The optional special chainages file for
filtering cross sections
Whether or not to generate a long section
plot (0 or 1)
The name of the ppf for the long section plot
The name of the plotter to plot a long section
with
The stem for the long section plot
Whether or not to clean the long section plot
model first (0 or 1)
Whether or not to generate a cross section
plot (0 or 1)
The name of the ppf for the cross section plot
The name of the plotter to plot a cross
section with
The stem for the cross section plot
Whether or not to clean the cross section plot
model first (0 or 1)
Whether or not to create tadpoles (0 or 1)
The model or name of model for tadpoles
The interval at which to create tadpoles
The search width for creating tadpoles
The side on which to create tadpoles 
0 - Left and Right
1 - Left
2 - Right
The number of tadpole types to be created
The name of string 1 for the Nth tadpole
entry
The name of string 2 for the Nth tadpole
entry
The start chainage for the Nth tadpole entry
(optional)

12d Model Macro_Functions

Chapter

tadpole_N_end_ch

Real

tadpole_N_symbol_1_name

Text

tadpole_N_symbol_1_colour

Text

tadpole_N_symbol_1_size

Real

tadpole_N_symbol_1_rotation

Real

tadpole_N_symbol_1_offset_x

Real

tadpole_N_symbol_1_offset_y

Real

tadpole_N_symbol_1_percent

Real

tadpole_N_symbol_2_name

Text

tadpole_N_symbol_2_colour

Text

tadpole_N_symbol_2_size

Real

tadpole_N_symbol_2_rotation

Real

tadpole_N_symbol_2_offset_x

Real

tadpole_N_symbol_2_offset_y

Real

tadpole_N_symbol_2_percent

Real

The end chainage for the Nth tadpole entry
(optional)
The name of the first tadpole symbol for the
Nth tadpole entry
The name of the colour of the first tadpole
symbol for the Nth tadpole entry
The size of the first tadpole symbol for the
Nth tadpole entry (optional)
The rotation of the first tadpole symbol for
the Nth tadpole entry (optional)
The x offset of the first tadpole symbol for
the Nth tadpole entry (optional)
The y ofset of the first tadpole symbol for the
Nth tadpole entry (optional)
The percentage modifier for the first symbol
for the Nth tadpole entry (optional)
The name of the second tadpole symbol for
the Nth tadpole entry
The name of the colour of the second tadpole
symbol for the Nth tadpole entry
The size of the second tadpole symbol for
the Nth tadpole entry (optional)
The rotation of the second tadpole symbol
for the Nth tadpole entry (optional)
The x offset of the second tadpole symbol
for the Nth tadpole entry (optional)
The y offset of the second tadpole symbol
for the Nth tadpole entry (optional)
The percentage modifier for the second
symbol for the Nth tadpole entry (optional)

12d Model Macro_Functions

Page 945

12d Model Programming Language Manual

Plot Parameters
12d Model plot parameters control the look of the different plots that 12d Model can generate.
The Plot_Parameter_File is a 12d Model Variable that can contain plot parameters and the plot
parameter values for a given plot type.
Plot_Parameter_File Types
The valid Plot_Parameter_File types are:
section_x_plot
section_long_plot
melb_water_sewer_long_plot
pipeline_long_plot
drainage_long_plot
drainage_plan_plot
plot_frame_plot
rainfall_methods
design_parameters
Each type of plot has its own set of valid plot parameters.
When a Plot_Parameter_File, say ppf, is first defined, it starts as an empty structure until it has
its type defined using the Create_XX_parameter calls. The ppf then knows what plot parameters
are valid for that type of plot.
The Plot_Parameter_File ppf is then loaded with particular plot parameters and their values by
making Set_Parameter calls and/or reading in data from a plot parameter file stored already disk
(Read_Parameter_File).
When all the required plot parameters have been set, the Plot_Parameter_File ppf can be used
to create a plot (Plot_parameter_file).
The Plot_Parameter_File ppf can also be written out as a disk file so that it can be used in the
future (Write_parameter_file).
Note: note all the available parameters for a particular plot type need to be set for a
Plot_Parameter_File. For most plot parameters, there is a default value used for plotting and that
is used if the parameter is not given a value by a Set_Parameter call.

Create_parameter_file(Plot_Parameter_File ppf,Text ppf_type)
Name
Integer Create_parameter_file(Plot_Parameter_File ppf,Text ppf_type)
Description
Set the Plot_Parameter_File ppf to be of type ppf_type and clear out any information already
contained in ppf. For the valid types, see Plot_Parameter_File Types .
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2447


Name
Integer Create_section_long_plot_parameter_file(Plot_Parameter_File ppf)

Page 946

Plot Parameters

Chapter

Description
Set the Plot_Parameter_File ppf to be of type section_long_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2448


Name
Integer Create_section_x_plot_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type section_x_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2449


Name
Integer Create_melb_water_sewer_long_plot_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type melb_water_sewer_long_plot, and clear out any
information already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2450


Name
Integer Create_pipeline_long_plot_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type pipeline_long_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2451


Name
Integer Create_drainage_long_plot_parameter_file(Plot_Parameter_File ppf)
Description

Plot Parameters

Page 947

12d Model Programming Language Manual

Set the Plot_Parameter_File ppf to be of type drainage_long_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2452


Name
Integer Create_drainage_plan_plot_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type drainage_plan_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2453


Name
Integer Create_plot_frame_plot_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type plot_frame_plot, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2454


Name
Integer Create_rainfall_methods_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type rainfall_methods, and clear out any information
already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2455


Name
Integer Create_design_parameters_parameter_file(Plot_Parameter_File ppf)
Description
Set the Plot_Parameter_File ppf to be of type design_parameters, and clear out any information
Page 948

Plot Parameters

Chapter

already contained in ppf.
Hence if ppf already contained plot information, then all that information will be lost.
A function return value of zero indicates the type is successfully set.
ID = 2456


Name
Integer Read_parameter_file(Plot_Parameter_File ppf,Text filename,Integer expand_includes)
Description
Reads from disk a binary plot parameter file of file name filename and load the data into the
Plot_Parameter_File ppf. The type of the Plot_Parameter_File is determined by the file extension
of filename.
If expand_includes is no-zero then any Includes listed in filename will be read in.
Any information that is already in ppf is cleared before loading the data from filename.
A function return value of zero indicates the file was successfully read and loaded into ppf.
ID = 2457


Name
Integer Write_parameter_file(Plot_Parameter_File ppf,Text filename)
Description
Write out to a file on disk, the information in the Plot_Parameter_File ppf.
The name of the disk file is filename, plus the appropriate extension given by the type of ppf (see
Plot_Parameter_File Types )
A function return value of zero indicates the file was successfully written.
ID = 2458


Name
Integer Set_parameter(Plot_Parameter_File ppf,Text parameter_name,Element parameter_value)
Description
Sets the value of the plot parameter parameter_name in the Plot_Parameter_File ppf to be the
Element parameter_value.
For example, setting the plot parameter string_to_plot to be a selected string. Aside - in the plot
parameter file written to the disk, an element is stored with three things - the string name, the
string id and the model id of the model containing the element.
If the plot parameter does not require an Element, then a non-zero return function return value is
returned.
A function return value of zero indicates the parameter value is successfully set.
ID = 2641


Name
Integer Get_parameter(Plot_Parameter_File ppf,Text parameter_name,Element &parameter_value)
Description
Get the value for the plot parameter parameter_name in the Plot_Parameter_File ppf and return
it as the Element parameter_value.
If the value for the plot parameter is not of type Element, then a non-zero return function return
value is returned.
A function return value of zero indicates the parameter value is successfully found.
ID = 2642


Name
Integer Set_parameter(Plot_Parameter_File ppf,Text parameter_name,Text parameter_value)
Description
Sets the value of the plot parameter parameter_name in the Plot_Parameter_File ppf to be the
Text parameter_value.
For example, setting the plot parameter box_titles_x to have the value 24.5
Note - even though a plot parameter file may be used as a real number or an integer, it is stored
in the Plot_Parameter_File as a Text.
A function return value of zero indicates the parameter value is successfully set.
ID = 2459


Name
Integer Get_parameter(Plot_Parameter_File ppf,Text parameter_name,Text &parameter_value)
Description
so get back as text and you need to decode it.
Get the value for the plot parameter parameter_name in the Plot_Parameter_File ppf and return
it as the Text parameter_value.
Note - if the parameter value is to be used as say an Integer, then the returned Text
parameter_value will need to be decoded.
If the value for the plot parameter is not of type Text, then a non-zero return function return value
is returned.
A function return value of zero indicates the parameter value is successfully found.
ID = 2460


Name
Integer Parameter_exists(Plot_Parameter_File ppf,Text parameter_name)
Description
Check to see if a plot parameter of name parameter_name exists in the Plot_Parameter_File ppf.
returns no-zero if exists
A non-zero function return value indicates that an plot parameter exists.
Warning this is the opposite of most 12dPL function return values.
ID = 2461


Name
Integer Remove_parameter(Plot_Parameter_File ppf,Text parameter_name)
Description
Remove the plot parameter of name parameter_name and its value from the
Plot_Parameter_File ppf.
Note - the Plot_Parameter_File ppf does not necessarily contain values for all the possible plot
parameters that are available for a given Plot_Parameter_File. Many parameters can have
default values which are used if the plot parameter is not set.
A function return value of zero indicates the parameter was successfully removed.
ID = 2462


Name
Integer Plot_parameter_file(Plot_Parameter_File ppf)
Description
Plot the Plot_Parameter_File ppf.
Note - ppf needs to contain all the appropriate information on where the plot is plotted to.
A function return value of zero indicates the plot was successfully created
ID = 2463


Name
Integer Plot_parameter_file(Text file)
Description
Plot the plot parameter file in the binary plot parameter disk file name.
Note - the file needs to contain all the appropriate information on where the plot is plotted to.
A function return value of zero indicates the plot was successfully created.
ID = 2464


Name
Integer Plot_ppf_file(Text name)
Description
Plot the plot parameter file in the ascii plot parameter disk file name.
Note - the file needs to contain all the appropriate information on where the plot is plotted to.
A function return value of zero indicates the plot was successfully created.
ID = 652


Name
Undo Add_undo_add(Text name,Element elt)
Description
Create an Undo from the Element elt and give it the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo as the function return value.
This is telling the 12d Model Undo system that a new element has been created in 12d Model.
Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.
ID = 1563


Name
Undo Add_undo_add(Text name,Dynamic_Element de)
Description
Create an Undo from the Dynamic_Element de and give it the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo as the function return value.
This is telling the Undo system that a list of new element (stored in the Dynamic_Element de)
has been created in 12d Model.
Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.
ID = 1564


Name
Undo Add_undo_change(Text name,Element original,Element changed)
Description
Create an Undo from a copy of the original Element original and the modified Element
changed, and give it the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo called name as the function return value.

Page 954

Undos

Chapter

The Element original should not exist in a Model. The Element changed does exist in a Model.
This is telling the Undo system that an Element original has been modified to create the Element
changed. If the Model for original is ever needed then the parent structure of original can be
used to get it.
Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.
ID = 1565


Name
Undo Add_undo_delete(Text name,Element original,Integer make_copy)
Description
If make_copy is non zero, create a copy of the Element original and transfer the Uid from
original to the copy.
If make_copy is zero, then a reference to original is use. Warning - make_copy = 0 should
never be used because if original is then deleted in 12d Model, the Undo list could be corrupted.
The Undo is given the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo called name as the function return value.
This is telling the Undo system that an Element original has been deleted.
Note: name is the text that appears when the Undo is displayed in the 12d Model Uno List.
ID = 1566


Name
Undo Add_undo_range(Text name,Integer id1,Integer id2)
Description
Create an Undo that consists of the id range form 1d1 to id2.
The Undo is given the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo called name as the function return value.
This is telling the Undo system that all the Elements in the id range from Id1 to Id2 have been
created.
Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.
Important note - Id’s are no longer used in 12d Model and have been replaced by Uids. This
macro has been deprecated (i.e. won’t exist) unless the macro is compiled with a special flag.
This function has been replaced by Undo Add_undo_range(Text name,Uid id1,Uid id2).
ID = 1567


Name
Undo Add_undo_range(Text name,Uid id1,Uid id2)
Description
Create an Undo that consists of the Uid range form id1 to id2.
The Undo is given the name name.
The Undo is automatically added to the 12d Model Undo system.
Return the created Undo called name as the function return value.
This is telling the Undo system that all the Elements in the Uid id range from Id1 to Id2 have been
created.
Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.
ID = 1919


Name
Integer Get_number_of_items(Undo_List &undo_list,Integer &count)
Description
Get the number of items in the Undo_List undo_list and return the number in count.
A function return value of zero indicates the number was successfully returned.
ID = 1557


Name
Integer Get_item(Undo_List &undo_list,Integer n,Undo &undo)
Description
Get the n’th item from the Undo_List undo_list and return the item (which is an Undo) as undo.
A function return value of zero indicates the Undo was successfully returned.
ID = 1558


Name
Integer Set_item(Undo_List &undo_list,Integer n,Undo undo)
Description

Page 956

Undos

Chapter

Set the n’th item in the Undo_List undo_list to be the Undo undo.
A function return value of zero indicates the Undo was successfully set.
ID = 1559


Name
Integer Append(Undo undo,Undo_List &undo_list)
Description
Append the Undo undo to the Undo_List undo_list.
That is, the Undo undo is added to the end of the Undo_List and so the number of items in the
Undo_List is increased by one.
A function return value of zero indicates the Undo was successfully appended.
ID = 1560


Name
Integer Append(Undo_List from_list,Undo_List &to_list)
Description
Append the Undo_list list to the Undo_List to_list.
A function return value of zero indicates the Undo_List was successfully appended.
ID = 1561


Name
Integer Null(Undo_List &undo_list)
Description
Removes and nulls all the Undo’s from the Undo_list undo_list and sets the number of items in
undo_list to zero.
That is, all the items on the Undo_List are nulled and the number of items in the Undo_List is set
back to zero.
A function return value of zero indicates the Undo_List was successfully nulled.
ID = 1562


Name
Undo Add_undo_list(Text name,Undo_List list)
Description
Adds the Undo_List list to the 12d Model Undo system and gives it the name name.
At the same time, it automatically removes each of the Undo’s in list from the 12d Model Undo
system. So all the items in list are removed from the 12d Model Undo system and replaced by
the one item called name.

Undos

Page 957

12d Model Programming Language Manual

ID = 1568


Name
Connection Create_ODBC_connection()
Description
Creates an ODBC connection object, which may then by used to connect to a database.
ID = 2501


Name
Integer Connect(Connection connection,Text connection_string,Text user,Text password)
Description
This call attempts to connect to an external data source, with a username and password. A
connection string must also be supplied. This is data source specific and ODBC driver specific.
For more information on connection strings, see the vendor of the data source or data source
driver.

ODBC Macro Calls

Page 959

12d Model Programming Language Manual

This call returns 0 if successful.
ID = 2502


Name
Integer Connect(Connection connection, Text connection_string)
Description
This call attempts to connect to an external data source. A connection string must also be
supplied. This is data source specific and ODBC driver specific. For more information on
connection strings, see the vendor of the data source or data source driver.
This call returns 0 if successful.
ID = 2503


Name
Integer Close(Connection connection)
Description
This call determines if there was an error performing an operation against the connection. This
call will return 1 if there was an error.
ID = 2504


Name
Integer Has_error(Connection connection)
Description
This call will check if an error has occurred as the result of an operation. Has_error should
always be called after any operation. If there is an error, Get_last_error can be used to retrieve
the result.
This call will return 0 if there is no error, and 1 if there is.
ID = 2512


Name
Integer Get_last_error(Connection connection,Text &status,Text &message)
Description
This call will get the last error, if there is one, and retrieve the status and message of the error.
This call will return 0 if successful.
ID = 2513


Name
Select_Query Create_select_query()
Description
Creates and returns a select query object.
ID = 2528


Name
Integer Add_table(Select_Query query,Text table_name)
Description
This call adds a table of a given name to the supplied query. The query will look at this table
when retrieving data.
This call returns 0 if successful.
ID = 2529


Name
Integer Add_result_column(Select_Query query,Text table,Text column_name)
Description

ODBC Macro Calls

Page 961

12d Model Programming Language Manual

This call adds a result column that belongs to a given table to the query. Note that the table must
already be added for this to work. The query will retrieve that column from the supplied table
when it runs.
The call returns 0 if successful.
ID = 2531


Name
Integer Add_result_column(Select_Query query,Text table,Text column_name,Text return_as)
Description
This call adds a result column that belongs to a given table to the query. Note that the table must
already be added for this to work. The query will retrieve that column from the supplied table
when it runs, but in the results it will be called by the name you supply.
The call returns 0 if successful.
ID = 2530


Name
Integer Add_order_by(Select_Query query,Text table_name,Text column_name,Integer sort_ascending)
Description
This call will instruct the query to order the results for a column in a table. Set sort_ascending to
1 if you wish the results to be sorted in ascending order.
This call returns 0 if successful.
ID = 2533


Name
Integer Set_limit(Select_Query query,Integer start,Integer number_to_retrieve)
Description
This call will set an upper limit on the number of results to read, as well as defining the start index
of the returned results. This is useful when you have many results that you wish to return in
discrete sets or pages.
This call returns 0 if successful.
ID = 2534


Name
Integer Add_group_by(Select_Query query,Text table_name,Text column_name)
Description

Page 962

ODBC Macro Calls

Chapter

This call will group results by a given table and column name. This is useful if your data provider
allows aggregate functions for your queries.
This call returns 0 if successful.
ID = 2532


Name
Integer Add_condition(Select_Query query,Query_Condition condition)
Description
This call will add a query condition to a select query. A query condition will allow you to constrain
your results to defined values. See the section Query Conditions on how to create and defined
Query Conditions.
This call returns 0 if successful.
ID = 2535


Name
Integer Execute(Connection connection,Select_Query query)
Description
This call will execute a created select query for a scalar value. The return value of the call will be
the result of the query.
ID = 2505


Name
Integer Execute(Connection connection,Select_Query query,Database_Result &result)
Description
This call will execute a created select query and return a set of results in the result argument.
See the section on Navigating results with Database_Result for more information on the
Database_Result object.
This call will return 0 if successful.
ID = 2506


Name
Integer Move_next(Database_Result result)
Description
This call moves a database result to the next row. Depending on your provider, you may need to
call this before reading the first row.
This call will return 0 if the Database_Result was able to move to the next row.
ID = 2514


Name
Integer Close(Database_Result result)
Description
This call will close a database result. This is generally good practise as your data provider may
not allow more than one Database_Result to exist at one time.
This call will return 0 if successful.
ID = 2515


Name
Integer Get_result_column(Database_Result result,Integer column,Text &res)
Description
This call will retrieve a text value from a Database_Result, at the current index as given by
column. The value will be stored in res.
This call will return 0 if successful.
ID = 2516


Name
Integer Get_result_column(Database_Result result,Integer column,Integer &res)
Description
This call will retrieve an Integer value from a Database_Result, at the current index as given by
column. The value will be stored in res.
This call will return 0 if successful.
ID = 2517


Name
Integer Get_result_column(Database_Result result,Integer column,Real &res)
Description
This call will retrieve a Real value from a Database_Result, at the current index as given by
column. The value will be stored in res.
This call will return 0 if successful.

Page 964

ODBC Macro Calls

Chapter

ID = 2518


Name
Integer Get_time_result_column(Database_Result result,Integer column,Integer &time)
Description
This call will retrieve a timestamp, as an Integer value, from a Database_Result, at the current
index as given by column. The value will be stored in res.
This call will return 0 if successful.
ID = 2519


Name
Integer Get_result_column(Database_Result result,Text column,Text &res)
Description
This call will retrieve a text value from a Database_Result, from the column named by the
argument column. The value will be stored in res.
This call will return 0 if successful.
ID = 2520


Name
Integer Get_result_column(Database_Result result,Database_Result result,Text column,Integer &res)
Description
This call will retrieve an Integer value from a Database_Result, from the column named by the
argument column. The value will be stored in res.
This call will return 0 if successful.
ID = 2521


Name
Integer Get_result_column(Database_Result result,Text column,Real &res)
Description
This call will retrieve a Real value from a Database_Result, from the column named by the
argument column. The value will be stored in res.
This call will return 0 if successful.
ID = 2522


Name
Integer Get_time_result_column(Database_Result result,Text column,Integer &time)
Description
This call will retrieve a timestamp value, as an Integer, from a Database_Result, from the
column named by the argument column. The value will be stored in res.
This call will return 0 if successful.
ID = 2523


Name
Insert_Query Create_insert_query(Text table)
Description
This call creates and returns an insert query object. The insert will be applied against the value
supplied in table.
ID = 2536


Name
Integer Add_data(Insert_Query query,Text column_name,Integer value)
Description
This call will add Integer data to be inserted to a created Insert_Query when it is executed. The
data will be inserted into the column named by the column_name argument.
This call returns 0 if successful.
ID = 2537


Name
Integer Add_data(Insert_Query query,Text column_name,Text value)
Description
This call will add Text data to be inserted to a created Insert_Query when it is executed. The
data will be inserted into the column named by the column_name argument.
This call returns 0 if successful.
ID = 2538


Name
Integer Add_data(Insert_Query query,Text column_name,Real value)
Description
This call will add Real data to be inserted to a created Insert_Query when it is executed. The
data will be inserted into the column named by the column_name argument.
This call returns 0 if successful.
ID = 2539


Name
Integer Add_time_data(Insert_Query query,Text column_name,Integer time)
Description
This call will add timestamp data, stored as an Integer value, to be inserted to a created
Insert_Query when it is executed. The data will be inserted into the column named by the
column_name argument.
This call returns 0 if successful.
ID = 2540


Name
Integer Execute(Connection connection,Insert_Query query)
Description
This call will execute a created Insert_Query against the data provider to insert some new data.
This call will return 0 if successful.
ID = 2507


Name
Update_Query Create_update_query(Text table)
Description
This call creates and returns an Update_Query. The update query will be applied against the

ODBC Macro Calls

Page 967

12d Model Programming Language Manual

table given by the table argument.
ID = 2541


Name
Integer Add_data(Update_Query query,Text column_name,Integer value)
Description
This call will add Integer data for a column update, when the Update_Query is executed. The
data will be updated for the column named by the column_name argument.
This call returns 0 if successful.
ID = 2542


Name
Integer Add_data(Update_Query query,Text column_name,Text value)
Description
This call will add Text data for a column update, when the Update_Query is executed. The data
will be updated for the column named by the column_name argument.
This call returns 0 if successful.
ID = 2543


Name
Integer Add_data(Update_Query query,Text column_name,Real value)
Description
This call will add Real data for a column update, when the Update_Query is executed. The data
will be updated for the column named by the column_name argument.
This call returns 0 if successful.
ID = 2544


Name
Integer Add_time_data(Update_Query query,Text column_name,Integer time)
Description
This call will add timestamp data, stored as an Integer value, for a column update, when the
Update_Query is executed. The data will be updated for the column named by the
column_name argument.
This call returns 0 if successful.
ID = 2545


Name
Page 968

ODBC Macro Calls

Chapter

Integer Add_condition(Update_Query query,Query_Condition condition)
Description
This call will add a created Query_Condition to an update query. Using a Query_Condition
enables the operation to be constrained to a number of rows, rather than applying to an entire
table.
This call will return 0 if successful.
ID = 2546


Name
Integer Execute(Connection connection,Update_Query query)
Description
This call will execute a created Update_Query against the data provider to update existing data.
This call will return 0 if successful.
ID = 2508


Name
Delete_Query Create_delete_query(Text table)
Description
This call will create and return a Delete_Query. When it is executed, it will delete data from the
table named by the table argument.
ID = 2547


Name
Integer Add_condition(Delete_Query query,Query_Condition condition)
Description
This call will add a Query_Condition to a Delete_Query. Adding a Query_Condition will allow
you to constrain which rows of data are deleted from the table.
This call will return 0 if successful.
ID = 2548


Name
Integer Execute(Connection connection,Delete_Query query)

ODBC Macro Calls

Page 969

12d Model Programming Language Manual

Description
This call will execute a created Delete_Query against the data provider to delete existing data.
This call will return 0 if successful.
ID = 2509


Name
Manual_Query Create_manual_query(Text query_text)
Description
This call will create a new Manual_Query. The SQL for the query must be supplied in the
query_text argument.
ID = 2549


Name
Integer Get_parameters(Manual_Query query,Parameter_Collection parameters)
Description
This call will retrieve the set of Parameters that a Manual Query uses. Parameters are not
required but provide greater security when using user input. See the section on Parameters for
more details.
This call will return 0 if successful.
ID = 2550


Name
Integer Execute(Connection connection,Manual_Query query)
Description
This call will execute a created Manual_Query against the data provider to perform a custom
operation.
This call will return 0 if successful.
ID = 2510


Name
Integer Execute(Connection connection,Manual_Query query,Database_Result &result)
Description
This call will execute a created Manual_Query against the data provider to perform a custom
operation. If the Manual Query returns results, they will be stored in the result argument.
This call will return 0 if successful.
ID = 2511


Name

ODBC Macro Calls

Page 971

12d Model Programming Language Manual

Query_Condition Create_value_condition(Text table_name,Text column_name,Integer operator,Text
value)
Description
This call creates and returns a Value Condition Query Condition for a given table, column,
operation and Text value. See the list of operators for available values of operator.
When executed, the data provider will check that the value in column colum_name inside table
table_name matches (as appropriate for the given operator) against the supplied value.
ID = 2555


Name
Query_Condition Create_value_condition(Text table_name,Text column_name,Integer operator,Integer
value)
Description
This call creates and returns a Value Condition Query Condition for a given table, column,
operation and Integer value. See the list of operators for available values of operator.
When executed, the data provider will check that the value in column colum_name inside table
table_name matches (as appropriate for the given operator) against the supplied value.
ID = 2556


Name
Query_Condition Create_value_condition(Text table_name,Text column_name,Integer operator,Real
value)
Description
This call creates and returns a Value Condition Query Condition for a given table, column,
operation and Real value. See the list of operators for available values of operator.
When executed, the data provider will check that the value in column colum_name inside table
table_name matches (as appropriate for the given operator) against the supplied value.
ID = 2557


Name
Query_Condition Create_time_value_condition(Text table_name,Text column_name,Integer
operator,Integer value)
Description
This call creates and returns a Value Condition Query Condition for a given table, column,
operation and timestamp value, as defined by an Integer. See the list of operators for available
values of operator.
When executed, the data provider will check that the value in column colum_name inside table
table_name matches (as appropriate for the given operator) against the supplied value.
ID = 2558


Name
Query_Condition Create_column_match_condition(Text left_table,Text left_column,Integer operator,Text
right_table,Text right_column)
Description
This call will create and return a Column Match Query Condition to match two columns in two
tables against each other, using a supplied operator.
When executed, the data provider will check that the left_column in table left_table matches (as
appropriate for the given operator) against the right_column in table right_table.
ID = 2559


Name
Query_Condition Create_value_in_sub_query_condition(Text table_name,Text column_name,Integer
not_in,Select_Query sub_query)
Description
This call will create and return a Value In Sub Query Query_Condition, to match the value of a
column against the results of another query.
When executed, the data provider will check that the value in column column_name in table
table_name is or is not inside (as defined by not_in) the results of the Select Query, sub_query.
ID = 2560


Name
Query_Condition Create_value_in_list_condition(Text table_name,Text column_name,Integer
not_in,Dynamic_Integer values)
Description
This call will create and return a Value In List Query_Condition, to see if the value of a column is
in a list of integers.
When executed, the data provider will check that the value in column column_name in table
table_name is or is not inside (as defined by not_in) the list defined by values.
ID = 2561


Name
Query_Condition Create_value_in_list_condition(Text table_name,Text column_name,Integer
not_in,Dynamic_Text values)
Description
This call will create and return a Value In List Query_Condition, to see if the value of a column is
in a list of Text values.
When executed, the data provider will check that the value in column column_name in table
table_name is or is not inside (as defined by not_in) the list defined by values.
ID = 2562


Name
Query_Condition Create_value_in_list_condition(Text table_name,Text column_name,Integer
not_in,Dynamic_Real values)
Description
This call will create and return a Value In List Query_Condition, to see if the value of a column is
in a list of Real values.
When executed, the data provider will check that the value in column column_name in table
table_name is or is not inside (as defined by not_in) the list defined by values.
ID = 2563


Name
Manual_Condition Create_manual_condition(Text sql)
Description
This call will create a Manual Query_Condition. The operation of the manual condition is totally
defined by the SQL fragment defined in argument sql.
ID = 2564


Name
Integer Add_table(Manual_Condition manual,Text table)
Description
This call will add a table to be used by a Manual Condition. This is required when using
Parameters.
This call will return 0 if successful.
ID = 2565


Name
Integer Get_parameters(Manual_Condition manual,Parameter_Collection &param)
Description
This call will add a table to be used by a Manual Condition. This is required when using
Parameters. See the section on Parameters for more information.
This call will return 0 if successful.
ID = 2566


Name
Transaction Create_transaction(Connection connection)
Description
This call creates and returns a transaction object for a given Connection.
ID = 2524


Name
Integer Begin_transaction(Transaction transaction)
Description
This call begins a new transaction. It will return 0 if successful.
ID = 2525


Name
Integer Commit_transaction(Transaction transaction)
Description
This call will commit the operations performed inside a transaction to the data provider. The call
will return 0 if successful.
ID = 2526


Name
Integer Rollback_transaction(Transaction transaction)
Description
This call will cancel or rollback the operations performed inside a transaction from the data
provider. The call will return 0 if successful.
ID = 2527


Name
Integer Add_parameter(Parameter_Collection parameters,Integer value)
Description
This call will add a new Integer parameter to a Parameter_Collection.
This will return 0 if successful.
ID = 2551


Name
Integer Add_parameter(Parameter_Collection parameters,Text value)
Description
This call will add a new Text parameter to a Parameter_Collection.
This will return 0 if successful.
ID = 2552


Name
Integer Add_parameter(Parameter_Collection parameters,Real value)
Description
This call will add a new Real parameter to a Parameter_Collection.
This will return 0 if successful.
ID = 2553


Name
Integer Add_time_parameter(Parameter_Collection parameters,Integer value)
Description

Page 976

ODBC Macro Calls

Chapter

This call will add a new timestamp parameter, from an Integer value, to a
Parameter_Collection.
This will return 0 if successful.
ID = 2554


Name
void Print(Text msg)
Description
Print the Text msg to the Output Window.
ID = 24


Name
void Prompt(Text msg)
Description
Print the message msg to the prompt message area of the macro console.

Prompt Message Area

If another message is written to the prompt message area then the previous message
will be overwritten by the new message.
ID = 34


Name
Integer Get_points(Element elt,Integer &num_verts)
Description
Get the number of vertices in the Element elt.
The number of vertices is returned as the Integer num_verts.
For Elements of type Alignment, Arc and Circle, Get_points gives the number of vertices when the
Element is approximated using the 12d Model cord-to-arc tolerance.
A function return value of zero indicates the number of vertices was successfully returned.
ID = 43


Name
Integer Select_string(Text msg,Element &string)
Description
Write the message msg to the 12d Model Output Window and wait until a selection is made.
If a pickable Element is selected, then return the Element picked by the user in string and the
function return value is 1.
If no pickable Element is picked and the function returns, then the function returns codes are:
-1
0
1
2

indicates cancel was chosen from the pick-ops menu.
pick unsuccessful
pick was successful
a cursor pick

ID = 29


Name
Integer Model_prompt(Text msg,Text &ret)
Description
Print the message msg to the prompt message area and then read back a Text from the user reply
area of the Macro Console.
If LB is clicked on the model icon at the right hand end of the user reply area, a list of all existing
models is placed in a pop-up. If a model is selected from the pop-up (using LB), the model name is
placed in the user reply area.
MB for "Same As" also applies. That is, If MB is clicked in the user reply area and then a string from
a model on a view is selected, the name of the model containing the selected string is written to the
user reply area.
msg written to prompt message area
Click LB to on the icon to
bring up the list of models
to select from

user reply area
The reply, either typed or selected from the model pop-up or Same As, must be terminated by
pressing <Enter> for the macro to continue.
The reply is returned in Text ret.
A function return value of zero indicates the Text ret is returned successfully.
ID = 401


Name
Model Get_model(Text model_name)
Description
Get the Model model with the name model_name.
If the model exists, its handle is returned as the function return value.
If no model of name model_name exists, a null Model is returned as the function return
value.
ID = 58


Name
Integer Get_elements(Model model,Dynamic_Element &de,Integer &total_no)
Description
Get all the Elements from the Model model and add them to the Dynamic_Element array, de.
The total number of Elements in de is returned by total_no.
Note: whilst this Dynamic_Element exists, all of the elements with handles in the Dynamic_Element
are locked.
A function return value of zero indicates success.
ID = 132


Name
Integer Get_id(Element elt,Uid &uid)
Description
Get the unique Uid of the Element elt and return it in uid.
If elt is null or an error occurs, uid is set to zero.
A function return value of zero indicates the Element Uid was successfully returned.
ID = 1908


Name
Model_Box Create_model_box(Text title_text,Message_Box message,Integer mode)
Description
Create an input Widget of type Model_Box for inputting and validating Models.
The Model_Box is created with the title title_text (see Model_Box ).
The Message_Box message is normally the message box for the panel and is used to display
Model_Box validation messages.
If <enter> is typed into the Model_Box automatic validation is performed by the Model_Box according
to mode. What the validation is, what messages are written to Message_Box, and what actions
automatically occur, depend on the value of mode.
For example,
CHECK_MODEL_MUST_EXIST

7 // if the model exists, the message says "exists".
// if it doesn’t exist, the messages says "ERROR"

The values for mode and their actions are listed in Appendix A (see Model Mode ).
If LB is clicked on the icon at the right hand end of the Model_Box, a list of all existing models is placed
in a pop-up. If a model is selected from the pop-up (using LB), the model name is placed in the
information area of the Model_Box and validation performed according to mode.
MB for "Same As" also applies. That is, If MB is clicked in the information area and then a string from
a model on a view is selected, then the name of the model containing the selected string is written to
the information area and validation performed according to mode.
The function return value is the created Model_Box.
Special Note:
#include "set_ups.h" must be in the macro code to define CHECK_MODEL_MUST_EXIST etc.
ID = 848


Name
File_Box Create_file_box(Text title_text,Message_Box message,Integer mode,Text wild)
Description
Create an input Widget of type File_Box for inputting and validating files.
The File_Box is created with the title title_text (see File_Box ).
The Message_Box message is normally the message box for the panel and is used to display
File_Box validation messages.
If <enter> is typed into the File_Box, automatic validation is performed by the File_Box according to
mode. What the validation is, what messages are written to Message_Box, and what actions
automatically occur, depend on the value of mode.
For example,
CHECK_FILE_NEW

20 // if the file doesn’t exists, the message says "will be created"
// if it exist, the messages says "ERROR"

The values for mode and their actions are listed in Appendix A (see File Mode ).
If LB is clicked on the icon at the right hand end of the File_Box, a list of the files in the current area
which match the wild card text wild (for example, *.dat) Is placed in a pop-up. If a file is selected
from the pop-up (using LB), the file name is placed in the information area of the File_Box and
validation performed according to mode.
The function return value is the created File_Box.
Special Note:
#include "set_ups.h" must be in the macro code to define CHECK_FILE_NEW etc.
ID = 906


Name
Select_Box Create_select_box(Text title_text,Text select_title,Integer mode,Message_Box message)
Description
Create an input Widget of type Select_Box.
The Select_Box is created with the title title_text.
The Select title displayed in the screen message area is select_title.
The value of mode is listed in the Appendix A - Select mode. See Select Mode .
The Message_Box message is normally the message box for the panel and is used to display string
select validation messages.
The function return value is the created Select_Box.
ID = 882


Name
New_Select_Box Create_new_select_box(Text title_text,Text select_title,Integer mode,Message_Box message)
Description
Create an input Widget of type New_Select_Box. See New_Select_Box .
The New_Select_Box is created with the title title_text.
The Select title displayed in the screen message area is select_title.
The value of mode is listed in the Appendix A - Select mode. See Select Mode .
The Message_Box message is normally the message box for the panel and is used to display
New_Select_Box validation messages.
The function return value is the created New_Select_Box.
ID = 2240


Name
Integer Get_super_use_2d_level(Element super,Integer &use)
Description
Query whether the dimension height dimension Att_ZCoord_Value exists for the super string super.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
use is returned as 1 if the dimension exists, or 0 if the dimension doesn’t exist.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 701


Name
Integer Get_super_use_3d_level(Element super,Integer &use)
Description
Query whether the height dimension Att_ZCoord_Array exists for the super string super.
See Height Dimensions for information on Height dimensions or Super String Dimensions for
information on all dimensions.
use is returned as 1 if the dimension exists, or 0 if the dimension doesn’t exist.
If the Element super is not a super string, then a non zero function return value is returned.
A return value of 0 indicates the function call was successful.
ID = 731


Name
Integer Get_super_vertex_coord(Element super,Integer i,Real &x,Real &y,Real &z)
Description
Get the coordinate data (x,y,z) for i’th vertex (the vertex with index number i) of the super Element
super.
The x coordinate is returned in Real x.
The y coordinate is returned in Real y.
The z coordinate is returned in Real z.
If the Element super is not of type Super, then the function return value is set to a non zero value.
A return value of 0 indicates the function call was successful.
ID = 733


Name
Integer Set_name(Element elt,Text elt_name)
Description
Set the name of the Element elt to the Text elt_name.
A function return value of zero indicates the Element name was successfully set.
Note
This will not set the name of an Element of type Tin.
ID = 45


Name
Integer Set_optional(Widget widget,Integer mode)
Description
Set the optional mode for the Widget widget.
That is, if the Widget field is blank, the title text to the left is greyed out, signifying that this Widget is
optional.
If

mode = 1
mode = 0

the widget is optional
the widget is not optional.

The default value for a Widget is mode = 0.
If this mode is used (i.e. 1), the widget must be able to accept a blank response for the field, or
assume a reasonable value.
A function return value of zero indicates the mode was successfully set.

Set_optional mode = 0
Widget title
greyed out

Set_optional mode = 1

ID = 1324


Name
Integer Validate(Name_Box box,Text &result)
Description
Validate the contents of Name_Box box and return the Text result.
The function returns the value of:
NO_NAME if the Widget Name_Box is optional and the box is left empty
TRUE (1) if no other return code is needed and result is valid.
FALSE (0) if there is an error.
So a function return value of zero indicates that there is an error.
Warning this is the opposite of most 12dPL function return values
ID = 931


Name
Integer Element_draw(Element elt)
Description
Draw the Element elt in its natural colour on all the views that elt is displayed on.
A function return value of zero indicates that elt was drawn successfully.
ID = 371
