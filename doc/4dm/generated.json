{
  "api": [
    {
      "names": [
        "Integer Get_number_of_command_arguments()"
      ],
      "description": "Get the number of tokens in the program command-line. The number of tokens is returned as the function return value. For some example code, see 5. 4 Command Line-Arguments.",
      "id": "432"
    },
    {
      "names": [
        "Integer Get_command_argument(Integer i, Text &argument)"
      ],
      "description": "Get the i\u2019th token from the command-line. The token is returned by the Text argument. The arguments start from 1. A function return value of zero indicates the i\u2019th argument was successfully returned. For some example code, see 5. 4 Command Line-Arguments.",
      "id": "433"
    },
    {
      "names": [
        "void Exit(Integer exit_code)"
      ],
      "description": "Immediately exit the program and write the messagemacro exited with code exit_codeto the information/error message area of the macro console panel.",
      "id": "417"
    },
    {
      "names": [
        "void Exit(Text msg)"
      ],
      "description": "Immediately exit the program and write the messagemacro exited with message msgto the information/error message area of the macro console panel.",
      "id": "418"
    },
    {
      "names": [
        "void Destroy_on_exit()"
      ],
      "description": "Destroy current macro console panel when exit the program.",
      "id": "815"
    },
    {
      "names": [
        "void Retain_on_exit()"
      ],
      "description": "Retain current macro console panel on the screen after exit the macro.",
      "id": "816"
    },
    {
      "names": [
        "Integer Text_length(Text text)"
      ],
      "description": "The function return value is the length of the Text text.",
      "id": "381"
    },
    {
      "names": [
        "Integer Numchr(Text text)"
      ],
      "description": "The function return value is the position of the last non-blank character in the Text text. If there are no non-blank characters, the return value is zero.",
      "id": "478"
    },
    {
      "names": [
        "Text Text_upper(Text text)"
      ],
      "description": "TextPage 85\f12d Model Programming Language ManualCreate a Text from the Text text that has all the alphabetic characters converted to upper-case. The function return value is the upper case Text.",
      "id": "383"
    },
    {
      "names": [
        "Text Text_lower(Text text)"
      ],
      "description": "Create a Text from the Text text that has all the alphabetic characters converted to lowercase. The function return value is the lower case Text.",
      "id": "384"
    },
    {
      "names": [
        "Text Text_justify(Text text)"
      ],
      "description": "Create a Text from the Text text that has all the leading and trailing spaces removed. The function return value is the justified Text.",
      "id": "382"
    },
    {
      "names": [
        "Integer Find_text(Text text, Text tofind)"
      ],
      "description": "Find the first occurrence of the Text tofind within the Text text. If tofind exists within text, the start position of tofind is returned as the function return value. If tofind does not exist within text, a start position of zero is returned as the function return value. Hence a function return value of zero indicates the Text tofind does not exist within the Texttext.",
      "id": "380"
    },
    {
      "names": [
        "Text Get_subtext(Text text, Integer start, Integer end)"
      ],
      "description": "From the Text text, create a new Text from character position start to character position endinclusive. The function return value is the sub-Text. Page 86Text\fChapter 5 12dPL Library Calls",
      "id": "379"
    },
    {
      "names": [
        "void Set_subtext(Text &text, Integer start, Text sub)"
      ],
      "description": "Set the Text text from character position start to be the Text sub.  The existing characters of textare overwritten by sub. If required, Text text will be automatically extended to fit sub. If start is greater than the length of text, text will be extended with spaces and sub inserted atposition start. There is no function return value.",
      "id": "389"
    },
    {
      "names": [
        "void Insert_text(Text &text, Integer start, Text sub)"
      ],
      "description": "Insert the Text sub into Text text starting at position start.  The displaced characters of text areplaced after sub. The Text text is automatically extended to fit sub and no characters of text are lost. There is no function return value.",
      "id": "390"
    },
    {
      "names": [
        "Integer Any_escape_characters(Text text)"
      ],
      "description": "Return one if the Text text contain any escape characters; i. e a backslash character followed bythe character n, r, or t.  Return zero otherwise.",
      "id": "2809"
    },
    {
      "names": [
        "Text Convert_escape_characters(Text text)"
      ],
      "description": "Convert all escape characters in the Text text; i. e a backslash character followed by thecharacter n, r, or t; to the equivalent embedded characters i. e new line, return, tab. The converted Text is the returned result of the function call.",
      "id": "2810"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer &value)"
      ],
      "description": "Convert the Text text to an Integer value.  The text should only include digits. The function return value is zero if the conversion is successful.",
      "id": "30"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer &value, Text format)"
      ],
      "description": "Convert the Text text to an Integer value using the Text format as a C++ format string. The function return value is zero if the conversion is successful. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "387"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer64 &value)"
      ],
      "description": "Convert the Text text to a 64 bit Integer value.  The text should only include digits. The function return value is zero if the conversion is successful.",
      "id": "3437"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer64 &value, Text format)"
      ],
      "description": "Convert the Text text to a 64 bit Integer value using the Text format as a C++ format string. The function return value is zero if the conversion is successful. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "3438"
    },
    {
      "names": [
        "Integer From_text(Text text, Real &value)"
      ],
      "description": "Convert the Text text to a Real value. The function return value is zero if the conversion is successful.",
      "id": "31"
    },
    {
      "names": [
        "Integer From_text(Text text, Real &value, Text format)"
      ],
      "description": "Convert the Text text to a Real value using the Text format as a C++ format string. The function return value is zero if the conversion is successful. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "388"
    },
    {
      "names": [
        "Integer From_text(Text text, Guid &value)"
      ],
      "description": "Convert the Text text to a Guid value. The function return value is zero if the conversion is successful.",
      "id": "3440"
    },
    {
      "names": [
        "Integer From_text(Text text, Attribute_Blob &value)"
      ],
      "description": "Convert the Text text to an Attribute_Blob value. The function return value is zero if the conversion is successful.",
      "id": "3442"
    },
    {
      "names": [
        "Integer From_text(Text text, Text &value, Text format)"
      ],
      "description": "Convert the Text text to a Text value using the Text format as a C++ format. The function return value is zero if the conversion is successful. WarningTextPage 89\f12d Model Programming Language ManualThe user is responsible for ensuring that the format string is sensible.",
      "id": "392"
    },
    {
      "names": [
        "Integer From_text(Text text, Dynamic_Text &dtext)"
      ],
      "description": "Break the Text text into separate words (tokens) and add the individual words to theDynamic_Text dtext. Free format is used to break text up individual words EXCEPT for characters between matchingdouble quotes \". Hence any characters (including blanks) between matching double quotes are considered to beone word, and one or more spaces are the separators between individual words. For example, inThis is \"an example\"there are three words - \"This\", \"is\", and \"an example\". Note that there is more than one space between \"This\" and \"is\" but they are ignored and taken tobe only one space. The function return value is the number of words returned in dtext.",
      "id": "377"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer delimiter, Integer separator, Dynamic_Text &text)"
      ],
      "description": "Break the Text text into separate words (tokens) and add the individual words to theDynamic_Text dtext. The character used to break up the text into individual words is given by the Integer separator. Any characters between matching the character given by the Integer delimiter (including anycharacters equal to separator) are considered to be one word. For example, if the delimiter is double quotes \" and the separator is a semi-colon ; thenThis;is;\"an;example\"has three words - \"this\", \"is\", and \"an;example\". Note: delimiter and separator are Integers and can be specified by the actual number of acharacter or by giving the actual character between single quotes. For example,separator = 32is the number for a spaceseparator = \u2019 \u2019is the number for a spaceseparator = \u2019a\u2019will be the number for the letter aseparator = \u2019\\t\u2019will be the number for a tabThe function return value is the number of words returned in dtext. Page 90Text\fChapter 5 12dPL Library Calls",
      "id": "2105"
    },
    {
      "names": [
        "Text To_text(Integer value)"
      ],
      "description": "Convert the Integer value to text. The function return value is the converted value.",
      "id": "32"
    },
    {
      "names": [
        "Text To_text(Integer value, Text format)"
      ],
      "description": "Convert the Integer value to text using the Text format as a C++ format string. The function return value is the converted value. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "385"
    },
    {
      "names": [
        "Text To_text(Real value, Integer no_dec)"
      ],
      "description": "Convert the Real value to text with no_dec decimal places. If the Integer argument no_dec is missing, the number of decimal places defaults to zero. The function return value is the converted value.",
      "id": "33"
    },
    {
      "names": [
        "Text To_text(Real value, Text format)"
      ],
      "description": "Convert the Real value to text using the Text format as a C++ format string. The function return value is the converted value. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "386"
    },
    {
      "names": [
        "Text To_text(Real value)"
      ],
      "description": "Convert the Real value to text after truncated to nearest Integer. The function return value is the converted value.",
      "id": "3560"
    },
    {
      "names": [
        "Text To_text(Text text, Text format)"
      ],
      "description": "Convert the Text text to text using the Text format as a C++ format string. The function return value is the converted value. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "391"
    },
    {
      "names": [
        "Text To_text(Guid value)"
      ],
      "description": "Convert the Guid value to text. The function return value is the converted value.",
      "id": "3439"
    },
    {
      "names": [
        "Text To_text(Attribute_Blob value)"
      ],
      "description": "Convert the Attribute_Blob value to text. The function return value is the converted value.",
      "id": "3441"
    },
    {
      "names": [
        "Integer Get_char(Text t, Integer pos, Integer &c)"
      ],
      "description": "Page 92Text\fChapter 5 12dPL Library CallsGet a character from Text t.  The position of the character is pos. The character is returned in the Integer c. The function return value of zero indicates the character returned successfully.",
      "id": "829"
    },
    {
      "names": [
        "Integer Set_char(Text &t, Integer n, Integer c)"
      ],
      "description": "Set the nth position (where position starts at 1 for the first character) in the Text t to the charactergiven by integer c.  Note that \u2019c\u2019 can be used to specify the number corresponding to the letter c. A function return value of zero indicates the Text character is successfully set.",
      "id": "830"
    },
    {
      "names": [
        "Text To_text(Integer64 value)"
      ],
      "description": "Convert the 64 bit Integer value to text. The function return value is the converted value.",
      "id": "3435"
    },
    {
      "names": [
        "Text To_text(Integer64 value, Text format)"
      ],
      "description": "Convert the 64 bit Integer value to text using the Text format as a C++ format string. The function return value is the converted value. WarningThe user is responsible for ensuring that the format string is sensible.",
      "id": "3436"
    },
    {
      "names": [
        "Integer Null(Textstyle_Data textdata)"
      ],
      "description": "Set the Textstyle_Data textdata to null. A function return value of zero indicates the textdata was successfully nulled.",
      "id": "1639"
    },
    {
      "names": [
        "Integer Null(Textstyle_Data textdata, Integer mode)"
      ],
      "description": "Various fields of a Textstyle_Data can be turned of so they won\u2019t display (and so can\u2019t be set) ina Textstyle_Data pop-up. To turn off the Textstyle_Data fields, the Null(Textstyle_Data textdata,Integer mode) call is madewith mode giving what fields are to be turned off. The values of mode and the Textstyle_Data field that they turn off are:Textstyle_Data_Textstyle= 0x00001,Textstyle_Data_Colour= 0x00002,Textstyle_Data_Type= 0x00004,Textstyle_Data_Size= 0x00008,Textstyle_Data_Offset= 0x00010,Textstyle_Data_Raise= 0x00020,Textstyle_Data_Justify_X= 0x00040,Textstyle_Data_Justify_Y= 0x00080,Textstyle_Data_Angle= 0x00100,Textstyle_Data_Slant= 0x00200,Textstyle_Data_X_Factor= 0x00400,Textstyle_Data_Name= 0x00800,Textstyle_Data_Underline= 0x01000,Textstyle_Data_Strikeout= 0x02000,Textstyle_Data_Italic= 0x04000,Textstyle_Data_Weight= 0x08000,Textstyle_Data_Whiteout= 0x10000,Textstyle_Data_Border= 0x20000,Textstyle_Data_Outline= 0x40000,Textstyle_Data_Border_Style= 0x80000,Textstyle_Data_All= 0xfffff,Note: the fields can be turned off one at a time by calling Null(Textstyle_Data textdata,Integer mode)a number of times, and/or more that one can be turned off at the one time by combining themwith the logical OR operator \"|\". For example,Textstyle_Data_Offset | Textstyle_Data_RaiseTextstyle DataPage 97\f12d Model Programming Language Manualwill turn off both the fields Textstyle_Data_Offset and Textstyle_Data_Raise. A function return value of zero indicates the parts of the Textstyle_Data were successfully nulled.",
      "id": "1640"
    },
    {
      "names": [
        "Integer Set_data(Textstyle_Data textdata, Text text_data)"
      ],
      "description": "Set the data of type Text for the Textstyle_Data text to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2163"
    },
    {
      "names": [
        "Integer Get_data(Textstyle_Data textstyle, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Textstyle_Data textstyle and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2162"
    },
    {
      "names": [
        "Integer Set_textstyle(Textstyle_Data textdata, Text style)"
      ],
      "description": "For the Textstyle_Data textdata, set the textstyle to style. A function return value of zero indicates the textstyle was successfully set.",
      "id": "1652"
    },
    {
      "names": [
        "Integer Get_textstyle(Textstyle_Data textdata, Text &style)"
      ],
      "description": "From the Textstyle_Data textdata, get the style and return it in style. A function return value of zero indicates the style was successfully returned.",
      "id": "1641"
    },
    {
      "names": [
        "Integer Set_colour(Textstyle_Data textdata, Integer colour_num)"
      ],
      "description": "For the Textstyle_Data textdata, set the colour number to be colour_num. A function return value of zero indicates the colour number was successfully set.",
      "id": "1653"
    },
    {
      "names": [
        "Integer Get_colour(Textstyle_Data textdata, Integer &colour_num)"
      ],
      "description": "From the Textstyle_Data textdata, get the colour number and return it in colour_num. A function return value of zero indicates the colour number was successfully returned.",
      "id": "1642"
    },
    {
      "names": [
        "Integer Set_text_type(Textstyle_Data textdata, Integer type)"
      ],
      "description": "For the Textstyle_Data textdata, set the units (pixel, world, paper) of the Textstyle_Data to begiven by the Integer type. For the value for each type of units, see 5. 9 Textstyle Data.  The default units is pixel (type = 0). A function return value of zero indicates the text units was successfully set.",
      "id": "1654"
    },
    {
      "names": [
        "Integer Get_text_type(Textstyle_Data textdata, Integer &type)"
      ],
      "description": "For the Textstyle_Data textdata, get the units (pixel, world, paper) of the Textstyle_Data andreturn the value in type. For the values of type, see 5. 9 Textstyle Data.  The default units is pixel (type = 0). If the field is not set then the function return value is 1. A function return value of zero indicates the text units was successfully returned.",
      "id": "1643"
    },
    {
      "names": [
        "Integer Set_size(Textstyle_Data textdata, Real height)"
      ],
      "description": "For the Textstyle_Data textdata, set the height to be height. Textstyle DataPage 99\f12d Model Programming Language ManualA function return value of zero indicates the height was successfully set.",
      "id": "1655"
    },
    {
      "names": [
        "Integer Get_size(Textstyle_Data textdata, Real &height)"
      ],
      "description": "From the Textstyle_Data textdata, get the height and return it in height. A function return value of zero indicates the height was successfully returned.",
      "id": "1644"
    },
    {
      "names": [
        "Integer Set_offset(Textstyle_Data textdata, Real offset)"
      ],
      "description": "For the Textstyle_Data textdata, set the offset to be offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the offset was successfully set.",
      "id": "1656"
    },
    {
      "names": [
        "Integer Get_offset(Textstyle_Data textdata, Real &offset)"
      ],
      "description": "From the Textstyle_Data textdata, get the offset and return it in offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the offset was successfully returned.",
      "id": "1645"
    },
    {
      "names": [
        "Integer Set_raise(Textstyle_Data textdata, Real raise)"
      ],
      "description": "For the Textstyle_Data textdata, set the raise to be raise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the raise was successfully set.",
      "id": "1657"
    },
    {
      "names": [
        "Integer Get_raise(Textstyle_Data textdata, Real &raise)"
      ],
      "description": "From the Textstyle_Data textdata, get the raise and return it in raise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the raise was successfully returned.",
      "id": "1646"
    },
    {
      "names": [
        "Integer Set_justify(Textstyle_Data textdata, Integer justify)"
      ],
      "description": "For the Textstyle_Data textdata, set the justification number to be justify. justify can have the value 1 to 9.  For the meaning of the values for justify, see 5. 9 TextstyleData. A function return value of zero indicates the justification number was successfully set.",
      "id": "1658"
    },
    {
      "names": [
        "Integer Get_justify(Textstyle_Data textdata, Integer &justify)"
      ],
      "description": "From the Textstyle_Data textdata, get the justification number and return it in justify. justify can have the value 1 to 9.  For the meaning of the values for justify, see 5. 9 TextstyleData. A function return value of zero indicates the justification number was successfully returned.",
      "id": "1647"
    },
    {
      "names": [
        "Integer Set_angle(Textstyle_Data textdata, Real angle)"
      ],
      "description": "For the Textstyle_Data textdata, set the angle to be angle. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the angle was successfully set.",
      "id": "1659"
    },
    {
      "names": [
        "Integer Get_angle(Textstyle_Data textdata, Real &angle)"
      ],
      "description": "From the Textstyle_Data textdata, get the angle and return it in angle. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the angle was successfully returned.",
      "id": "1648"
    },
    {
      "names": [
        "Integer Set_angle2(Textstyle_Data textdata, Real angle2)"
      ],
      "description": "For the Textstyle_Data textdata, set the 3D beta angle to be angle2. angle2 is in radians. A function return value of zero indicates the angle was successfully set.",
      "id": "3564"
    },
    {
      "names": [
        "Integer Get_angle2(Textstyle_Data textdata, Real &angle2)"
      ],
      "description": "From the Textstyle_Data textdata, get the 3D beta angle and return it in angle2. angle2 is in radians. A function return value of zero indicates the angle was successfully returned.",
      "id": "3565"
    },
    {
      "names": [
        "Integer Set_angle3(Textstyle_Data textdata, Real angle3)"
      ],
      "description": "For the Textstyle_Data textdata, set the 3D gamma angle to be angle3. angle3 is in radians. A function return value of zero indicates the angle was successfully set.",
      "id": "3566"
    },
    {
      "names": [
        "Integer Get_angle3(Textstyle_Data textdata, Real &angle3)"
      ],
      "description": "Page 102Textstyle Data\fChapter 5 12dPL Library CallsFrom the Textstyle_Data textdata, get the 3D gamma angle and return it in angle3. angle3 is in radians. A function return value of zero indicates the angle was successfully returned.",
      "id": "3567"
    },
    {
      "names": [
        "Integer Set_slant(Textstyle_Data textdata, Real slant)"
      ],
      "description": "For the Textstyle_Data textdata, set the slant to be slant. A function return value of zero indicates the slant was successfully set.",
      "id": "1660"
    },
    {
      "names": [
        "Integer Get_slant(Textstyle_Data textdata, Real &slant)"
      ],
      "description": "From the Textstyle_Data textdata, get the slant of the textstyle and return it in slant. A function return value of zero indicates the textstyle was successfully returned.",
      "id": "1649"
    },
    {
      "names": [
        "Integer Set_x_factor(Textstyle_Data textdata, Real xfactor)"
      ],
      "description": "For the Textstyle_Data textdata, set the xfactor to be xfactor. A function return value of zero indicates the xfactor was successfully set.",
      "id": "1661"
    },
    {
      "names": [
        "Integer Get_x_factor(Textstyle_Data textdata, Real &xfactor)"
      ],
      "description": "From the Textstyle_Data textdata, get the xfactor and return it in xfactor. A function return value of zero indicates the xfactor was successfully returned.",
      "id": "1650"
    },
    {
      "names": [
        "Integer Set_name(Textstyle_Data textdata, Text name)"
      ],
      "description": "For the Textstyle_Data textdata, set the name to be name. A function return value of zero indicates the name was successfully set.",
      "id": "1662"
    },
    {
      "names": [
        "Integer Get_name(Textstyle_Data textdata, Text &name)"
      ],
      "description": "From the Textstyle_Data textdata, get the name of the Textstyle_Data and return it in name. A function return value of zero indicates the name was successfully returned.",
      "id": "1651"
    },
    {
      "names": [
        "Integer Set_whiteout(Textstyle_Data textdata, Integer colour)"
      ],
      "description": "For the Textstyle_Data textdata, set the colour number of the colour used for the whiteout boxaround the text, to be colour. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2753"
    },
    {
      "names": [
        "Integer Get_whiteout(Textstyle_Data textdata, Integer &colour)"
      ],
      "description": "For the Textstyle_Data textdata, get the colour number that is used for the whiteout box aroundthe text.  The whiteout colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2754"
    },
    {
      "names": [
        "Integer Set_border(Textstyle_Data textdata, Integer colour)"
      ],
      "description": "For the Textstyle_Data textdata, set the colour number of the colour used for the border of thewhiteout box around the text, to be colour. If no whiteout border is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2763"
    },
    {
      "names": [
        "Integer Get_border(Textstyle_Data textdata, Integer &colour)"
      ],
      "description": "For the Textstyle_Data textdata, get the colour number that is used for the border of the whiteoutbox around the text.  The whiteout border colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if there is no whiteout border. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2764"
    },
    {
      "names": [
        "Integer Set_border_style(Textstyle_Data textdata, Integer border_style)"
      ],
      "description": "For the Textstyle_Data textdata, set the border style to be border_style. border_style can have the value 1 to 4.  For the meaning of the values for border_style, see 5. 9Textstyle Data. A return value of zero indicates the function call was successful.",
      "id": "3138"
    },
    {
      "names": [
        "Integer Get_border_style(Textstyle_Data textdata, Integer &border_style)"
      ],
      "description": "For the Textstyle_Data textdata, return the value border style in border_style. border_style can have the value 1 to 4.  For the meaning of the values for border_style, see 5. 9Textstyle Data. If the field is not set then the function return value is 1. A return value of zero indicates the function call was successful. Textstyle DataPage 105\f12d Model Programming Language Manual",
      "id": "3139"
    },
    {
      "names": [
        "Integer Set_ttf_underline(Textstyle_Data textdata, Integer underline)"
      ],
      "description": "For the Textstyle_Data textdata, set the underline state to underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates underline was successfully set.",
      "id": "2620"
    },
    {
      "names": [
        "Integer Get_ttf_underline(Textstyle_Data textdata, Integer &underline)"
      ],
      "description": "For the Textstyle_Data textdata, get the underline state and return it in underline. If underline = 1, then for a true type font, the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates underlined was successfully returned.",
      "id": "2616"
    },
    {
      "names": [
        "Integer Set_ttf_strikeout(Textstyle_Data textdata, Integer strikeout)"
      ],
      "description": "For the Textstyle_Data textdata, set the strikeout state to strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates strikeout was successfully set.",
      "id": "2621"
    },
    {
      "names": [
        "Integer Get_ttf_strikeout(Textstyle_Data textdata, Integer &strikeout)"
      ],
      "description": "For the Textstyle_Data textdata, get the strikeout state and return it in strikeout. Page 106Textstyle Data\fChapter 5 12dPL Library CallsIf strikeout = 1, then for a true type font, the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2617"
    },
    {
      "names": [
        "Integer Set_ttf_italic(Textstyle_Data textdata, Integer italic)"
      ],
      "description": "For the Textstyle_Data textdata, set the italic state to italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates italic was successfully set.",
      "id": "2622"
    },
    {
      "names": [
        "Integer Get_ttf_italic(Textstyle_Data textdata, Integer &italic)"
      ],
      "description": "For the Textstyle_Data textdata, get the italic state and return it in italic. If italic = 1, then for a true type font, the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates italic was successfully returned.",
      "id": "2618"
    },
    {
      "names": [
        "Integer Set_ttf_outline(Textstyle_Data textdata, Integer outline)"
      ],
      "description": "For the Textstyle_Data textdata, set the outline state to outline. For the Element elt of type Text, set the outline state to outline. If outline = 1, then for a true type font the text will be only shown in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates outline was successfully set.",
      "id": "2773"
    },
    {
      "names": [
        "Integer Get_ttf_outline(Textstyle_Data textdata, Integer &outline)"
      ],
      "description": "For the Textstyle_Data textdata, get the outline state and return it in outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates outline was successfully returned.",
      "id": "2774"
    },
    {
      "names": [
        "Integer Set_ttf_weight(Textstyle_Data textdata, Integer weight)"
      ],
      "description": "For the Textstyle_Data textdata, set the font weight to weight. For the list of allowable weights, go to Allowable WeightsA function return value of zero indicates weight was successfully set.",
      "id": "2623"
    },
    {
      "names": [
        "Integer Get_ttf_weight(Textstyle_Data textdata, Integer &weight)"
      ],
      "description": "For the Textstyle_Data textdata, get the font weight and return it in weight. For the list of allowable weights, go to Allowable WeightsA function return value of zero indicates weight was successfully returned.",
      "id": "2619"
    },
    {
      "names": [
        "void Set_random_number(Integer seed, Integer method)"
      ],
      "description": "Set up the random number generator with the Integer seed, seed (the current time in seconds isa good seed). If method is any value other than 1, the standard c library random number generator is used. If method is 1, then a far more random seed generator than the standard c library one is used. Once the random number generator is set with a seed, calling Get_Random_number will return arandom number. There is no function return value.",
      "id": "1900"
    },
    {
      "names": [
        "Integer Get_random_number()"
      ],
      "description": "Generate the next random number as an Integer and return it as the function return value. Note: the random number generator is initially set using Set_random_number.",
      "id": "1901"
    },
    {
      "names": [
        "Real Get_random_number_closed()"
      ],
      "description": "Generate the next random number as a number between 0 and 1 inclusive, and return it as thefunction return value. Note: this function is only applicable is the random number generator is initially set usingSet_random_number with method = 1.",
      "id": "1933"
    },
    {
      "names": [
        "Real Get_random_number_open()"
      ],
      "description": "Generate the next random number as a number between 0 (included) and 1 (not included), andreturn it as the function return value. Note: this function is only applicable is the random number generator is initially set usingRandom NumbersPage 119\f12d Model Programming Language ManualSet_random_number with method = 1.",
      "id": "1934"
    },
    {
      "names": [
        "Integer Set_vector(Vector2 &vect, Real value)"
      ],
      "description": "Set the two components of the two dimensional vector vect to the same Real value, value. A function return value of zero indicates the values were successfully set.",
      "id": "2306"
    },
    {
      "names": [
        "Integer Set_vector(Vector3 &vect, Real value)"
      ],
      "description": "Set the three components of the three dimensional vector vect to the same Real value, value. A function return value of zero indicates the values were successfully set.",
      "id": "2307"
    },
    {
      "names": [
        "Integer Set_vector(Vector4 &vect, Real value)"
      ],
      "description": "Set the four components of the four dimensional vector vect to the same Real value, value. A function return value of zero indicates the values were successfully set.",
      "id": "2308"
    },
    {
      "names": [
        "Integer Set_vector(Vector2 &vect, Real x, Real y)"
      ],
      "description": "Set the first component of the two dimensional vector vect to the value x. Set the second component of the two dimensional vector vect to the value y. A function return value of zero indicates the values were successfully set.",
      "id": "2309"
    },
    {
      "names": [
        "Integer Set_vector(Vector3 &vect, Real x, Real y, Real z)"
      ],
      "description": "Vectors and MatricesPage 121\f12d Model Programming Language ManualSet the first component of the three dimensional vector vect to the value x. Set the second component of the three dimensional vector vect to the value y. Set the third component of the three dimensional vector vect to the value z. A function return value of zero indicates the values were successfully set.",
      "id": "2310"
    },
    {
      "names": [
        "Integer Set_vector(Vector4 &vect, Real x, Real y, Real z, Real w)"
      ],
      "description": "Set the first component of the four dimensional vector vect to the value x. Set the second component of the four dimensional vector vect to the value y. Set the third component of the four dimensional vector vect to the value z. Set the fourth component of the four dimensional vector vect to the value w. A function return value of zero indicates the values were successfully set.",
      "id": "2311"
    },
    {
      "names": [
        "Integer Get_vector(Vector2 &vect, Real &x, Real &y)"
      ],
      "description": "For the two dimensional vector vect:return the first component of vect in x. return the second component of vect in yA function return value of zero indicates the components were successfully returned.",
      "id": "2312"
    },
    {
      "names": [
        "Integer Get_vector(Vector3 &vect, Real &x, Real &y, Real &z)"
      ],
      "description": "For the three dimensional vector vect:\uf020return the first component of vect in x. return the second component of vect in yreturn the third component of vect in zA function return value of zero indicates the components were successfully returned.",
      "id": "2313"
    },
    {
      "names": [
        "Integer Get_vector(Vector4 &vect, Real &x, Real &y, Real &z, Real &w)"
      ],
      "description": "For the four dimensional vector vect:\uf020return the first component of vect in x. return the second component of vect in yreturn the third component of vect in zreturn the fourth component of vect in wA function return value of zero indicates the components were successfully returned.",
      "id": "2314"
    },
    {
      "names": [
        "Integer Set_vector(Vector2 &vect, Integer index, Real value)"
      ],
      "description": "Set component number index of the two dimensional vector vect to the value value. A function return value of zero indicates the component was successfully set.",
      "id": "2315"
    },
    {
      "names": [
        "Integer Set_vector(Vector3 &vect, Integer index, Real value)"
      ],
      "description": "Set component number index of the three dimensional vector vect to the value value. A function return value of zero indicates the component was successfully set.",
      "id": "2316"
    },
    {
      "names": [
        "Integer Set_vector(Vector4 &vect, Integer index, Real value)"
      ],
      "description": "Set component number index of the four dimensional vector vect to the value value. A function return value of zero indicates the component was successfully set.",
      "id": "2317"
    },
    {
      "names": [
        "Integer Get_vector(Vector2 &vect, Integer index, Real &value)"
      ],
      "description": "Vectors and MatricesPage 123\f12d Model Programming Language Manual",
      "id": "2318"
    },
    {
      "names": [
        "Integer Get_vector(Vector3 &vect, Integer index, Real &value)"
      ],
      "description": "For the three dimensional vector vect return the component number index in value. A function return value of zero indicates the component was successfully returned.",
      "id": "2319"
    },
    {
      "names": [
        "Integer Get_vector(Vector4 &vect, Integer index, Real &value)"
      ],
      "description": "For the four dimensional vector vect return the component number index in value. A function return value of zero indicates the component was successfully returned.",
      "id": "2320"
    },
    {
      "names": [
        "Real Get_vector(Vector2 &vect, Integer index)"
      ],
      "description": "For the two dimensional vector vect, return the component number index as the return value ofthe function.",
      "id": "2321"
    },
    {
      "names": [
        "Real Get_vector(Vector3 &vect, Integer index)"
      ],
      "description": "For the three dimensional vector vect, return the component number index as the return value ofthe function.",
      "id": "2322"
    },
    {
      "names": [
        "Real Get_vector(Vector4 &vect, Integer index)"
      ],
      "description": "For the four dimensional vector vect, return the component number index as the return value ofthe function. Page 124Vectors and Matrices\fChapter 5 12dPL Library Calls",
      "id": "2323"
    },
    {
      "names": [
        "Integer Get_vector_length(Vector2 &vect, Real &value)"
      ],
      "description": "For the two dimensional vector vect, return the length of the vector in value. Note: for V(x,y), length = square root of (x*x + y*y)A function return value of zero indicates the length was successfully returned.",
      "id": "2324"
    },
    {
      "names": [
        "Integer Get_vector_length(Vector3 &vect, Real &value)"
      ],
      "description": "For the three dimensional vector vect, return the length of the vector in value. Note: for V(x,y,z), length = square root of (x*x + y*y +z*z)A function return value of zero indicates the length was successfully returned.",
      "id": "2325"
    },
    {
      "names": [
        "Integer Get_vector_length(Vector4 &vect, Real &value)"
      ],
      "description": "For the four dimensional vector vect, return the length of the vector in value. Note: for V(x,y,z,w), length = square root of (x*x + y*y +z*z + w*w)A function return value of zero indicates the length was successfully returned.",
      "id": "2326"
    },
    {
      "names": [
        "Real Get_vector_length(Vector2 &vect)"
      ],
      "description": "Standard vector length and return it as return valueFor the two dimensional vector vect, return the length of the vector as the return value of thefunction. Note: for V(x,y), length = square root of (x*x + y*y)",
      "id": "2327"
    },
    {
      "names": [
        "Real Get_vector_length(Vector3 &vect)"
      ],
      "description": "For the three dimensional vector vect, return the length of the vector as the return value of thefunction. Note: for V(x,y,z), length = square root of (x*x + y*y +z*z)",
      "id": "2328"
    },
    {
      "names": [
        "Real Get_vector_length(Vector4 &vect)"
      ],
      "description": "For the four dimensional vector vect, return the length of the vector as the return value of thefunction. Note: for V(x,y,z,w), length = square root of (x*x + y*y +z*z + w*w)",
      "id": "2329"
    },
    {
      "names": [
        "Integer Get_vector_length_squared(Vector2 &vect, Real &value)"
      ],
      "description": "For the two dimensional vector vect, return the square of the length of the vector in value. Note: for V(x,y), length squared = x*x + y*yA function return value of zero indicates the length squared was successfully returned.",
      "id": "2330"
    },
    {
      "names": [
        "Integer Get_vector_length_squared(Vector3 &vect, Real &value)"
      ],
      "description": "For the three dimensional vector vect, return the square of the length of the vector in value. Note: for V(x,y,z), length squared = x*x + y*y + z*zA function return value of zero indicates the length squared was successfully returned.",
      "id": "2331"
    },
    {
      "names": [
        "Integer Get_vector_length_squared(Vector4 &vect, Real &value)"
      ],
      "description": "Page 126Vectors and Matrices\fChapter 5 12dPL Library CallsFor the four dimensional vector vect, return the square of the length of the vector in value. Note: for V(x,y,z,w), length squared = x*x + y*y + z*z + w*wA function return value of zero indicates the length squared was successfully returned.",
      "id": "2332"
    },
    {
      "names": [
        "Real Get_vector_length_squared(Vector2 &vect)"
      ],
      "description": "For the two dimensional vector vect, return the square of the length of the vector as the functionreturn value. Note: for V(x,y), length squared = x*x + y*y",
      "id": "2333"
    },
    {
      "names": [
        "Real Get_vector_length_squared(Vector3 &vect)"
      ],
      "description": "For the three dimensional vector vect, return the square of the length of the vector as thefunction return value. Note: for V(x,y,z), length squared = x*x + y*y + z*z",
      "id": "2334"
    },
    {
      "names": [
        "Real Get_vector_length_squared(Vector4 &vect)"
      ],
      "description": "For the four dimensional vector vect, return the square of the length of the vector as the functionreturn value. Note: for V(x,y,z,w), length squared = x*x + y*y + z*z + w*w",
      "id": "2335"
    },
    {
      "names": [
        "Integer Get_vector_normalize(Vector2 &vect, Vector2 &normalised)"
      ],
      "description": "For the two dimensional vector vect, return the normalised vector of vect in the Vector2normalised. Note: for a normalised vector, length = 1 and for the vector V(x,y), the normalised vectorN(a,b) is:N(a,b) = (x/length(V),y/length(V))Vectors and MatricesPage 127\f12d Model Programming Language ManualA function return value of zero indicates the normalised vector was successfully returned.",
      "id": "2336"
    },
    {
      "names": [
        "Integer Get_vector_normalize(Vector3 &vect, Vector3 &normalised)"
      ],
      "description": "For the three dimensional vector vect, return the normalised vector of vect in the Vector3normalised. Note: for a normalised vector, length = 1 and for the vector V(x,y,z), the normalised vectorN(a,b,c) is:N(a,b,c) = (x/length(V),y/length(V),z/length(V))A function return value of zero indicates the normalised vector was successfully returned.",
      "id": "2337"
    },
    {
      "names": [
        "Integer Get_vector_normalize(Vector4 &vect, Vector4 &normalised)"
      ],
      "description": "For the four dimensional vector vect, return the normalised vector of vect in the Vector4normalised. Note: for a normalised vector, length = 1 and for the vector V(x,y,z,w), the normalised vectorN(a,b,c,d) is:N(a,b,c,d) = (x/length(V),y/length(V),z/length(V),w/length(V))A function return value of zero indicates the normalised vector was successfully returned.",
      "id": "2338"
    },
    {
      "names": [
        "Vector2 Get_vector_normalize(Vector2 &vect)"
      ],
      "description": "For the two dimensional vector vect, return the normalised vector of vect as the function returnvalue. Note: for a normalised vector, length = 1 and for the vector V(x,y), the normalised vectorN(a,b) is:N(a,b) = (x/length(V),y/length(V))",
      "id": "2339"
    },
    {
      "names": [
        "Vector3 Get_vector_normalize(Vector3 &vect)"
      ],
      "description": "For the three dimensional vector vect, return the normalised vector as the function return value. Note: for a normalised vector, length = 1 and for the vector V(x,y,z), the normalised vectorN(a,b,c) is:N(a,b,c) = (x/length(V),y/length(V),z/length(V))",
      "id": "2340"
    },
    {
      "names": [
        "Vector4 Get_vector_normalize(Vector4 &vect)"
      ],
      "description": "For the four dimensional vector vect, return the normalised vector as the function return value. Note: for a normalised vector, length = 1 and for the vector V(x,y,z,w), the normalised vectorN(a,b,c,d) is:N(a,b,c,d) = (x/length(V),y/length(V),z/length(V),w/length(V))",
      "id": "2341"
    },
    {
      "names": [
        "Integer Get_vector_homogenize(Vector3 &vect, Vector3 &homogenized)"
      ],
      "description": "For the three dimensional vector vect, return the homogenized vector of vect in the Vector3homogenized. Note: for a homogenized vector, the third component = 1 and for the vector V(x,y,z), thehomogenized vector H(a,b,c) is:H(a,b,c) = (x/z,y/z,1)A function return value of zero indicates the homogenized vector was successfully returned.",
      "id": "2342"
    },
    {
      "names": [
        "Integer Get_vector_homogenize(Vector4 &vect, Vector4 &homogenized)"
      ],
      "description": "For the four dimensional vector vect, return the homogenized vector of vect in the Vector4homogenized. Note: for a homogenized vector, the fourth component = 1 and for the vector V(x,y,z,w), thehomogenized vector H(a,b,c,d) is:H(a,b,c,d) = (x/z,y/w,z/w,1)A function return value of zero indicates the homogenized vector was successfully returned.",
      "id": "2343"
    },
    {
      "names": [
        "Vector3 Get_vector_homogenize(Vector3 &vect)"
      ],
      "description": "For the three dimensional vector vect, return the homogenized vector of vect as the functionreturn value. Note: for a homogenized vector, the third component = 1 and for the vector V(x,y,z), thehomogenized vector H(a,b,c) is:H(a,b,c) = (x/z,y/z,1)",
      "id": "2344"
    },
    {
      "names": [
        "Vector4 Get_vector_homogenize(Vector4 &vect)"
      ],
      "description": "For the four dimensional vector vect, return the homogenized vector of vect as the functionreturn value. Note: for a homogenized vector, the fourth component = 1 and for the vector V(x,y,z,w), thehomogenized vector H(a,b,c,d) is:H(a,b,c,d) = (x/z,y/w,z/w,1)",
      "id": "2345"
    },
    {
      "names": [
        "Integer Set_matrix_zero(Matrix3 &matrix)"
      ],
      "description": "For the three by three Matrix3 matrix, set all the values in the matrix to zero. A function return value of zero indicates the matrix was successfully zero\u2019d.",
      "id": "2346"
    },
    {
      "names": [
        "Integer Set_matrix_zero(Matrix4 &matrix)"
      ],
      "description": "For the four by four Matrix4 matrix, set all the values in the matrix to zero. A function return value of zero indicates the matrix was successfully zero\u2019d.",
      "id": "2347"
    },
    {
      "names": [
        "Integer Set_matrix_identity(Matrix3 &matrix)"
      ],
      "description": "For the three by three Matrix3 matrix, set matrix to the identity matrix. That is, for the matrix (row,column) values are:matrix(1,1) = 1matrix (1,2) = 0matrix(1,3) = 0matrix(2,1) = 0matrix (2,2) = 1matrix(2,3) = 0matrix(3,1) = 0matrix (3,2) = 0matrix(3,3) = 1A function return value of zero indicates the matrix was successfully set to the identity matrix.",
      "id": "2348"
    },
    {
      "names": [
        "Integer Set_matrix_identity(Matrix4 &matrix)"
      ],
      "description": "For the four by four Matrix4 matrix, set matrix to the identity matrix. That is, for the matrix (row,column) values are:matrix(1,1) = 1matrix (1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix (2,2) = 1matrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix (3,2) = 0matrix(3,3) = 1matrix(3,4) = 0matrix(4,1) = 0matrix (4,2) = 0matrix(4,3) = 0matrix(4,4) = 1A function return value of zero indicates the matrix was successfully set to the identity matrix.",
      "id": "2349"
    },
    {
      "names": [
        "Integer Set_matrix(Matrix3 &matrix, Real value)"
      ],
      "description": "For the three by three Matrix4 matrix, set all the values in the rows and columns of matrix tovalue. A function return value of zero indicates the matrix was successfully set to value.",
      "id": "2350"
    },
    {
      "names": [
        "Integer Set_matrix(Matrix4 &matrix, Real value)"
      ],
      "description": "For the four by four Matrix4 matrix, set all the values in the rows and columns of matrix to value. A function return value of zero indicates the matrix was successfully set to value.",
      "id": "2351"
    },
    {
      "names": [
        "Integer Set_matrix(Matrix3 &matrix, Integer row, Integer col, Real value)"
      ],
      "description": "For the three by three Matrix3 matrix, set the value of matrix(row,col) to value. A function return value of zero indicates the matrix(row,col) was successfully set to value.",
      "id": "2352"
    },
    {
      "names": [
        "Integer Set_matrix(Matrix4 &matrix, Integer row, Integer col, Real value)"
      ],
      "description": "For the four by four Matrix4 matrix, set the value of matrix(row,col) to value. A function return value of zero indicates the matrix(row,col) was successfully set to value.",
      "id": "2353"
    },
    {
      "names": [
        "Integer Get_matrix(Matrix3 &matrix, Integer row, Integer col, Real &value)"
      ],
      "description": "For the three by three Matrix3 matrix, get the value of matrix(row,col) and return it in value. A function return value of zero indicates the matrix(row,col) was successfully returned.",
      "id": "2354"
    },
    {
      "names": [
        "Integer Get_matrix(Matrix4 &matrix, Integer row, Integer col, Real &value)"
      ],
      "description": "For the four by four Matrix4 matrix, get the value of matrix(row,col) and return it in value. A function return value of zero indicates the matrix(row,col) was successfully returned.",
      "id": "2355"
    },
    {
      "names": [
        "Real Get_matrix(Matrix3 &matrix, Integer row, Integer col)"
      ],
      "description": "For the three by three Matrix3 matrix, the value of matrix(row,col) is returned as the functionreturn value.",
      "id": "2356"
    },
    {
      "names": [
        "Real Get_matrix(Matrix4 &matrix, Integer row, Integer col)"
      ],
      "description": "For the four by four Matrix3 matrix, the value of matrix(row,col) /.",
      "id": "2357"
    },
    {
      "names": [
        "Integer Set_matrix_row(Matrix3 &matrix, Integer row, Vector3 &vect)"
      ],
      "description": "For the three by three Matrix3 matrix, set the values of row row to the values of the componentsof the Vector3 vect.  That is:matrix(row,1) = vect(1)matrix(row,2) = vect(2)matrix(row,3) = vect(3). A function return value of zero indicates that the row of matrix was successfully set.",
      "id": "2358"
    },
    {
      "names": [
        "Integer Set_matrix_row(Matrix4 &matrix, Integer row, Vector4 &vect)"
      ],
      "description": "For the four by four Matrix4 matrix, set the values of row row to the values of the components ofthe Vector4 vect.  That is:matrix(row,1)=vect(1) matrix(row,2)=vect(2) matrix(row,3)=vect(3) matrix(row,4)=vect(4). A function return value of zero indicates the row of matrix was successfully set.",
      "id": "2359"
    },
    {
      "names": [
        "Integer Get_matrix_row(Matrix3 &matrix, Integer row, Vector3 &vect)"
      ],
      "description": "For the three dimensional vector vect, set the values of vect to the values of row row of thethree by three Matrix3 matrix.  That is:vect(1) = matrix(row,1)vect(2) = matrix(row,2)vect(3) = matrix(row,3). A function return value of zero indicates that the components of vect were successfully set.",
      "id": "2360"
    },
    {
      "names": [
        "Integer Get_matrix_row(Matrix4 &matrix, Integer row, Vector4 &vect)"
      ],
      "description": "For the four dimensional vector vect, set the values of vect to the values of row row of the fourby four Matrix4 matrix.  That is:vect(1)=matrix(row,1) vect(2)=matrix(row,2) vect(3)=matrix(row,3) vect(4)=matrix(row,4). A function return value of zero indicates that the components of vect were successfully set.",
      "id": "2361"
    },
    {
      "names": [
        "Vector3 Get_matrix_row(Matrix3 &matrix, Integer row)"
      ],
      "description": "For the three by three Matrix3 matrix, the values of row row of matrix are returned as theVector3 function return value.",
      "id": "2362"
    },
    {
      "names": [
        "Vector4 Get_matrix_row(Matrix4 &matrix, Integer row)"
      ],
      "description": "For the four by four Matrix4 matrix, the values of row row of matrix are returned as the Vector4function return value.",
      "id": "2363"
    },
    {
      "names": [
        "Integer Get_matrix_transpose(Matrix3 &source, Matrix3 &target)"
      ],
      "description": "For the three by three Matrix3 matrix, return the transpose of matrix as Matrix3 target. That is, target(row,column) = matrix(column,row). A function return value of zero indicates the matrix transpose was successfully returned.",
      "id": "2364"
    },
    {
      "names": [
        "Integer Get_matrix_transpose(Matrix4 &source, Matrix4 &target)"
      ],
      "description": "For the four by four Matrix3 matrix, return the transpose of matrix as Matrix4 target. That is, target(row,column) = matrix(column,row). A function return value of zero indicates the matrix transpose was successfully returned.",
      "id": "2365"
    },
    {
      "names": [
        "Matrix3 Get_matrix_transpose(Matrix3 &source)"
      ],
      "description": "For the three by three Matrix3 source, return the transpose of matrix as the function return value.",
      "id": "2366"
    },
    {
      "names": [
        "Matrix4 Get_matrix_transpose(Matrix4 &source)"
      ],
      "description": "For the four by four Matrix4 source, return the transpose of matrix as the function return value.",
      "id": "2367"
    },
    {
      "names": [
        "Integer Get_matrix_inverse(Matrix3 &source, Matrix3 &target)"
      ],
      "description": "For the three by three Matrix3 source, return the inverse of the matrix as Matrix3 target. A function return value of zero indicates the matrix inverse was successfully returned.",
      "id": "2368"
    },
    {
      "names": [
        "Integer Get_matrix_inverse(Matrix4 &source, Matrix4 &target)"
      ],
      "description": "For the four by four Matrix4 source, return the inverse of the matrix as Matrix4 target. A function return value of zero indicates the matrix inverse was successfully returned.",
      "id": "2369"
    },
    {
      "names": [
        "Matrix3 Get_matrix_inverse(Matrix3 &source)"
      ],
      "description": "For the three by three Matrix3 source, return the inverse of the matrix as the function returnvalue.",
      "id": "2370"
    },
    {
      "names": [
        "Matrix4 Get_matrix_inverse(Matrix4 &source)"
      ],
      "description": "For the four by four Matrix4 source, return the inverse of the matrix as the function return value.",
      "id": "2371"
    },
    {
      "names": [
        "Integer Swap_matrix_rows(Matrix3 &matrix, Integer row1, Integer row2)"
      ],
      "description": "For the three by three Matrix3 matrix, swap row row1 with row row2. A function return value of zero indicates the swapped matrix was successfully returned.",
      "id": "2372"
    },
    {
      "names": [
        "Integer Swap_matrix_cols(Matrix4 &matrix, Integer Swap_matrix_rows(Matrix4 &matrix, Integer row1, Integer row2)",
        "Integer Swap_matrix_rows(Matrix4 &matrix, Integer row1, Integer row2)"
      ],
      "description": "For the four by four Matrix4 matrix, swap row row1 with row row2. A function return value of zero indicates the swapped matrix was successfully returned.",
      "id": "2373"
    },
    {
      "names": [
        "Integer Swap_matrix_cols(Matrix3 &matrix, Integer col1, Integer col2)"
      ],
      "description": "For the three by three Matrix3 matrix, swap column col1 with column col2. A function return value of zero indicates the swapped matrix was successfully returned.",
      "id": "2374"
    },
    {
      "names": [
        "Integer Swap_matrix_cols(Matrix4 &matrix, Integer col1, Integer col2)"
      ],
      "description": "For the four by four Matrix4 matrix, swap column col1 with column col2. A function return value of zero indicates the swapped matrix was successfully returned.",
      "id": "2375"
    },
    {
      "names": [
        "Integer Get_translation_matrix(Vector2 &vect, Matrix3 &matrix)"
      ],
      "description": "From the two dimension vector vect, create the three by three matrix representing the vector asa translation and return it as matrix. That is, for vect(x,y), the matrix(row,column) values are:matrix(1,1) = 1matrix(1,2) = 0matrix(1,3) = xmatrix(2,1) = 0matrix(2,2) = 1matrix(2,3) = ymatrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1A function return value of zero indicates the translation matrix was successfully returned.",
      "id": "2376"
    },
    {
      "names": [
        "Integer Get_translation_matrix(Vector3 &vect, Matrix4 &matrix)"
      ],
      "description": "From the three dimension vector vect, create the four by four Matrix4 matrix representing thevector as a translation and return it as matrix. That is, for vect(x,y,z), the matrix(row,column) values are:matrix(1,1) = 1matrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = xmatrix(2,1) = 0matrix(2,2) = 1matrix(2,3) = 0matrix(2,4) = ymatrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1matrix(3,4) = zmatrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 0matrix(4,4) = 1A function return value of zero indicates the translation matrix was successfully returned.",
      "id": "2377"
    },
    {
      "names": [
        "Matrix3 Get_translation_matrix(Vector2 &vect)"
      ],
      "description": "For the two dimension vector vect, the three by three Matrix3 representing the vector as atranslation is returned as the function return value.",
      "id": "2378"
    },
    {
      "names": [
        "Matrix4 Get_translation_matrix(Vector3 &vect)"
      ],
      "description": "For the three dimension vector vect, the four by four Matrix4 representing the vector as atranslation is returned as the function return value. Vectors and MatricesPage 137\f12d Model Programming Language Manual",
      "id": "2379"
    },
    {
      "names": [
        "Integer Get_rotation_matrix(Vector2 &centre, Real angle, Matrix3 &matrix)"
      ],
      "description": "From the Vector2 centre and Real angle, construct the three by three Matrix3 matrix givenbelow. If centre is (x,y), C = cos(angle) and S = sin(angle). the matrix(row,column) values are:matrix(1,1) = Cmatrix(1,2) = -Smatrix(1,3) = x*(1 - C) + y*Smatrix(2,1) = Smatrix(2,2) = Cmatrix(2,3) = y*(1 - C) - x*Smatrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1angle is in radians and is measured in a counterclockwise direction from the positive x-axis. A function return value of zero indicates the matrix was successfully returned.",
      "id": "2380"
    },
    {
      "names": [
        "Integer Get_rotation_matrix(Vector3 &axis, Real angle, Matrix4 &matrix)"
      ],
      "description": "From the Vector3 axis and Real angle, construct the four by four Matrix4 matrix given below. If Naxis is axis normalised and Naxis = (X,Y,Z), C = cos(angle), S = sin(angle) and T = 1 - Cthe matrix(row,column) values are:matrix(1,1) = T*X*X+Cmatrix(1,2) = T*X*Y-SZmatrix(1,3) = T*X*Z+S*Y matrix(1,4) = 0matrix(2,1) = T*X*Y+S*Z matrix(2,2) = T*Y*Y+Cmatrix(2,3) = T*Y*Z-S*X matrix(1,4) = 0matrix(3,1) = T*X*Z-S*Y matrix(3,2) = T*Y*Z+S*X matrix(3,3) = T*Z*Z+Cmatrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 0matrix(1,4) = 0matrix(4,1) = 1angle is in radians and is measured a rotation on the plane orthogonal to the axis, the directionof the rotation is counterclockwise in relative to axis as the plane upward vector. A function return value of zero indicates the matrix was successfully returned.",
      "id": "2381"
    },
    {
      "names": [
        "Matrix3 Get_rotation_matrix(Vector2 &centre, Real angle)"
      ],
      "description": "From the Vector2 centre and Real angle, construct the three by three Matrix3 matrix givenbelow and return it as the function return value. If centre is (X,Y), C = cos(angle) and S = sin(angle) and Matrix3 matrix. the matrix(row,column) values are:Page 138Vectors and Matrices\fChapter 5 12dPL Library Callsmatrix(1,1) = Cmatrix(1,2) = -Smatrix(1,3) = X*(1 - C) + Y*Smatrix(2,1) = Smatrix(2,2) = Cmatrix(2,3) = Y*(1 - C) - X*Smatrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1angle is in radians and is measured in a counterclockwise direction from the positive x-axis.",
      "id": "2382"
    },
    {
      "names": [
        "Matrix4 Get_rotation_matrix(Vector3 &axis, Real angle)"
      ],
      "description": "From the Vector3 axis and Real angle, construct the four by four Matrix4 matrix given belowand return it as the function return value. If Naxis is axis normalised and Naxis = (X,Y,Z), C = cos(angle), S = sin(angle), T = 1 - C andMatrix4 matrixthe matrix(row,column) values are:matrix(1,1) = T*X*X+Cmatrix(1,2) = T*X*Y-SZmatrix(1,3) = T*X*Z+S*Y matrix(1,4) = 0matrix(2,1) = T*X*Y+S*Z matrix(2,2) = T*Y*Y+Cmatrix(2,3) = T*Y*Z-S*X matrix(1,4) = 0matrix(3,1) = T*X*Z-S*Y matrix(3,2) = T*Y*Z+S*X matrix(3,3) = T*Z*Z+Cmatrix(1,4) = 0matrix(4,1) = 0matrix(4,1) = 1matrix(4,2) = 0matrix(4,3) = 0angle is in radians and is measured a rotation on the plane orthogonal to the axis, the directionof the rotation is counterclockwise in relative to axis as the plane upward vector.",
      "id": "2383"
    },
    {
      "names": [
        "Integer Get_scaling_matrix(Vector2 &scale, Matrix3 &matrix)"
      ],
      "description": "From the two dimension vector scale, create the three by three Matrix3 representing the vectoras a scaling matrix and return it as matrix. That is, for scale(S,T), the matrix(row,column) values are:matrix(1,1) = Smatrix(1,2) = 0matrix(1,3) = 0matrix(2,1) = 0matrix(2,2) = Tmatrix(2,3) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1A function return value of zero indicates the translation matrix was successfully returned.",
      "id": "2384"
    },
    {
      "names": [
        "Integer Get_scaling_matrix(Vector3 &scale, Matrix4 &matrix)"
      ],
      "description": "From the three dimension vector scale, create the four by four Matrix4 representing the vector asVectors and MatricesPage 139\f12d Model Programming Language Manuala scaling matrix and return it as matrix. That is, for scale(S,T,U), the matrix(row,column) values are:matrix(1,1) = Smatrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = Tmatrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = Umatrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 0matrix(4,4) = 1A function return value of zero indicates the scaling matrix was successfully returned.",
      "id": "2385"
    },
    {
      "names": [
        "Matrix3 Get_scaling_matrix(Vector2 &scale)"
      ],
      "description": "From the two dimension vector scale, create the three by three Matrix3 matrix as given below. The matrix represents the vector as a scaling and it is return as the function return value. That is, for scale(S,T), the returned matrix(row,column) values are:matrix(1,1) = Smatrix(1,2) = 0matrix(1,3) = 0matrix(2,1) = 0matrix(2,2) = Tmatrix(2,3) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1",
      "id": "2386"
    },
    {
      "names": [
        "Matrix4 Get_scaling_matrix(Vector3 &scale)"
      ],
      "description": "From the three dimension vector scale, create the four by four Matrix4 matrix as given below. The matrix represents the vector as a scaling and it is return as the function return value. That is, for scale(S,T,U), the returned matrix(row,column) values are:matrix(1,1) = Smatrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = Tmatrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = Umatrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 0matrix(4,4) = 1",
      "id": "2387"
    },
    {
      "names": [
        "Integer Get_perspective_matrix(Real d, Matrix4 &matrix)"
      ],
      "description": "For the distance d, create the four by four Matrix4 and return it as matrix. That is, for Real d, the matrix(row,column) values are:Page 140Vectors and Matrices\fChapter 5 12dPL Library Callsmatrix(1,1) = 1matrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = 1matrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1matrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 1/dmatrix(4,4) = 0A function return value of zero indicates the matrix was successfully returned.",
      "id": "2388"
    },
    {
      "names": [
        "Matrix4 Get_perspective_matrix(Real d)"
      ],
      "description": "For the distance d, create the four by four Matrix4 and return it as the function return value. That is, for Real d, the matrix(row,column) values are:matrix(1,1) = 1matrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = 1matrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1matrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 1/dmatrix(4,4) = 0matrix is returned as the function return value.",
      "id": "2389"
    },
    {
      "names": [
        "Integer Triangle_normal(Real xarray[], Real yarray[], Real zarray[], Real Normal[])"
      ],
      "description": "Calculate the normal vector to the triangle given by the coordinates in the arrays xarray[],yarray[], zarray[] (the arrays are of dimension 3). The normal vector is returned in Normal[1], Normal [2] and Normal[3]. A function return value of zero indicates the function was successful.",
      "id": "1737"
    },
    {
      "names": [
        "Integer Triangle_normal(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3, Real &xn, Real &yn, Real &zn)"
      ],
      "description": "Calculate the normal vector to the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and(x3,y3,z3). The normal vector is returned in (xn,yx,zn). A function return value of zero indicates the function was successful.",
      "id": "1738"
    },
    {
      "names": [
        "Integer Triangle_slope(Real xarray[], Real yarray[], Real zarray[], Real &slope)"
      ],
      "description": "Calculate the slope of the triangle given by the coordinates in the arrays xarray[], yarray[],zarray[] (the arrays are of dimension 3), and return the value as slope. The units for slope is an angle in radians measured from the horizontal plane. A function return value of zero indicates the function was successful.",
      "id": "1739"
    },
    {
      "names": [
        "Integer Triangle_slope(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3, Real &slope)"
      ],
      "description": "Calculate the slope of the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and (x3,y3,z3),and return the value as slope. Page 142Triangles\fChapter 5 12dPL Library CallsThe units for slope is an angle in radians measured from the horizontal plane. A function return value of zero indicates the function was successful.",
      "id": "1740"
    },
    {
      "names": [
        "Integer Triangle_aspect(Real xarray[], Real yarray[], Real zarray[], Real &aspect)"
      ],
      "description": "Calculate the aspect of the triangle given by the coordinates in the arrays xarray[], yarray[],zarray[] (the arrays are of dimension 3), and return the value as aspect. The units for aspect is a bearing in radians.  That is, aspect is given as a clockwise anglemeasured from the positive y-axis (North). A function return value of zero indicates the function was successful.",
      "id": "1741"
    },
    {
      "names": [
        "Integer Triangle_aspect(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3, Real &aspect)"
      ],
      "description": "Calculate the aspect of the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and(x3,y3,z3), and return the value as aspect. The units for aspect is a bearing in radians.  That is, aspect is given as a clockwise anglemeasured from the positive y-axis (North). A function return value of zero indicates the function was successful.",
      "id": "1742"
    },
    {
      "names": [
        "Integer System(Text msg)"
      ],
      "description": "Make a system call. The message passed to the system call is given by Text msg. For example,system (\"ls *. tmp>fred\")A function return value of zero indicates success. NoteThe types of system calls that can be made is operating system dependant.",
      "id": "21"
    },
    {
      "names": [
        "Integer Date(Text &date)"
      ],
      "description": "Get the current date. The date is returned in Text date with the formatDDD MMM dd yyyywhere DDD is three characters for the day, MMM is three characters for the monthdd is two numbers for the day of the month and yyyy is four numbers for the year, and each isseparated by one space. For example,Sun Mar 17 1996A function return value of zero indicates the date was returned successfully.",
      "id": "658"
    },
    {
      "names": [
        "Integer Date(Integer &d, Integer &m, Integer &y)"
      ],
      "description": "Get the current date as the day of the month, month & year. The day of the month value is returned in Integer d. The month value is returned in Integer m. The year value is returned in Integer y (fours digits). A function return value of zero indicates the date was returned successfully.",
      "id": "659"
    },
    {
      "names": [
        "Integer Time(Integer &time)"
      ],
      "description": "Get the current time as seconds since January 1 1970. The time value is returned in Integer time. A function return value of zero indicates the time was returned successfully.",
      "id": "660"
    },
    {
      "names": [
        "Integer Time(Real &time)"
      ],
      "description": "Get the current time as the number of seconds since January 1st 1601 down to precision of 10-7(100 nanoseconds) and return it as time. A function return value of zero indicates the time was returned successfully.",
      "id": "661"
    },
    {
      "names": [
        "Integer Time(Text &time)"
      ],
      "description": "Get the current time. The time is returned in Text time with the format (known as the ctime format)DDD MMM dd hh:mm:ss yyyy wherewhere DDD is three characters for the day, MMM is three characters for the monthdd two digits for the day of the month, hh two digits for the hour, mm two digits for the hour (intwenty four hour format), ss two digits for seconds and yyyy is four digits for the year. For example,Sun Mar 17 23:19:24 1996A function return value of zero indicates the time was returned successfully.",
      "id": "662"
    },
    {
      "names": [
        "Integer Time(Integer &h, Integer &m, Real &sec)"
      ],
      "description": "Get the current time in hours, minutes & seconds. The hours value is returned in Integer h. SystemPage 145\f12d Model Programming Language ManualThe minutes value is returned in Integer m. The seconds value is returned in Real s. A function return value of zero indicates the time was returned successfully.",
      "id": "663"
    },
    {
      "names": [
        "Integer Convert_time(Integer t1, Text &t2)"
      ],
      "description": "Convert the time in seconds since 00:00:00 am January, 1 1970 Coordinated Universal Time(UTC), to the standard ctime format given in an earlier Time function. The time in seconds is given by Integer t1 and the Text t2 returns the time in ctime format.",
      "id": "671"
    },
    {
      "names": [
        "Integer Convert_time(Text &t1, Integer t2)"
      ],
      "description": "Convert the time in ctime format to the time in seconds since 00:00:00 am January, 1 1970Coordinated Universal Time (UTC). The time in ctime format is given by Text t1 and the time in seconds is returned as Integer t2. NoteNot yet implemented.",
      "id": "672"
    },
    {
      "names": [
        "Integer Convert_time(Integer t1, Text format, Text &t2)"
      ],
      "description": "Convert the time in seconds since 00:00:00 am January, 1 1970 Coordinated Universal Time(UTC), to the Text format (as defined in the section on Title Blocks in the 12d Model ReferenceManual). The time in seconds is given by Integer t1 and the Text t2 returns the time in the specifiedformat.",
      "id": "683"
    },
    {
      "names": [
        "Text Get_macro_name()"
      ],
      "description": "Get the name of the macro file. Page 146System\fChapter 5 12dPL Library CallsThe function return value is the macro file name.",
      "id": "1093"
    },
    {
      "names": [
        "Integer Recalc_chain_running()"
      ],
      "description": "Check if the macro is running through a chain. The function returns 1 if the macro is running through the a chain; and 0 otherwise.",
      "id": "3811"
    },
    {
      "names": [
        "Integer Create_macro(Text macro_name, Integer run_now)"
      ],
      "description": "Start the macro from the file named macro_name; if run_now is not zero then also execute themacro. macro_name are comprised of\"macro_options user_macro_name macro_arguments\"where the macro_options (optional) is a list of zero or more key words (all starting with - (minus)character):-no_consoledon\u2019t display macro console-close_on_exitremove console when macro terminates-buttonshave buttons for finish, restart and quit on console-allow_defaultsallow default answers for console questions-execute_nowsame as run_nowwhere macro_arguments (optional) are space delimited valuesand user_macro_name is the full path name to the 4do file to be executedFor exampleCreate_macro( \"-no_console -close_on_exit \\\"my macro name. 4do\\\" \\\"arg 1\\\" \\\"arg 2\\\"\" , 1 );A return value of zero indicates the function call was successful.",
      "id": "1627"
    },
    {
      "names": [
        "Integer Get_user_name(Text &name)"
      ],
      "description": "Get user\u2019s name, the name currently logged onto the system. SystemPage 147\f12d Model Programming Language ManualThe name is returned in Text name. A function return value of zero indicates the name was returned successfully.",
      "id": "814"
    },
    {
      "names": [
        "Text Get_host_id()"
      ],
      "description": "For the current 12d Model session, get the 12d dongle number of the 12d dongle being used toprovide the 12d Model license for the session. The dongle number, which is alphanumeric, is returned as Text as the function return value.",
      "id": "2678"
    },
    {
      "names": [
        "Integer Get_module_license(Text module_name)"
      ],
      "description": "Get the status of each module license. If the module_name is:points_limittins_limitremaining_dayswarnedthe function returns number of available units. If the module_name is:oklitedrainagedigitizerhec_rashec_rasIIdranaldwater_supplylandxmlsharing12d_field_setout 12d_field_pickup12d_field_tunneldrainage_dynamictracksolids_modellinggold_surveygoldgistuflow_1d_wbm_dongletuflow_tcftuflow_10ktuflow_100ktuflow_opentuflow_open_gputuflow_roadtuflow_road_gpupoint_cloudtmr_point_cloudpipelinesewersurveytin_analysisvolumesvolumesIItrarrvehicle_pathsight_distancecartographicdxfgeniokeaysPage 148System\fChapter 5 12dPL Library CallsgeocomparcvieweducationalloansubscriptionmaintenancedgnalignmentdemonstrationrentaltemporarytrainingThe function returns 1 if the module is licensed, 0 if it is not licensed.",
      "id": "1094"
    },
    {
      "names": [
        "Text Getenv(Text env)"
      ],
      "description": "Get the value of the environment variable named env and return it as Text as the function returnvalue.",
      "id": "1087"
    },
    {
      "names": [
        "Integer Backup_version_file(Text filename, Integer recycle)"
      ],
      "description": "Back up a file using extra numbered extension. When a . 4d file is updated (like survey. 4d), you get the filessurvey. 4dsurvey. 4d. 1survey. 4d. 2etcwhere the highest numbered file is the most recent backup.  We limit the number of backupversions to 100.  The recycle only takes affect when 100 is reached.  If the value of recycle is 0,an error message is displayed.  For nonzero recycle , will push down all the files.  (ie)survey. 4d. 1 is deletedsurvey. 4d. 2 renamed to survey. 4d. 1survey. 4d. 3 renamed to survey. 4d. 2etc to 100and the \"most recent\" backup of survey. 4d is survey. 4d. 100.  This means that the most recent willalways be survey. 4d. 100",
      "id": "2139"
    },
    {
      "names": [
        "Integer Restore_version_file(Text filename, Integer swap)"
      ],
      "description": "SystemPage 149\f12d Model Programming Language ManualRestore a file to the most recent backup (highest numbered file). The swap value does the following: for a non 0 value, if the most recent backup files issurvey. 4d. 77, the survey. 4d is renamed to survey. 4d. 77, and survey. 4d. 77 is renamed tosurvey. 4d.  You could view this as a swapping of the contents of the file. If the swap value is 0, survey. 4d is deleted, and survey. 4d. 77 is renamed to survey. 4d",
      "id": "2140"
    },
    {
      "names": [
        "Text Find_system_file(Text new_file_name, Text old_file_name, Text env)"
      ],
      "description": "Returns the path to the setup file new_file_name as the function return value. If old_file_name is not blank, it also looks for the old file names for the set ups files that wereused in the Unix version of 12d Model. So if you want to support the legacy file names then you pass in new_file_name andold_file_name.  If you are only looking for the post Unix names for the set up files, passold_file_name = \"\". env is the name of the environment variable that can also point to the set up file. The search order is1.  If not blank, search for the file given by the environment variable env2.  If new_file_name is not blank, next search for a file with the name new_file_name in the normal Set Ups files search order. 3.  Finally if the no file has yet been found, if old_file_name is not blank, search for old_file_namein the normal Set Ups files search order. If no file is found then the function return value is a blank Text (i. e.  \"\"). For example,Find_system_file(\"colours. 4d\", \"colour_map. def\", \"COLOURS_4D\")will find the colours set up file which may be pointed to by the environment variableCOLOURS_4D (if non zero), or may have the name \"colours. 4d\", or finally may have the name\"colour_map. def\".",
      "id": "1088"
    },
    {
      "names": [
        "Text Find_system_file_quiet(Text new_file_name, Text old_file_name, Text env)"
      ],
      "description": "Identical to Find_system_file call except there is no error message on output windows when nofile found.",
      "id": "7667"
    },
    {
      "names": [
        "void Get_4dmodel_version(Integer &major, Integer &minor, Text &patch)"
      ],
      "description": "Get information about the 12d Model build. The function return value is a special patch version description for pre-release versions and it iswritten after the 12d Model version information.  It is blank for release versions. major - is the major number for 12d Model.  That is, the number before the \". \". For example 14 for 12d Model 14. 00minor - is the minor number for 12d Model.  That is, the number after the \". \". For example 00 for 12d Model 14. 00patch - special patch description for pre-release versions.  It is written after the 12d Modelversion information.  It is blank for release versions. For example \"Alpha 274 SLF,SLX,Image Dump - Not For Production\"A function return value of zero indicates the function was successful.",
      "id": "1089"
    },
    {
      "names": [
        "Integer Is_practise_version()"
      ],
      "description": "Check if the current 12d Model is a practise version. A non-zero function return value indicates that 12d Model is a practise version. A zero function return value indicates that 12d Model is not a practise version. Warning this is the opposite of most 12dPL function return values",
      "id": "1090"
    },
    {
      "names": [
        "Integer Create_process(Text program_name, Text command_line, Text start_directory, Integer flags, Integer wait, Integer inherit)"
      ],
      "description": "This function basically calls the Microsoft CreateProcess function as defined inhttp://msdn. microsoft. com/en-us/library/ms682425%28v=vs. 85%29. aspx. The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (andalso do not have a // in front of them):BOOL WINAPI CreateProcess(__in_opt__inout_opt// __in_opt// __in_opt__in__in// __in_opt__in_optLPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,SystemPage 151\f12d Model Programming Language Manual// __in// __out);LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformationwhere program_name is passed as lpApplicationName, command_line is passed asdwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags ispassed as dwCreationFlags and inherit is passed as bInheritHandles. If wait = 1, the macro will wait until the process finishes before continuing. If wait = 0, the macro won\u2019t wait until the process finishes before continuing. A function return value of zero indicates the function was successful. Note: Create_process can not be called from the 12d Model Practise version.",
      "id": "1620"
    },
    {
      "names": [
        "Integer Create_process(Text program_name, Text command_line, Text start_directory, Integer flags, Integer inherit, Unknown &handle)"
      ],
      "description": "This function calls the Microsoft CreateProcess function as defined inhttp://msdn. microsoft. com/en-us/library/ms682425%28v=vs. 85%29. aspx. The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (andalso not have a // in front of them):BOOL WINAPI CreateProcess(__in_opt__inout_opt// __in_opt// __in_opt__in__in// __in_opt__in_opt// __in// __out);LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformationwhere program_name is passed as lpApplicationName, command_line is passed asdwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags ispassed as dwCreationFlags and inherit is passed as bInheritHandles. The handle to the created process is returned in Unknown handle. The macro can check if the process is still running by calling Process_exists. A function return value of zero indicates the function was successful. Note: The difference between this function and Create_process(Text program_name,Textcommand_line,Text start_directory,Integer flags,Integer wait,Integer inherit) is that a handle to theprocess is created and returned as handle and this can be checked to see if the process is stillrunning.  So there is no wait flag but there is more flexibility since the macro can check withProcess_exists and decide when, and when not to wait. Note: Create_process can not be called from 12d Model Practise version. Page 152System\fChapter 5 12dPL Library Calls",
      "id": "2635"
    },
    {
      "names": [
        "Integer Process_exists(Unknown handle)"
      ],
      "description": "Check to see if the process given by handle exists.  That is, check that the process created byCreate_process(Text program_name,Text command_line,Text start_directory,Integer flags,Integerinherit,Unknown &handle) is still running. A non-zero function return value indicates that the process handle is still running (i. e.  the processexists). A zero function return value indicates that the process does not exist. Warning this is the opposite of most 12dPL function return values",
      "id": "2636"
    },
    {
      "names": [
        "Integer Shell_execute(Widget widget, Text operation, Text file, Text parameters, Text directory, Integer showcmd)"
      ],
      "description": "This function calls the Microsoft ShellExecute function as defined inhttp://msdn. microsoft. com/en-us/library/bb762153%28v=vs. 85%29. aspxThis Microsoft call executes an operation on a file. The 12d function gives access to the Microsoft ShellExecute arguments that are in bold (andalso not have a // in front of them):HINSTANCE ShellExecute(__in_opt HWND hwnd,__in_opt LPCTSTR lpOperation,__in LPCTSTR lpFile,__in_opt LPCTSTR lpParameters,__in_opt LPCTSTR lpDirectory,__in INT nShowCmd);where operation is passed as lpOperation, file is passed as lp, parameters is passed aslpParameters, directory is passed as lpDirectory and showcmd is passed as ShowCmd. widget is passed as hwnd, and in most standard case, it is the current macro panel. The handle to the created process is returned in Unknown handle. The macro can check if the process is still running by calling Process_exists. A function return value of zero indicates the function was successful. Note: Create_process can not be called from 12d Model Practise version.",
      "id": "1623"
    },
    {
      "names": [
        "Integer Get_display_resolution(Integer &width, Integer &height)"
      ],
      "description": "Get display resolution of current work area as number pixels Integer width heightA return value of zero indicates the function call was successful.",
      "id": "3180"
    },
    {
      "names": [
        "Integer Is_12d_exe_64bit()"
      ],
      "description": "Return one if the current session of 12D is running from 64bit exe; return zero otherwise.",
      "id": "3840"
    },
    {
      "names": [
        "Integer Play_sound(Text file_name)"
      ],
      "description": "Play a sound file with given path name file_nameA return value of zero indicates the function call was successful.",
      "id": "3910"
    },
    {
      "names": [
        "Integer Dump_slx_image(Text slx_file_name, Integer image_format, Text image_file_name)"
      ],
      "description": "Dump an image file in the given location image_file_name using given format image_formatfrom the panel defined by slx configuration slx_file_name. The list for valid image_formatJPEG6TIF8BMP9JPEG 200012PNG17A return value of zero indicates the function call was successful.",
      "id": "3911"
    },
    {
      "names": [
        "Integer Dump_view_image(View view, Integer image_format, Integer include_title, Text image_file_name)"
      ],
      "description": "Dump an image file in the given location image_file_name using given format image_formatfrom the view. The list for valid image_formatJPEG6TIF8BMP9JPEG 200012PNG17A return value of zero indicates the function call was successful.",
      "id": "3912"
    },
    {
      "names": [
        "Uid Get_next_uid()"
      ],
      "description": "Get the next available Uid and return it as the function return value. This is often used in Undo\u2019s.",
      "id": "1920"
    },
    {
      "names": [
        "Integer Get_next_id()"
      ],
      "description": "Get the next available Id and return it as the function return value. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Uid Get_next_uid() instead.",
      "id": "1892"
    },
    {
      "names": [
        "Uid Get_last_uid()"
      ],
      "description": "Ids, Uids and GuidsPage 157\f12d Model Programming Language ManualGet the last used Uid (that is the one from the last created Element) and return it as the functionreturn value.",
      "id": "2072"
    },
    {
      "names": [
        "Integer Get_last_id()"
      ],
      "description": "Get the last used Id (that is the one from the last created Element) and return it as the functionreturn value. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_last_uid instead (see Get_last_uid().",
      "id": "2071"
    },
    {
      "names": [
        "void Print(Uid uid)"
      ],
      "description": "Prints a text conversion of the UID uid to the Output Window. Three is no function return value.",
      "id": "2052"
    },
    {
      "names": [
        "Integer Convert_uid(Uid uid, Text &txt)"
      ],
      "description": "Convert the UID uid to a Text.  The Text is returned in txt. A function return value of zero indicates the Uid was successfully converted to text.",
      "id": "2053"
    },
    {
      "names": [
        "Integer Convert_uid(Uid uid, Integer &id)"
      ],
      "description": "Convert the UID uid to an Integer The Integer is returned in id. Note - this in only possible if the uid can be expressed as an Integer,A function return value of zero indicates the Uid was successfully converted.  to an Integer.",
      "id": "2054"
    },
    {
      "names": [
        "Integer Convert_uid(Text txt, Uid &uid)"
      ],
      "description": "Convert the Text txt to an UID.  The Uid is returned in uid. Note - this in only possible if txt is in the correct form of an Uid. A function return value of zero indicates the Text was successfully converted to a Uid.",
      "id": "2055"
    },
    {
      "names": [
        "Integer Convert_uid(Integer id, Uid &uid)"
      ],
      "description": "Convert the Integer id to an UID.  The Uid is returned in uid. Note - this in only possible if the Integer id can be expressed as an Uid. A function return value of zero indicates the Integer was successfully converted to a Uid.",
      "id": "2056"
    },
    {
      "names": [
        "Text To_text(Uid uid)"
      ],
      "description": "Convert the UID uid to a Text. The Text is returned as the function return value.",
      "id": "2057"
    },
    {
      "names": [
        "Integer From_text(Text txt, Uid &uid)"
      ],
      "description": "Convert the Text txt to a Uid and the Uid is returned in uid. A function return value of zero indicates the txt was successfully converted to a Uid.",
      "id": "2063"
    },
    {
      "names": [
        "void Null(Uid &uid)"
      ],
      "description": "Set the UID uid to be a null Uid. There is no function return value. Ids, Uids and GuidsPage 159\f12d Model Programming Language Manual",
      "id": "2058"
    },
    {
      "names": [
        "Integer Is_null(Uid uid)"
      ],
      "description": "Check to see if the UID uid is a null Uid. A non-zero function return value indicates that uid is null. A zero function return value indicates that uid is not null. Warning this is the opposite of most 12dPL function return values",
      "id": "2059"
    },
    {
      "names": [
        "Integer Is_contour(Uid uid)"
      ],
      "description": "Check to see if the UID uid is the Uid of a string created by a 12d Model Contour option. Note - such strings are ignored in 12d Model number counts for Base size. A non-zero function return value indicates that the uid is of a string created by a 12d ModelContour option. A zero function return value indicates that the uid is not the uid of a string created by a 12d ModelContour option. Warning this is the opposite of most 12dPL function return values",
      "id": "2064"
    },
    {
      "names": [
        "Integer Is_plot(Uid uid)"
      ],
      "description": "Check to see if the UID uid is the Uid of a string created by a 12d Model Plot option. Note - such strings are ignored in 12d Model number counts for Base size. A non-zero function return value indicates that the uid is of a string created by a 12d Model Plotoption. A zero function return value indicates that the uid is not the uid of a string created by a 12d ModelPlot option. Warning this is the opposite of most 12dPL function return values",
      "id": "2065"
    },
    {
      "names": [
        "Integer Is_function(Uid uid)"
      ],
      "description": "Check to see if the UID 12d Model is the Uid of a 12d Model Function/Macro_Function. A non-zero function return value indicates that the uid is of a 12d Model Function/Macro_FunctionA zero function return value indicates that the uid is not the uid of a 12d Model Function/Macro_Function. Warning this is the opposite of most 12dPL function return values",
      "id": "2066"
    },
    {
      "names": [
        "Integer Function_exists(Integer id)"
      ],
      "description": "Check to see if id is the Id of a 12d Function. 1 for yesA non-zero function return value indicates that id is the Id of a 12d Model Function/Macro_FunctionA zero function return value indicates that id is not the Id of a 12d Model Function/Macro_Function. Warning this is the opposite of most 12dPL function return valuesDeprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Integer Is_function(Uid uid) instead.",
      "id": "1187"
    },
    {
      "names": [
        "Integer Is_valid(Uid uid)"
      ],
      "description": "Check to see if the UID uid is a valid Uid. A non-zero function return value indicates that uid is a valid Uid. Warning this is the opposite of most 12dPL function return values",
      "id": "2060"
    },
    {
      "names": [
        "Integer Is_unknown(Uid uid)"
      ],
      "description": "Check to see if the UID uid is a valid Uid. A non-zero function return value indicates that uid is not a valid Uid. Warning this is the opposite of most 12dPL function return values",
      "id": "2061"
    },
    {
      "names": [
        "Integer Is_global(Uid uid)"
      ],
      "description": "Check to see if the UID uid is of a shared element.  That is, the element has not been created inthis project but has been shared in from another project. A non-zero function return value indicates that uid is of a shared element. Warning this is the opposite of most 12dPL function return values",
      "id": "2062"
    },
    {
      "names": [
        "Integer Convert_guid(Guid guid, Text &txt)"
      ],
      "description": "Convert the GUID guid to a Text.  The Text is returned in txt. A function return value of zero indicates the Guid was successfully converted to text.",
      "id": "3213"
    },
    {
      "names": [
        "Integer Convert_guid(Text txt, Guid &guid)"
      ],
      "description": "Convert the Text txt to a GUID.  The Guid is returned in guid. Note - this in only possible if txt is in the correct form of a Guid. A function return value of zero indicates the Text was successfully converted to a Guid.",
      "id": "3214"
    },
    {
      "names": [
        "void Print(Guid guid)"
      ],
      "description": "Prints a text conversion of the GUID guid to the Output Window. Three is no function return value.",
      "id": "3562"
    },
    {
      "names": [
        "void Null(Guid &guid)"
      ],
      "description": "Set the GUID guid to be a null Guid. There is no function return value.",
      "id": "3771"
    },
    {
      "names": [
        "Integer Is_valid(Guid guid)"
      ],
      "description": "Check to see if the GUID guid is valid. A non-zero function return value indicates that guid is a valid Guid. Warning this is the opposite of most 12dPL function return values",
      "id": "3772"
    },
    {
      "names": [
        "Integer Is_same(Guid guid1, Guid guid2)"
      ],
      "description": "Check to see if the GUID guid1 is the same as the GUID guid2. A non-zero function return value indicates that the two GUID are the same.",
      "id": "3773"
    },
    {
      "names": [
        "Integer GUID_Gen(Integer format, Integer classic, Integer comment, Text &guid)"
      ],
      "description": "Generate a new GUID and assign the text representation to Text guid. If Integer classic is not zero, then the GUID generation might be less secure, e. g.  it can betraced back to the ethernet address of the user computer. Valid format is Integer from 0 to 7Format 0 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 1 example guid// {EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroIMPLEMENT_OLECREATE(<<class>>, <<external_name>>,0xeee5d2b4, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 2 example guid// {EEE5D2B5-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroDEFINE_GUID(<<name>>,0xeee5d2b5, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Ids, Uids and GuidsPage 163\f12d Model Programming Language ManualFormat 3 example guid// {EEE5D2B6-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zerostatic const GUID <<name>> ={ 0xeee5d2b6, 0xdcce, 0x11d3, { 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0 } };Format 4 example guid{EEE5D2B7-DCCE-11D3-B4C4-D237E35336F0}Format 5 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 6 example guid__declspec(uuid(\"EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0\"))Format 7 the guid contains six 32 Bit integers from the components of the GUID structure in base64A function return value of zero indicates the guid text was successfully generated.",
      "id": "2305"
    },
    {
      "names": [
        "Integer GUID_Gen(Guid guid, Integer format, Integer comment, Text &guid)"
      ],
      "description": "Form the text representation to Text guid_text of a given Guid guid. Valid format is Integer from 0 to 7Format 0 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 1 example guid// {EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroIMPLEMENT_OLECREATE(<<class>>, <<external_name>>,0xeee5d2b4, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 2 example guid// {EEE5D2B5-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroDEFINE_GUID(<<name>>,0xeee5d2b5, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 3 example guid// {EEE5D2B6-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zerostatic const GUID <<name>> ={ 0xeee5d2b6, 0xdcce, 0x11d3, { 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0 } };Format 4 example guid{EEE5D2B7-DCCE-11D3-B4C4-D237E35336F0}Format 5 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 6 example guidPage 164Ids, Uids and Guids\fChapter 5 12dPL Library Calls__declspec(uuid(\"EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0\"))Format 7 the guid contains six 32 Bit integers from the components of the GUID structure in base64A function return value of zero indicates the guid text was successfully set.",
      "id": "3832"
    },
    {
      "names": [
        "void Print(Text msg)"
      ],
      "description": "Print the Text msg to the Output Window.",
      "id": "24"
    },
    {
      "names": [
        "void Print(Integer value)"
      ],
      "description": "Print the Integer value out in text to the Output Window.",
      "id": "22"
    },
    {
      "names": [
        "void Print(Integer64 value)"
      ],
      "description": "Print the 64 bit Integer value out in text to the Output Window.",
      "id": "3561"
    },
    {
      "names": [
        "void Print(Real value)"
      ],
      "description": "Print the Real value with six (6) decimal places out in text to the Output Window.  For more (orless) decimal places, use To_text call to create the text to be printed with the call Print(Textmsg); for example Print(To_text(r,12)) will print Real r with 12 decimal places to the OutputWindow.",
      "id": "23"
    },
    {
      "names": [
        "void Print(Attribute_Blob value)"
      ],
      "description": "Page 166Input/Output\fChapter 5 12dPL Library CallsConvert Attribute_Blob value to text and print out the text to the Output Window.",
      "id": "3563"
    },
    {
      "names": [
        "void Print()"
      ],
      "description": "Print the text \"\\n\" (a new line) to the Output Window.",
      "id": "25"
    },
    {
      "names": [
        "void Clear_console()"
      ],
      "description": "Clear the Output Window of any previous information. Warning: This function work on the Output Window, not the Macro Console.",
      "id": "1295"
    },
    {
      "names": [
        "Integer Show_console(Integer show)"
      ],
      "description": "If show = 0, the Output Window is hidden. If show = 1, the Output Window is shown. Warning: This function works on the Output Window, not the Macro Console. A function return value of zero indicates the function was successful. Note: the Output Window can also be turned on/off with the 12d Model toggle optionWindow =>Output Window.",
      "id": "1728"
    },
    {
      "names": [
        "Integer Is_console_visible()"
      ],
      "description": "The function return value indicates if the Output Window is visible or hidden. If the Integer return value is 0 then the Output Window is hidden. If the Integer return value is 1 then the Output Window is visible (not hidden). Warning: This function works on the Output Window, not the Macro Console.",
      "id": "1729"
    },
    {
      "names": [
        "Integer Is_console_floating()"
      ],
      "description": "The function return value indicates if the Output Window is floating or not floating. If the Integer return value is 1 then the Output Window is floating. If the Integer return value is 0 then the Output Window is either not floating or not visible. Warning: This function works on the Output Window, not the Macro Console.",
      "id": "1731"
    },
    {
      "names": [
        "Integer Console_to_clipboard()"
      ],
      "description": "Copy the highlighted contents of the Output Window to the clip board. Warning: This function works on the Output Window, not the Macro Console. A function return value of zero indicates the copy was successful.",
      "id": "1736"
    },
    {
      "names": [
        "Integer Set_clipboard_text(Text txt)"
      ],
      "description": "Write the Text txt to the clip board. A function return value of zero indicates the write was successful.",
      "id": "1521"
    },
    {
      "names": [
        "Integer Get_clipboard_text(Text &txt)"
      ],
      "description": "Get the text in the clipboard and return in Text txt. A function return value of zero indicates the read was successful.",
      "id": "1522"
    },
    {
      "names": [
        "Integer File_exists(Text file_name)"
      ],
      "description": "Checks to see if a file of name file_name exists. A non-zero function return value indicates the file exists. A zero function return value indicates the file does not exist. Warning - this is the opposite to most 12dPL function return values",
      "id": "202"
    },
    {
      "names": [
        "Integer File_open(Text file_name, Text mode, Text ccs_text, File &file)"
      ],
      "description": "Opens a file of name file_name with open type mode.  The file unit is returned as File file. The file can be opened as a Unicode file with a specified encoding or as an ANSI file by using anon-blank value for the ccs_text parameter. The available modes arerr+rbww+wbaa+open for reading.  If the file does not exist then it fails. open for update, that is for reading and writing.  The file must exist. read binaryopens a file for writing.  If the files exists, its current contents are destroyed. opens a file for reading and writing.  If the files exists, its current contents are\uf020destroyedwrite binaryopen for writing at the end of file (before the end of file marker).  \uf020If the file does not exist then it is created. opens for reading and writing to the end of the file (before the end of file marker). \uf020If the file does not exist then it is created. When a file is open for append (i. e.  a or a+), it is impossible to overwrite information that isalready in the file.  Any writes are automatically added to the end of the file. ccs_text specifies the coded character set to use and can have the values:ccs_text = \"ccs = UTF-8\"Input/OutputPage 169\f12d Model Programming Language Manualccs_text = \"ccs = UTF-16LE\"ccs_text = \"ccs = UNICODE\"or ccs_text = \"\" (leave it blank) if ANSI encoding is required. For exampleFile_open(\"test file\", \"w\",\"ccs=UNICODE\",file_handle);Note: BOM detection only applies to files that are opened in Unicode mode (that is, by passing anon blank ccs parameter). If the file already exists and is opened for reading or appending, the Byte Order Mark (BOM), if itpresent in the file, determines the encoding.  The BOM encoding takes precedence over theencoding that is specified by the ccs flag.  The ccs encoding is only used when no BOM ispresent or the file is a new file. The following table summarises the use of Byte Order Marks (BOM\u2019s) for the various ccs flagsgiven to File_open and what happens when there is a BOM in an existing file. Encodings Used When Opening a File Based on non blank ccs Flag and BOMccs flagUNICODEUTF-8UTF-16LENo BOM (or new file)UTF-16LEUTF-8UTF-16LEBOM: UTF-8UTF-8UTF-8UTF-8BOM: UTF-16UTF-16LEUTF-16LEUTF-16LEFiles opened for writing in Unicode mode (non-blank ccs) automatically have a BOM written tothem. When a file that begins with a Byte Order Mark (BOM) is opened, the file pointer is positionedafter the BOM (that is, at the start of the file's actual content). For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file was opened successfully.",
      "id": "2076"
    },
    {
      "names": [
        "Integer File_open(Text file_name, Text mode, File &file)"
      ],
      "description": "Note: this option now only creates UNICODE files.  To open a ANSI file, use File_open(Textfile_name,Text mode,Text ccs_text,File &file) with ccs_text = \"\" instead. Opens a file of name file_name with open type mode.  The file unit is returned as File file. The available modes arerr+rbww+wbPage 170open for readingopen for update, reading and writingread binarytruncate or create for writingtruncate or create for updatewrite binaryInput/Output\fChapter 5 12dPL Library Callsaa+append open for writing at the end of file or create for writingopen for update at end of file or create for updateWhen a file is open for append (i. e.  a or a+), it is impossible to overwrite information that isalready in the file. A function return value of zero indicates the file was opened successfully.",
      "id": "335"
    },
    {
      "names": [
        "Integer File_read_line(File file, Text &text_in)"
      ],
      "description": "Read a line of text from the File file.  The text is read into the Text text_in. A function return value of -1 indicates the end of the file. A function return value of zero indicates the text was successfully read in.",
      "id": "337"
    },
    {
      "names": [
        "Integer File_write_line(File file, Text text_out)"
      ],
      "description": "Write a line of text to the File file.  The text to write out is Text text_out. A function return value of zero indicates the text was successfully written out.",
      "id": "338"
    },
    {
      "names": [
        "Integer File_tell(File file, Integer &pos)"
      ],
      "description": "Get the current position in the File file. A function return value of zero indicates the file position was successfully found.",
      "id": "341"
    },
    {
      "names": [
        "Integer File_seek(File file, Integer pos)"
      ],
      "description": "Go to the position pos in the File file. Position pos has normally been found by a previous File_tell call. If the file open type was a or a+, then a File_seek cannot be used to position for a write in anypart of the file that existed when the file was opened. Input/OutputPage 171\f12d Model Programming Language ManualIf you have to File_seek to the beginning of the file, use File_tell to get the initial position andFile_seek to it rather than to position 0. So for a Unicode file, if you have to File_seek to the beginning of the file but after the BOM youneed to first have used a File_tell to get and record the position of the initial start of the file whenit is opened (for a Unicode file, File_open positions after the BOM) and then to File_seek to thatrecorded beginning of the file rather than to File_seek to position 0. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file position was successfully found.",
      "id": "342"
    },
    {
      "names": [
        "Integer File_flush(File file)"
      ],
      "description": "Make sure the File file is up to date with what has been written out. A function return value of zero indicates the file was successfully flushed.",
      "id": "340"
    },
    {
      "names": [
        "Integer File_rewind(File file)"
      ],
      "description": "Rewind the File file to its beginning. WARNING: This function is not to be used with a Unicode file. If the file is a Unicode file then File_rewind will rewind to BEFORE the BOM.  Then writing outany information will overwrite the BOM. So for a Unicode file, to correctly position to the beginning of the file but after the BOM you needto first have used a File_tell when opening the file to get and record position of the initial start ofthe file (for a Unicode file, File_open positions after the BOM) and then to File_seek to thatrecorded beginning of the file rather than to File_seek to position 0. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file was successfully rewound.",
      "id": "339"
    },
    {
      "names": [
        "Integer File_read(File file, Integer &value)"
      ],
      "description": "Read four bytes from the binary file file and return it as an Integer in value. A function return value of zero indicates the Integer was successfully returned. Page 172Input/Output\fChapter 5 12dPL Library Calls",
      "id": "1710"
    },
    {
      "names": [
        "Integer File_write(File file, Integer value)"
      ],
      "description": "Write out value as a four byte integer to the binary file file. A function return value of zero indicates the Integer was successfully written.",
      "id": "1713"
    },
    {
      "names": [
        "Integer File_read(File file, Real &value)"
      ],
      "description": "Read eight bytes from the binary file file and return it as a Real in value. A function return value of zero indicates the Real was successfully returned.",
      "id": "1711"
    },
    {
      "names": [
        "Integer File_write(File file, Real value)"
      ],
      "description": "Write out value as an eight byte real to the binary file file. A function return value of zero indicates the Real was successfully written.",
      "id": "1714"
    },
    {
      "names": [
        "Integer File_read_unicode(File file, Integer length, Text &value)"
      ],
      "description": "Read length bytes from the binary file file and return it as Text in value. Note - this works for UNICODE files. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully returned.",
      "id": "2676"
    },
    {
      "names": [
        "Integer File_write_unicode(File file, Integer length, Text value)"
      ],
      "description": "Write out value as length lots of two byte Unicode characters to the binary file file. If there is less than length characters in Text then the number of characters is brought up tolength by writing out null padding. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully written.",
      "id": "2677"
    },
    {
      "names": [
        "Integer File_read(File file, Integer length, Text &value)"
      ],
      "description": "Read length bytes from the binary file file and return it as Text in value. Note - this only works for ANSI Text. If any of the characters of Text is not ANSI, then a non-zero function return value is returned. WARNING: This function is not to be used for Unicode files.  For Unicode files, useFile_read_unicode(File file,Integer length,Text &value) instead. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully returned.",
      "id": "1712"
    },
    {
      "names": [
        "Integer File_write(File file, Integer length, Text value)"
      ],
      "description": "Write out value as length lots of one byte ANSI characters to the binary file file. If any of the characters of Text is not ANSI, then no data is written out and a non-zero functionreturn value is returned. If there is less than length characters in Text then the number of characters is brought up tolength by writing out null padding. WARNING: This function is not to be used for Unicode files.  For Unicode files, useFile_write_unicode(File file,Integer length,Text value) instead. For more information on ANSI, ASCII, Unicode, UTF\u2019s and BOM\u2019s, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully written.",
      "id": "1715"
    },
    {
      "names": [
        "Integer File_read(File file, Integer length, Integer array[])"
      ],
      "description": "Read the next length lots of four bytes from the binary file file and return them as an Integerarray in array[]. A function return value of zero indicates the Integer array was successfully returned.",
      "id": "1716"
    },
    {
      "names": [
        "Integer File_write(File file, Integer length, Integer array[])"
      ],
      "description": "Write out the Integer array array[] as length lots of four byte integers to the binary file file. A function return value of zero indicates the Integer array was successfully written.",
      "id": "1718"
    },
    {
      "names": [
        "Integer File_read(File file, Integer length, Real array[])"
      ],
      "description": "Read the next length lots of eight bytes from the binary file file and return them as a Real arrayin array[]. A function return value of zero indicates the Real array was successfully returned.",
      "id": "1717"
    },
    {
      "names": [
        "Integer File_write(File file, Integer length, Real array[])"
      ],
      "description": "Write out the Integer array array[] as length lots of eight byte reals to the binary file file. A function return value of zero indicates the Real array was successfully written.",
      "id": "1719"
    },
    {
      "names": [
        "Integer File_read_short(File file, Integer &value)"
      ],
      "description": "Read two bytes from the binary file file and return it as an Integer in value. A function return value of zero indicates the Integer was successfully returned.",
      "id": "1720"
    },
    {
      "names": [
        "Integer File_write_short(File file, Integer value)"
      ],
      "description": "Write out value as a two byte integer to the binary file file. Because it is only a two byte integer, value must be between -2 to the power of 32, and +2 to thepower 32. A function return value of zero indicates the Integer was successfully written.",
      "id": "1722"
    },
    {
      "names": [
        "Integer File_read_short(File file, Real &value)"
      ],
      "description": "Read four bytes from the binary file file and return it as a Real in value. Note - value can only be in the range -32,768 and 32,767. A function return value of zero indicates the Real was successfully returned.",
      "id": "1721"
    },
    {
      "names": [
        "Integer File_write_short(File file, Real value)"
      ],
      "description": "Write out value as a four byte real to the binary file file. Because it is only a four byte real, only seven significant figures can be written out. A function return value of zero indicates the Real was successfully written.",
      "id": "1723"
    },
    {
      "names": [
        "Integer File_close(File file)"
      ],
      "description": "Close the File file. A function return value of zero indicates file was closed successfully.",
      "id": "336"
    },
    {
      "names": [
        "Integer File_delete(Text file_name)"
      ],
      "description": "Delete a file from the diskA function return value of zero indicates the file was deleted.",
      "id": "213"
    },
    {
      "names": [
        "Integer File_copy(Text new_name, Text old_name)"
      ],
      "description": "Copy a file from the disk. A function return value of zero indicates the file was copied successfully.",
      "id": "3837"
    },
    {
      "names": [
        "Integer File_set_endian(File file, Integer big)"
      ],
      "description": "<not implemented>",
      "id": "1708"
    },
    {
      "names": [
        "Integer File_get_endian(File file, Integer &big)"
      ],
      "description": "<not implemented>",
      "id": "1709"
    },
    {
      "names": [
        "Integer File_redirect(Text input_file_path, Integer read_write, Integer use_cache, Text &output_file_path)"
      ],
      "description": "Currently, this function is to work out the local file path output_file_path from a Synergy inputpath input_file_path. Integer read_write 0 means the file is for reading. Integer read_write 1 means the file is for writing. Integer use_cache 1 means true. A function return value of zero indicates the Real was successfully written.",
      "id": "3481"
    },
    {
      "names": [
        "Integer Read_PDF(Text pdf_file, Text output_12da)"
      ],
      "description": "This call is for internal 12D staff only. Read the vectors, texts and clipping boundaries of an exist pdf file pdf_file and write the result toan output 12da file output_12da. A function return value of zero indicates the file was copied successfully.",
      "id": "3839"
    },
    {
      "names": [
        "Integer Delete_files(Text name_match)"
      ],
      "description": "Delete all the files with name matching the wild card pattern name_matchA function return value of zero indicates the file was copied successfully.",
      "id": "3921"
    },
    {
      "names": [
        "Integer Read_4d_ascii(Text filename, Text prefix)"
      ],
      "description": "Read in and process the file called filename as a 12d Ascii file.  The post-prefix for models isgiven in prefix. A function return value of zero indicates the file was successfully read.",
      "id": "1166"
    },
    {
      "names": [
        "Integer Read_4d_ascii(Text filename, Dynamic_Element &list)"
      ],
      "description": "Read the data from the 12d Ascii file called filename and load all the created Elements into theDynamic_Element list. A function return value of zero indicates the file was successfully read.",
      "id": "2073"
    },
    {
      "names": [
        "Integer Read_12d_data(Text filename, Text prefix)"
      ],
      "description": "Read in and process the file called filename as a 12d Ascii or 12d XML file.  If the extension offilename is . 12dxml or 12dxmlz, then the reading will try to process the file as of 12d XMLformat; otherwise the reading will try to process the file as of 12d Ascii format.  The post-prefix formodels is given in prefix. A function return value of zero indicates the file was successfully read.",
      "id": "5437"
    },
    {
      "names": [
        "Integer Read_12d_data(Text filename, Dynamic_Element &list)"
      ],
      "description": "Read the data from the 12d Ascii or 12d XML file called filename and load all the createdElements into the Dynamic_Element list.  If the extension of filename is . 12dxml or 12dxmlz,then the reading will try to process the file as of 12d XML format; otherwise the reading will try toprocess the file as of 12d Ascii format. A function return value of zero indicates the file was successfully read.",
      "id": "5438"
    },
    {
      "names": [
        "Integer Read_12d_data(Text filename, Integer use_super, Integer project_att_mode, Integer project_att_dup_mode, Integer model_att_mode, Integer model_att_dup_mode, Integer existing_tin_mode, Text prefix)"
      ],
      "description": "Read in and process the file called filename as a 12d Ascii or 12d XML file.  If the extension offilename is . 12dxml or 12dxmlz, then the reading will try to process the file as of 12d XMLformat; otherwise the reading will try to process the file as of 12d Ascii format.  The post-prefix formodels is given in prefix. If use_super is non zero then old string types will be read in as super string. For the choice in reading project attributes or model attributes; valid values forproject_att_mode and model_att_mode:0 - read and merge1 - delete all old attributes and read2 - do not read (and keep the existing attributes)When read and merge project/moel attributes, valid values for project_att_dup_mode andmodel_att_dup_mode:0 - ignore new values1 - subfix name2 - duplicate3 - delete the existingWhen read a tin that already exists in the current project; valid values for existing_tin_mode:0 - error1 - delete old tin2 - skip new tin3 - rename old tinA function return value of zero indicates the file was successfully read.",
      "id": "6890"
    },
    {
      "names": [
        "Integer Read_12d_data(Text filename, Integer use_super, Integer project_att_mode, Integer project_att_dup_mode, Integer model_att_mode, Integer model_att_dup_mode, Integer existing_tin_mode, Dynamic_Element &list)"
      ],
      "description": "Read the data from the 12d Ascii or 12d XML file called filename and load all the createdElements into the Dynamic_Element list.  If the extension of filename is . 12dxml or 12dxmlz,then the reading will try to process the file as of 12d XML format; otherwise the reading will try toprocess the file as of 12d Ascii format. Page 180Input/Output\fChapter 5 12dPL Library CallsIf use_super is non zero then old string types will be read in as super string. For the choice in reading project attributes or model attributes; valid values forproject_att_mode and model_att_mode:0 - read and merge1 - delete all old attributes and read2 - do not read (and keep the existing attributes)When read and merge project/moel attributes, valid values for project_att_dup_mode andmodel_att_dup_mode:0 - ignore new values1 - subfix name2 - duplicate3 - delete the existingWhen read a tin that already exists in the current project; valid values for existing_tin_mode:0 - error1 - delete old tin2 - skip new tin3 - rename old tinA function return value of zero indicates the file was successfully read.",
      "id": "6891"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of the Element elt to the file.  Anycoordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of the Model containing elt to the file beforewriting out elt. If output_model_name = 0 then don\u2019t write out the Model name. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1630"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of the Element elt to the file.  Anycoordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of the Model containing elt to the file beforewriting out elt. If output_model_name = 0 then don\u2019t write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written. Input/OutputPage 183\f12d Model Programming Language Manual",
      "id": "3192"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in theDynamic_Element list to the file.  Any coordinates and Reals are written out to precision decimalplaces. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element.  The Model name is not repeated if is the same as the previousElement). If output_model_name = 0 then don\u2019t write out the Model names. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1631"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in theDynamic_Element list to the file.  Any coordinates and Reals are written out to precision decimalplaces. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element.  The Model name is not repeated if is the same as the previousElement). If output_model_name = 0 then don\u2019t write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3193"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Model model, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in the Model modelto the file.  Any coordinates and Reals are written out to precision decimal places. Page 184Input/Output\fChapter 5 12dPL Library CallsIf output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don\u2019t write out the Model name. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1632"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in the Model modelto the file.  Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don\u2019t write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3194"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, File file, Integer precision, Integer indent_level)"
      ],
      "description": "Write the 12d Ascii of the Element elt to the File file.  Any coordinates and Reals are written outto precision decimal places.  The information written to the file is indented by indent_levelspaces. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1928"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, File file, Integer precision, Integer indent_level, Integer bool_flags, Real null_value)"
      ],
      "description": "Write the 12d Ascii of the Element elt to the File file.  Any coordinates and Reals are written outto precision decimal places.  The information written to the file is indented by indent_levelspaces. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Input/OutputPage 185\f12d Model Programming Language ManualNull values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3195"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, File file, Integer precision, Integer indent_level, Text header)"
      ],
      "description": "Write the Text header to the File file and then write the 12d Ascii of the Element elt to theFile file.  Any coordinates and Reals are written out to precision decimal places.  The informationwritten to the file is indented by indent_level spaces. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1929"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, File file, Integer precision, Integer indent_level, Text header, Integer bool_flags, Real null_value)"
      ],
      "description": "Write the Text header to the File file and then write the 12d Ascii of the Element elt to theFile file.  Any coordinates and Reals are written out to precision decimal places.  The informationwritten to the file is indented by indent_level spaces. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3196"
    },
    {
      "names": [
        "Integer Write_12d_data(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Dynamic_Element list to the file filename using the formatindicated by the file extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Page 186Input/Output\fChapter 5 12dPL Library CallsAny other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element. If output_model_name = 0 then don\u2019t write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5439"
    },
    {
      "names": [
        "Integer Write_12d(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Dynamic_Element list to the file filename using the formatindicated by the file extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element. If output_model_name = 0 then don\u2019t write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5440"
    },
    {
      "names": [
        "Integer Write_12d_data(Element elt, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write Element elt to the file filename using the format indicated by the file extension. Input/OutputPage 187\f12d Model Programming Language ManualIf the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed as of12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing elt to the file beforewriting out the Element. If output_model_name = 0 then don\u2019t write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5441"
    },
    {
      "names": [
        "Integer Write_12d_data(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Model model to the file filename using the format indicated by thefile extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of model to the file before writing out theElements data. If output_model_name = 0 then don\u2019t write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5442"
    },
    {
      "names": [
        "Menu Create_menu(Text menu_title)"
      ],
      "description": "A Menu is created which is used when referring to this particular menu.  The menu title is definedwhen the menu variable is created and is the Text menu_title. The function return value is the required Menu variable. (To represent menus, 12dPL has this special variable type called Menu. )",
      "id": "171"
    },
    {
      "names": [
        "Integer Menu_delete(Menu menu)"
      ],
      "description": "Delete the menu defined by Menu menu. A function return value of zero indicates the menu was deleted successfully.",
      "id": "588"
    },
    {
      "names": [
        "Integer Create_button(Menu menu, Text button_text, Text button_reply)"
      ],
      "description": "This function adds buttons to the menu with button_text as the text for the button. The button is also supplied with a Text button_reply which is returned to the macro through thefunction Display or Display_relative when the button is selected. MenusPage 189\f12d Model Programming Language ManualThe menu buttons will appear in the Menu in the order that they are added to the menu structureby the Create_button function. A function return value of zero indicates that the button was created successfully.",
      "id": "172"
    },
    {
      "names": [
        "Integer Display(Menu menu, Integer &across_pos, Integer &down_pos, Text &reply)"
      ],
      "description": "When called, the Menu menu is displayed on the screen with screen co-ordinates(across_pos,down_pos). The menu remains displayed on the screen until a menu button is selected by the user. When a menu button is selected, the menu is removed from the screen and the appropriatebutton return code returned in the Text variable reply. Whilst displayed on the screen, the menu can be moved around the 12d Model window by usingthe mouse.  When a menu selection is finally made, the actual position of the menu at selectiontime is returned as (across_pos,down_pos). A function return value of zero indicates that a successful menu selection was made. NoteAn (across_pos,down_pos) of (-1,-1) indicates the current cursor position.",
      "id": "173"
    },
    {
      "names": [
        "Integer Display_relative(Menu menu, Integer &across_rel, Integer &down_rel, Text &reply)"
      ],
      "description": "When called, the Menu menu is displayed on the screen with screen co-ordinates of(across_rel,down_rel) relative to the cursor position. The menu remains displayed until a menu button is selected. When a menu button is selected, the menu is removed from the screen and the appropriatebutton return code returned in the Text variable reply. Whilst displayed, the menu can be moved in 12d Model by using the mouse.  When the selectionis made, the final absolute position of the menu is returned as (across_rel,down_rel). A function return value of zero indicates that a successful menu selection was made. Thus the sequence used to define and display a menu and the relevant functions used are:(a) a Menu variable is created which is used when referring to this particular menu.  The menutitle is defined when the menu variable is created.  Use:Create_menu(Text menu_title)For exampleMenu menu = Create_menu(\"Test\");(b) the menu buttons are added to the menu structure in the order that they will appear in themenu.  The button text and the text that will be returned to the macro if the button is selectedare both supplied.  Use:Create_button(Menu menu,Text button_text,Text reply)Page 190Menus\fChapter 5 12dPL Library CallsFor exampleCreate_button(menu,\"First options\",\"Op1\");Create_button(menu,\"Second options\",\"Op2\");Create_button(menu,\"Finish\",\"Fin\");(c) the menu is displayed on the screen.  The menu will continued to be displayed until a menubutton is selected.  When the menu button is selected, the menu is removed from the screenand the appropriate button return code returned to the macro. Use:Display(Menu menu,Integer row_pos,Integer col_pos,\uf020Text &reply)Display_relative(Menu menu,Integer row_pos,Integer col_pos,\uf020Text &reply)For exampleDisplay(menu,5,10,reply);A more complete example of defining and using a menu is:void main(){// create a menu with title \"Silly Menu\"Menu menu = Create_menu(\"Silly Menu\");/* add menu button with titles \"Read\", \"Write\", \"Draw\"and \"Quit\".  The returns codes for the buttons arethe same as the button titles*/Create_button(menu,\"Read\",\"Read\");Create_button(menu,\"Write\",\"Write\");Create_button(menu,\"Draw\",\"Draw\");Create_button(menu,\"Quit\",\"Quit\");/* display the menu on the screen at the current cursorposition and wait for a button to selected. When a button is selected, print out its return codeIf the return code isn't \"Quit\", redisplay the menu. */Text reply;do {Display(menu,-1,-1,reply);Print(reply); Print(\"\\n\");} while(reply != \"Quit\");}",
      "id": "364"
    },
    {
      "names": [
        "Integer Append(Dynamic_Element from_de, Dynamic_Element &to_de)"
      ],
      "description": "Append the items of the Dynamic_Element from_de to the Dynamic_Element to_de. A function return value of zero indicates the append was successful. Note 1: Because 12dPL has automatic variable type promotions from Element toDynamic_Element, the function can be used asInteger Append(Element from,Dynamic_Element &to_de);Note 2: this Append only act on as the pointer level of the elements, e. g.  no new elements beingcreated nor copied.",
      "id": "220"
    },
    {
      "names": [
        "Integer Null(Dynamic_Element &delt)"
      ],
      "description": "Removes and nulls all the Elements from the Dynamic_Element delt and sets the number ofitems to zero. A function return value of zero indicates that delt was successfully nulled.",
      "id": "127"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Element &delt, Integer &no_items)"
      ],
      "description": "Get the number of Elements currently in the Dynamic_Element delt. The number of Elements is returned in Integer no_items. A function return value of zero indicates the number of Elements was returned successfully.",
      "id": "128"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Element &delt, Integer i, Element &elt)"
      ],
      "description": "Get the ith Element from the Dynamic_Element delt. The Element is returned in elt. A function return value of zero indicates the ith Element was returned successfully.",
      "id": "129"
    },
    {
      "names": [
        "Integer Set_item(Dynamic_Element &delt, Integer i, Element elt)"
      ],
      "description": "Set the ith Element in the Dynamic_Element delt to the Element elt. If the position i is greater or equal to the total number of Elements in the Dynamic_Element, thenthe Dynamic_Element will automatically be extended so that the number of Elements is i.  Anyextra Elements that are added will be set to null. A function return value of zero indicates the Element was successfully set.",
      "id": "130"
    },
    {
      "names": [
        "Integer Null_item(Dynamic_Element &delt, Integer i)"
      ],
      "description": "Set the ith Element to null. A function return value of zero indicates the Element was successfully set to null.",
      "id": "131"
    },
    {
      "names": [
        "Integer Append(Text text, Dynamic_Text &dt)"
      ],
      "description": "Append the Text text to the end of the contents of the Dynamic_Text dt.  This will increase thesize of the Dynamic_Text by one. A function return value of zero indicates the append was successful.",
      "id": "434"
    },
    {
      "names": [
        "Integer Append(Dynamic_Text from_dt, Dynamic_Text &to_dt)"
      ],
      "description": "Append the contents of the Dynamic_Text from_dt to the Dynamic_Text to_dt. A function return value of zero indicates the append was successful.",
      "id": "230"
    },
    {
      "names": [
        "Integer Null(Dynamic_Text &dt)"
      ],
      "description": "Removes and deletes all the Texts from the Dynamic_Text dt and sets the number of items tozero. A function return value of zero indicates that dt was successfully nulled.",
      "id": "226"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Text &dt, Integer &no_items)"
      ],
      "description": "Get the number of Texts currently in the Dynamic_Text dt. Dynamic ArraysPage 195\f12d Model Programming Language ManualThe number of Texts is returned by Integer no_items. A function return value of zero indicates the number of Texts was successfully returned.",
      "id": "227"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Text &dt, Integer i, Text &text)"
      ],
      "description": "Get the ith Text from the Dynamic_Text dt. The Text is returned by text. A function return value of zero indicates the ith Text was returned successfully.",
      "id": "228"
    },
    {
      "names": [
        "Integer Set_item(Dynamic_Text &dt, Integer i, Text text)"
      ],
      "description": "Set the ith Text in the Dynamic_Text dt to the Text text. A function return value of zero indicates success.",
      "id": "229"
    },
    {
      "names": [
        "Integer Get_all_linestyles(Dynamic_Text &linestyles)"
      ],
      "description": "Get all linestyle names defined in the Linestyles pop-up for the current project,and return the list in the Dynamic_Text linestyles. A function return value of zero indicates the linestyle names were returned successfully.",
      "id": "688"
    },
    {
      "names": [
        "Integer Get_all_textstyles(Dynamic_Text &textstyles)"
      ],
      "description": "Get all textstyle names defined in the Textstyles pop-up for the current project,and return the list in the Dynamic_Text textstyles. A function return value of zero indicates the textstyle names are returned successfully.",
      "id": "689"
    },
    {
      "names": [
        "Integer Get_all_symbols(Dynamic_Text &symbols)"
      ],
      "description": "Get all symbol names defined in the Symbols pop-up for the current project, and return the list inthe Dynamic_Text symbols. A function return value of zero indicates the symbol names were returned successfully.",
      "id": "1724"
    },
    {
      "names": [
        "Integer Get_all_patterns(Dynamic_Text &patterns)"
      ],
      "description": "Get all pattern names defined in the Patterns pop-up for the current project, and return the list inthe Dynamic_Text patterns. A function return value of zero indicates the function was successful.",
      "id": "1725"
    },
    {
      "names": [
        "Integer Append(Real value, Dynamic_Real &real_list)"
      ],
      "description": "Append the Real value to the end of the contents of the Dynamic_Real real_list.  This willincrease the size of the Dynamic_Real by one. A function return value of zero indicates the append was successful.",
      "id": "1795"
    },
    {
      "names": [
        "Integer Append(Dynamic_Real from_dr, Dynamic_Real &to_dr)"
      ],
      "description": "Append the contents of the Dynamic_Real from_dr to the Dynamic_Real to_dr. A function return value of zero indicates the append was successful.",
      "id": "1794"
    },
    {
      "names": [
        "Integer Null(Dynamic_Real &real_list)"
      ],
      "description": "Removes all the Reals from the Dynamic_Real real_list and sets the number of items to zero. A function return value of zero indicates that real_list was successfully nulled.",
      "id": "1790"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Real &real_list, Integer &no_items)"
      ],
      "description": "Get the number of Reals currently in the Dynamic_Real real_list. Page 198Dynamic Arrays\fChapter 5 12dPL Library CallsThe number of Reals is returned in Integer no_items. A function return value of zero indicates the number of Reals was returned successfully.",
      "id": "1791"
    },
    {
      "names": [
        "Integer Set_item(Dynamic_Real &real_list, Integer i, Real value)"
      ],
      "description": "Set the ith Real in the Dynamic_Real real_list to the Real value. If the position i is greater or equal to the total number of Real in the Dynamic_Real, then theDynamic_Real will automatically be extended so that the number of Reals is i.  Any extra Realvalues that are added will be not be set, e. g.  may contain any random Real number. A function return value of zero indicates the Real was successfully set.",
      "id": "1793"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Real &real_list, Integer index, Real &value)"
      ],
      "description": "Get the i\u2019th Real from the Dynamic_Real real_list. The Real is returned in value. A function return value of zero indicates the i\u2019th Real was returned successfully.",
      "id": "1792"
    },
    {
      "names": [
        "Integer Append(Integer value, Dynamic_Integer &integer_list)"
      ],
      "description": "Append the Integer value to the end of the contents of the Dynamic_Integer integer_list.  Thiswill increase the size of the Dynamic_Integer by one. A function return value of zero indicates the append was successful.",
      "id": "1785"
    },
    {
      "names": [
        "Integer Append(Dynamic_Integer from_di, Dynamic_Integer &to_di)"
      ],
      "description": "Append the contents of the Dynamic_Integer from_di to the Dynamic_Integer to_di. A function return value of zero indicates the append was successful.",
      "id": "1784"
    },
    {
      "names": [
        "Integer Null(Dynamic_Integer &integer_list)"
      ],
      "description": "Removes all the Integers from the Dynamic_Integer integer_list and sets the number of items tozero. A function return value of zero indicates that integer_list was successfully nulled.",
      "id": "1780"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Integer &integer_list, Integer &count)"
      ],
      "description": "Get the number of Integers currently in the Dynamic_Integer integer_list. Page 200Dynamic Arrays\fChapter 5 12dPL Library CallsThe number of Integers is returned in Integer no_items. A function return value of zero indicates the number of Integers was returned successfully.",
      "id": "1781"
    },
    {
      "names": [
        "Integer Set_item(Dynamic_Integer &integer_list, Integer i, Integer value)"
      ],
      "description": "Set the ith Integer in the Dynamic_Integer integer_list to the Integer value. If the position i is greater or equal the total number of Integer in the Dynamic_Integer, then theDynamic_Integer will automatically be extended so that the number of Integers is i.  Any extraInteger values that are added will be not be set, e. g.  may contain any random Integer number. A function return value of zero indicates the Integer was successfully set.",
      "id": "1783"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Integer &integer_list, Integer i, Integer &value)"
      ],
      "description": "Get the i\u2019th Integer from the Dynamic_Integer integer_list. The Integer is returned in value. A function return value of zero indicates the i\u2019th Integer was returned successfully.",
      "id": "1782"
    },
    {
      "names": [
        "Real Get_x(Point pt)"
      ],
      "description": "Get the x co-ordinate of the Point pt. The function return value is the x co-ordinate value of pt.",
      "id": "241"
    },
    {
      "names": [
        "Real Get_y(Point pt)"
      ],
      "description": "Get the y co-ordinate of the Point pt. The function return value is the y co-ordinate value of pt.",
      "id": "242"
    },
    {
      "names": [
        "Real Get_z(Point pt)"
      ],
      "description": "Get the z co-ordinate of the Point pt. The function return value is the z co-ordinate value of pt.",
      "id": "243"
    },
    {
      "names": [
        "Real Set_x(Point &pt, Real x)"
      ],
      "description": "Set the x co-ordinate of the Point pt to the value x. The function return value is the x co-ordinate value of pt.",
      "id": "244"
    },
    {
      "names": [
        "Real Set_y(Point &pt, Real y)"
      ],
      "description": "Set the y co-ordinate of the Point pt to the value y. The function return value is the y co-ordinate value of pt.",
      "id": "245"
    },
    {
      "names": [
        "Real Set_z(Point &pt, Real z)"
      ],
      "description": "Set the z co-ordinate of the Point pt to the value z. The function return value is the z co-ordinate value of pt.",
      "id": "246"
    },
    {
      "names": [
        "Point Get_start(Line line)"
      ],
      "description": "Get the start Point of the Line line. The function return value is the start Point of line.",
      "id": "251"
    },
    {
      "names": [
        "Point Get_end(Line line)"
      ],
      "description": "Get the end Point of the Line line. The function return value is the start Point of line.",
      "id": "252"
    },
    {
      "names": [
        "Point Set_start(Line &line, Point pt)"
      ],
      "description": "Set the start Point of the Line line to be the Point pt. The function return value is also the start Point of line.",
      "id": "253"
    },
    {
      "names": [
        "Point Set_end(Line &line, Point pt)"
      ],
      "description": "Set the end Point of the Line line to be the Point pt. Page 204Lines\fChapter 5 12dPL Library CallsThe function return value is also the end Point of line.",
      "id": "254"
    },
    {
      "names": [
        "Line Reverse(Line line)"
      ],
      "description": "Reverse the direction of the Line line. That is, Reverse swaps the start and end Points of the Line line. The unary operator \"-\" will also reverse a Line. The function return value is the reversed Line.",
      "id": "255"
    },
    {
      "names": [
        "Point Get_centre(Arc arc)"
      ],
      "description": "Get the centre point of the Arc arc. The function return value is the centre point of the arc.",
      "id": "260"
    },
    {
      "names": [
        "Real Get_radius(Arc arc)"
      ],
      "description": "Get the radius of the Arc arc. The function return value is the radius of the arc. Page 206Arcs\fChapter 5 12dPL Library Calls",
      "id": "261"
    },
    {
      "names": [
        "Point Get_start(Arc arc)"
      ],
      "description": "Get the start point of the Arc arc. The function return value is the start point of the arc.",
      "id": "262"
    },
    {
      "names": [
        "Point Get_end(Arc arc)"
      ],
      "description": "Get the end point of the Arc arc. The function return value is the end point of the arc.",
      "id": "263"
    },
    {
      "names": [
        "Point Set_centre(Arc &arc, Point pt)"
      ],
      "description": "Set the centre point of the Arc arc to be the Point pt.  The start and end points are also translatedby the vector between the new and old arc centres. The function return value is the centre point of the arc.",
      "id": "264"
    },
    {
      "names": [
        "Real Set_radius(Arc &arc, Real rad)"
      ],
      "description": "Set the radius of the Arc arc to the value rad.  The start and end points are projected radially ontothe new arc. The function return value is the radius of the arc.",
      "id": "265"
    },
    {
      "names": [
        "Point Set_start(Arc &arc, Point start)"
      ],
      "description": "ArcsPage 207\f12d Model Programming Language ManualSet the start point of the Arc arc to be the Point start.  If the start point is not on the Arc, the pointis dropped perpendicularly onto the Arc to define the actual start point that lies on the Arc. The function return value is the actual start point on the arc.",
      "id": "266"
    },
    {
      "names": [
        "Point Set_end(Arc &arc, Point end)"
      ],
      "description": "Set the end point of the Arc arc to be the Point end.  If the end point is not on the Arc, the point isdropped perpendicularly onto the Arc to define the actual end point that lies on the Arc. The function return value is the actual end point on the arc.",
      "id": "267"
    },
    {
      "names": [
        "Arc Reverse(Arc arc)"
      ],
      "description": "Reverse the sign of the radius and swap the start and end points of the Arc arc.  Hence thedirection of travel for the Arc is reversed. The unary operator \"-\" will also reverse an Arc. The function return value is the Arc arc.",
      "id": "268"
    },
    {
      "names": [
        "Integer Set_type(Spiral spiral, Integer type)"
      ],
      "description": "LJG - this could have problems with changes.  This is broken for V8, V9, V10V7? depends on file Spirals. 4d; type = 0 clothoid, 1 westrail cubic, 2 cubic spiral 3 naturalclothoid (LandXML) 4 NSW cubic parabolaV9? type = 1 clothoid, 2 westrail cubic, 3 clothoid LandXML 4 Cubic spiral 5 Natural clothoid 6Cubic parabola",
      "id": "1805"
    },
    {
      "names": [
        "Integer Set_leading(Spiral transition, Integer leading)"
      ],
      "description": "Set whether transition is a leading transition (radius decreases along the transition) or a trailingtransition (radius increases along the transition). If leading is non-zero then it is a leading transition. If leading is zero then it is a trailing transition. A function return value of zero indicates that the function call was successful.",
      "id": "1806"
    },
    {
      "names": [
        "Integer Set_length(Spiral transition, Real length)"
      ],
      "description": "Set the length of the full length transition to length. A function return value of zero indicates that the function call was successful. Note - the length of the transition is defined from the position on the transition where the radius isinfinity (i. e.  is a straight) to the other end of the transition. For a leading transition, the radius is infinity at the start of the transition. For a trailing transition, the radius is infinity at the end of the transition.",
      "id": "1807"
    },
    {
      "names": [
        "Integer Set_radius(Spiral trans, Real radius)"
      ],
      "description": "Sign of radius. For a leading transition, set the end radius of the transition trans to radius. For a trailing transition, set the start radius of the transition trans to radius. Spirals and TransitionsPage 213\f12d Model Programming Language ManualNote - the radius is a signed value.  \uf020If radius > 0 the transition curves to the right. \uf020If radius <0, the transition curves to the left. A function return value of zero indicates that the function call was successful.",
      "id": "1808"
    },
    {
      "names": [
        "Integer Set_direction(Spiral trans, Real angle)"
      ],
      "description": "For the end of the transition trans where the radius is infinity, set the angle of the tangent at thatposition to angle.  angle is in radians and is measured in a counterclockwise direction from thepositive x-axis. For a leading transition, set the angle of the tangent at the start of trans to angle. For a trailing transition, set the angle of the tangent at the end of trans to angle. A function return value of zero indicates that the function call was successful.",
      "id": "1809"
    },
    {
      "names": [
        "Integer Set_anchor(Spiral trans, Real point)"
      ],
      "description": "For the end of the transition trans where the radius is infinity, set the co-ordinates of that positionto point. For a leading transition, the anchor point is the start of trans. For a trailing transition, the anchor point is the end of trans. A function return value of zero indicates that the function call was successful.",
      "id": "1810"
    },
    {
      "names": [
        "Integer Set_start_length(Spiral trans, Real start_length)"
      ],
      "description": "Set the start length of the transition trans to start_length. A function return value of zero indicates that the function call was successful. Note - the start length is the distance from the position on the full transition where the radius isinfinity (anchor point) to the start of the transition.  If the start_length is non-zero then it is not a fulltransition but a partial transition.",
      "id": "1811"
    },
    {
      "names": [
        "Integer Set_end_length(Spiral trans, Real end_length)"
      ],
      "description": "Set the end length of the transition trans to end_length. The end length is the distance from the position on the full transition where the radius is infinity tothe point on the transition where no more of the transition is used. A function return value of zero indicates that the function call was successful. Note: even through the full transition has a length of L say, the part of the transition that isactually used is only from the start length to the end length.",
      "id": "1812"
    },
    {
      "names": [
        "Integer Set_start_height(Spiral trans, Real height)"
      ],
      "description": "For the transition trans, set the z-value at the position start length along the transition to height. A function return value of zero indicates that the function call was successful.",
      "id": "1813"
    },
    {
      "names": [
        "Integer Set_end_height(Spiral trans, Real height)"
      ],
      "description": "For the transition trans, set the z-value at the position end length along the transition to height. A function return value of zero indicates that the function call was successful.",
      "id": "1814"
    },
    {
      "names": [
        "Integer Get_valid(Spiral trans)"
      ],
      "description": "If trans is a valid transition, then the function return value is zero. If trans is not a valid transition, then the function return value is non-zero. Note - the parameters given to define the transition may be inconsistent and not be able todefine an actual transition.",
      "id": "1815"
    },
    {
      "names": [
        "Integer Get_type(Spiral trans)"
      ],
      "description": "The list of possible return value is:1 for Clothoid MR2 for Westrail Cubic Clothoid3 for Cubic Spiral4 for Natural Clothoid5 for Cubic Parabola6 for Taper7 for Bloss8 for Sinusoidal9 for Cosinusoidal10 for Ellipse11 for Parabola12 for Hyperbola13 for Sin Half Diminish0 or 14 for unknown type",
      "id": "1816"
    },
    {
      "names": [
        "Integer Get_leading(Spiral trans)"
      ],
      "description": "A transition is a leading transition if the radius decreases along the transition, or a trailingtransition if the radius increases along the transition. If trans is a leading transition then return a non-zero function return value. If trans is a trailing transition then return zero as the function return value.",
      "id": "1817"
    },
    {
      "names": [
        "Real Get_length(Spiral trans)"
      ],
      "description": "For the full transition of trans, return the length to the end of the full transition as the functionreturn value.",
      "id": "1818"
    },
    {
      "names": [
        "Real Get_radius(Spiral trans)"
      ],
      "description": "For a leading transition trans, get the radius at the end of the full transition and return it as thePage 216Spirals and Transitions\fChapter 5 12dPL Library Callsfunction return value. For a trailing transition trans, get the radius at the start of the full transition and return it as thefunction return value.",
      "id": "1819"
    },
    {
      "names": [
        "Real Get_direction(Spiral trans)"
      ],
      "description": "Get the angle of the tangent at the anchor point (the end of the transition trans where the radiusis infinity), and return it as the function return value. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. For a leading transition trans, it is the angle of the tangent at the start of the full transition. For a trailing transition trans, it is the angle of the tangent at the end of the full transition.",
      "id": "1820"
    },
    {
      "names": [
        "Point Get_anchor(Spiral trans)"
      ],
      "description": "Get the co-ordinates of the anchor point (the end of the full transition where the radius is infinity),and return them as the function return value. For a leading transition trans, the anchor point is the start of the full transition. For a trailing transition trans, the anchor point is the end of the full transition.",
      "id": "1821"
    },
    {
      "names": [
        "Real Get_start_length(Spiral trans)"
      ],
      "description": "Get the start length of the transition trans and return it as the function return value.",
      "id": "1822"
    },
    {
      "names": [
        "Real Get_end_length(Spiral trans)"
      ],
      "description": "Get the end length of the transition trans and return it as the function return value.",
      "id": "1823"
    },
    {
      "names": [
        "Real Get_start_height(Spiral trans)"
      ],
      "description": "For the transition trans, get the height at the position start length along the transition and returnit as the function return value.",
      "id": "1824"
    },
    {
      "names": [
        "Real Get_end_height(Spiral trans)"
      ],
      "description": "For the transition trans, get the height at the position end length along the transition and returnit as the function return value.",
      "id": "1825"
    },
    {
      "names": [
        "Point Get_start_point(Spiral trans)"
      ],
      "description": "For the transition trans, get the Point at the position start length along the transition and returnit as the function return value.",
      "id": "1826"
    },
    {
      "names": [
        "Point Get_end_point(Spiral trans)"
      ],
      "description": "For the transition trans, get the Point at the position end length along the transition and return itas the function return value.",
      "id": "1827"
    },
    {
      "names": [
        "Point Get_local_point(Spiral trans, Real len)"
      ],
      "description": "For the transition trans, get the local co-ordinates (as a Point) of the position at length len fromthe start of the full transition and return it as the function return value. Note - the transition is in world coordinates and needs to be translated and rotated before gettingthe local coordinates of the position at length len along the transition.",
      "id": "1828"
    },
    {
      "names": [
        "Point Get_point(Spiral trans, Real len)"
      ],
      "description": "For the transition trans, get the co-ordinates of the position (as a Point) at length len from thestart of the full transition, and return it as the function return value.",
      "id": "1829"
    },
    {
      "names": [
        "Real Get_local_angle(Spiral trans, Real len)"
      ],
      "description": "For the transition trans, get the local angle of the tangent at the position at length len from thestart of the full transition, and return it as the function return value. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. Note - the transition is in world coordinates and needs to be translated and rotated before gettingthe angle of the tangent of the position at length len along the transition.",
      "id": "1830"
    },
    {
      "names": [
        "Real Get_angle(Spiral trans, Real len)"
      ],
      "description": "For the transition trans, get the angle of the tangent of the position at length len from the start ofthe full transition, and return it as the function return value. angle is in radians and is measured in a counterclockwise direction from the positive x-axis.",
      "id": "1831"
    },
    {
      "names": [
        "Real Get_radius(Spiral trans, Real len)"
      ],
      "description": "For the transition trans, get the radius at the position at length len from the start of the fulltransition, and return it as the function return value.",
      "id": "1832"
    },
    {
      "names": [
        "Real Get_shift_x(Spiral trans)"
      ],
      "description": "shift at end point of transition trans (what is x/y which is offset, which is along tangent)Spirals and TransitionsPage 219\f12d Model Programming Language Manual",
      "id": "1833"
    },
    {
      "names": [
        "Real Get_shift_y(Spiral trans)"
      ],
      "description": "shift at end point of transition trans",
      "id": "1834"
    },
    {
      "names": [
        "Real Get_shift(Spiral trans)"
      ],
      "description": "shift",
      "id": "1835"
    },
    {
      "names": [
        "Spiral Reverse(Spiral trans)"
      ],
      "description": "Create a Spiral that is the same as transition trans but has the reverse travel direction.  Thecreated transition is returned as the function return value. So a leading transition becomes a trailing transition and a trailing transition becomes a leadingtransition. The unary operator \"-\" will also reverse a Spiral. The function return value is the reversed Spiral.",
      "id": "1803"
    },
    {
      "names": [
        "Integer Get_type(Segment segment)"
      ],
      "description": "Get the type of the Segment segment. A Segment type of1234denotes a Pointdenotes a Linedenotes an Arcdenotes a SpiralThe function return value is the Segment type.",
      "id": "273"
    },
    {
      "names": [
        "Integer Get_point(Segment segment, Point &point)"
      ],
      "description": "If the Segment is of type 1, the Point of the Segment is returned as point, otherwise it is an error. A function return value of zero indicates the Segment was a Point Segment and that the Pointwas returned successfully.",
      "id": "274"
    },
    {
      "names": [
        "Integer Get_line(Segment segment, Line &line)"
      ],
      "description": "If the Segment is of type 2, the Line of the Segment is returned as line, otherwise it is an error. A function return value of zero indicates the Segment was a Line Segment and that the Line wasreturned successfully.",
      "id": "275"
    },
    {
      "names": [
        "Integer Get_arc(Segment segment, Arc &arc)"
      ],
      "description": "If the Segment is of type 3, the Arc of the Segment is returned as arc, otherwise it is an error. Page 222Segments\fChapter 5 12dPL Library CallsA function return value of zero indicates the Segment was an Arc Segment and that the Arc wasreturned successfully.",
      "id": "276"
    },
    {
      "names": [
        "Integer Get_spiral(Segment segment, Spiral &trans)"
      ],
      "description": "If the Segment is of type 4, the Spiral of the Segment is returned as transition trans, otherwise itis an error. A function return value of zero indicates the Segment was an Spiral Segment and that the Spiralwas returned successfully.",
      "id": "1837"
    },
    {
      "names": [
        "Integer Get_start(Segment segment, Point &point)"
      ],
      "description": "Get the start Point of the Segment segment. The start value is returned by Point point. A function return value of zero indicates the start point was successfully returned.",
      "id": "550"
    },
    {
      "names": [
        "Integer Get_end(Segment segment, Point &point)"
      ],
      "description": "Get the end Point of the Segment segment. The end value is returned by Point point. A function return value of zero indicates the end point was successfully returned.",
      "id": "551"
    },
    {
      "names": [
        "Integer Set_point(Segment &segment, Point point)"
      ],
      "description": "Sets the Segment type to 1 and the Point of the Segment to point. A function return value of zero indicates the Segment was successfully set.",
      "id": "277"
    },
    {
      "names": [
        "Integer Set_line(Segment &segment, Line line)"
      ],
      "description": "Sets the Segment type to 2 and the Line of the Segment to line. A function return value of zero indicates the Segment was successfully set.",
      "id": "278"
    },
    {
      "names": [
        "Integer Set_arc(Segment &segment, Arc arc)"
      ],
      "description": "Sets the Segment type to 3 and the Arc of the Segment to arc. A function return value of zero indicates the Segment was successfully set.",
      "id": "279"
    },
    {
      "names": [
        "Integer Set_spiral(Segment &segment, Spiral trans)"
      ],
      "description": "Sets the Segment type to 4 and the Spiral of the Segment to transition trans. A function return value of zero indicates the Segment was successfully set.",
      "id": "1836"
    },
    {
      "names": [
        "Integer Get_curve(Segment segment, Curve &curve)"
      ],
      "description": "If the Segment is of type 6, the Curve of the Segment is returned as curve, otherwise it is anerror. A function return value of zero indicates the Segment was a Curve Segment and that the Curvewas returned successfully.",
      "id": "2838"
    },
    {
      "names": [
        "Integer Set_curve(Segment &segment, Curve curve)"
      ],
      "description": "Sets the Segment type to 6 and the Curve of the Segment to curve. Page 224Segments\fChapter 5 12dPL Library CallsA function return value of zero indicates the Segment was successfully set.",
      "id": "2839"
    },
    {
      "names": [
        "Integer Set_start(Segment &segment, Point point)"
      ],
      "description": "Set the start Point of the Segment segment. The start value is defined by Point point. A function return value of zero indicates the start point was successfully set.",
      "id": "552"
    },
    {
      "names": [
        "Integer Set_end(Segment &segment, Point point)"
      ],
      "description": "Set the end Point of the Segment segment. The end value is defined by Point point. A function return value of zero indicates the end point was successfully set.",
      "id": "553"
    },
    {
      "names": [
        "Segment Reverse(Segment segment)"
      ],
      "description": "Reverse the direction of the Segment segment. Note that the reverse of a segment of type 1 (a Point segment) is simply a point of exactly thesame co-ordinates. The unary operator \"-\" will also reverse a Segment. The function return value is the reversed Segment.",
      "id": "280"
    },
    {
      "names": [
        "Integer Get_segments(Element elt, Integer &nsegs)"
      ],
      "description": "Get the number of segments for a string Element elt. The number of segments is returned as nsegsA function return value of zero indicates the data was successfully returned. NoteSegmentsPage 225\f12d Model Programming Language ManualIf a string is open and has n points, then it has n-1 segments. If a string is closed it has the same number of points and segments. If a string is closed and has n points, then it also has n segments. That is, If a string is closed it has the same number of points and segments. For example, a seven point open string has six segments. A seven point closed string has seven segments.",
      "id": "545"
    },
    {
      "names": [
        "Integer Get_segment(Element elt, Integer i, Segment &seg)"
      ],
      "description": "Get the segment for the ith segment on the string. The segment is returned as seg. The types of segments returned are Line, or Arc. A function return value of zero indicates the data was successfully returned.",
      "id": "546"
    },
    {
      "names": [
        "Integer Set_type(Curve curve, Integer type)"
      ],
      "description": "Set the type of the Curve curve to the Integer type. A return value of zero indicates the function call was successful. The list of values for valid type:1 Clothoid2 Westrail Cubic Clothoid3 Cubic Spiral4 Natural Clothoid5 Cubic Parabola7 Bloss8 Sinusoidal9 Cosinusoidal",
      "id": "2817"
    },
    {
      "names": [
        "Integer Get_type(Curve curve)"
      ],
      "description": "Return the type of the Curve curve as an Integer. The list of values for valid type:1 Clothoid2 Westrail Cubic Clothoid3 Cubic Spiral4 Natural Clothoid5 Cubic Parabola7 Bloss8 Sinusoidal9 Cosinusoidal",
      "id": "2827"
    },
    {
      "names": [
        "Integer Set_leading(Curve curve, Integer leading)"
      ],
      "description": "CurvePage 227\f12d Model Programming Language ManualSet whether curve is a leading Curve (radius decreases along the curve) or trailing curve (radiusincreases along the curve). If leading is non-zero then it is a leading curve. If leading is zero then it is a trailing curve. A return value of zero indicates the function call was successful.",
      "id": "2818"
    },
    {
      "names": [
        "Integer Get_leading(Curve curve)"
      ],
      "description": "A Curve is a leading if the radius decreases along the curve or trailing if the radius increasesalong the curve. If curve is a leading then the function returns one. If curve is trailing then the function returns zero.",
      "id": "2828"
    },
    {
      "names": [
        "Integer Set_start_length(Curve curve, Real length)"
      ],
      "description": "Set the start length of the Curve curve to the Real length. A return value of zero indicates the function call was successful.",
      "id": "2819"
    },
    {
      "names": [
        "Real Get_start_length(Curve curve)"
      ],
      "description": "Get the start length of Curve curve and return it as the function return value.",
      "id": "2842"
    },
    {
      "names": [
        "Integer Set_end_length(Curve curve, Real length)"
      ],
      "description": "Set the end length of the Curve curve to the Real length. A return value of zero indicates the function call was successful.",
      "id": "2820"
    },
    {
      "names": [
        "Real Get_end_length(Curve curve)"
      ],
      "description": "Get the end length of Curve curve and return it as the function return value.",
      "id": "2843"
    },
    {
      "names": [
        "Integer Set_direction(Curve curve, Real angle)"
      ],
      "description": "For the end of the Curve curve where the radius is infinity, set the angle of the tangent at thatposition to angle. The Real angle is in radians and is measured in a counterclockwise direction from the positive xaxis. For a leading curve, set the angle of the tangent at the start of curve to angle. For a trailing curve, set the angle of the tangent at the end of curve to angle. A function return value of zero indicates that the function call was successful.",
      "id": "2821"
    },
    {
      "names": [
        "Real Get_direction(Curve curve)"
      ],
      "description": "Get the angle of the tangent at the anchor point (the end of the Curve curve where the radius isinfinity), and return it as the function return value. The returned angle is in radians and is measured in a counterclockwise direction from thepositive x-axis. For a leading Curve curve, it is the angle of the tangent at the start of the full curve. For a trailing Curve curve, it is the angle of the tangent at the end of the full curve.",
      "id": "2831"
    },
    {
      "names": [
        "Integer Set_anchor(Curve curve, Point point)"
      ],
      "description": "For the end of the Curve curve where the radius is infinity, set the co-ordinates of that position topoint. For a leading transition, the anchor point is the start of curve. For a trailing transition, the anchor point is the end of curve. A function return value of zero indicates that the function call was successful. CurvePage 229\f12d Model Programming Language Manual",
      "id": "2822"
    },
    {
      "names": [
        "Point Get_anchor(Curve curve)"
      ],
      "description": "Get the coordinates the anchor point (the end of the Curve curve where the radius is infinity),and return it as the function return value. For a leading Curve curve, it is the anchor point is the start of the full curve. For a trailing Curve curve, it is the anchor point is the end of the full curve.",
      "id": "2832"
    },
    {
      "names": [
        "Integer Set_start_height(Curve curve, Real height)"
      ],
      "description": "For the Curve curve, set the z-value at the position start length along the curve to height. A function return value of zero indicates that the function call was successful.",
      "id": "2823"
    },
    {
      "names": [
        "Integer Set_end_height(Curve curve, Real height)"
      ],
      "description": "For the Curve curve, set the z-value at the position end length along the curve to height. A function return value of zero indicates that the function call was successful.",
      "id": "2824"
    },
    {
      "names": [
        "Integer Set_offset(Curve curve, Real offset)"
      ],
      "description": "Set the offset of the Curve curve to the Real offset. A return value of zero indicates the function call was successful.",
      "id": "2825"
    },
    {
      "names": [
        "Real Get_offset(Curve curve)"
      ],
      "description": "Return the offset of the Curve curve.",
      "id": "2836"
    },
    {
      "names": [
        "Integer Get_valid(Curve curve)"
      ],
      "description": "If curve is a valid Curve, then the function return value is one. If curve is not a valid Curve, then the function return value is zero.",
      "id": "2826"
    },
    {
      "names": [
        "Point Get_start_point(Curve curve)"
      ],
      "description": "Return the start point of the Curve curve.",
      "id": "2829"
    },
    {
      "names": [
        "Point Get_end_point(Curve curve)"
      ],
      "description": "Return the end point of the Curve curve.",
      "id": "2830"
    },
    {
      "names": [
        "Point Get_point(Curve curve, Real l)"
      ],
      "description": "For the Curve curve, get the co-ordinates of the position (as a Point) at length l from the start ofthe full curve, and return it as the function return value.",
      "id": "2833"
    },
    {
      "names": [
        "Real Get_angle(Curve curve, Real l)"
      ],
      "description": "For the Curve curve, get the angle of the tangent of the position at length l from the start of thefull curve, and return it as the function return value. CurvePage 231\f12d Model Programming Language ManualThe returned angle is in radians and is measured in a counterclockwise direction from thepositive x-axis.",
      "id": "2834"
    },
    {
      "names": [
        "Real Get_radius(Curve curve, Real l)"
      ],
      "description": "For the Curve curve, get the radius at the position at length l from the start of the full curve, andreturn it as the function return value.",
      "id": "2835"
    },
    {
      "names": [
        "Real Get_mvalue(Curve curve)"
      ],
      "description": "Return the m-value of the Curve curve. Only use when the type of the curve is cubic parabola; m-value is used in the curve equation \"y =m*x*x*x\".",
      "id": "2837"
    },
    {
      "names": [
        "Real Get_length(Curve curve)"
      ],
      "description": "For the full Curve of curve, return the length to the end of the full curve as the function returnvalue.",
      "id": "2840"
    },
    {
      "names": [
        "Real Get_radius(Curve curve)"
      ],
      "description": "Page 232Curve\fChapter 5 12dPL Library CallsFor a leading Curve curve, get the radius at the end of the full curve and return it as the functionreturn value. For a trailing Curve curve, get the radius at the start of the full curve and return it as the functionreturn value.",
      "id": "2841"
    },
    {
      "names": [
        "Real Get_shift_x(Curve curve)"
      ],
      "description": "Get the shift x of Curve curve and return it as the function return value. The x in \"shift x\" indicates the direction of the tangent at the start of the full curve.  The shift x of acurve is the projected distance from the start point of the of the end point in the \"x\" direction ofthe curve.",
      "id": "2844"
    },
    {
      "names": [
        "Real Get_shift_y(Curve curve)"
      ],
      "description": "Get the shift y of Curve curve and return it as the function return value. The y in \"shift y\" indicates the direction perpendicular to the tangent at the start of the full curve. The shift y of a curve is the projected distance from the start point of the of the end point in the \"y\"direction of the curve.",
      "id": "2845"
    },
    {
      "names": [
        "Real Get_shift(Curve curve)"
      ],
      "description": "Get the shift of Curve curve and return it as the function return value. The shift of a curve is the distance from the tangent at the start of the full curve to the circle at theend of the full curve.",
      "id": "2846"
    },
    {
      "names": [
        "Curve Reverse(Curve curve)"
      ],
      "description": "Return the reverse Curve of the input Curve curve.",
      "id": "2815"
    },
    {
      "names": [
        "Integer Get_length(Segment segment, Real &length)"
      ],
      "description": "Get the plan length of the Segment segment. A function return value of zero indicates the plan length was successfully returned.",
      "id": "361"
    },
    {
      "names": [
        "Integer Get_length_3d(Segment segment, Real &length)"
      ],
      "description": "Get the 3d length of the Segment segment. A function return value of zero indicates the 3d length was successfully returned.",
      "id": "362"
    },
    {
      "names": [
        "Integer Plan_area(Segment segment, Real &plan_area)"
      ],
      "description": "Calculate the plan area of the Segment segment.  For an Arc, the plan area of the sector isreturned.  For a Line and a Point, zero area is returned. The area is returned in the Real plan_area. A function return value of zero indicates the plan area was successfully returned.",
      "id": "360"
    },
    {
      "names": [
        "Integer Parallel(Line line, Real distance, Line &parallelled)"
      ],
      "description": "Plan parallel the Line line by the distance distance. The parallelled Line is returned as the Line parallelled.  The z-values are not modified, i. e.  theyare the same as for line. A function return value of zero indicates the parallel was successful.",
      "id": "284"
    },
    {
      "names": [
        "Integer Parallel(Arc arc, Real distance, Arc &parallelled)"
      ],
      "description": "Plan parallel the Arc arc by the distance distance. The parallelled Arc is returned as the Arc parallelled.  The z-values are not modified, i. e.  they arethe same as for arc. A function return value of zero indicates the parallel was successful.",
      "id": "285"
    },
    {
      "names": [
        "Integer Parallel(Segment segment, Real dist, Segment &parallelled)"
      ],
      "description": "Plan parallel the Segment segment by the distance dist. The parallelled Segment is returned as the Segment parallelled.  The z-values are not modified,i. e.  they are the same as for segment. If the Segment is of type Point, a Segment is not returned and the function return value is set tonon-zero. A function return value of zero indicates the parallel was successful.",
      "id": "286"
    },
    {
      "names": [
        "Integer Fitarc(Point pt_1, Point pt_2, Point pt_3, Arc &fillet)"
      ],
      "description": "Fit a plan arc through the (x,y) co-ordinates of the three Points pt_1, pt_2 and pt_3. The arc is returned as Arc fillet and the z-values of its start and end points are zero. A function return value of zero indicates success. A non-zero return value indicates no arc exists.",
      "id": "289"
    },
    {
      "names": [
        "Integer Fitarc(Segment seg_1, Segment seg_2, Real rad, Point cpt, Arc &fillet)"
      ],
      "description": "Create an plan arc from Segment seg_1 to Segment seg_2 with radius rad. The arc start point is on the extended Segment seg_1 with start direction the same as thedirection of seg_1. The arc end point is on the extended Segment seg_2 with end direction the same as thedirection of seg_1. If more than one arc satisfies the above conditions, then the arc with centre closest to the Pointcpt will be selected. The arc is returned as Arc fillet and the z-values of its start and end points are zero. A function return value of zero indicates an arc exists. A non-zero return value indicates no arc exists.",
      "id": "287"
    },
    {
      "names": [
        "Integer Fitarc(Segment seg_1, Segment seg_2, Point start_tp, Arc &fillet)"
      ],
      "description": "Create a plan arc from Segment seg_1 to Segment seg_2. The arc start point is the perpendicular projection of the Point start_tp onto the extendedSegment seg_1.  The start direction of the arc is the same as the direction of seg_1. The arc end point is be on the extended Segment seg_2 with end direction the same as thedirection of seg_1. There is at most one arc that satisfies the above conditions. The arc is returned as Arc fillet and the z-values of its start and end points are zero. A function return value of zero indicates success. A non-zero return value indicates no arc exists.",
      "id": "288"
    },
    {
      "names": [
        "Integer Tangent(Segment seg_1, Segment seg_2, Line &line)"
      ],
      "description": "Create the plan tangent line from the extended Segment seg_1 to the extended Segment set_2. The direction of the Segments seg_1 and seg_2 is used to select a unique tangent line. The tangent line is returned as the Line line with z-values of zero. A function return value of zero indicates there were no errors in the calculations.",
      "id": "290"
    },
    {
      "names": [
        "Integer Intersect(Segment seg_1, Segment seg_2, Integer &no_intersects, Point &p1, Point &p2)"
      ],
      "description": "Find the internal intersection between the Segments seg_1 and seg_2.  That is, only find theintersections of the two Segments that occur between the start and end points of the Segments. The number of intersections is given by no_intersects and the possible intersections are givenin Points p1 and p2.  The z-values of p1 and p2 are set to zero. There may be zero, one or two intersection points. A function return value of zero indicates there were no errors in the calculations.",
      "id": "291"
    },
    {
      "names": [
        "Integer Intersect_extended(Segment seg_1, Segment seg_2, Integer &no_intersects, Point &p1, Point &p2)"
      ],
      "description": "Find the intersection between the extended Segments seg_1 and seg_2. The number of intersections is given by no_intersects and the possible intersections are givenin Points p1 and p2.  The z-values of p1 and p2 are set to zero. There may be zero, one or two intersection points. A function return value of zero indicates there were no errors in the calculations.",
      "id": "303"
    },
    {
      "names": [
        "Integer Line_cut_string(Real px, Real py, Real dir, Real cut_lim, Element string, Real &cx, Real &cy, Real &cz)"
      ],
      "description": "Find the first intersection between the line starting at px,py,pz in the direction dir within the cutlimit cut_lim to the Element string. The x y z cooridnate of the cut is returned in cx cy cz. A function return value of zero indicates success.",
      "id": "7623"
    },
    {
      "names": [
        "Integer Line_cut_trimesh_named_edges(Real px, Real py, Real dir, Real cut_lim, Text edge_name, Element trimesh, Real &cx, Real &cy, Real &cz, Text &error_msg)"
      ],
      "description": "Find the first intersection between the line starting at px,py,pz in the direction dir within the cutlimit cut_lim to an egde of given name edge_name of a trimesh Element trimesh. The x y z cooridnate of the cut is returned in cx cy cz. Some warning and error message would be set to the Text error_msg. A function return value of zero indicates success.",
      "id": "7624"
    },
    {
      "names": [
        "Integer Offset_intersect(Segment seg_1, Real off_1, Segment seg_2, Real off_2, Integer &no_intersects, Point &p1, Point &p2)"
      ],
      "description": "Find the internal intersection between the Segments seg_1 and seg_2 that have beenperpendicularly offset by the amounts off_1 and off_2 respectively. The number of intersections is given by no_intersects and the possible intersections are givenin Points p1 and p2. The z-values of p1 and p2 are set to zero. There may be zero, one or two intersection points. A function return value of zero indicates there were no errors in the calculations.",
      "id": "292"
    },
    {
      "names": [
        "Integer Offset_intersect_extended(Segment seg_1, Real off_1, Segment seg_2, Real off_2, Integer &no_intersects, Point &p1, Point &p2)"
      ],
      "description": "Find the intersection between the extended Segments seg_1 and seg_2 that have beenperpendicularly offset by the amounts off_1 and off_2 respectively. The number of intersections is given by no_intersects and the possible intersections are givenin Points p1 and p2.  The z-values of p1 and p2 are set to zero. There may be zero, one or two intersection points. A function return value of zero indicates there were no errors in the calculations.",
      "id": "304"
    },
    {
      "names": [
        "Integer Angle_intersect(Point pt_1, Real ang_1, Point pt_2, Real ang_2, Point &p)"
      ],
      "description": "Find the point of intersection of the line going through the Point pt_1 with angle ang_1 and theline going through the Point pt_2 with angle ang_2. The intersection point is returned as Point p.  The z-values of p1 and p2 are set to zero. A function return value of zero indicates that the two lines intersect. A function return value of zero indicates there were no errors in the calculations.",
      "id": "293"
    },
    {
      "names": [
        "Real Get_distance(Point p1, Point p2)"
      ],
      "description": "Calculate the plan distance between the Points p1 and p2. The function return value is the plan distance.",
      "id": "297"
    },
    {
      "names": [
        "Real Get_distance_3d(Point p1, Point p2)"
      ],
      "description": "Calculate the 3d distance between the Points p1 and p2. The function return value is the 3d distance.",
      "id": "363"
    },
    {
      "names": [
        "Real Get_distance(Real x1, Real y1, Real x2, Real y2)"
      ],
      "description": "Calculate the plane distance between the two points with x-y coordinates x1,y1 and x2,y2. The function return value is the plan distance.",
      "id": "7695"
    },
    {
      "names": [
        "Real Get_distance(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2)"
      ],
      "description": "Calculate the 3d distance between the two points with x-y-z coordinates x1,y1,z1 and x2,y2,z2. The function return value is the 3d distance.",
      "id": "7696"
    },
    {
      "names": [
        "Integer Locate_point(Point from, Real ang, Real dist, Point &to)"
      ],
      "description": "Create the Point to which is a plan distance dist along the line of angle ang which goes throughthe Point from.  The z-value of to is the same as the z-value of from. A function return value of zero indicates there were no errors in the calculations.",
      "id": "298"
    },
    {
      "names": [
        "Integer Drop_point(Segment segment, Point pt_to_drop, Point &dropped_pt)"
      ],
      "description": "Drop a Point pt_to_drop perpendicularly in plan onto the Segment segment. The position of the dropped point on the Segment in returned in the Point dropped_pt. If the point cannot be dropped perpendicularly onto the Segment, then the point is dropped ontothe closest end point of the Segment.  A z-value for dropped_pt is created by interpolation. A function return value of zero indicates the point was dropped successfully.",
      "id": "299"
    },
    {
      "names": [
        "Integer Drop_point(Segment segment, Point pt_to_drop, Point &dropped_pt, Real &dist)"
      ],
      "description": "Drop a Point pt_to_drop onto the Segment segment. The position of the dropped point on the Segment in returned in the Point dropped_pt. The plan distance from pt_to_drop to dropped_pt is returned as dist. If the point cannot be dropped perpendicularly onto the Segment, then the point is dropped ontothe closest end point of the Segment.  A z-value for dropped_pt is created by interpolation. A function return value of zero indicates the point was dropped successfully.",
      "id": "306"
    },
    {
      "names": [
        "Integer Projection(Segment segment, Real dist, Point &projected_pt)"
      ],
      "description": "Create the Point projected_pt that is a plan distance of dist along from the start of the extendedSegment segment. The z-value for projected_pt is calculated by linear interpolation.  Note that for an Arc, the zvalue is interpolated for one full circuit of the arc beginning at the start point and the one circuit isused for z-values for distances greater than the length of one circuit. A function return value of zero indicates the projection was successful.",
      "id": "300"
    },
    {
      "names": [
        "Integer Projection(Segment segment, Point start_point, Real dist, Point &projected_pt)"
      ],
      "description": "Create the Point projected_pt that is a plan distance of dist along the extended Segmentsegment where distance is measured from the Point start_point. If start_point does not lie on the extended Segment, then start_point is automatically droppedonto the extended Segment to create the start point for distance measurement. The z-value for projected_pt is calculated by linear interpolation.  Note that for an Arc, the zvalue is interpolated for one full circuit of the arc beginning at the start point and the one circuit isused for z-values for distances greater than the length of one circuit. A function return value of zero indicates the projection was successful.",
      "id": "301"
    },
    {
      "names": [
        "Integer Change_of_angle(Real x1, Real y1, Real x2, Real y2, Real x3, Real y3, Real &angle)"
      ],
      "description": "Calculate the deflection angle between the directed line going from (x1,y1) to (x2,y2) and thedirected line going from (x2,x2) and (x3,y3) where the deflection angle is measured in radiansand in a CLOCKWISE direction.  The deflection angle is returned in angle. (x3,y3)deflection angledirected line from(x2,y2) to (x3,y3)(x2,y2)directed line fromx1,y1) to (x2,y2)(x1,y1)The use of clockwise fits in with the definition of travelling along a road where going to the right isconsidered positive and going to the left is considered negative. WARNING: This is not the normal mathematical angle between the two vectors which ismeasured in the counter clockwise direction and would be the negative of this value. A function return value of zero indicates the angle was returned successfully.",
      "id": "656"
    },
    {
      "names": [
        "Integer Change_of_angle(Line L1, Line L2, Real &angle)"
      ],
      "description": "Calculate the deflection angle between the line L1 and the line L2 where the deflection angle ismeasured in radians and in a CLOCKWISE direction.  The deflection angle is returned in angle. end of line L2deflection angleline L2start of line L2end of line L1line L1start of line L1The use of clockwise fits in with the definition of travelling along a road where going to the right isconsidered positive and going to the left is considered negative. WARNING: This is not the normal mathematical angle between the two vectors which ismeasured in the counter clockwise direction and would be the negative of this value. A function return value of zero indicates the angle was returned successfully.",
      "id": "657"
    },
    {
      "names": [
        "Integer Colour_exists(Text col_name)"
      ],
      "description": "Checks if a colour of name col_name exists in 12dPL. The colour name to check for is given by Text col_name. A non-zero function return value indicates the colour exist. A zero function return value indicates the colour does not exist. Warning - this is the opposite to most 12dPL function return values",
      "id": "66"
    },
    {
      "names": [
        "Integer Colour_exists(Integer col_number)"
      ],
      "description": "Checks if a number is a valid colour number. The number to check for is given by Integer col_number. A non-zero function return value indicates the number is a valid colour number. A zero function return value indicates the number is not a valid colour number. Warning - this is the opposite of most 12dPL function return values",
      "id": "65"
    },
    {
      "names": [
        "Integer Convert_colour(Text col_name, Integer &col_number)"
      ],
      "description": "Tries to convert the Text col_name to a colour number. If successful, the colour number is returned in Integer col_number. A function return value of zero indicates the conversion was successful.",
      "id": "67"
    },
    {
      "names": [
        "Integer Convert_colour(Integer col_number, Text &col_name)"
      ],
      "description": "Tries to convert the Integer col_number to a colour name. If successful, the colour name is returned in Text col_name. A function return value of zero indicates the conversion was successful.",
      "id": "68"
    },
    {
      "names": [
        "Integer Convert_colour(Integer value, Integer &red, Integer &green, Integer &blue)"
      ],
      "description": "Convert the colour number value to its red, green and blue components (0-255) and return themin red, green and blue respectively. A function return value of zero indicates the colour was successfully converted.",
      "id": "2138"
    },
    {
      "names": [
        "Integer Get_project_colours(Dynamic_Text &colours)"
      ],
      "description": "Get a Dynamic_Text of all the colour names defined for the project. The colour names are returned in the Dynamic_Text colours. A function return value of zero indicates the colours were returned successfully.",
      "id": "235"
    },
    {
      "names": [
        "Integer Attribute_exists(Attributes attr, Text att_name)"
      ],
      "description": "Checks to see if an attribute with the name att_name exists in the Attributes attr. att_name can have a full path name of the attribute.  Attribute names are case sensitive and theysupport the array syntax. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1939"
    },
    {
      "names": [
        "Integer Attribute_exists(Attributes attr, Text name, Integer &no)"
      ],
      "description": "Checks to see if an attribute with the name att_name exists in the Attributes attr. att_name can have a full path name of the attribute.  Attribute names are case sensitive and theysupport the array syntax. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1940"
    },
    {
      "names": [
        "Integer Attribute_delete(Attributes attr, Text att_name)"
      ],
      "description": "Deletes the first attribute with the name att_name from the Attributes attr.  Attribute names arePage 250User Defined Attributes\fChapter 5 12dPL Library Callscase sensitive and they support the array syntax. A function return value of zero indicates the attribute was deleted.",
      "id": "1941"
    },
    {
      "names": [
        "Integer Attribute_delete(Attributes attr, Integer att_no)"
      ],
      "description": "Delete the attribute with the attribute number att_no from the Attributes attr. A function return value of zero indicates the attribute was deleted.",
      "id": "1942"
    },
    {
      "names": [
        "Integer Attribute_delete_all(Attributes attr)"
      ],
      "description": "Delete all attributes from the Attributes attr. A function return value of zero indicates all the attribute were deleted.",
      "id": "1943"
    },
    {
      "names": [
        "Integer Get_number_of_attributes(Attributes attr, Integer &no_atts)"
      ],
      "description": "Get the number of top level attributes in the Attributes attr.  The number is returned in no_atts. A function return value of zero indicates the number is successfully returned.",
      "id": "1944"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Text &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1945"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Integer &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Integer. If the attribute is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1946"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Real &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Real. If the attribute is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1947"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Uid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1948"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Attributes &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inPage 252User Defined Attributes\fChapter 5 12dPL Library Callsatt.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attributes value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1949"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Integer64 &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type 64 bit Integer. If the attribute is not of type 64 bit Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3243"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Guid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Guid. If the attribute is not of type Guid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3244"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Attribute_Blob &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Attribute_Blob. If the attribute is not of type Attribute_Blob then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name. User Defined AttributesPage 253\f12d Model Programming Language Manual",
      "id": "3393"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Text &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1950"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Integer &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Integer. If the attribute is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1951"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Real &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Real. If the attribute is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1952"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Uid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1953"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Attributes &att)"
      ],
      "description": "From the Attributes attr, get the first Attribute with number att_no and return the Attributes valuein att.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1954"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Integer64 &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type 64 bit Integer. If the attribute is not of type 64 bit Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "3245"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Guid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Guid. If the attribute is not of type Guid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "3246"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Integer att_no, Attribute_Blob &att)"
      ],
      "description": "From the Attributes attr, get the first attribute with number att_no and return the attribute value inatt.  The attribute must be of type Attribute_Blob. If the attribute is not of type Attribute_Blob then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "3394"
    },
    {
      "names": [
        "Integer Get_attribute_name(Attributes attr, Integer att_no, Text &name)"
      ],
      "description": "From the Attributes attr, get the attribute with number att_no and return the Text value in name. The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1955"
    },
    {
      "names": [
        "Integer Get_attribute_type(Attributes attr, Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the attribute with the name att_name from the Attribute attr.  The type is returnedin att_type. Page 256User Defined Attributes\fChapter 5 12dPL Library CallsFor the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1956"
    },
    {
      "names": [
        "Integer Get_attribute_type(Attributes attr, Integer att_num, Integer &att_type)"
      ],
      "description": "Get the type of the attribute with the number att_num from the Attribute attr.  The type is returnedin att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type is successfully returned.",
      "id": "1957"
    },
    {
      "names": [
        "Integer Get_attribute_length(Attributes attr, Text att_name, Integer &att_len)"
      ],
      "description": "For the Attributes attr, get the length in bytes of the attribute of name att_name.  The number ofbytes is returned in att_len. This is mainly for use with attributes of types Text and Binary (blobs)A function return value of zero indicates the attribute length is successfully returned.",
      "id": "1958"
    },
    {
      "names": [
        "Integer Get_attribute_length(Attributes attr, Integer att_no, Integer &att_len)"
      ],
      "description": "For the Attributes attr, get the length in bytes of the attribute with number att_no.  The number ofbytes is returned in att_len. This is mainly for use with attributes of types Text and Binary (blobs)A function return value of zero indicates the attribute length is successfully returned.",
      "id": "1959"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Text att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Text and give it the valueatt. \uf020if the first attribute called att_name does exist and it is type Text, then set its value to att. If the attribute exists and is not of type Text, then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1960"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Integer att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Integer and give it the valueatt. \uf020if the attribute called att_name does exist and it is type Integer, then set its value to att. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1961"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Real att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Real and give it the valueatt. \uf020if the first attribute called att_name does exist and it is type Real, then set its value to att. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1962"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Uid att)"
      ],
      "description": "For the Attributes attr,\uf020Page 258User Defined Attributes\fChapter 5 12dPL Library Callsif the attribute called att_name does not exist then create it as type Uid and give it the valueatt. \uf020if the first attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1963"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Attributes att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the first attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1964"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Integer64 att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type 64 bit Integer and give itthe value att. \uf020if the first attribute called att_name does exist and it is type 64 bit Integer, then set its value toatt. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3247"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Guid att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Guid and give it the valueatt. \uf020if the first attribute called att_name does exist and it is type Guid, then set its value to att. User Defined AttributesPage 259\f12d Model Programming Language ManualIf the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3248"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name does not exist then create it as type Attribute_Blob (binary) andgive it the value att. \uf020if the first attribute called att_name does exist and it is type Attribute_Blob (binary), then set itsvalue to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3395"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Text att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Text, then its value isset to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Text then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1965"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Integer att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Integer, then its valueis set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Integer then a non-zero return value isreturned. Page 260User Defined Attributes\fChapter 5 12dPL Library CallsA function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1966"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Real att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Real, then its value isset to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Real then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1967"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Uid att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Uid, then its value isset to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1968"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Attributes att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Attributes, then itsvalue is set to att. If there is no Attributes with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. User Defined AttributesPage 261\f12d Model Programming Language ManualNote - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1969"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Integer64 att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type 64 bit Integer, then itsvalue is set to att. If there is no Attributes with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type 64 bit Integer then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "3250"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Text &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Text and return theattribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3251"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Attribute_Blob(binary), then its value is set to att. If there is no Attributes with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attribute_Blob (binary) then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no. Page 262User Defined Attributes\fChapter 5 12dPL Library Calls",
      "id": "3396"
    },
    {
      "names": [
        "Integer Attribute_debug(Attributes attr)"
      ],
      "description": "For internal 12d Solutions use only. Write out even more information about the Attributes attr to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "1971"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Integer &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Integer and returnthe attribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3252"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Real &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Real and return theattribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3253"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Uid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Uid and return theattribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3254"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Attributes &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Attributes (group)and return the attribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3255"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Integer64 &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type 64 bit Integer andreturn the attribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3256"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Guid &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Guid and return theattribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3257"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Attributes attr, Text att_name, Attribute_Blob &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name with the type Attribute_Blob(binary) and return the attribute value in att. If there is no such attribute then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned.",
      "id": "3397"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Text att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Text does not exist then create it and give it the valueatt. \uf020if the attributes called att_name with type Text does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3258"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Integer att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Integer does not exist then create it and give it thevalue att. \uf020if the attributes called att_name with type Integer does exist, then assign the value of the firstone to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3259"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Real att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Real does not exist then create it and give it the valueatt. \uf020if the attributes called att_name with type Real does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set. User Defined AttributesPage 265\f12d Model Programming Language Manual",
      "id": "3260"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Uid att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Uid does not exist then create it and give it the valueatt. \uf020if the attributes called att_name with type Uid does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3261"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Attributes att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Attributes (group) does not exist then create it andgive it the value att. \uf020if the attributes called att_name with type Attributes (group) does exist, then assign the valueof the first one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3262"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Integer64 att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type 64 bit Integer does not exist then create it and give itthe value att. \uf020if the attributes called att_name with type 64 bit Integer does exist, then assign the value of thefirst one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3263"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Guid att)"
      ],
      "description": "For the Attributes attr,\uf020Page 266User Defined Attributes\fChapter 5 12dPL Library Callsif the attribute called att_name with type Guid does not exist then create it and give it the valueatt. \uf020if the attributes called att_name with type Guid does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3264"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr,\uf020if the attribute called att_name with type Attribute_Blob (binary) does not exist then create itand give it the value att. \uf020if the attributes called att_name with type Attribute_Blob (binary) does exist, then assign thevalue of the first one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3398"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Text att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Text and with the valueatt at the given index position.  All existing attributes with the old indices greater or equalposition will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3658"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Integer att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Integer and with the valueatt at the given index position.  All existing attributes with the old indices greater or equalposition will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3659"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Real att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Real and with the valueatt at the given index position.  All existing attributes with the old indices greater or equalposition will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3660"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Uid att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Uid and with the value attat the given index position.  All existing attributes with the old indices greater or equal positionwill have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3661"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Attributes att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Attributes (group) andwith the value att at the given index position.  All existing attributes with the old indices greater orequal position will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3662"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Attribute_Blob (binary)and with the value att at the given index position.  All existing attributes with the old indicesgreater or equal position will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3663"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Integer64 att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type 64 bit Integer and with thevalue att at the given index position.  All existing attributes with the old indices greater or equalposition will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3664"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Attributes attr, Text att_name, Integer position, Guid att)"
      ],
      "description": "For the Attributes attr, insert a new attribute called att_name with type Guid and with the valueatt at the given index position.  All existing attributes with the old indices greater or equalposition will have their indices increased by one. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3665"
    },
    {
      "names": [
        "Integer Directory_exists(Text folder_name)"
      ],
      "description": "Check if a folder of name folder_name exists. If folder_name is a relative path, the folder is checked in the current working folder of the project. If folder_name is an absolute (starts with say C:, \\\\, //), then the folder is checked using theabsolute path. A non-zero function return value indicates that the folder exists. A zero function return value indicates that the folder does not existed. Warning - this is the opposite of most 12dPL function return values",
      "id": "2468"
    },
    {
      "names": [
        "Integer Get_file_size(Text file_name, Integer &size)"
      ],
      "description": "Get the size in bytes of the file named file_name and returns the number of bytes in Integer size. Note that the file needs to be a file of size less than 2 Gigabytes. A function return value of zero indicates the function was successful.",
      "id": "2407"
    },
    {
      "names": [
        "Integer Get_file_size(Text file_name, Integer64 &size)"
      ],
      "description": "Get the size in bytes of the file named file_name and returns the number of bytes in 64bit Integersize.  Note that the size of the file can be larger than 2 Gigabytes.  sA function return value of zero indicates the function was successful.",
      "id": "3874"
    },
    {
      "names": [
        "Integer Get_file_created_time_utc(Text file_name, Integer64 &time)"
      ],
      "description": "Get the created time as the number of seconds elapsed since midnight, January 1st 1970 UTC offile_name and returns the number of bytes in 64bit Integer time. A function return value of zero indicates the function was successful.",
      "id": "3875"
    },
    {
      "names": [
        "Integer Get_file_modified_time_utc(Text file_name, Integer64 &time)"
      ],
      "description": "Get the last modified time as the number of seconds elapsed since midnight, January 1st 1970UTC of file_name and returns the number of bytes in 64bit Integer time. A function return value of zero indicates the function was successful.",
      "id": "3876"
    },
    {
      "names": [
        "Integer Get_file_accessed_time_utc(Text file_name, Integer64 &time)"
      ],
      "description": "Get the accessed time as the number of seconds elapsed since midnight, January 1st 1970 UTCof file_name and returns the number of bytes in 64bit Integer time. A function return value of zero indicates the function was successful.",
      "id": "3877"
    },
    {
      "names": [
        "Integer File_contains(Text file, Text search_text, Integer case_sensitive, Integer whole_word, Integer &found)"
      ],
      "description": "Search for the key word search_text in a given text file and set the output Integer found to 1 if thefile contain the key word; 0 otherwise.  The search is case sensitive if case_sensitive is 1; and thesearch is looking for only the whole word if whole_word is 1. A function return value of zero indicates the function was successful.",
      "id": "3878"
    },
    {
      "names": [
        "Integer File_contains_XML_element(Text file, Integer search_mode, Text search_for, Integer &found)"
      ],
      "description": "Search for the key word search_node in a given XML file and set the output Integer found to 1 ifthe file contain the key word; 0 otherwise. The valid values for Integer search_mode are:0search names only1search attributes only2search values onlyFoldersPage 271\f12d Model Programming Language Manual3search allA function return value of zero indicates the function was successful.",
      "id": "3930"
    },
    {
      "names": [
        "Integer Get_file_encoding(Text file_name, Integer &encode)"
      ],
      "description": "Get the encoding style encode of the file named file_name. List of encodingFile_Encoding_Error-1File_Encoding_None0File_Encoding_UTF_81File_Encoding_UTF_16_LE2File_Encoding_UTF_16_BE3File_Encoding_UTF_32_LE4File_Encoding_UTF_32_BE5A function return value of zero indicates the function was successful.",
      "id": "3821"
    },
    {
      "names": [
        "Integer Get_file_read_only(Text file_name, Integer &read_only)"
      ],
      "description": "Get the read_only property of the file named file_name: 1 means true, 0 means falseA function return value of zero indicates the function was successful.",
      "id": "7744"
    },
    {
      "names": [
        "Integer Set_file_read_only(Text file_name, Integer read_only)"
      ],
      "description": "Set the read_only property of the file named file_name: 1 means true, 0 means falseA function return value of zero indicates the function was successful.",
      "id": "7745"
    },
    {
      "names": [
        "Integer Directory_create(Text folder_name)"
      ],
      "description": "Create the folder folder_name in the current working folder (the folder name can not contain anypaths)Note - Directory_create_recursive will create a folder tree. A function return value of zero indicates the function was successful.",
      "id": "2470"
    },
    {
      "names": [
        "Integer Directory_create_recursive(Text folder_name)"
      ],
      "description": "Create the folder folder_name.  The folder name can contain paths and if any of the folders alongthe path do not exist, then they will also be created. If folder_name does not contain any path then the folder is created in the current working folder. A function return value of zero indicates the function was successful.",
      "id": "2471"
    },
    {
      "names": [
        "Integer Directory_delete(Text folder_name)"
      ],
      "description": "If the folder named folder_name is empty, delete the folder folder_name. Note - Directory_delete_recursive will delete a non-empty folder and all of its sub-folders. A function return value of zero indicates the function was successful.",
      "id": "2469"
    },
    {
      "names": [
        "Integer Directory_delete_recursive(Text folder_name)"
      ],
      "description": "Delete the folder named folder_name, and all the sub-folders of folder_name. A function return value of zero indicates the function was successful. WARNING Using a folder name of d: will delete the entire d drive. You have been warned.",
      "id": "2472"
    },
    {
      "names": [
        "Integer Get_program_version_number()"
      ],
      "description": "The function return value is the 12d Model version number. For example, 14 for 12d Model 14C1c",
      "id": "2291"
    },
    {
      "names": [
        "Integer Get_program_major_version_number()"
      ],
      "description": "The function return value is the 12d Model major version number.  That is 1 for C1, 2 for C2 etc,0 for Alpha or Beta. For example, 1 for 12d Model 14C1c",
      "id": "2292"
    },
    {
      "names": [
        "Integer Get_program_minor_version_number()"
      ],
      "description": "The function return value is the 12d Model minor version number.  That is 1 for a, 2 for b, 3 of cetc. For example, 3 for 12d Model 14C1c",
      "id": "2293"
    },
    {
      "names": [
        "Integer Get_program_folder_version_number()"
      ],
      "description": "The function return value is the 12d Model folder version number. For example, 00 in \"Program Files\\12dModel\\14. 00",
      "id": "2294"
    },
    {
      "names": [
        "Integer Get_program_build_number()"
      ],
      "description": "Page 27412d Model Program and Folders\fChapter 5 12dPL Library CallsThe function return value is the 12d Model build number. This is for internal use only and for minidumps.",
      "id": "2295"
    },
    {
      "names": [
        "Text Get_program_special_build_name()",
        "2296 Get_program_patch_version_name()",
        "Text Get_program_patch_version_name()"
      ],
      "description": "The function return value is a special patch version description for pre-release versions and it iswritten after the 12d Model version information.  It is blank for release versions. For example \"Alpha 274 SLF,SLX,Image Dump - Not For Production\"",
      "id": "2297"
    },
    {
      "names": [
        "Text Get_program_full_title_name()"
      ],
      "description": "The function return value is the full name that is written out after 12d Model on the top of the12d Model Window. For example \"10. 0 Alpha 274 SLF,SLX,Image Dump - Not For Production\"",
      "id": "2298"
    },
    {
      "names": [
        "Text Get_program()"
      ],
      "description": "The function return value is the full path to where the 12d. exe is on disk.  It includes the\"12d. exe\". For example \"C:\\Program Files\\12d\\12dmodel\\10. 00\\nt. x86\\12d. exe\"",
      "id": "2299"
    },
    {
      "names": [
        "Text Get_program_name()"
      ],
      "description": "The function return value is the name of the 12d Model executable without the \". exe\". That is, \"12d\".",
      "id": "2300"
    },
    {
      "names": [
        "Text Get_program_folder()"
      ],
      "description": "The function return value is the full path to the folder where the 12d Model executable (12d. exe)is on disk. For example \"C:\\Program Files\\12d\\12dmodel\\10. 00\\nt. x86\"",
      "id": "2301"
    },
    {
      "names": [
        "Text Get_program_parent_folder()"
      ],
      "description": "The function return value is the full path to the folder above where the 12d Model executable(12d. exe) is on disk. For example \"C:\\Program Files\\12d\\12dmodel\\10. 00\"",
      "id": "2302"
    },
    {
      "names": [
        "Integer Get_project_folder(Text &name)"
      ],
      "description": "Get the path to the working folder (the folder containing the current project) and return it in name. A function return value of zero indicates the function was successful.",
      "id": "1891"
    },
    {
      "names": [
        "Integer Get_temporary_directory(Text &folder_name)"
      ],
      "description": "Get the name of the Windows temporary folder %TEMP% and return it as folder_name. A function return value of zero indicates the function was successful.",
      "id": "2473"
    },
    {
      "names": [
        "Integer Get_temporary_12d_directory(Text &folder_name)"
      ],
      "description": "Get the name of the 12d Model temporary folder \"%TEMP%\\12d\", and return it as folder_name. A function return value of zero indicates the function was successful.",
      "id": "2474"
    },
    {
      "names": [
        "Integer Get_temporary_project_directory(Text &folder_name)"
      ],
      "description": "Get the name of the current 12d Model Project temporary folder \"%TEMP%\\12d\\process-id\"(where process-id is the process id of the current running 12d. exe), and return it as folder_nameA function return value of zero indicates the function was successful. Note - Every 12d project has a independent temporary folder.",
      "id": "2475"
    },
    {
      "names": [
        "Integer Set_cad_controlbar(Text name, Model model, Integer colour, Real z, Text linestyle, Real weight, Integer tinable)"
      ],
      "description": "Set fields of CAD control bar with Text name, Model model, standard 12D colour Integer colour,height measure Real z, linestyle name Text linestyle, line weight Real weight, Integer tinableA return value of zero indicates the function call was successful.",
      "id": "3141"
    },
    {
      "names": [
        "Integer Get_cad_controlbar(Text &name, Model &model, Integer &colour, Real &z, Text &linestyle, Real &weight, Integer &tinable)"
      ],
      "description": "Get fields of CAD control bar to Text name, Model model, standard 12D colour Integer colour,height measure Real z, linestyle name Text linestyle, line weight Real weight, Integer tinableA return value of zero indicates the function call was successful.",
      "id": "3140"
    },
    {
      "names": [
        "Integer Set_text_controlbar(Text textstyle_name, Real size)"
      ],
      "description": "Set fields of text control bar with textstyle name Text textstyle_name, size Real sizeA return value of zero indicates the function call was successful.",
      "id": "3143"
    },
    {
      "names": [
        "Integer Get_text_controlbar(Text &textstyle_name, Real &size)"
      ],
      "description": "Get fields of text control bar to textstyle name Text textstyle_name, size Real sizeA return value of zero indicates the function call was successful.",
      "id": "3142"
    },
    {
      "names": [
        "Integer Set_text_controlbar(Textstyle_Data textstyle_data)"
      ],
      "description": "Set fields of text control bar with Textstyle_Data textstyle_dataA return value of zero indicates the function call was successful.",
      "id": "3145"
    },
    {
      "names": [
        "Integer Get_text_controlbar(Textstyle_Data &textstyle_data)"
      ],
      "description": "Get fields of text control bar to Textstyle_Data textstyle_dataA return value of zero indicates the function call was successful.",
      "id": "3144"
    },
    {
      "names": [
        "Integer Set_symbol_controlbar(Text symbol_name, Real size)"
      ],
      "description": "Set fields of symbol control bar with symbol name Text symbol_name, size Real sizeA return value of zero indicates the function call was successful.",
      "id": "3147"
    },
    {
      "names": [
        "Integer Get_symbol_controlbar(Text &symbol_name, Real &size)"
      ],
      "description": "Get fields of symbol control bar to symbol name Text symbol_name, size Real sizeA return value of zero indicates the function call was successful.",
      "id": "3146"
    },
    {
      "names": [
        "Integer Set_symbol_controlbar(Integer use_flag, Text symbol_name, Integer colour, Real size, Real offset, Real raise, Real angle)"
      ],
      "description": "Set fields of symbol control bar with symbol name Text symbol_name, Integer colour, Realsize, Real offset, Real raise, Real angleControl barPage 279\f12d Model Programming Language ManualInteger use_flag is the bit-wise sum of a subset of0x001 Style0x002 Colour0x004 Size0x008 Offset0x010 Raise0x020 AngleA return value of zero indicates the function call was successful.",
      "id": "3149"
    },
    {
      "names": [
        "Integer Get_symbol_controlbar(Integer &use_flag, Text &symbol_name, Integer &colour, Real &size, Real &offset, Real &raise, Real &angle)"
      ],
      "description": "Get fields of symbol control bar to symbol name Text symbol_name, Integer colour, Real size,Real offset, Real raise, Real angleInteger use_flag is the bit-wise sum of a subset of0x001 Style0x002 Colour0x004 Size0x008 Offset0x010 Raise0x020 AngleA return value of zero indicates the function call was successful.",
      "id": "3148"
    },
    {
      "names": [
        "Integer Set_pipe_controlbar(Integer shape, Integer justify, Real size1, Real size2)"
      ],
      "description": "Set fields of pipe control bar with Integer shape, Integer justify, Real size1, Real size2Value for shape: 0 not use, 1 pipe, 2 culvertValue for justify: 0 invert, 1 centre, 2 obvertA return value of zero indicates the function call was successful.",
      "id": "3151"
    },
    {
      "names": [
        "Integer Get_pipe_controlbar(Integer &shape, Integer &justify, Real &size1, Real &size2)"
      ],
      "description": "Get fields of pipe control bar to Integer shape, Integer justify, Real size1, Real size2Value for shape: 0 not use, 1 pipe, 2 culvertValue for justify: 0 invert, 1 centre, 2 obvertA return value of zero indicates the function call was successful.",
      "id": "3150"
    },
    {
      "names": [
        "Integer Set_attributes_controlbar(Attributes att)"
      ],
      "description": "Set field of attributes control bar with Attributes attA return value of zero indicates the function call was successful.",
      "id": "3153"
    },
    {
      "names": [
        "Integer Get_attributes_controlbar(Attributes &att)"
      ],
      "description": "Get field of attributes control bar to Attributes attA return value of zero indicates the function call was successful.",
      "id": "3152"
    },
    {
      "names": [
        "Integer Get_project_name(Text &name)"
      ],
      "description": "Get the names of the current project. The names is returned in the Text name. A function return value of zero indicates the function names were successfully returned.",
      "id": "813"
    },
    {
      "names": [
        "Integer Project_save()"
      ],
      "description": "Save the Project to the disk. A function return value of zero indicates the Project was successfully saved.",
      "id": "1570"
    },
    {
      "names": [
        "Integer Program_exit(Integer ignore_save)"
      ],
      "description": "Exit the 12d Model program. If ignore_save is non-zero then the project is closed without saving and 12d Model then stops. If ignore_save is zero then a save of the project is done and 12d Model then stops.",
      "id": "1571"
    },
    {
      "names": [
        "Integer Get_project_functions(Dynamic_Text &function_names)"
      ],
      "description": "Get the names of all the functions in the project. The dynamic array of function names is returned in the Dynamic_Text function_names. A function return value of zero indicates the function names were successfully returned.",
      "id": "236"
    },
    {
      "names": [
        "Integer Sleep(Integer milli)"
      ],
      "description": "Send 12d Model to sleep for milli millisecondsA function return value of zero indicates the function was successful.",
      "id": "2476"
    },
    {
      "names": [
        "Integer Set_project_attributes(Attributes att)"
      ],
      "description": "For the Project, set the Attributes to att. A function return value of zero indicates the Attributes was successfully set.",
      "id": "1982"
    },
    {
      "names": [
        "Integer Get_project_attributes(Attributes &att)"
      ],
      "description": "For the Project, return the Attributes for the Project as att. If the Project has no attribute then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "1983"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Uid &att)"
      ],
      "description": "For the Project, get the attribute called att_name and return the attribute value in uid.  Theattribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1984"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Attributes &att)"
      ],
      "description": "For the Project, get the attribute called att_name and return the attribute value in att.  Theattribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1985"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no, Uid &att)"
      ],
      "description": "For the Project, get the attribute with number att_no and return the attribute value in uid.  Theattribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1986"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no, Attributes &att)"
      ],
      "description": "For the Project, get the attribute with number att_no and return the attribute value in att.  Theattribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1987"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Uid uid)"
      ],
      "description": "For the Project,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. Page 284Project\fChapter 5 12dPL Library CallsA function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1988"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Attributes att)"
      ],
      "description": "For the Project,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1989"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Uid uid)"
      ],
      "description": "For Project, if the attribute number att_no exists and it is of type Uid, then its value is set to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1990"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Attributes att)"
      ],
      "description": "For Project, if the attribute number att_no exists and it is of type Attributes, then its value is set toatt. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no. ProjectPage 285\f12d Model Programming Language Manual",
      "id": "1991"
    },
    {
      "names": [
        "Integer Project_attribute_exists(Text att_name)"
      ],
      "description": "Checks to see if a Project attribute with the name att_name exists in current project. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1378"
    },
    {
      "names": [
        "Integer Project_attribute_exists(Text name, Integer &no)"
      ],
      "description": "Checks to see if a project attribute with the name name exists in current project. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1379"
    },
    {
      "names": [
        "Integer Project_attribute_delete(Text att_name)"
      ],
      "description": "Delete the project attribute with the name att_name in current project. A function return value of zero indicates the attribute was deleted.",
      "id": "1380"
    },
    {
      "names": [
        "Integer Project_attribute_delete(Integer att_no)"
      ],
      "description": "Delete the project attribute with the Integer att_no in current project. A function return value of zero indicates the attribute was deleted.",
      "id": "1381"
    },
    {
      "names": [
        "Integer Project_attribute_delete_all(Element elt)"
      ],
      "description": "Delete all the attributes for Project. Element elt has nothing to do with this call and is ignored. A function return value of zero indicates all the attributes were deleted.",
      "id": "1382"
    },
    {
      "names": [
        "Integer Project_attribute_dump()"
      ],
      "description": "Write out information about the Project attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "1383"
    },
    {
      "names": [
        "Integer Get_project_number_of_attributes(Integer &no_atts)"
      ],
      "description": "Get number of attributes Integer no_atts in current project. A function return value of zero indicates the number is successfully returned.",
      "id": "1385"
    },
    {
      "names": [
        "Integer Get_project_attribute_name(Integer att_no, Text &name)"
      ],
      "description": "Get project attribute name Text name with attribute number Integer att_no in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1392"
    },
    {
      "names": [
        "Integer Get_project_attribute_length(Integer att_no, Integer &att_len)"
      ],
      "description": "ProjectPage 287\f12d Model Programming Language ManualGet the length of the project attribute at position att_no. The project attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. NoteThe length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "1396"
    },
    {
      "names": [
        "Integer Get_project_attribute_length(Text att_name, Integer &att_len)"
      ],
      "description": "Get the length of the project attribute with the name att_name for the current project. The project attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. NoteThe length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "1395"
    },
    {
      "names": [
        "Integer Get_project_attribute_type(Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the project attribute with the name att_name from the current project. The project attribute type is returned in Integer att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1393"
    },
    {
      "names": [
        "Integer Get_project_attribute_type(Integer att_no, Integer &att_type)"
      ],
      "description": "Get the type of the project attribute at position att_no for the current project. The project attribute type is returned in att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1394"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Real &att)"
      ],
      "description": "Page 288Project\fChapter 5 12dPL Library CallsGet project attribute Real att with attribute name Text att_name in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1388"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Real att)"
      ],
      "description": "Set the project attribute with name att_name to the Real att. The project attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "1399"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Integer &att)"
      ],
      "description": "Get project attribute Integer att with attribute name Text att_name in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1387"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Integer att)"
      ],
      "description": "Set the project attribute with name att_name to the Integer att. The project attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "1398"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no, Text &att)"
      ],
      "description": "Get project attribute Text att with attribute number Integer att_no in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1389"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Text att)"
      ],
      "description": "Set the project attribute at position att_no to the Text att. The project attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "1400"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no, Integer &att)"
      ],
      "description": "Get project attribute Integer att with attribute number Integer att_no in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1390"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Integer att)"
      ],
      "description": "Set the project attribute at position att_no to the Integer att. The project attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "1401"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no, Real &att)"
      ],
      "description": "Get project attribute Real att with attribute number Integer att_no in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1391"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Real att)"
      ],
      "description": "Set the project attribute at position att_no to the Real att. The project attribute must be of type RealA function return value of zero indicates the attribute was successfully set. Page 290Project\fChapter 5 12dPL Library Calls",
      "id": "1402"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Text &att)"
      ],
      "description": "Get project attribute Text att with attribute name Text att_name in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1386"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Text att)"
      ],
      "description": "Set the project attribute with name att_name to the Text att. The project attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "1397"
    },
    {
      "names": [
        "Integer Project_attribute_delete_all()"
      ],
      "description": "Delete all the project attributes. A function return value of zero indicates all the attribute were successfully deleted.",
      "id": "2679"
    },
    {
      "names": [
        "Model Create_model(Text model_name)"
      ],
      "description": "Create a Model with the name model_name. If the model is created, its handle is returned as the function return value. If no model can be created, a null Model is returned as the function return value.",
      "id": "59"
    },
    {
      "names": [
        "Model Get_model_create(Text model_name)"
      ],
      "description": "Get a handle to the model with name model_name. If the model exists, its handle is returned as the function return value. If no such model exists, then a new model with the name model_name is created, and its handlereturned as the function return value. If no model exists and the creation fails, a null Model is returned as the function return value.",
      "id": "60"
    },
    {
      "names": [
        "Integer Get_number_of_items(Model model, Integer &num)"
      ],
      "description": "Get the number of items (Elements) in the Model model. The number of Elements is returned as the Integer num. A function return value of zero indicates success.",
      "id": "452"
    },
    {
      "names": [
        "Integer Get_number_of_items_peek(Model model, Integer &num)"
      ],
      "description": "Get the number of items (Elements) in the Model model without force loading the full model. The number of Elements is returned as the Integer num. A function return value of zero indicates success.",
      "id": "7675"
    },
    {
      "names": [
        "Integer Get_elements(Model model, Dynamic_Element &de, Integer &total_no)"
      ],
      "description": "Get all the Elements from the Model model and add them to the Dynamic_Element array, de. The total number of Elements in de is returned by total_no. Note: whilst this Dynamic_Element exists, all of the elements with handles in the Dynamic_Elementare locked. A function return value of zero indicates success.",
      "id": "132"
    },
    {
      "names": [
        "Integer Model_exists(Text model_name)"
      ],
      "description": "Checks to see if a model with the name model_name exists. A non-zero function return value indicates a model does exist. A zero function return value indicates that no model of name model_name exists. Warning - this is the opposite of most 12dPL function return values",
      "id": "63"
    },
    {
      "names": [
        "Integer Model_exists(Model model)"
      ],
      "description": "Checks if the Model model is valid (that is, not null). A non-zero function return value indicates model is not null. A zero function return value indicates that model is null. Warning - this is the opposite of most 12dPL function return values",
      "id": "62"
    },
    {
      "names": [
        "Integer Get_project_models(Dynamic_Text &model_names)"
      ],
      "description": "Get the names of all the models in the project. The dynamic array of model names is returned in the Dynamic_Text model_names. A function return value of zero indicates the model names are returned successfully.",
      "id": "231"
    },
    {
      "names": [
        "Model Get_model(Text model_name)"
      ],
      "description": "Get the Model model with the name model_name. If the model exists, its handle is returned as the function return value. If no model of name model_name exists, a null Model is returned as the function returnvalue.",
      "id": "58"
    },
    {
      "names": [
        "Integer Find_models(Text name_match, Dynamic_Text &model_names)"
      ],
      "description": "Find all models with names matching wild card pattern name_match and set the model namesto the list of Text model_names. A function return value of zero indicates the call was successful.",
      "id": "3946"
    },
    {
      "names": [
        "Integer Get_name(Model model, Text &model_name)"
      ],
      "description": "Get the name of the Model model. The model name is returned in the Text model_name. A function return value of zero indicates the model name was successfully returned. If model is null, the function return value is non-zero.",
      "id": "57"
    },
    {
      "names": [
        "Integer Get_time_created(Model model, Integer &time)"
      ],
      "description": "Get the time that the Model model was created and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2111"
    },
    {
      "names": [
        "Integer Get_time_updated(Model model, Integer &time)"
      ],
      "description": "Get the time that the Model model was last updated and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2112"
    },
    {
      "names": [
        "Integer Set_time_updated(Model model, Integer time)"
      ],
      "description": "Set the update time for the Model model to time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully set.",
      "id": "2113"
    },
    {
      "names": [
        "Integer Get_id(Model model, Uid &id)"
      ],
      "description": "Get the Uid of the Model model and return it in id. A function return value of zero indicates the Uid was successfully returned.",
      "id": "1914"
    },
    {
      "names": [
        "Integer Get_id(Model model, Integer &id)"
      ],
      "description": "Get the id of the Model model and return it in id. A function return value of zero indicates the id was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_id(Model model,Uid &id) instead.",
      "id": "1182"
    },
    {
      "names": [
        "Integer Get_model(Uid model_id, Model &model)"
      ],
      "description": "Get the model in the Project that has the Uid model_id and return it in model. If the model does not exist then a non-zero function return value is returned. A function return value of zero indicates the model was successfully returned.",
      "id": "1912"
    },
    {
      "names": [
        "Integer Get_model(Integer model_id, Model &model)"
      ],
      "description": "Get the model in the Project that has the id model_id and return it in model. If the model does not exist then a non-zero function return value is returned. A function return value of zero indicates the model was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_model(Uid model_id,Model &model) instead.",
      "id": "1180"
    },
    {
      "names": [
        "Integer Get_element(Text model_name, Uid model_id, Text element_name, Uid element_id, Element &elt)"
      ],
      "description": "Page 296Models\fChapter 5 12dPL Library CallsInternal use only. A function return value of zero indicates the Element was successfully returned.",
      "id": "3936"
    },
    {
      "names": [
        "Integer Get_element(Uid model_id, Uid element_id, Element &elt)"
      ],
      "description": "Get the Element with Uid element_id from the model that has the Uid model_id and return it inelt. If the Element does not exist in the model with Uid model_id then a non-zero function returnvalue is returned. A function return value of zero indicates the Element was successfully returned.",
      "id": "1913"
    },
    {
      "names": [
        "Integer Get_element(Integer model_id, Integer element_id, Element &elt)"
      ],
      "description": "Get the Element with id element_id from the model that has the id model_id and return it in elt. If the Element does not exist in the model with model_id then a non-zero function return value isreturned. A function return value of zero indicates the Element was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_element(Uid model_id,Uid element_id,Element &elt)instead.",
      "id": "1181"
    },
    {
      "names": [
        "Integer Get_extent_x(Model model, Real &xmin, Real &xmax)"
      ],
      "description": "Gets the x-extents of the Model model. The minimum x extent is returned by the Real xmin. The maximum x extent is returned by the Real xmax. A function return value of zero indicates the x-extents were returned successfully.",
      "id": "163"
    },
    {
      "names": [
        "Integer Get_extent_y(Model model, Real &ymin, Real &ymax)"
      ],
      "description": "Gets the y-extents of the Model model. The minimum y extent is returned by the Real ymin. The maximum y extent is returned by the Real ymax. A function return value of zero indicates the y-extents were returned successfully.",
      "id": "164"
    },
    {
      "names": [
        "Integer Get_extent_z(Model model, Real &zmin, Real &zmax)"
      ],
      "description": "Gets the z-extents of the Model model. The minimum z extent is returned by the Real zmin. The maximum z extent is returned by the Real zmax. A function return value of zero indicates the z-extents were returned successfully.",
      "id": "165"
    },
    {
      "names": [
        "Integer Calc_extent(Model model)"
      ],
      "description": "Calculate the extents of the Model model.  This is necessary when Elements have been deletedfrom a model. A function return value of zero indicates the extent calculation was successful.",
      "id": "166"
    },
    {
      "names": [
        "Integer Model_duplicate(Model model, Text dup_name)"
      ],
      "description": "Create a new Model with the name dup_name and add duplicates of all the elements in model toit. It is an error if a Model called dup_name already exists. A function return value of zero indicates the duplication was successful.",
      "id": "428"
    },
    {
      "names": [
        "Integer Model_rename(Text original_name, Text new_name)"
      ],
      "description": "Page 298Models\fChapter 5 12dPL Library CallsChange the name of the Model original_name to the new name new_name. A function return value of zero indicates the rename was successful.",
      "id": "423"
    },
    {
      "names": [
        "Integer Model_draw(Model model)"
      ],
      "description": "Draw each element in the Model model for each view that the model is on.  The elements aredrawn in their own colour. A function return value of zero indicates the draw was successful.",
      "id": "415"
    },
    {
      "names": [
        "Integer Model_draw(Model model, Integer col_num)"
      ],
      "description": "Draw, in the colour number col_num, each element in the Model model for each view that themodel is on. A function return value of zero indicates the draw was successful.",
      "id": "416"
    },
    {
      "names": [
        "Integer Null(Model model)"
      ],
      "description": "Set the Model handle model to null.  This does not affect the 12d Model model that the handlepointed to. A function return value of zero indicates model was successfully nulled.",
      "id": "134"
    },
    {
      "names": [
        "Integer Model_empty(Model model, Integer &is_empty)"
      ],
      "description": "Check if the Model model is empty and set is_empty to 1 for empty; 0 for not empty. A function return value of zero indicates the check was successfully returned.",
      "id": "7671"
    },
    {
      "names": [
        "Integer Model_delete(Model model)"
      ],
      "description": "Delete from the project and the disk, the 12d Model model pointed to by the Model model.  Thehandle model is then set to null. A function return value of zero indicates the model was successfully deleted.",
      "id": "61"
    },
    {
      "names": [
        "Integer Delete_models(Text name_match, Integer views_redraw)"
      ],
      "description": "Delete all models those name match the model wild card name_match from the project and thedisk.  Note the the operation cannot be undo. If views_redraw is 1 then all affected views will be redrawn after. A function return value of zero indicates the model was successfully deleted.",
      "id": "3919"
    },
    {
      "names": [
        "Integer Delete_all_models()"
      ],
      "description": "Delete all models from the project and the disk.  Note the the operation cannot be undo. A function return value of zero indicates the model was successfully deleted.",
      "id": "3913"
    },
    {
      "names": [
        "Integer Delete_all_empty_models()"
      ],
      "description": "Delete all empty models from the project and the disk.  Note the the operation cannot be undo. A function return value of zero indicates the model was successfully deleted.",
      "id": "3916"
    },
    {
      "names": [
        "Integer Delete_all_empty_models(Integer check_model_attributes)"
      ],
      "description": "Delete all empty models - in addition with having no attribute when check_model_attributes isnon zero - from the project and the disk.  Note the the operation cannot be undo. Page 300Models\fChapter 5 12dPL Library CallsA function return value of zero indicates the model was successfully deleted.",
      "id": "7668"
    },
    {
      "names": [
        "Integer Model_clean(Model model, Integer raster_mode)"
      ],
      "description": "Clean all elements from an existing Model model.  If the model or any element in the model islocked, a non zero value is returned.  Raster elements in the model being considered specially,based on the value of Integer raster_mode.  The valid value for raster_mode are:0retain all raster element in the model1pop up confirmation for each raster2pop up confirmation once (for this current macro call)3clean all raster elements without confirmationA function return value of zero indicates the model was successfully cleaned.",
      "id": "3836"
    },
    {
      "names": [
        "Integer Get_model_attributes(Model model, Attributes &att)"
      ],
      "description": "For the Model model, return the Attributes for the Model as att. If the Model has no Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "2042"
    },
    {
      "names": [
        "Integer Set_model_attributes(Model model, Attributes att)"
      ],
      "description": "For the Model model, set the Attributes for the Model to att. A function return value of zero indicates the attribute is successfully set.",
      "id": "2043"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Uid &uid)"
      ],
      "description": "From the Model model, get the attribute called att_name and return the attribute value in uid. The attribute must be of type Uid. ModelsPage 301\f12d Model Programming Language ManualIf the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2044"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Attributes &att)"
      ],
      "description": "From the Model model, get the attribute called att_name from model and return the attributevalue in att.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - this function is more efficient than getting the Attributes from the Model and then gettingthe data from that Attributes. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2045"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Integer att_no, Uid &uid)"
      ],
      "description": "From the Model model, get the attribute with number att_no and return the attribute value in uid. The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2046"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Integer att_no, Attributes &att)"
      ],
      "description": "From the Model model, get the attribute with number att_no and return the Attribute value in att. The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2047"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Uid att)"
      ],
      "description": "For the Model model,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueatt. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2048"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Attributes att)"
      ],
      "description": "For the Model model,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2049"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Integer att_no, Uid uid)"
      ],
      "description": "For the Model model, if the attribute number att_no exists and it is of type Uid, then its value isset to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2050"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Integer att_no, Attributes att)"
      ],
      "description": "For the Model model, if the attribute number att_no exists and it is of type Attributes, then itsvalue is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2051"
    },
    {
      "names": [
        "Integer Model_attribute_exists(Model model, Text att_name)"
      ],
      "description": "Checks to see if a model attribute with the name att_name exists in the Model model. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1403"
    },
    {
      "names": [
        "Integer Model_attribute_exists(Model model, Text name, Integer &no)"
      ],
      "description": "Checks to see if a model attribute with the name name exists in the Model model. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1404"
    },
    {
      "names": [
        "Integer Model_attribute_delete(Model model, Text att_name)"
      ],
      "description": "Delete the model attribute with the name att_name for Model model. A function return value of zero indicates the attribute was deleted.",
      "id": "1405"
    },
    {
      "names": [
        "Integer Model_attribute_delete(Model model, Integer att_no)"
      ],
      "description": "Delete the model attribute at the position att_no for Model model. A function return value of zero indicates the attribute was deleted.",
      "id": "1406"
    },
    {
      "names": [
        "Integer Model_attribute_delete_all(Model model, Element elt)"
      ],
      "description": "Delete all the model attributes for Model model. A function return value of zero indicates all the attributes were deleted.",
      "id": "1407"
    },
    {
      "names": [
        "Integer Model_attribute_dump(Model model)"
      ],
      "description": "Write out information about the Model attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "1408"
    },
    {
      "names": [
        "Integer Model_attribute_debug(Model model)"
      ],
      "description": "Write out even more information about the Model attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "1409"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Text &att)"
      ],
      "description": "Get the data for the model attribute with the name att_name for Model model. The model attribute must be of type Text and is returned in Text att. ModelsPage 305\f12d Model Programming Language ManualA function return value of zero indicates the attribute was successfully returned.",
      "id": "1411"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Integer &att)"
      ],
      "description": "Get the data for the model attribute with the name att_name for Model model. The model attribute must be of type Integer and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1412"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Real &att)"
      ],
      "description": "Get the data for the model attribute with the name att_name for Model model. The model attribute must be of type Real and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1413"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Integer att_no, Text &att)"
      ],
      "description": "Get the data for the model attribute at the position att_no for Model model. The model attribute must be of type Text and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1414"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Integer att_no, Integer &att)"
      ],
      "description": "Get the data for the model attribute at the position att_no for Model model. The model attribute must be of type Integer and is returned in Integer att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1415"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Integer att_no, Real &att)"
      ],
      "description": "Get the data for the model attribute at the position att_no for Model model. The model attribute must be of type Real and is returned in Real att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1416"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Integer att_no, Real att)"
      ],
      "description": "For the Model model, set the model attribute at position att_no to the Real att. The model attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "1427"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Integer att_no, Integer att)"
      ],
      "description": "For the Model model, set the model attribute at position att_no to the Integer att. The model attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "1426"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Integer att_no, Text att)"
      ],
      "description": "For the Model model, set the model attribute at position att_no to the Text att. The model attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "1425"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Real att)"
      ],
      "description": "For the Model model, set the model attribute with name att_name to the Real att. ModelsPage 307\f12d Model Programming Language ManualThe model attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "1424"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Integer att)"
      ],
      "description": "For the Model model, set the model attribute with name att_name to the Integer att. The model attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "1423"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Text att)"
      ],
      "description": "For the Model model, set the model attribute with name att_name to the Text att. The model attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "1422"
    },
    {
      "names": [
        "Integer Get_model_attribute_name(Model model, Integer att_no, Text &name)"
      ],
      "description": "Get the name for the model attribute at the position att_no for Model model. The model attribute name found is returned in Text name. A function return value of zero indicates the attribute name was successfully returned.",
      "id": "1417"
    },
    {
      "names": [
        "Integer Get_model_attribute_type(Model model, Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the model attribute with the name att_name from the Model model. The model attribute type is returned in Integer att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1418"
    },
    {
      "names": [
        "Integer Get_model_attribute_type(Model model, Integer att_name, Integer &att_type)"
      ],
      "description": "Get the type of the model attribute at position att_no for the Model model. The model attribute type is returned in att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1419"
    },
    {
      "names": [
        "Integer Get_model_attribute_length(Model model, Text att_name, Integer &att_len)"
      ],
      "description": "Get the length of the model attribute with the name att_name for Model model. The model attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. Note - the length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "1420"
    },
    {
      "names": [
        "Integer Get_model_attribute_length(Model model, Integer att_no, Integer &att_len)"
      ],
      "description": "Get the length of the model attribute at position att_no for Model model. The model attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. Note - the length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "1421"
    },
    {
      "names": [
        "Integer Get_model_number_of_attributes(Model model, Integer &no_atts)"
      ],
      "description": "Get the total number of model attributes for Model model. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the attribute was successfully returned.",
      "id": "1410"
    },
    {
      "names": [
        "Integer View_exists(Text view_name)"
      ],
      "description": "Checks to see if a view with the name view_name exists. A non-zero function return value indicates a view does exist. A zero function return value indicates value that no view of that name exists. Warning - this is the opposite of most 12dPL function return values",
      "id": "373"
    },
    {
      "names": [
        "Integer View_exists(View view)"
      ],
      "description": "Checks if the View view is valid (that is, not null). A non-zero function return value indicates view is not null. A zero function return value indicates that view is null. Warning - this is the opposite of most 12dPL function return values",
      "id": "374"
    },
    {
      "names": [
        "Integer Get_name(View view, Text &view_name)"
      ],
      "description": "Get the name of the View view. The view name is returned in the Text view_name. If view is null, the function return value is non-zero. A function return value of zero indicates the view name was returned successfully.",
      "id": "435"
    },
    {
      "names": [
        "Integer Null(View view)"
      ],
      "description": "Set the View handle view to null.  This does not affect the 12d Model view that the handle pointedPage 310Views\fChapter 5 12dPL Library Callsto. A function return value of zero indicates view was successfully nulled.",
      "id": "375"
    },
    {
      "names": [
        "Integer Get_project_views(Dynamic_Text &view_names)"
      ],
      "description": "Get the names of all the views in the project. The dynamic array of view names is returned in the Dynamic_Text view_names. A function return value of zero indicates the view names were returned successfully.",
      "id": "234"
    },
    {
      "names": [
        "View Get_view(Text view_name)"
      ],
      "description": "Get the View with the name view_name. If the view exists, its handle is returned as the function return value. If no view of name view_name, a null View is returned as the function return value.",
      "id": "347"
    },
    {
      "names": [
        "Integer Find_views(Text name_match, Dynamic_Text &view_names)"
      ],
      "description": "Find all views with names matching wild card pattern name_match and set the view names tothe list of Text view_names. A function return value of zero indicates the call was successful.",
      "id": "3948"
    },
    {
      "names": [
        "Integer Get_type(View view, Text &type)"
      ],
      "description": "Get the type of the View view as the Text type. The type isPlanif the view is a plan viewSectionsection viewPerspectiveperspective view or Opengl perspective viewHidden_perspective hidden perspective view. ViewsPage 311\f12d Model Programming Language ManualA function return value of zero indicates that the view type was returned successfully.",
      "id": "358"
    },
    {
      "names": [
        "Integer Get_type(View view, Integer &view_num)"
      ],
      "description": "For the view view, view_num returns the type of the view. view_num = 2010 if view is a PLAN VIEWview_num = 2011 if view is a SECTION VIEWview_num = 2012 if view is a PERSP VIEW and OPEN GL 2012view_num = 2030 if view is a HIDDEN PERSPECTIVEA function return value of zero indicates the successfully.",
      "id": "357"
    },
    {
      "names": [
        "Integer Model_get_views(Model model, Dynamic_Text &view_names)"
      ],
      "description": "Get the names of all the views that the Model model is on. The view names are returned in the Dynamic_Text view_names. A function return value of zero indicates that the view names were returned successfully.",
      "id": "354"
    },
    {
      "names": [
        "Integer View_get_models(View view, Dynamic_Text &model_names)"
      ],
      "description": "Get the names of all the Models on the View view. The model names are returned in the Dynamic_Text model_names. A function return value of zero indicates that the model names were returned successfully.",
      "id": "350"
    },
    {
      "names": [
        "Integer View_add_model(View view, Model model)"
      ],
      "description": "Add the Model model to the View view. A function return value of zero indicates that model was successfully added to the view.",
      "id": "348"
    },
    {
      "names": [
        "Integer View_remove_model(View view, Model model)"
      ],
      "description": "Remove the Model model from the View view. A function return value of zero indicates that model was successfully removed from the view.",
      "id": "349"
    },
    {
      "names": [
        "Integer View_redraw(View view)"
      ],
      "description": "Redraw the 12d Model View view. A function return value of zero indicates that the view was successfully redrawn.",
      "id": "351"
    },
    {
      "names": [
        "Integer View_fit(View view)"
      ],
      "description": "Perform a fit on the 12d Model View view. A function return value of zero indicates that the view was successfully fitted.",
      "id": "353"
    },
    {
      "names": [
        "Integer Section_view_profile(View view, Element string, Integer fit_view)"
      ],
      "description": "Profile the Element string on the View view. If fit_view = 1 then a fit is also done on the view. If view is not a Section view, then a non-zero function return value is returned. A function return value of zero indicates the profile was successful.",
      "id": "2110"
    },
    {
      "names": [
        "Integer View_get_size(View view, Integer &width, Integer &height)"
      ],
      "description": "Find the size in screen units (pixels) of the View view. ViewsPage 313\f12d Model Programming Language ManualThe width and height of the view are width and height pixels respectively. A function return value of zero indicates that the view size was successfully returned.",
      "id": "352"
    },
    {
      "names": [
        "Integer View_get_draw_area_size(Integer &width, Integer &height)"
      ],
      "description": "This call should not be used, the correct version is View_get_draw_area_size(View view,Integer&width,Integer &height);The internal rectangle of a view where data can be drawn, selected is call the draw area.  In otherword, the draw area is part of the view excluding the border, title, menu. Find the size in screen units (pixels) of the draw area of the last active view. The width and height of the draw area of the view are width and height pixels respectively. A function return value of zero indicates that the view size was successfully returned.",
      "id": "3774"
    },
    {
      "names": [
        "Integer View_set_draw_area_size(Integer width, Integer height)"
      ],
      "description": "This call should not be used, the correct version is View_set_draw_area_size(View view,Integerwidth,Integer height);The internal rectangle of a view where data can be drawn, selected is call the draw area.  In otherword, the draw area is part of the view excluding the border, title, menu. Set the size in screen units (pixels) of the draw area of the last active view to the value of widthand height. A function return value of zero indicates that the view size was successfully set.",
      "id": "3775"
    },
    {
      "names": [
        "Integer View_set_draw_area_size(View view, Integer width, Integer height)"
      ],
      "description": "The internal rectangle of a view where data can be drawn, selected is call the draw area.  In otherword, the draw area is part of the view excluding the border, title, menu. Set the size in screen units (pixels) of the draw area of the View view to the value of width andheight. A function return value of zero indicates that the view size was successfully set.",
      "id": "3798"
    },
    {
      "names": [
        "Integer View_get_draw_area_size(View view, Integer &width, Integer &height)"
      ],
      "description": "The internal rectangle of a view where data can be drawn, selected is call the draw area.  In otherword, the draw area is part of the view excluding the border, title, menu. Find the size in screen units (pixels) of the draw area of the View view. The width and height of the draw area of the view are width and height pixels respectively. A function return value of zero indicates that the view size was successfully returned.",
      "id": "3797"
    },
    {
      "names": [
        "Integer Calc_extent(View view)"
      ],
      "description": "Calculate the extents of the View view.  This is necessary when Elements have been deletedfrom a model on a view. A function return value of zero indicates the extent calculation was successful.",
      "id": "477"
    },
    {
      "names": [
        "Integer View_maximize(View v)"
      ],
      "description": "Maximize a View vA return value of zero indicates the function call was successful.",
      "id": "3034"
    },
    {
      "names": [
        "Integer View_minimize(View v)"
      ],
      "description": "Minimize a View vA return value of zero indicates the function call was successful.",
      "id": "3035"
    },
    {
      "names": [
        "Integer View_restore(View v)"
      ],
      "description": "Restore a View vViewsPage 315\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "3036"
    },
    {
      "names": [
        "Integer View_delete(View v)"
      ],
      "description": "Delete a View vA return value of zero indicates the function call was successful.",
      "id": "3443"
    },
    {
      "names": [
        "Integer View_clone(View v, Text clone_name)"
      ],
      "description": "Create a clone of an existing View v with new name clone_nameA return value of zero indicates the function call was successful.",
      "id": "3384"
    },
    {
      "names": [
        "Integer View_create(Integer type, Text name, Integer left, Integer top, Integer width, Integer height, Integer engine_type)"
      ],
      "description": "Create a new view with given: Integer type; Text name; Real position in screen pixels left left,top top; size in screen pixels width width, height height; Integer engine_typeA return value of zero indicates the function call was successful. List of values for type of view0 Plan,1 Section,2 Perspective,3 Perspective_Hide,List of values for view engine_type0 GDI_Legacy,1 GDI,2 GDI_Threaded,3 OpenGL_Legacy,4 OpenGL,5 OpenGL_Threaded,6 OpenGL_GPU,Page 316Views\fChapter 5 12dPL Library Calls",
      "id": "3037"
    },
    {
      "names": [
        "Integer View_move_resize(View v, Integer left, Integer top, Integer width, Integer height)"
      ],
      "description": "Move the View v to the new position left, top; set new size to width, height.  The numbers are allInteger measuring the screen pixels. A return value of zero indicates the function call was successful.",
      "id": "3038"
    },
    {
      "names": [
        "Integer View_resize(View view, Integer top, Integer left, Integer bottom, Integer right)"
      ],
      "description": "Move View view to the new position specified by left, top, bottom, right.  The numbers are allInteger measuring the screen pixels, if the number is less than zero then use the existing value. A return value of zero indicates the function call was successful.",
      "id": "3924"
    },
    {
      "names": [
        "Integer View_get_placement(View v, Integer &left, Integer &top, Integer &right, Integer &bottom, Integer &status)"
      ],
      "description": "Get the placement of View view to left, top, bottom, right.  The numbers are all Integermeasuring the screen pixelsstatus: 0 normal, 1 minimized, 2 maximized. A return value of zero indicates the function call was successful.",
      "id": "7701"
    },
    {
      "names": [
        "Integer Plan_view_set_rotation(View v, Real rotation_angle)"
      ],
      "description": "Set the rotation angle of the plan View v to rotation_angle. A return value of zero indicates the function call was successful.",
      "id": "3040"
    },
    {
      "names": [
        "Integer Plan_view_get_rotation(View v, Real &rotation_angle)"
      ],
      "description": "Get the rotation angle rotation_angle of the plan View vA return value of zero indicates the function call was successful.",
      "id": "3039"
    },
    {
      "names": [
        "Integer Plan_view_set_viewport(View view, Real x_min, Real y_min, Real x_max, Real y_max)"
      ],
      "description": "Set the viewport of the plan View v to x_min y_min x_max y_max. A return value of zero indicates the function call was successful.",
      "id": "7736"
    },
    {
      "names": [
        "Integer Plan_view_get_viewport(View view, Real &x_min, Real &y_min, Real &x_max, Real &y_max)"
      ],
      "description": "Get the viewport x_min y_min x_max y_max of the plan View vA return value of zero indicates the function call was successful.",
      "id": "7740"
    },
    {
      "names": [
        "Integer Section_view_set_viewport(View view, Real ch_min, Real height_min, Real ch_max, Real height_max)"
      ],
      "description": "Set the viewport of the section View v to ch_min height_min ch_max height_max. A return value of zero indicates the function call was successful.",
      "id": "7737"
    },
    {
      "names": [
        "Integer Section_view_get_viewport(View view, Real &ch_min, Real &height_min, Real &ch_max, Real &height_max)"
      ],
      "description": "Get the viewport ch_min height_min ch_max height_max of the section View vA return value of zero indicates the function call was successful.",
      "id": "7741"
    },
    {
      "names": [
        "Integer Perspective_view_set_eye_point(View view, Real x, Real y, Real z)"
      ],
      "description": "Set the eye point of the perspective View v to x y z. A return value of zero indicates the function call was successful.",
      "id": "7734"
    },
    {
      "names": [
        "Integer Perspective_view_get_eye_point(View view, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the eye point x y z of the perspective View vA return value of zero indicates the function call was successful.",
      "id": "7738"
    },
    {
      "names": [
        "Integer Perspective_view_set_target_point(View view, Real x, Real y, Real z)"
      ],
      "description": "Set the target point of the perspective View v to x y z. A return value of zero indicates the function call was successful.",
      "id": "7735"
    },
    {
      "names": [
        "Integer Perspective_view_get_target_point(View view, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the target point x y z of the perspective View vA return value of zero indicates the function call was successful.",
      "id": "7739"
    },
    {
      "names": [
        "Integer View_set_name(View v, Text name)"
      ],
      "description": "Set the new name to the View vA return value of zero indicates the function call was successful.",
      "id": "3041"
    },
    {
      "names": [
        "Integer View_get_background_colour(View v, Integer &colour)"
      ],
      "description": "Get the background colour of the View v and returns its value to Integer colour. A return value of zero indicates the function call was successful.",
      "id": "3042"
    },
    {
      "names": [
        "Integer View_set_background_colour(View v, Integer colour)"
      ],
      "description": "Set the background colour of the View v to the one of Integer value colour. A return value of zero indicates the function call was successful.",
      "id": "3043"
    },
    {
      "names": [
        "Integer View_get_exaggeration(View view, Real &exaggeration)"
      ],
      "description": "Get the exaggeration of a section or perspective View view and returns its value to Realexaggeration. A return value of zero indicates the function call was successful.",
      "id": "3926"
    },
    {
      "names": [
        "Integer View_set_exaggeration(View view, Real exaggeration)"
      ],
      "description": "Set the exaggeration for a section or perspective View view to the one of Real valueexaggeration. A return value of zero indicates the function call was successful.",
      "id": "3925"
    },
    {
      "names": [
        "Integer Plan_view_set_plot_scale(View v, Real scale)"
      ],
      "description": "Set plot scale factor of the plan View v to Real scale. A return value of zero indicates the function call was successful.",
      "id": "3045"
    },
    {
      "names": [
        "Integer Plan_view_get_plot_scale(View v, Real &scale)"
      ],
      "description": "Get plot scale factor Real scale of the plan View vA return value of zero indicates the function call was successful.",
      "id": "3044"
    },
    {
      "names": [
        "Integer View_get_grid_settings(View v, Integer &draw_mode, Integer &text_x_mode, Integer &text_y_mode, Integer &grid_mode, Real &space_x, Real &space_y, Real &level, Integer &colour, Real &text_height, Real &text_plot_height, Integer &text_clour, Integer &cross_mode, Real &cross_size_pixel, Real &cross_size_mm, Text &text_style, Text &text_prefix_x, Text &text_prefix_y)"
      ],
      "description": "Get various settings of the View v. Parameter 2: draw mode0 no grid 1 last on view 2 first on viewParameter 3: text x mode 0 no text 1 bottom2 topParameter 4: text y mode 0 no text 1 left2 rightParameter 5: grid mode-2 mark1 line2 cross3 bottom and top3 left and right3 mark and crossParameter 6: space between vertical linesParameter 7: space between horizontal linesParameter 8: level of grid lines (points)Parameter 9: grid colourParameter 10: grid text heightParameter 11: grid text plot heightParameter 12: grid text colourParameter 13: another draw mode? 0 not use 1 useParameter 14: cross size pixelsViewsPage 321\f12d Model Programming Language ManualParameter 15: cross size mm (plot)Parameter 16: text style for grid textParameter 17: pre-post text for grid text xParameter 18: pre-post text for grid text yA return value of zero indicates the function call was successful.",
      "id": "3046"
    },
    {
      "names": [
        "Integer View_set_grid_settings(View v, Integer draw_mode, Integer text_x_mode, Integer text_y_mode, Integer grid_mode, Real space_x, Real space_y, Real level, Integer colour, Real text_height, Real text_plot_height, Integer text_colour, Integer cross_mode, Real cross_size_pixel, Real cross_size_mm, Text text_style, Text text_prefix_x, Text text_prefix_y)"
      ],
      "description": "Set various settings of the View vParameter 2: draw mode0 no grid 1 last on view 2 first on viewParameter 3: text x mode 0 no text 1 bottom2 topParameter 4: text y mode 0 no text 1 left2 rightParameter 5: grid mode-2 mark1 line2 cross3 bottom and top3 left and right3 mark and crossParameter 6: space between vertical linesParameter 7: space between horizontal linesParameter 8: level of grid lines (points)Parameter 9: grid colourParameter 10: grid text heightParameter 11: grid text plot heightParameter 12: grid text colourParameter 13: another draw mode? 0 not use 1 useParameter 14: cross size pixelsParameter 15: cross size mm (plot)Parameter 16: text style for grid textParameter 17: pre-post text for grid text xParameter 18: pre-post text for grid text yA return value of zero indicates the function call was successful.",
      "id": "3047"
    },
    {
      "names": [
        "Integer View_set_engine_type(View v, Integer engine_type)"
      ],
      "description": "Set view engine type of the View v to Integer engine_typeA return value of zero indicates the function call was successful. List of values for view engine_type0 GDI_Legacy,1 GDI,2 GDI_Threaded,3 OpenGL_Legacy,4 OpenGL,5 OpenGL_Threaded,6 OpenGL_GPU,",
      "id": "3049"
    },
    {
      "names": [
        "Integer View_get_engine_type(View v, Integer &engine_type)"
      ],
      "description": "Get view engine type Integer engine_type of the View vA return value of zero indicates the function call was successful. List of values for view engine_type0 GDI_Legacy,1 GDI,2 GDI_Threaded,3 OpenGL_Legacy,4 OpenGL,5 OpenGL_Threaded,6 OpenGL_GPU,",
      "id": "3048"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text attribute_name, Integer value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view with value Integer valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3066"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text attribute_name, Real value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view with value Real valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3067"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text attribute_name, Text value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view with value Text valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3068"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text model_name, Text attribute_name, Integer value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view within model with name model_name with valueInteger valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3069"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text model_name, Text attribute_name, Real value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view within model with name model_name with valueReal valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful. Page 324Views\fChapter 5 12dPL Library Calls",
      "id": "3070"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text model_name, Text attribute_name, Text value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view within model with name model_name with valueText valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3071"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text attribute_name, Integer &value, Integer &internal_return)"
      ],
      "description": "Get Integer value of attribute attribute_name of the View viewInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3072"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text attribute_name, Real &value, Integer &internal_return)"
      ],
      "description": "Get Real value of attribute attribute_name of the View viewInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3073"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text attribute_name, Text &value, Integer &internal_return)"
      ],
      "description": "Get Text value of attribute attribute_name of the View viewInternal return internal_return is for developer debugging purpose. ViewsPage 325\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "3074"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text model_name, Text attribute_name, Integer &value, Integer &internal_return)"
      ],
      "description": "Get Integer value of attribute attribute_name of the View view within model with namemodel_nameInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3075"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text model_name, Text attribute_name, Real &value, Integer &internal_return)"
      ],
      "description": "Get Real value of attribute attribute_name of the View view within model with namemodel_nameInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3076"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text model_name, Text attribute_name, Text &value, Integer &internal_return)"
      ],
      "description": "Get Text value of attribute attribute_name of the View view within model with namemodel_nameInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful.",
      "id": "3077"
    },
    {
      "names": [
        "Integer View_remove_attribute(View view, Text attribute_name)"
      ],
      "description": "Remove the attribute attribute_name from the View viewA return value of zero indicates the function call was successful.",
      "id": "3078"
    },
    {
      "names": [
        "Integer View_remove_attribute(View view, Text model_name, Text attribute_name)"
      ],
      "description": "Remove an attribute attribute_name from the View view within model with name model_nameA return value of zero indicates the function call was successful.",
      "id": "3079"
    },
    {
      "names": [
        "Integer View_remove_draw_data_textstyle(View view, Text model_name, Text prefix, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3080"
    },
    {
      "names": [
        "Integer View_remove_plot_data_textstyle(View view, Text model_name, Text prefix, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3081"
    },
    {
      "names": [
        "Integer View_get_draw_data_textstyle_merge(View view, Text model_name, Text prefix, Textstyle_Data &d, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3082"
    },
    {
      "names": [
        "Integer View_remove_plot_data_textstyle(View view, Text model_name, Text prefix, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3083"
    },
    {
      "names": [
        "Integer View_get_draw_data_textstyle(View view, Text model_name, Text prefix, Textstyle_Data &d, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3084"
    },
    {
      "names": [
        "Integer View_get_plot_data_textstyle(View view, Text model_name, Text prefix, Textstyle_Data &d, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3085"
    },
    {
      "names": [
        "Integer View_set_draw_data_textstyle(View view, Text model_name, Text prefix, Textstyle_Data d, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3086"
    },
    {
      "names": [
        "Integer View_set_plot_data_textstyle(View view, Text model_name, Text prefix, Textstyle_Data d, Integer &internal_return)"
      ],
      "description": "Page 328Views\fChapter 5 12dPL Library CallsIntended for 12D developers use only",
      "id": "3087"
    },
    {
      "names": [
        "Integer View_apply_favourite(View v, Text file_name, Text &return_message)"
      ],
      "description": "Apply a view favourite file file_name to a View v. Some text message is returned in Text return_messageA return value of zero indicates the function call was successful.",
      "id": "3135"
    },
    {
      "names": [
        "Integer View_apply_position(View v, Text file_name, Text &return_message)"
      ],
      "description": "Apply a view position file file_name to a View v. Some text message is returned in Text return_messageA return value of zero indicates the function call was successful.",
      "id": "3136"
    },
    {
      "names": [
        "Integer View_write_favourite_file(View view, Text favourite_name, Integer add_file_extension)"
      ],
      "description": "Write a view favourite file favourite_name of a given View v. If add_file_extension is 1 then add the approriate file extension to the file name. A return value of zero indicates the function call was successful.",
      "id": "3385"
    },
    {
      "names": [
        "Integer View_write_position_file(View view, Text position_name, Integer add_file_extension)"
      ],
      "description": "Write a view position file position_name of a given View v. If add_file_extension is 1 then add the approriate file extension to the file name. A return value of zero indicates the function call was successful. ViewsPage 329\f12d Model Programming Language Manual",
      "id": "3386"
    },
    {
      "names": [
        "Integer View_favourite_file_exists(View view, Text favourite_name, Integer &exists)"
      ],
      "description": "Check if the view favourite file of matching type to a given View v of name favourite_name exist. Set Integer exists to 1 if the file exists, 0 otherwise. A return value of zero indicates the function call was successful.",
      "id": "3387"
    },
    {
      "names": [
        "Integer View_position_file_exists(View view, Text position_name, Integer &exists)"
      ],
      "description": "Check if the view position file of matching type to a given View v of name position_name exist. Set Integer exists to 1 if the file exists, 0 otherwise. A return value of zero indicates the function call was successful.",
      "id": "3388"
    },
    {
      "names": [
        "Integer Get_last_view(Text &view_name)"
      ],
      "description": "Set the Text view_name to the name of the last active view. A return value of zero indicates the function call was successful.",
      "id": "3480"
    },
    {
      "names": [
        "Integer Section_view_regenerate(View section_view, Integer fit)"
      ],
      "description": "Regenerate a given section View section_view.  Also perform a fit operation on the view ifInteger fit is 1. A return value of zero indicates the function call was successful.",
      "id": "3528"
    },
    {
      "names": [
        "Integer Get_section_profile_string(View section_view, Element &profile_string)"
      ],
      "description": "Get the profile string of a given section View section_view; and assign it to Elementprofile_string. A return value of zero indicates the function call was successful.",
      "id": "3529"
    },
    {
      "names": [
        "Integer View_restore_normal(View view)"
      ],
      "description": "Restore normal a given View view (unmininize or unmaximinze). A return value of zero indicates the function call was successful.",
      "id": "3927"
    },
    {
      "names": [
        "Integer View_check_empty(View v, Integer ignore_empty_models, Integer &is_empty)"
      ],
      "description": "For this macro call, a given View v is_empty ifit contains no model - for empty_models 0it contains no element (or all containing models are empty) - for empty_models non zerorA return value of zero indicates the function call was successful.",
      "id": "3928"
    },
    {
      "names": [
        "Integer Tile_all_views(Integer mode)"
      ],
      "description": "Tile all view by a given mode. 0horizontal1vertical2cascade. A return value of zero indicates the function call was successful.",
      "id": "3923"
    },
    {
      "names": [
        "Integer Element_exists(Element elt)"
      ],
      "description": "Checks the validity of an Element elt.  That is, it checks that elt has not been set to null. A non-zero function return value indicates elt is not null. A zero function return value indicates that elt is null.",
      "id": "56"
    },
    {
      "names": [
        "Integer Get_points(Element elt, Integer &num_verts)"
      ],
      "description": "Get the number of vertices in the Element elt. The number of vertices is returned as the Integer num_verts. For Elements of type Alignment, Arc and Circle, Get_points gives the number of vertices when theElement is approximated using the 12d Model chord-to-arc tolerance. A function return value of zero indicates the number of vertices was successfully returned.",
      "id": "43"
    },
    {
      "names": [
        "Integer Get_data(Element elt, Integer i, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the (x,y,z) data for the ith vertex of the string Element elt. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the data was successfully returned. NOTE: The functions to set the data arrays are given in the sections of each string type.  ForPage 336Elements\fChapter 5 12dPL Library Callsexample 5. 38. 2. 1 Super String Create Functions.",
      "id": "653"
    },
    {
      "names": [
        "Integer Set_name(Element elt, Text elt_name)"
      ],
      "description": "Set the name of the Element elt to the Text elt_name. A function return value of zero indicates the Element name was successfully set. NoteThis will not set the name of an Element of type Tin.",
      "id": "45"
    },
    {
      "names": [
        "Integer Get_name(Element elt, Text &elt_name)"
      ],
      "description": "Get the name of the Element elt. The name is returned by the Text elt_name. A function return value of zero indicates the name was returned successfully. If elt is null, the function return value is non-zero.",
      "id": "44"
    },
    {
      "names": [
        "Integer Set_colour(Element elt, Integer colour)"
      ],
      "description": "Set the colour of the Element elt.  The colour is given by the Integer colour. A function return value of zero indicates that the colour was successfully set. Notes(a) For an Interface string, the colour is only used when the string is converted to a differentstring type. (b) There are supplied functions to convert the colour number to a colour name and vice-versa.",
      "id": "47"
    },
    {
      "names": [
        "Integer Get_colour(Element elt, Integer &colour)"
      ],
      "description": "Get the colour of the Element elt. ElementsPage 337\f12d Model Programming Language ManualThe colour (as a number) is returned as the Integer colour. A function return value of zero indicates the Element colour was successfully returned. NoteThere are 12dPL functions to convert the colour number to a colour name and vice-versa.",
      "id": "46"
    },
    {
      "names": [
        "Integer Set_model(Element elt, Model model)"
      ],
      "description": "Sets the 12d Model model of the Element elt to be Model model. If elt is already in a model, then it is moved to the Model model. If elt is not in a model, then elt is added to the Model model. A function return value of zero indicates the model was successfully set.",
      "id": "55"
    },
    {
      "names": [
        "Integer Set_model(Tin tin, Model model)"
      ],
      "description": "Sets the 12d Model model of the Tin tin to be Model model. Note that a tin can belong to more than one models. A function return value of zero indicates the model was successfully set.",
      "id": "480"
    },
    {
      "names": [
        "Integer Remove_model(Tin tin, Model model)"
      ],
      "description": "Removes Tin tin out of containing Model model. A function return value of zero indicates the tin was successfully removed.",
      "id": "6889"
    },
    {
      "names": [
        "Integer Set_model(Dynamic_Element de, Model model)"
      ],
      "description": "Sets the Model of all the Elements in the Dynamic_Element de to model. For each Element elt in the Dynamic_Element, de if elt is already in a model, then it is moved tothe Model model.  If elt is not in a model, elt is added to the Model model. Page 338Elements\fChapter 5 12dPL Library CallsA function return value of zero indicates the models were successfully set.",
      "id": "141"
    },
    {
      "names": [
        "Integer Get_model(Element elt, Model &model)"
      ],
      "description": "Get the model handle of the model containing the Element elt.  The model is returned by theModel model.  Note: the function cannot get the model when elt is a tin. A function return value of zero indicates the handle was returned successfully.",
      "id": "54"
    },
    {
      "names": [
        "Integer Set_breakline(Element elt, Integer break_type)"
      ],
      "description": "Sets the breakline type for triangulation purposes for the Element elt. The breakline type is given as the Integer break_type. The break_type is01if elt is to be used as a point stringif elt is to be used as a breakline stringA function return value of zero indicates the breakline type was successfully set.",
      "id": "53"
    },
    {
      "names": [
        "Integer Get_breakline(Element elt, Integer &break_type)"
      ],
      "description": "Gets the breakline type of the Element elt.  The breakline type is used for triangulation purposesand is returned as the Integer break_type. The break_type is0if elt is used as a point string1breakline stringA function return value of zero indicates the breakline type was returned successfully.",
      "id": "52"
    },
    {
      "names": [
        "Integer Get_type(Element elt, Text &elt_type)"
      ],
      "description": "ElementsPage 339\f12d Model Programming Language ManualGet the Element type of the Element elt.  as a Text value. The Element type is returned as the Text elt_type. For the Text types of elements, go to 5. 36. 1 Types of Elements. A function return value of zero indicates the type was returned successfully.",
      "id": "64"
    },
    {
      "names": [
        "Integer Get_type(Element elt, Integer &elt_type)"
      ],
      "description": "Get the Element type of the Element elt as an Integer value. The Element type is returned as the Integer elt_type. For the Integer types of elements, go to 5. 36. 1 Types of Elements. A function return value of zero indicates the type was returned successfully.",
      "id": "42"
    },
    {
      "names": [
        "Integer Set_style(Element elt, Text elt_style)"
      ],
      "description": "Set the line style of the Element elt. The name of the line style is given by the Text elt_style. A function return value of zero indicates the style was successfully set.",
      "id": "49"
    },
    {
      "names": [
        "Integer Get_style(Element elt, Text &elt_style)"
      ],
      "description": "Get the line style of the Element elt. The name of the line style is returned by the Text elt_style. The style is not used for Elements of type Tin or Text. A function return value of zero indicates the style was returned successfully.",
      "id": "48"
    },
    {
      "names": [
        "Integer Set_weight(Element elt, Real weight)"
      ],
      "description": "Page 340Elements\fChapter 5 12dPL Library CallsSet the weight of the Element elt. The value of the weight is given by the Real weight. A function return value of zero indicates the weight was successfully set.",
      "id": "1609"
    },
    {
      "names": [
        "Integer Get_weight(Element elt, Real &weight)"
      ],
      "description": "Get the line style of the Element elt. The value of the weight is returned by the Real weight. A function return value of zero indicates the weight was returned successfully.",
      "id": "1608"
    },
    {
      "names": [
        "Integer Set_chainage(Element elt, Real start_chain)"
      ],
      "description": "Set the start chainage of the Element elt. The start chainage is given by the Real start_chain. A function return value of zero indicates the start chainage was successfully set.",
      "id": "51"
    },
    {
      "names": [
        "Integer Get_chainage(Element elt, Real &start_chain)"
      ],
      "description": "Get the start chainage of the Element elt. The start chainage is returned by the Real start_chain. A function return value of zero indicates the chainage was returned successfully.",
      "id": "50"
    },
    {
      "names": [
        "Integer Get_end_chainage(Element elt, Real &chainage)"
      ],
      "description": "Get the end chainage of the Element elt. The end chainage is returned by the Real chainage. A function return value of zero indicates the chainage was returned successfully. ElementsPage 341\f12d Model Programming Language Manual",
      "id": "654"
    },
    {
      "names": [
        "Integer Get_id(Element elt, Uid &uid)"
      ],
      "description": "Get the unique Uid of the Element elt and return it in uid. If elt is null or an error occurs, uid is set to zero. A function return value of zero indicates the Element Uid was successfully returned.",
      "id": "1908"
    },
    {
      "names": [
        "Integer Get_id(Element elt, Integer &id)"
      ],
      "description": "Get the unique id of the Element elt and return it in id. If elt is null or an error occurs, id is set to zero. A function return value of zero indicates the Element id was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_id(Element elt,Uid &id) instead.",
      "id": "378"
    },
    {
      "names": [
        "Integer Get_time_created(Element elt, Integer &time)"
      ],
      "description": "Get the time of creation of the Element elt. The time value is returned in Integer time (seconds since January 1 1970). A function return value of zero indicates the data was returned successfully.",
      "id": "673"
    },
    {
      "names": [
        "Integer Get_time_updated(Element elt, Integer &time)"
      ],
      "description": "Get the time of the last update of the Element elt. The time value is returned in Integer time (seconds since January 1 1970). A function return value of zero indicates the data was returned successfully.",
      "id": "674"
    },
    {
      "names": [
        "Integer Set_time_updated(Element elt, Integer time)"
      ],
      "description": "Set the time of the last update of the Element elt. The time value is defined in Integer time. A function return value of zero indicates the time was updated successfully.",
      "id": "675"
    },
    {
      "names": [
        "Integer Null(Element elt)"
      ],
      "description": "Set the Element elt to null. A function return value of zero indicates the Element elt was successfully set to null. NoteThe database item pointed to by the Element elt is not affected in any way.",
      "id": "133"
    },
    {
      "names": [
        "Integer Get_extent_x(Element elt, Real &xmin, Real &xmax)"
      ],
      "description": "Gets the x-extents of the Element elt. The minimum x extent is returned by the Real xmin. The maximum x extent is returned by the Real xmax. A function return value of zero indicates the x extents were successfully returned.",
      "id": "159"
    },
    {
      "names": [
        "Integer Get_extent_y(Element elt, Real &ymin, Real &ymax)"
      ],
      "description": "Gets the y-extents of the Element elt. The minimum y extent is returned by the Real ymin. The maximum y extent is returned by the Real ymax. A function return value of zero indicates the y extents were successfully returned.",
      "id": "160"
    },
    {
      "names": [
        "Integer Get_extent_z(Element elt, Real &zmin, Real &zmax)"
      ],
      "description": "Gets the z-extents of the Element elt. The minimum z extent is returned by the Real zmin. The maximum z extent is returned by the Real zmax. A function return value of zero indicates the z extents were successfully returned.",
      "id": "161"
    },
    {
      "names": [
        "Integer Calc_extent(Element elt)"
      ],
      "description": "Calculate the extents of the Element elt. This is necessary after an Element's body data has been modified. A function return value of zero indicates the extent calculation was successful.",
      "id": "162"
    },
    {
      "names": [
        "Integer Element_duplicate(Element elt, Element &dup_elt)"
      ],
      "description": "Create a duplicate of the Element elt and return it as the Element dup_elt. A function return value of zero indicates the duplication was successful.",
      "id": "430"
    },
    {
      "names": [
        "Integer Element_delete(Element elt)"
      ],
      "description": "Delete from the 12d Model database the item that the Element elt points to.  The Element elt isthen set to null. A function return value of zero indicates the data base item was deleted successfully.",
      "id": "41"
    },
    {
      "names": [
        "Integer Delete_element(Text model_name, Uid model_id, Text element_name, Uid element_id)"
      ],
      "description": "Delete from the 12d Model database Element specified by model_name, model_id,element_name, element_idA function return value of zero indicates the data base item was deleted successfully.",
      "id": "3917"
    },
    {
      "names": [
        "Integer Find_element(Text model_name, Text element_name, Element &first_found, Integer &count)"
      ],
      "description": "Find the first 12d Model database Element specified by model_name, element_name andreturn that in first_found, also set the value for the total count of all elements foundA function return value of zero indicates the data base item was found successfully.",
      "id": "3922"
    },
    {
      "names": [
        "Integer Get_attributes(Element elt, Attributes &att)"
      ],
      "description": "For the Element elt, return the Attributes for the Element as att. If the Element has no attribute then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "1972"
    },
    {
      "names": [
        "Integer Set_attributes(Element elt, Attributes att)"
      ],
      "description": "For the Element elt, set the Attributes for the Element to att. A function return value of zero indicates the attribute is successfully set.",
      "id": "1973"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Uid &uid)"
      ],
      "description": "From the Element elt, get the attribute called att_name from elt and return the attribute value inuid.  The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - this function is more efficient than getting the Attributes from the Element and then gettingthe data from that Attributes. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1974"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Attributes &att)"
      ],
      "description": "From the Element elt, get the attribute called att_name from elt and return the attribute value inatt.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - this function is more efficient than getting the Attributes from the Element and then gettingPage 346Elements\fChapter 5 12dPL Library Callsthe data from that Attributes. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1975"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Integer att_no, Uid &uid)"
      ],
      "description": "From the Element elt, get the attribute with number att_no and return the attribute value in uid. The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1976"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Integer att_no, Attributes &att)"
      ],
      "description": "From the Element elt, get the attribute with number att_no and return the attribute value in att. The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1977"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Uid uid)"
      ],
      "description": "For the Element elt,\uf020if the attribute called att_name does not exist in the element then create it as type Uid and giveit the value uid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1978"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Attributes att)"
      ],
      "description": "For the Element elt,\uf020if the attribute called att_name does not exist in the element then create it as type Attributesand give it the value att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1979"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Uid uid)"
      ],
      "description": "For the Element elt, if the attribute number att_no exists and it is of type Uid, then its value is setto uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1980"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Attributes att)"
      ],
      "description": "For the Element elt, if the attribute number att_no exists and it is of type Attributes, then its valueis set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1981"
    },
    {
      "names": [
        "Integer Attribute_exists(Element elt, Text att_name)"
      ],
      "description": "Checks to see if a user attribute with the name att_name exists in the Element elt. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values.",
      "id": "555"
    },
    {
      "names": [
        "Integer Attribute_exists(Element elt, Text att_name, Integer &att_no)"
      ],
      "description": "Checks to see if a user attribute with the name att_name exists in the Element elt. If the attribute exists, its position is returned in Integer att_no. This position can be used in other Attribute functions described below. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "556"
    },
    {
      "names": [
        "Integer Attribute_delete(Element elt, Text att_name)"
      ],
      "description": "Delete the user attribute with the name att_name for Element elt. A function return value of zero indicates the attribute was deleted.",
      "id": "557"
    },
    {
      "names": [
        "Integer Attribute_delete(Element elt, Integer att_no)"
      ],
      "description": "Delete the user attribute at the position att_no for Element elt. A function return value of zero indicates the attribute was deleted.",
      "id": "558"
    },
    {
      "names": [
        "Integer Attribute_delete_all(Element elt)"
      ],
      "description": "ElementsPage 349\f12d Model Programming Language ManualDelete all the user attributes for Element elt. A function return value of zero indicates all the attributes were deleted.",
      "id": "559"
    },
    {
      "names": [
        "Integer Get_number_of_attributes(Element elt, Integer &no_atts)"
      ],
      "description": "Get the total number of user attributes for Element elt. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the attribute was successfully returned.",
      "id": "560"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Text &att)"
      ],
      "description": "Get the data for the user attribute with the name att_name for Element elt. The user attribute must be of type Text and is returned in Text att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "561"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Integer &att)"
      ],
      "description": "Get the data for the user attribute with the name att_name for Element elt. The user attribute must be of type Integer and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "562"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Real &att)"
      ],
      "description": "Get the data for the user attribute with the name att_name for Element elt. The user attribute must be of type Real and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "563"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Integer att_no, Text &att)"
      ],
      "description": "Get the data for the user attribute at the position att_no for Element elt. The user attribute must be of type Text and is returned in att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "564"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Integer att_no, Integer &att)"
      ],
      "description": "Get the data for the user attribute at the position att_no for Element elt. The user attribute must be of type Integer and is returned in Integer att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "565"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Integer att_no, Real &att)"
      ],
      "description": "Get the data for the user attribute at the position att_no for Element elt. The user attribute must be of type Real and is returned in Real att. A function return value of zero indicates the attribute was successfully returned.",
      "id": "566"
    },
    {
      "names": [
        "Integer Get_attribute_name(Element elt, Integer att_no, Text &name)"
      ],
      "description": "Get the name for the user attribute at the position att_no for Element elt. The user attribute name found is returned in Text name. A function return value of zero indicates the attribute name was successfully returned.",
      "id": "567"
    },
    {
      "names": [
        "Integer Get_attribute_type(Element elt, Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the user attribute with the name att_name from the Element elt. The user attribute type is returned in Integer att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "568"
    },
    {
      "names": [
        "Integer Get_attribute_type(Element elt, Integer att_no, Integer &att_type)"
      ],
      "description": "Get the type of the user attribute at position att_no for the Element elt. The user attribute type is returned in att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "569"
    },
    {
      "names": [
        "Integer Get_attribute_length(Element elt, Text att_name, Integer &att_len)"
      ],
      "description": "Get the length of the user attribute with the name att_name for Element elt. The user attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "570"
    },
    {
      "names": [
        "Integer Get_attribute_length(Element elt, Integer att_no, Integer &att_len)"
      ],
      "description": "Get the length of the user attribute at position att_no for Element elt. The user attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "571"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Text att)"
      ],
      "description": "For the Element elt, set the user attribute with name att_name to the Text att. The user attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "572"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Integer att)"
      ],
      "description": "For the Element elt, set the user attribute with name att_name to the Integer att. The user attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "573"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Real att)"
      ],
      "description": "For the Element elt, set the user attribute with name att_name to the Real att. The user attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "574"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Text att)"
      ],
      "description": "For the Element elt, set the user attribute at position att_no to the Text att. The user attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "575"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Integer att)"
      ],
      "description": "ElementsPage 353\f12d Model Programming Language ManualFor the Element elt, set the user attribute at position att_no to the Integer att. The user attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "576"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Real att)"
      ],
      "description": "For the Element elt, set the user attribute at position att_no to the Real att. The user attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "577"
    },
    {
      "names": [
        "Integer Attribute_dump(Element elt)"
      ],
      "description": "Write out information about the Element attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "578"
    },
    {
      "names": [
        "Integer Attribute_debug(Element elt)"
      ],
      "description": "Write out even more information about the Element attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "589"
    },
    {
      "names": [
        "Integer Triangulate(Dynamic_Element de, Text tin_name, Integer tin_colour, Integer preserve, Integer bubbles, Tin &tin)"
      ],
      "description": "The elements from the Dynamic_Element de are triangulated and a tin named tin_name createdwith colour tin_colour. A non zero value for preserve allows break lines to be preserved. A non zero value for bubbles removes bubbles from the triangulation. A created tin is returned by Tin tin. A function return value of zero indicates the triangulation was successful.",
      "id": "142"
    },
    {
      "names": [
        "Integer Triangulate(Dynamic_Text list, Text tin_name, Integer colour, Integer preserve, Integer bubbles, Tin &tin)"
      ],
      "description": "Triangulate the data from a list of models Dynamic_Text list. The tin name is given as Text tin_name, the tin colour is given as Integer colour, the preservestring option is given by Integer preserve, and the remove bubbles option is given by Integerbubbles, 1 is on, 0 is off. A function return value of zero indicates the Tin tin was successfully returned.",
      "id": "1428"
    },
    {
      "names": [
        "Integer Tin_exists(Text tin_name)"
      ],
      "description": "Checks to see if a tin with the name tin_name exists. A non-zero function return value indicates a tin does exist. A zero function return value indicates that no tin of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "355"
    },
    {
      "names": [
        "Integer Tin_exists(Tin tin)"
      ],
      "description": "Checks if the Tin tin is valid (that is, not null). A non-zero function return value indicates that tin is not null. A zero function return value indicates that tin is null. Warning this is the opposite of most 12dPL function return values",
      "id": "356"
    },
    {
      "names": [
        "Integer Get_project_tins(Dynamic_Text &tins)"
      ],
      "description": "Get the names of all the tins in the project.  The names are returned in the Dynamic_Text, tins. A function return value of zero indicates the tin names were returned successfully.",
      "id": "232"
    },
    {
      "names": [
        "Tin Get_tin(Text tin_name)"
      ],
      "description": "Get a Tin handle for the tin with name tin_name. If the tin exists, the handle to it is returned as the function return value. If the tin does not exist, a null Tin is returned as the function return value.",
      "id": "146"
    },
    {
      "names": [
        "Integer Find_tins(Text name_match, Dynamic_Text &tin_names)"
      ],
      "description": "Find all tins with names matching wild card pattern name_match and set the tin names to the listof Text tin_names. A function return value of zero indicates the call was successful.",
      "id": "3947"
    },
    {
      "names": [
        "Tin Get_tin(Element elt)"
      ],
      "description": "If the Element elt is of type Tin and the tin exists, a Tin handle to the tin is returned as thefunction return value. If the tin does not exist or the Element is not of type Tin, a null Tin is returned as the functionreturn value.",
      "id": "370"
    },
    {
      "names": [
        "Integer Get_name(Tin tin, Text &tin_name)",
        "Integer Tin_models(Tin tin, Dynamic_Text &models_used)"
      ],
      "description": "Get the name of the Tin tin. The tin name is returned in the Text tin_name. A function return value of zero indicates success. If tin is null, the function return value is non-zero. Tin_models(Tin tin, Dynamic_Text &models_used)Get the names of all the models that were used to create the Tin tin. The model names are returned in the Dynamic_Text models_used. A function return value of zero indicates that the view names were returned successfully.",
      "id": "431"
    },
    {
      "names": [
        "Integer Get_time_created(Tin tin, Integer &time)"
      ],
      "description": "Page 358Tin Element\fChapter 5 12dPL Library CallsGet the time that the Tin tin was created and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2114"
    },
    {
      "names": [
        "Integer Get_time_updated(Tin tin, Integer &time)"
      ],
      "description": "Get the time that the Tin tin was last updated and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2115"
    },
    {
      "names": [
        "Integer Set_time_updated(Tin tin, Integer time)"
      ],
      "description": "Set the update time for the Tin tin to time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully set.",
      "id": "2116"
    },
    {
      "names": [
        "Integer Tin_number_of_points(Tin tin, Integer &notri)"
      ],
      "description": "Get the total number of points used in creating the Tin tin. This value includes duplicate points and also the four construction points. The number of triangles is returned in the Integer notri. A function return value of zero indicates success. If tin is null, the function return value is non-zero.",
      "id": "472"
    },
    {
      "names": [
        "Integer Tin_number_of_triangles(Tin tin, Integer &notri)"
      ],
      "description": "Get the number of triangles in the Tin tin. Tin ElementPage 359\f12d Model Programming Language ManualThis value includes null triangles and also construction triangles. The number of triangles is returned in the Integer notri. A function return value of zero indicates success. If tin is null, the function return value is non-zero.",
      "id": "473"
    },
    {
      "names": [
        "Integer Tin_number_of_duplicate_points(Tin tin, Integer &notri)"
      ],
      "description": "Get the number of duplicate points found whilst creating the Tin tin. The number of duplicate points is returned in the Integer notri. A function return value of zero indicates success. If tin is null, the function return value is non-zero.",
      "id": "474"
    },
    {
      "names": [
        "Integer Tin_number_of_items(Tin tin, Integer &num_items)"
      ],
      "description": "The number of strings in the tin tin is returned as num_items.  Note that if the original string inthe data set to be triangulated had invisible segments (discontinuities) then that string is brokeninto two or more strings in the tin. A function return value of zero indicates that num_items was successfully returned.",
      "id": "475"
    },
    {
      "names": [
        "Integer Tin_colour(Tin tin, Real x, Real y, Integer &colour)"
      ],
      "description": "Get the colour of the tin at the point (x,y)A function return value of zero indicates success.",
      "id": "218"
    },
    {
      "names": [
        "Integer Tin_height(Tin tin, Real x, Real y, Real &height)"
      ],
      "description": "Get the height of the tin at the point (x,y). If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set. Page 360Tin Element\fChapter 5 12dPL Library CallsA function return value of zero indicates the height was successfully returned.",
      "id": "215"
    },
    {
      "names": [
        "Integer Tin_slope(Tin tin, Real x, Real y, Real &slope)"
      ],
      "description": "Get the slope of the tin at the point (x,y). The units for slope is an angle in radians measured from the horizontal plane. If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set. A function return value of zero indicates the slope was successfully returned.",
      "id": "216"
    },
    {
      "names": [
        "Integer Tin_aspect(Tin tin, Real x, Real y, Real &aspect)"
      ],
      "description": "Get the aspect of the tin at the point (x,y). The units for aspect is a bearing in radians.  That is, aspect is given as a clockwise anglemeasured from the positive y-axis (North). If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set. A function return value of zero indicates the aspect was successfully returned.",
      "id": "217"
    },
    {
      "names": [
        "Integer Tin_duplicate(Tin tin, Text dup_name)"
      ],
      "description": "Create a new Tin with name dup_name which is a duplicate the Tin tin. IT is an error if a Tin called dup_name already exists. A function return value of zero indicates the duplication was successful.",
      "id": "429"
    },
    {
      "names": [
        "Integer Tin_rename(Text original_name, Text new_name)"
      ],
      "description": "Change the name of the Tin original_name to the new name new_name. A function return value of zero indicates the rename was successful.",
      "id": "422"
    },
    {
      "names": [
        "Integer Tin_boundary(Tin tin, Integer colour_for_strings, Dynamic_Element &de)"
      ],
      "description": "Get the boundary polygons for the Tin tin.  The polygons are returned in the Dynamic_Elementde with colour colour_for_strings. A function return value of zero indicates the data was successfully returned.",
      "id": "476"
    },
    {
      "names": [
        "Integer Tin_delete(Tin tin)"
      ],
      "description": "Delete the Tin tin from the project and the disk.  Note: the function does not work on super tinsnor grid tins. A function return value of zero indicates the tin was deleted successfully.",
      "id": "219"
    },
    {
      "names": [
        "Integer Delete_tins(Text name_match)"
      ],
      "description": "Delete all tins from the project with names match the wild card name_match.  Note: the functioncannot be undo. A function return value of zero indicates the tin was deleted successfully.",
      "id": "3920"
    },
    {
      "names": [
        "Integer Delete_all_tins()"
      ],
      "description": "Delete all tins from the project and the disk.  Note: the function cannot be undo. A function return value of zero indicates the tin was deleted successfully.",
      "id": "3914"
    },
    {
      "names": [
        "Integer Tin_get_point(Tin tin, Integer np, Real &x, Real &y, Real &z)"
      ],
      "description": "Page 362Tin Element\fChapter 5 12dPL Library CallsGet the (x,y,z) coordinate of np\u2019th point of the tin. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the coordinate of the point was successfully returned.",
      "id": "831"
    },
    {
      "names": [
        "Integer Tin_get_triangle_points(Tin tin, Integer nt, Integer &p1, Integer &p2, Integer &p3)"
      ],
      "description": "Get the three points of nt\u2019th triangle of the tin. The first point value is returned in Integer p1. The second point value is returned in Integer p2. The third point value is returned in Integer p3. The normal to a triangle in the tin is considered to be pointing \"upwards\".  That is, the normalpoints in the direction of what is considered the upper side of the tin.  For example for a groundtin, the normal points upward. Looking onto the triangle from down the direction of the normal, the points p1, p2 and p3 are in aclockwise order around the triangle.  This is opposite to the right-hand screw rule. p1normal pointing \"up\"p3p2Note: this is the opposite to the order of points in a triangle in a trimesh.  See 5. 51 TrimeshElement. A function return value of zero indicates the points were successfully returned",
      "id": "832"
    },
    {
      "names": [
        "Integer Tin_get_triangle_neighbours(Tin tin, Integer nt, Integer &n1, Integer &n2, Integer &n3)"
      ],
      "description": "Get the three neighbour triangles of the nt\u2019th triangle of the tin. The first triangle neighbour is returned in Integer n1. The second triangle neighbour is returned in Integer n2. The third triangle neighbour is returned in Integer n3. Tin ElementPage 363\f12d Model Programming Language ManualA function return value of zero indicates the triangles were successfully returned.",
      "id": "833"
    },
    {
      "names": [
        "Integer Tin_get_point_from_point(Tin tin, Real x, Real y, Integer &np)"
      ],
      "description": "For the Tin tin and the coordinate (x,y), get the tin point number of the vertex of the triangleclosest to (x,y), and returned it in np. A function return value of zero indicates the function was successful.",
      "id": "1436"
    },
    {
      "names": [
        "Integer Tin_get_triangles_about_point(Tin tin, Integer n, Integer &no_triangles)"
      ],
      "description": "For the Tin tin and the nth point of tin, get the number of triangles surrounding the point andreturn the number in no_triangles.  Those includes construction triangles. A function return value of zero indicates the function was successful.",
      "id": "1628"
    },
    {
      "names": [
        "Integer Tin_get_triangles_about_point(Tin tin, Integer n, Integer max_triangles, Integer &no_triangles, Integer triangles[], Integer points[], Integer status[])"
      ],
      "description": "For the Tin tin and the nth point of tin,get the number of triangles surrounding the point and return it as no_trianglesreturn the list of triangle numbers in triangles[]return the list of all the point numbers of vertices of the triangles that surround the point inpoints[] (the number of these is the same as the number of triangle around the point)return the status of each triangle in triangles[].  status is 2 for normal visible triangles, 1 or 0 forother triangles (including null triangles and construction triangles). Note: max_triangles is the size of the arrays triangles[], points[] and status[]; and ifmax_triangles is less than or equal to no_triangles the function will fail and return 12.  Thenumber of triangles surrounding the nth point of a tin is given by Tin_get_triangles_about_point. A function return value of zero indicates the function was successful.",
      "id": "1629"
    },
    {
      "names": [
        "Integer Tin_get_triangle_inside(Tin tin, Integer triangle, Integer &Inside)"
      ],
      "description": "Get the condition of the triangle number triangle of the tin tin. If the value of the flag Inside is012not valid triangle. null triangle or construction triangle. the triangle is a non-null triangle. So for a valid triangle, inside = 2. A function return value of zero indicates the flag was successfully returned.",
      "id": "835"
    },
    {
      "names": [
        "Integer Tin_get_triangle(Tin tin, Integer triangle, Integer &p1, Integer &p2, Integer &p3, Integer &n1, Integer &n2, Integer &n3, Real &x1, Real &y1, Real &z1, Real &x2, Real &y2, Real &z2, Real &x3, Real &y3, Real &z3)"
      ],
      "description": "Get the three points and their (x,y,z) data and three neighbour triangles of nth triangle of the tin. The first point is returned in Integer p1, the (x, y, z) value is returned in x1,y1,z1. The second point is returned in Integer p2, the (x, y, z) value is returned in x2,y2,z2. The third point is returned in Integer p3, the x, y, z values are returned in x3,y3,z3. The first triangle neighbour is returned in Integer n1. The second triangle neighbour is returned in Integer n2. The third triangle neighbour is returned in Integer n3. A function return value of zero indicates the data was successfully returned.",
      "id": "836"
    },
    {
      "names": [
        "Integer Tin_get_triangle_from_point(Tin tin, Real x, Real y, Integer &triangle)"
      ],
      "description": "Get the triangle of the Tin tin that contains the given coordinate (x,y). The triangle number is returned in Integer triangle. A function return value of zero indicates the triangle was successfully returned.",
      "id": "837"
    },
    {
      "names": [
        "Integer Draw_triangle(Tin tin, Integer tri, Integer c)"
      ],
      "description": "Draw the triangle tri with colour c inside the Tin tin. A function return value of zero indicates the triangle was successfully drawn.",
      "id": "1433"
    },
    {
      "names": [
        "Integer Draw_triangles_about_point(Tin tin, Integer pt, Integer c)"
      ],
      "description": "Draw the triangles about a point pt with colour c inside Tin tin. A function return value of zero indicates the triangles were successfully drawn.",
      "id": "1434"
    },
    {
      "names": [
        "Integer Triangles_clip(Real x1, Real y1, Real x2, Real y2, Real x3, Real y3, Real x4, Real y4, Real z4, Real x5, Real y5, Real z5, Real x6, Real y6, Real z6, Integer &npts_out, Real xarray_out[], Real yarray_out[], Real zarray_out[])"
      ],
      "description": "The vertices of a 2d triangle is defined by the coordinates (x1,y1), (x2,y2) and (x3,y3). The vertices of a 3d triangle is defined by the coordinates (x4,y4,z4), (x5,y5,z5) and (x6,y6,z6). The Real arrays xarray_out[], yarray_out[], zarrary_out[] must exist and have dimensions atleast 9. The function uses the 2d triangle to clip the 3d triangle and return the polygon of 3d clips pointsin the arrays xarray_out[], yarray_out[], zarrar_out[].  The number of clips points is returned innpts_out. A function return value of zero indicates the function was successful.",
      "id": "1439"
    },
    {
      "names": [
        "Integer Retriangulate(Tin tin)"
      ],
      "description": "Retriangulate the Tin tin. A function return value of zero indicates the Tin tin was successfully returned.",
      "id": "1429"
    },
    {
      "names": [
        "Integer Breakline(Tin tin, Integer p1, Integer p2)"
      ],
      "description": "Add breakline in Tin tin from point 1 p1 to point 2 p2. A function return value of zero indicates the breakline was successfully added.",
      "id": "1430"
    },
    {
      "names": [
        "Integer Flip_triangles(Tin tin, Integer t1, Integer t2)"
      ],
      "description": "From the triangles t1 and t2 in Tin tin. A function return value of zero indicates the triangles were successfully flipped.",
      "id": "1431"
    },
    {
      "names": [
        "Integer Set_height(Tin tin, Integer pt, Real ht)"
      ],
      "description": "Set the height Real ht for the point pt on the Tin tin. A function return value of zero indicates the height was successfully set.",
      "id": "1432"
    },
    {
      "names": [
        "Integer Tin_drop_point_3d(Tin tin, Real px, Real py, Real pz, Real &dx, Real &dy, Real &dz, Real &distance, Integer &above_tin, Integer &triangle, Integer &status)"
      ],
      "description": "Drop a point with xyz-coordinate px py pz to a Tin tinto get the dropped xyz-coordinate dx dy dz, distance to the tin distance, point above tin checkabove_tin 1 for true, triangle index triangle of dropped point, dropped status statusA return value of zero indicates the function call was successful.",
      "id": "3030"
    },
    {
      "names": [
        "Integer Supertin_number_of_tins(Tin supertin, Integer &ntins)"
      ],
      "description": "Get the number of component tins of a supertin. The number of component tins is returned in the Integer ntins. Tin ElementPage 367\f12d Model Programming Language ManualA function return value of zero indicates the input is an actual supertin and the function call wassuccessful.",
      "id": "3217"
    },
    {
      "names": [
        "Integer Supertin_get_tin(Tin supertin, Integer pos, Text &name, Integer &mode, Integer &active)"
      ],
      "description": "Get the details of component tin number pos of a supertin. The details includes:name of the component tin. mode of the component being a hole or not (1 true, 0 false). active flag (1 true, 0 false). A function return value of zero indicates the input is an actual supertin and the position is validand the function call was successful.",
      "id": "3218"
    },
    {
      "names": [
        "Integer Null(Tin tin)"
      ],
      "description": "Set the Tin handle tin to null.  This does not affect the 12d Model tin that the handle pointed to. A function return value of zero indicates tin was successfully nulled.",
      "id": "376"
    },
    {
      "names": [
        "Integer Null_triangles(Tin tin, Element poly, Integer mode)"
      ],
      "description": "Set any triangle whose centroid is inside or outside a given polygon to null. tin is the tin to null and poly is the polygon which restricts the nulling. If mode is0the inside of the polygon is nulled. 1the outside is nulled. A function return value of zero indicates there were no errors in the nulling calculations.",
      "id": "153"
    },
    {
      "names": [
        "Integer Reset_null_triangles(Tin tin, Element poly, Integer mode)"
      ],
      "description": "Set any null triangle whose centroid is inside or outside a given polygon to be a valid triangle. tin is the tin to reset and poly is the polygon which determines which triangles are to be resetIf mode is0the inside of the polygon is reset. 1the outside is reset. A function return value of zero indicates there were no errors in the reset calculations.",
      "id": "154"
    },
    {
      "names": [
        "Integer Reset_null_triangles(Tin tin)"
      ],
      "description": "Set all the triangles of the tin tin to be valid triangles. A function return value of zero indicates there were no errors in the reset calculations.",
      "id": "155"
    },
    {
      "names": [
        "Integer Null_by_angle_length(Tin tin, Real l1, Real a1, Real l2, Real a2)"
      ],
      "description": "Null triangle of the tin tin based on:length l2; - if a triangle has an external side (that is not a breakline) greater than l2, the triangle isnulledangle a2 in radian; - if a triangle has an external side (that is not a breakline) with an angle on itless than a2, then the triangle is nulled. combined length l1 and combined angle a1 in radian; - a triangle is nulled if it has an externalside (that is not a breakline) and the sum of the two angles on it is less than a1 and has anexternal side (that is not a breakline) whose length is greater than l1. See reference manual under Tins => Null => Null by Angle and Length for more details. A function return value of zero indicates the triangle was nulled successfully.",
      "id": "1435"
    },
    {
      "names": [
        "Integer Tin_null_by_colour(Tin tin, Integer colour, Integer is_colour, Integer is_null)"
      ],
      "description": "Reset or null triangles of the tin tin based on triangle colours:Tin ElementPage 369\f12d Model Programming Language Manualcolour to be compared to the triangle colours. Note: a triangle in the tin may (1) have no colour - hence using the main tin colour; or may (2)have it own colour which happens to be the same as the main colour of the tin.  Those triangles inthe two cases would look the same in views but the underlying data are different.  The colour tobe match in case (1) is 0, and in case (2) is the main colour of the tin. is_colour 1 indicates only process the triangles with matching colour; 0 indicates only processthe triangles with non-matching colour. is_null 0 indicates that the operation resets null triangles; 1 indicates that the operation set nulltriangles. A function return value of zero indicates the triangle was nulled successfully.",
      "id": "3219"
    },
    {
      "names": [
        "Integer Tin_null_by_colours(Tin tin, Dynamic_Integer colours, Integer in_colours_list, Integer is_null)"
      ],
      "description": "Reset or null triangles of the tin tin based on triangle colours:List of colours to be compared to the triangle coloursNote: a triangle in the tin may (1) have no colour - hence using the main tin colour; or may (2)have it own colour which happens to be the same as the main colour of the tin.  Those triangles inthe two cases would look the same in views but the underlying data are different.  The colour tobe match in case (1) is 0, and in case (2) is the main colour of the tin. in_colours_list 1 indicates only process the triangles with colours in the given list; 0 indicatesonly process the triangles with colours not in the given list. is_null 0 indicates that the operation resets null triangles; 1 indicates that the operation set nulltriangles. A function return value of zero indicates the triangle was nulled successfully.",
      "id": "3220"
    },
    {
      "names": [
        "Integer Tin_get_triangle_colour(Tin tin, Integer triangle, Integer &colour)"
      ],
      "description": "Get the colour of the nth triangle of the tin. The colour value is returned in Integer colour. Note 1: if the triangle is not a valid triangle, the return colour will be 0.  Use the callTin_get_triangle_inside(tin, triangle, error) and compare error to 2 for checking the valid of thetriangle. Note 2: if the triangle does not have its own colour (e. g.  on plan view, the drawing will use thecommon tin colour), the return colour also will be 0. A function return value of zero indicates the colour were successfully returned.",
      "id": "834"
    },
    {
      "names": [
        "Integer Colour_triangles(Tin tin, Integer colour, Element poly, Integer mode)"
      ],
      "description": "Colour all the triangles in the Tin tin whose centroids are inside or outside a given polygon to aspecified colour. The triangulation is tin, the polygon poly and the colour number col_num. The value of mode determines whether the triangles whose centroids are inside or outside thepolygon are coloured. If mode equals 0, the triangles inside the polygon are coloured. If mode equals 1, the triangles outside the polygon are coloured. A function return value of zero indicates there were no errors in the colour calculations.",
      "id": "156"
    },
    {
      "names": [
        "Integer Colour_triangle(Tin tin, Integer triangle_number, Integer colour)"
      ],
      "description": "Colour one triangle of given index triangle_number in the Tin tin to a specified colour. A function return value of zero indicates success.",
      "id": "3843"
    },
    {
      "names": [
        "Integer Colour_triangle(Tin tin, Dynamic_Integer triangle_numbers, Integer colour)"
      ],
      "description": "Colour all triangles of given indices triangle_numbers in the Tin tin to a specified colour. A function return value of zero indicates success.",
      "id": "3844"
    },
    {
      "names": [
        "Integer Reset_colour_triangles(Tin tin, Element poly, Integer mode)"
      ],
      "description": "Set any triangle in the Tin tin whose centroid is inside or outside a given polygon back to thebase tin colour. The value of mode determines whether the triangles whose centroids are inside or outside thepolygon are set back to the base colour. If mode equals 0, the triangles inside the polygon are setIf mode equals 1, the triangles outside the polygon are setA function return value of zero indicates there were no errors in the colour reset calculations.",
      "id": "157"
    },
    {
      "names": [
        "Integer Reset_colour_triangles(Tin tin)"
      ],
      "description": "Set all the triangles in the Tin tin back to the base tin colour. A function return value of zero indicates success.",
      "id": "158"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Integer num_pts)"
      ],
      "description": "Create an Element of type Super with room for num_pts vertices and num_pts-1 segments ifthe string is not closed or num_pts segments if the string is closed. flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.  See 5. 38. 1Super String Dimensions for the values that flag1 may take. The actual values of the arrays are set by other function calls after the string is created. The return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null. Note - if dimensions greater than 32 are required, then calls with two flags must be used. For example Integer Create_super(Integer flag1, Integer flag2,Integer num_pts).",
      "id": "691"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Integer flag2, Integer npts)"
      ],
      "description": "create super string with arrays set aside following flag1 and flag 2 (extended dimensions). Create an Element of type Super with room for num_pts vertices and num_pts-1 segments ifthe string is not closed or num_pts segments if the string is closed. flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. flag2 is used to specify which of the dimensions from 33 to 64 are used/not used. See 5. 38. 1 Super String Dimensions for the values that flag1 and flag2 may take. The actual values of the arrays are set by other function calls after the string is created. The return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null.",
      "id": "1499"
    },
    {
      "names": [
        "Element Create_super(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type Super with room for num_pts vertices and num_pts-1 segments ifthe string is not closed or num_pts segments if the string is closed. Set the colour, name, style, flags etc.  of the new string to be the same as those from the Elementseed.  Note that the seed string must also be a super string. The actual values of the arrays are set after the string is created. The return value is an Element handle to the created super string. Super String ElementPage 383\f12d Model Programming Language ManualIf the Super string could not be created, then the returned Element will be null.",
      "id": "692"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Segment seg)"
      ],
      "description": "Create an Element of type Super with two vertices if seg is a Line, Arc or Spiral, or one vertex ifseg is a Point.  The co-ordinates for the one or two vertices are taken from seg. flag1 is used to specify which of the dimensions from 1 to 32 are used/not used.  See 5. 38. 1Super String Dimensions for the values that flag1 may take. LJG? if seg is an Arc or a Spiral, then what dimensions are set and what values are they given?The return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null. Note - if dimensions greater than 32 are required, then calls with two flags must be used. For example Integer Create_super(Integer flag1, Integer flag2,Segment seg).",
      "id": "693"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Integer flag2, Segment seg)"
      ],
      "description": "Create an Element of type Super with two vertices if seg is a Line, Arc or Spiral, or one vertex ifseg is a Point.  The co-ordinates for the one or two vertices are taken from seg. flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. flag2 is used to specify which of the dimensions from 33 to 64 are used/not used. See 5. 38. 1 Super String Dimensions for the values that flag1 and flag2 may take. LJG? if seg is an Arc or a Spiral, then what dimensions are set and what values are they given?The return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null.",
      "id": "1500"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_pts)"
      ],
      "description": "Create an Element of type Super with num_pts vertices. The basic geometry for the super string is supplied by the arrays x (x values), y (y values), z (zvalues), r (radius of segments), b (bulge of segment b = 1 for major arc > 180 degrees, b = 0 forminor arc < 180 degrees). flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. Page 384Super String Element\fChapter 5 12dPL Library CallsNote that depending on the flag1 value, the z, r, b arrays may or may not be used, but the arraysmust still be supplied.  See 5. 38. 1 Super String Dimensions for the values that flag1 may take. The arrays must be of length num_pts or greater. The function return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null. Note - if dimensions greater than 32 are required, then calls with two flags must be used. For example Integer Create_super(Integer flag1, Integer flag2,Real x[],Real y[],Real z[],Realr[],Integer b[],Integer num_pts).",
      "id": "690"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Integer flag2, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_pts)"
      ],
      "description": "Create an Element of type Super with num_pts vertices. The basic geometry for the super string is supplied by the arrays x (x values), y (y values), z (zvalues), r (radius of segments), b (bulge of segment b = 1 for major arc > 180 degrees, b = 0 forminor arc < 180 degrees). flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. flag2 is used to specify which of the dimensions from 33 to 64 are used/not used. Note that depending on the flag1 value, the z, r, b arrays may or may not be used, but the arraysmust still be supplied.  See 5. 38. 1 Super String Dimensions for the values that flag1 and flag2may take. The arrays must be of length num_pts or greater. The function return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null.",
      "id": "1498"
    },
    {
      "names": [
        "Integer Super_insert_vertex(Element super, Integer where, Integer count)"
      ],
      "description": "For the super string super, insert count new vertices BEFORE vertex index where. All the existing vertices from index position where onwards are move to after the new countinserted vertices. For example, Super_insert_vertex(super,1,10) will insert 10 new vertices before vertex index 1,and all the existing vertices will be moved to after vertex index 10. Note that if the string is a closed string then the closure applies to the new last vertex. If the Element super is not of type Super, then the function return value is set to a non zerovalue. A return value of 0 indicates the function call was successful.",
      "id": "2168"
    },
    {
      "names": [
        "Integer Super_remove_vertex(Element super, Integer where, Integer count)"
      ],
      "description": "For the super string super, delete count existing vertices starting at vertex index where. If there are not enough vertices to delete then the delete stops at the last vertex of the superstring. Note that if the string is closed then the closure applies to the new last vertex. If the Element super is not of type Super, then the function return value is set to a non zerovalue. A return value of 0 indicates the function call was successful.",
      "id": "2169"
    },
    {
      "names": [
        "Integer Set_super_vertex_coord(Element super, Integer i, Real x, Real y, Real z)"
      ],
      "description": "Set the coordinate data (x,y,z) for the i\u2019th vertex (the vertex with index number i) of the superElement super wherethe x value to set is in Real x. the y value to set is in Real y. the z value to set is in Real z. If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully set.",
      "id": "732"
    },
    {
      "names": [
        "Integer Get_super_vertex_coord(Element super, Integer i, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the coordinate data (x,y,z) for i\u2019th vertex (the vertex with index number i) of the super Elementsuper. The x coordinate is returned in Real x. The y coordinate is returned in Real y. The z coordinate is returned in Real z. If the Element super is not of type Super, then the function return value is set to a non zero value. A return value of 0 indicates the function call was successful.",
      "id": "733"
    },
    {
      "names": [
        "Integer Set_super_data(Element super, Integer i, Real x, Real y, Real z, Real r, Integer b)"
      ],
      "description": "Set the (x,y,z,r,f) data for the i\u2019th vertex of the super Element super wherethe x value to set is the Real x. the y value to set is the Real y. the z value to set is the Real z. the radius value to set is the Real r. the major/minor arc bulge value to set is the Integer b (0 for minor arc < 180 degrees, non zerofor major arc > 180 degrees). If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully set.",
      "id": "699"
    },
    {
      "names": [
        ""
      ],
      "description": "Get the (x,y,z,r,b data for the i\u2019th vertex of the super string super. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The radius value is returned in Real r. The major/minor arc bulge value is returned in Integer b. (bulge of segment b = 1 for major arc >180 degrees, b = 0 for minor arc < 180 degrees). If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully returned.",
      "id": "696"
    },
    {
      "names": [
        "Integer Set_super_data(Element super, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_pts)"
      ],
      "description": "Set the (x,y,z,r,b) data for the first num_pts vertices of the string Element super. This function allows the user to modify a large number of vertices of the string in one call. The maximum number of vertices that can be set is given by the number of vertices in the string. The (x,y,z,r,f) values for each string vertex are given in the Real arrays x[], y[],z[],r[] and Integerarray b[] where the (x,y,z) are coordinate, r the radius of the arc on the following segment and bis the bulge to say whether the arc is a major or minor arc (bulge of segment b = 1 for major arc> 180 degrees, b = 0 for minor arc < 180 degrees). The number of vertices to be set is given by Integer num_ptsIf the Element super is not of type Super, then nothing is modified and the function return valueis set to a non zero value. Note: this function can not create new super Elements but only modify existing super Elements. A function return value of zero indicates the data was set successfully.",
      "id": "697"
    },
    {
      "names": [
        "Integer Get_super_data(Element super, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Page 388Super String Element\fChapter 5 12dPL Library CallsGet the (x,y,z,r,f) data for the first max_pts vertices of the super string Element super. The (x,y,z,r,f) values at each string vertex are returned in the Real arrays x[], y[],z[],r[] andInteger array b[] (the arrays are x values, y values, z values, radius of segments, b is bulge todenote if the segment is major or minor arc (bulge of segment b = 1 for major arc > 180 degrees,b = 0 for minor arc < 180 degrees). The maximum number of vertices that can be returned is given by max_pts (usually the size ofthe arrays). The vertex data returned starts at the first vertex and goes up to the minimum of max_pts and thenumber of vertices in the string. The actual number of vertices returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element super is not of type Super, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "694"
    },
    {
      "names": [
        "Integer Set_super_data(Element super, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the super Element super, set the (x,y,z,r,b) data for num_pts vertices, starting at vertexnumber start_pt. This function allows the user to modify a large number of vertices of the string in one call startingat vertexnumber start_pt rather than vertex one. The maximum number of vertices that can be set is given by the difference between the numberof vertices in the string and the value of start_pt. The (x,y,z,r,f) values for the string vertices are given in the Real arrays x[], y[],z[],r[] and b[]where the (x,y,z) are coordinate, r the radius of the arc on the following segment and b is thebulge to say whether the arc is a major or minor arc (bulge of segment b = 1 for major arc > 180degrees, b = 0 for minor arc < 180 degrees). The number of the first string vertex to be modified is start_pt. The total number of vertices to be set is given by Integer num_ptsIf the Element super is not of type Super, then nothing is modified and the function return valueis set to a non zero value. A function return value of zero indicates the data was set successfully. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new super strings but only modify existing super strings.",
      "id": "698"
    },
    {
      "names": [
        "Integer Get_super_data(Element super, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a super string Element super, get the (x,y,z,r,b) data for max_pts vertices starting at vertexnumber start_pt (the arrays are x values, y values, z values, radius of segments, b is if segmentis major or minor arc). This routine allows the user to return the data from a super string in user specified chunks.  Thisis necessary if the number of vertices in the string is greater than the size of the arrays availableto contain the information. As in the previous function, the maximum number of vertices that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the vertex data returned starts at vertex number start_pt rather thanvertex one. The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[],z[],r[] andInteger array b[]. The actual number of vertices returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element super is not of type Super, then num_pts is set to zero and the function returnvalue is set to a non zero value. Note A start_pt of one gives the same result as for the previous function. A function return value of zero indicates the data was successfully returned.",
      "id": "695"
    },
    {
      "names": [
        "Integer Get_super_vertex_forward_direction(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the Element super of type Super, get the angle of the tangent at the beginning of thesegment leaving vertex number vert.  That is, the segment going from vertex vert to vertexvert+1.  Return the angle in ang. ang is in radians and is measured in a counterclockwise direction from the positive x-axis. vertex number vertforward anglevertex number vertforward angletangent at beginningof segment followingvertex number vertvertex number vert+1vertex number vert+1If the super string is closed, the angle will still be valid for the last vertex of the super string and itis the angle of the closing segment between the last vertex and the first vertex. If super string is open, the call fails for the last vertex and a non-zero return code is returned. If the Element super is not of type Super, then a non-zero return code is returnedA function return value of zero indicates the angle was successfully returned.",
      "id": "1501"
    },
    {
      "names": [
        "Integer Get_super_vertex_backward_direction(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the Element super of type Super, get the angle of the tangent at the end of the segmententering vertex number vert.  That is, the segment going from vertex vert-1 to vertex vert.  Returnthe angle in ang. ang is in radians and is measured in a counterclockwise direction from the positive x-axis. backward anglevertex number vertbackward anglevertex number vertvertex number vert-1vertex number vert-1Super String Elementtangent atend of segmentgoing into vertexnumber vertPage 391\f12d Model Programming Language ManualIf the super string is closed, the angle will still be valid for the first vertex of the super string and itis the angle of the closing segment between the first vertex and the last vertex. If super string is open, the call fails for the first vertex and a non-zero return code is returned. If the Element super is not of type Super, then a non-zero return code is returnedA function return value of zero indicates the angle was successfully returned.",
      "id": "1502"
    },
    {
      "names": [
        "Integer Get_type_like(Element super, Integer &type)"
      ],
      "description": "In earlier versions of 12d Model, there were a large number of string types but in later versionsof 12d Model, the super string was introduced which with its possible dimensions, could replacemany of the other strings. However, for some applications it was important to know if the super string was like one of theoriginal strings.  For example, some options required a string to be a contours string, the original2d string.  That is, the string has the one z-value (or height) for the entire string.  So a super stringthat has a constant dimension for height, behaves like a 2d string and in that case will return theType Like of 2d. The Type Like\u2019s can be referred to by a number (Integer) or by text (Text). See 5. 36. 1 Types of Elements for the values of the Type Like numbers and Type Like text. The Type Like for the super string is returned in type. If the Element string is not a super string, then a non zero function return value is returned. A function return value of zero indicates the Type Like was returned successfully.",
      "id": "2074"
    },
    {
      "names": [
        "Integer Get_type_like(Element elt, Text &type)"
      ],
      "description": "In earlier versions of 12d Model, there were a large number of string types but in later versionsof 12d Model, the super string was introduced which with its possible dimensions, could replacemany of the other strings. However, for some applications it was important to know if the super string was like one of theoriginal strings.  For example, some options required a string to be a contours string, the original2d string.  That is, the string has the one z-value (or height) for the entire string.  So a super stringthat has a constant dimension for height, behaves like a 2d string and in that case will return theType Like of 2d. The Type Like\u2019s can be referred to by a number (Integer) or by text (Text). See 5. 36. 1 Types of Elements for the values of the Type Like numbers and Type Like text. The Text Type Like for the super string is returned in type. If the Element string is not a super string, then a non zero function return value is returned. A function return value of zero indicates the Type Like was returned successfully.",
      "id": "2075"
    },
    {
      "names": [
        "Integer Set_super_use_2d_level(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the height dimension Att_ZCoord_Value isused or removed. See Height Dimensions for information on Height dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. If use is 1, the dimension is set.  If use is 0, the dimension Att_ZCoord_Value is removed. Note that if the height dimension Att_ZCoord_Array exists, this call is ignored. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "700"
    },
    {
      "names": [
        "Integer Get_super_use_2d_level(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension height dimension Att_ZCoord_Value exists for the super string super. See Height Dimensions for information on Height dimensions or Super String Dimensions forinformation on all dimensions. use is returned as 1 if the dimension exists, or 0 if the dimension doesn\u2019t exist. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "701"
    },
    {
      "names": [
        "Integer Set_super_use_3d_level(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the height dimension Att_ZCoord_Array isused or removed. See Height Dimensions for information on Height dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. If use is 1, the dimension is set.  If use is 0, the dimension Att_ZCoord_Array is removed. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "730"
    },
    {
      "names": [
        "Integer Get_super_use_3d_level(Element super, Integer &use)"
      ],
      "description": "Query whether the height dimension Att_ZCoord_Array exists for the super string super. See Height Dimensions for information on Height dimensions or Super String Dimensions forinformation on all dimensions. use is returned as 1 if the dimension exists, or 0 if the dimension doesn\u2019t exist. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "731"
    },
    {
      "names": [
        "Integer Super_vertex_level_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_ZCoord_Value exists and the dimensionAtt_ZCoord_Array does not exist then there will be one z value zval (height or level) for the entirestring. In this case (when the dimension Att_ZCoord_Value exists and the dimension Att_ZCoord_Arraydoes not exist) this function sets the Att_ZCoord_Array dimension and creates a new z-value foreach vertex of super and it is given the value zval. See Height Dimensions for information on the Height (ZCoord) dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "2174"
    },
    {
      "names": [
        "Integer Get_super_2d_level(Element elt, Real &level)"
      ],
      "description": "For the Element elt, if the height dimension Att_ZCoord_Value is set and Att_ZCoord_Array isnot set, then the z-value for the entire string is returned in level. See Height Dimensions for information on Height dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. If the Element elt is not of type Super, or the dimension Att_ZCoord_Value is not set, this callfails and a non zero return value is returned. A return value of zero indicates the function call was successful.",
      "id": "703"
    },
    {
      "names": [
        "Integer Set_super_2d_level(Element elt, Real level)"
      ],
      "description": "For the Element elt of type Super, if the dimension Att_ZCoord_Value is set andAtt_ZCoord_Array is not set, then the z-value for the entire string is set to level. See Height Dimensions for information on Height dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. If the Element elt is not of type Super, or the dimension Att_ZCoord_Value is not set, this callfails and a non zero return value is returned. A return value of zero indicates the function call was successful.",
      "id": "702"
    },
    {
      "names": [
        "Integer Set_super_use_tinability(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use the two dimensions Att_Vertex_Tinable_Array andAtt_Segment_Tinable_Array. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A value for use of 1 sets the dimensions and 0 removes them. A return value of 0 indicates the function call was successful.",
      "id": "722"
    },
    {
      "names": [
        "Integer Get_super_use_tinability(Element super, Integer &use)"
      ],
      "description": "Query whether at least one the two dimensions Att_Vertex_Tinable_Array orAtt_Segment_Tinable_Array exists for the super string. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if at least one of the two dimensions exists. use is returned as 0 if neither of the two dimensions exist. A return value of 0 indicates the function call was successful.",
      "id": "723"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_tinability_value(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Vertex_Tinable_Value isused or removed. If Att_Vertex_Tinable_Value is set and Att_Vertex_Tinability_Array is not set then the tinability isthe same for all vertices of super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the tinability is the same for all vertices. If use is 0, the dimension is removed. Note that if the dimension Att_Vertex_Tinable_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "1584"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_tinability_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Tinable_Value exists for the super string super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1585"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_tinability_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Vertex_Tinable_Array isused. If Att_Vertex_Tinable_Array is set then there can be a different tinability defined for each vertexof super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the tinability is different for each vertex. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1586"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_tinability_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Tinable_Array exists for the super string super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1587"
    },
    {
      "names": [
        "Integer Set_super_vertex_tinability(Element super, Integer vert, Integer tinability)"
      ],
      "description": "For the Element super (which must be of type Super), set the tinability value for vertex numbervert to the value tinability. If tinability is 1, the vertex is tinable. If tinability is 0, the vertex is not tinable. If the Element super is not of type Super, or Att_Vertex_Tinable_Array is not set for super, thena non-zero return code is returned. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "736"
    },
    {
      "names": [
        "Integer Get_super_vertex_tinability(Element super, Integer vert, Integer &tinability)"
      ],
      "description": "For the Element super (which must be of type Super), get the tinability value for vertex numbervert and return it in the Integer tinability. If tinability is 1, the vertex is tinable. If tinability is 0, the vertex is not tinable. If the Element super is not of type Super, or Att_Vertex_Tinable_Array is not set for super, thena non-zero return code is returned. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "737"
    },
    {
      "names": [
        "Integer Set_super_use_segment_tinability_value(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Tinable_Value isused or removed. If Att_Segment_Tinable_Value is set and Att_Segment_Tinability_Array is not set then thetinability is the same for all segments of super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the tinability is the same for all segments. If use is 0, the dimension is removed. Note that if the dimension Att_Segment_Tinable_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "1592"
    },
    {
      "names": [
        "Integer Get_super_use_segment_tinability_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Tinable_Value exists for the super string super. If Att_Segment_Tinable_Value is set and Att_Segment_Tinability_Array is not set then thetinability is the same for all segments of super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1593"
    },
    {
      "names": [
        "Integer Set_super_use_segment_tinability_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Tinable_Array isset or removed. If Att_Segment_Tinable_Array is set then there can be a different tinability defined for eachsegment in super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the tinability is different for each segment. If use is 0, the dimension is removed. Page 402Super String Element\fChapter 5 12dPL Library CallsA return value of 0 indicates the function call was successful.",
      "id": "1594"
    },
    {
      "names": [
        "Integer Get_super_use_segment_tinability_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Tinable_Array exists for the super string super. If Att_Segment_Tinable_Array is set then there can be a different tinability defined for eachsegment in super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1595"
    },
    {
      "names": [
        "Integer Set_super_segment_tinability(Element super, Integer seg, Integer tinability)"
      ],
      "description": "For the Element super (which must be of type Super), set the tinability value for segmentnumber seg to the value tinability. If tinability is 1, the segment is tinable. If tinability is 0, the segment is not tinable. If the Element super is not of type Super, or Att_Segment_Tinable_Array is not set for super,then a non-zero return code is returned. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "724"
    },
    {
      "names": [
        "Integer Get_super_segment_tinability(Element super, Integer seg, Integer &tinability)"
      ],
      "description": "For the Element super (which must be of type Super), get the tinability value for segmentnumber seg and return it in the Integer tinability. If tinability is 1, the segment is tinable. If tinability is 0, the segment is not tinable. If the Element super is not of type Super, or Att_Segment_Tinable_Array is not set for super,then a non-zero return code is returned. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringSuper String ElementPage 403\f12d Model Programming Language ManualDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "725"
    },
    {
      "names": [
        "Integer Set_super_use_segment_radius(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the segment radius dimensionAtt_Radius_Array is to be used or removed. See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the segments between vertices of the super can bestraights or arcs. If use is 0, the dimension is removed.  That is, the segments between vertices of the super canonly be straights. Note that if the dimension Att_Radius_Array is set then the Att_Major_Array is also automaticallyset. A return value of 0 indicates the function call was successful.",
      "id": "708"
    },
    {
      "names": [
        "Integer Get_super_use_segment_radius(Element super, Integer &use)"
      ],
      "description": "Query whether the segment radius dimension Att_Radius_Array exists for the super string. use is returned as 1 if the dimension Att_Radius_Array exists, or 0 if the dimension doesn\u2019t exist. See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "709"
    },
    {
      "names": [
        "Integer Set_super_segment_radius(Element super, Integer seg, Real rad)"
      ],
      "description": "For the super string super, set the radius of segment number seg to the value rad. See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Radius_Array set. A return value of 0 indicates the function call was successful.",
      "id": "710"
    },
    {
      "names": [
        "Integer Get_super_segment_radius(Element super, Integer seg, Real &rad)"
      ],
      "description": "For the super string super, get the radius of segment number seg and return the radius in rad. See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Radius_Array set. A return value of 0 indicates the function call was successful.",
      "id": "711"
    },
    {
      "names": [
        "Integer Set_super_segment_major(Element super, Integer seg, Integer bulge)"
      ],
      "description": "For the super string super, set the major/minor arc value of segment number seg to the valuebulge.  (bulge of segment b = 1 for major arc > 180 degrees, b = 0 for minor arc < 180 degrees)See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Major_Array set. A return value of 0 indicates the function call was successful.",
      "id": "712"
    },
    {
      "names": [
        "Integer Get_super_segment_major(Element super, Integer seg, Integer &major)"
      ],
      "description": "For the super string super, get the major/minor arc bulge of segment number seg and return thevalue in bulge (bulge of segment bulge = 1 for major arc > 180 degrees, bulge = 0 for minor arc< 180 degrees). See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Major_Array set. A return value of 0 indicates the function call was successful.",
      "id": "713"
    },
    {
      "names": [
        "Integer Set_super_use_segment_linestyle(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the segment linestyle dimensionAtt_Segment_Linestyle_Array is to be used or removed. See Segment Linestyle Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the segments of the super have of different linestyles. If use is 0, the dimension is removed.  That is, all the segments of the super use the stringlinestyle. A return value of 0 indicates the function call was successful.",
      "id": "3131"
    },
    {
      "names": [
        "Integer Get_super_use_segment_linestyle(Element super, Integer &use)"
      ],
      "description": "Query whether the segment radius dimension Att_Segment_Linestyle_Array exists for the superstring. use is returned as 1 if the dimension Att_Segment_Linestyle_Array exists, or 0 if the dimensiondoesn\u2019t exist. See Segment Linestyle Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "3132"
    },
    {
      "names": [
        "Integer Set_super_segment_linestyle(Element super, Integer seg, Text linestyle_name)"
      ],
      "description": "For the super string super, set the segment linestyle for segment number seg to the one withname linestyle_name. See Segment Linestyle Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Segment_Linestyle_Array set. A return value of 0 indicates the function call was successful.",
      "id": "3133"
    },
    {
      "names": [
        "Integer Get_super_segment_linestyle(Element super, Integer seg, Text &linestyle_name)"
      ],
      "description": "For the super string super, get the segment linestyle for segment number seg and return itsname in linestyle_name. See Segment Linestyle Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Segment_Linestyle_Array set. A return value of 0 indicates the function call was successful.",
      "id": "3134"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_point_number(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use, remove, the dimension Att_Point_Array. If Att_Point_Array exists, the string can have a Point Id for each vertex. If use is 1, the dimension is set and each vertex can have a Point Id. If use is 0, the dimension is removed. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "738"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_point_number(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Point_Array exists for the super string. If Att_Point_Array exists, the string can have a Point Id for each vertex. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "739"
    },
    {
      "names": [
        "Integer Set_super_vertex_point_number(Element super, Integer vert, Integer point_number)"
      ],
      "description": "For the Element super which must be of type Super, set the Point Id for vertex number vert tothe have the text value of the integer point_number. If the Element super is not of type Super, or the dimension Att_Point_Array is not set, then anon-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Note - in earlier versions of 12d Model (pre v6), point id\u2019s were only integers.  This was extendedto being a text when surveying equipment allowed non-integer point ids. A function return value of zero indicates the point id was successfully set. Super String ElementPage 409\f12d Model Programming Language Manual",
      "id": "740"
    },
    {
      "names": [
        "Integer Get_super_vertex_point_number(Element super, Integer vert, Integer &point_number)"
      ],
      "description": "This function should no longer be used because now Point Id\u2019s do not have to beintegers. From the Element super which must be of type Super, get the Point Id for vertex number vertand return it in the Integer point_number. If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,then a non-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Note - in earlier versions of 12d Model (pre v6), Point Id\u2019s were only integers.  This was extendedto being a text when surveying equipment allowed non-integer Point Ids. A function return value of zero indicates the point id was successfully returned.",
      "id": "741"
    },
    {
      "names": [
        "Integer Set_super_vertex_point_number(Element super, Integer vert, Text point_id)"
      ],
      "description": "For the Element super which must be of type Super, set the Point Id for vertex number vert tothe text point_id. If the Element super is not of type Super, or the dimension Att_Point_Array is not set, then anon-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the point id was successfully set.",
      "id": "1625"
    },
    {
      "names": [
        "Integer Get_super_vertex_point_number(Element super, Integer vert, Text &point_id)"
      ],
      "description": "From the Element super which must be of type Super, get the Point Id for vertex number vertand return it in the Text point_id. If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,then a non-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Page 410Super String Element\fChapter 5 12dPL Library CallsA function return value of zero indicates the point id was successfully returned.",
      "id": "1626"
    },
    {
      "names": [
        "Integer Set_super_use_symbol(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the vertex symbol dimensionAtt_Symbol_Value is used or removed. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string has one symbol for all vertices. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "797"
    },
    {
      "names": [
        "Integer Get_super_use_symbol(Element super, Integer &use)"
      ],
      "description": "Query whether the vertex symbol dimension Att_Symbol_Value exists for the Element super oftype Super. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists.  That is, the super string has one symbol for allvertices. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "798"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_symbol(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the vertex symbol dimensionAtt_Symbol_Array is used or removed. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string has a different symbol on each vertex. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "799"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_symbol(Element super, Integer &use)"
      ],
      "description": "Query whether the vertex symbol dimension Att_Symbol_Array exists for the super string. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists.  That is, the super string has a different symbol oneach vertex. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "800"
    },
    {
      "names": [
        "Integer Super_vertex_symbol_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_Symbol_Value exists and the dimensionAtt_Symbol_Array does not exist then there will be one z value zval (height or level) for the entirestring. In this case (when the dimension Att_Symbol_Value exists and the dimension Att_Symbol_Arraydoes not exist) this function sets the Att_Symbol_Array dimension and creates a new array forsymbol at each vertex of super. See Vertex Symbol Dimensions for information on the Height (ZCoord) dimensions or 5. 38. 1Super String Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "2175"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_style(Element super, Integer vert, Text sym)"
      ],
      "description": "For the super Element super, set the symbol on vertex number vert to be the symbol stylenamed sym. If there is only the one Symbol for the entire string then the symbol name for that symbol is set tosym regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "801"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_style(Element super, Integer vert, Text &s)"
      ],
      "description": "For the super Element super, return the name of the symbol on vertex number vert in Text sym. If there is only the one Symbol for the entire string then the symbol name for that symbol isreturned in sym regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "802"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_colour(Element super, Integer vert, Integer col)"
      ],
      "description": "For the super Element super, set the colour number of the symbol from the vertex number vertto be col. If there is only the one Symbol for the entire string then the colour number of that symbol is set tocol regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "807"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_colour(Element super, Integer vert, Integer &col)"
      ],
      "description": "For the super Element super, return as col the colour number of the symbol on vertex numbervert. If there is only the one Symbol for the entire string then the colour number of that symbol isreturned in col regardless of the value of vert. Page 416Super String Element\fChapter 5 12dPL Library CallsA return value of 0 indicates the function call was successful.",
      "id": "808"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_offset_width(Element super, Integer vert, Real x_offset)"
      ],
      "description": "For the super Element super, set the x offset of the symbol from vertex number vert to bex_offset. If there is only the one Symbol for the entire string then the x offset of that symbol is set tox_offset regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of x offset. A return value of 0 indicates the function call was successful.",
      "id": "809"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_offset_width(Element super, Integer vert, Real &x_offset)"
      ],
      "description": "For the super Element super, return as x_offset the x offset of the symbol from vertex numbervert. If there is only the one Symbol for the entire string then the x offset of that Symbol is returned inx_offset regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of x offset. A return value of 0 indicates the function call was successful.",
      "id": "810"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_offset_height(Element super, Integer vert, Real y_offset)"
      ],
      "description": "For the super Element super, set the y offset of the symbol from the vertex number vert to bey_offset. If there is only the one Symbol for the entire string then the y offset of that symbol is set toy_offset regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of y offset. A return value of 0 indicates the function call was successful.",
      "id": "811"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_offset_height(Element super, Integer vert, Real &y_offset)"
      ],
      "description": "For the super Element super, return as y_offset the y offset of the symbol from the vertexnumber vert. If there is only the one Symbol for the entire string then the y offset of that Symbol is returned iny_offset regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of y offset. A return value of 0 indicates the function call was successful.",
      "id": "812"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_rotation(Element super, Integer vert, Real ang)"
      ],
      "description": "For the super Element super, set the angle of rotation of the symbol on vertex number vert toang.  ang is in radians and is measured counterclockwise from the x-axis. angle is in radians and is measured counterclockwise from the x-axis. If there is only the one Symbol for the entire string then the angle of rotation of that symbol is setto ang regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of angle of rotation of the symbol. A return value of 0 indicates the function call was successful.",
      "id": "803"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_rotation(Element super, Integer vert, Real &angle)"
      ],
      "description": "For the super Element super, return the angle of rotation in angle of the symbol on vertexnumber vert. angle is in radians and is measured counterclockwise from the x-axis. If there is only the one angle of rotation for the entire string then the angle of rotation of thatSymbol is returned in ang regardless of the value of vert. See 5. 38. 8. 1 Definitions of Super String Vertex Symbol Dimensions and Parametersfor thedefinition of angle of rotation of the symbol. A return value of 0 indicates the function call was successful.",
      "id": "804"
    },
    {
      "names": [
        "Integer Set_super_vertex_symbol_size(Element super, Integer vert, Real sz)"
      ],
      "description": "For the super Element super, set the size of the symbol on vertex number vert to be sz. If there is only the one Symbol for the entire string then the size of that symbol is set to szregardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "805"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_size(Element super, Integer vert, Real &sz)"
      ],
      "description": "For the super Element super, return as s the size of the symbol on vertex number vert. If there is only the one Symbol for the entire string then the size of that Symbol is returned in szregardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "806"
    },
    {
      "names": [
        "Integer Set_super_use_pipe(Element elt, Integer use)",
        "Integer Set_super_use_diameter(Element elt, Integer use)"
      ],
      "description": "For the super string Element elt, define whether the pipe/culvert dimension Att_Diameter_Valueis used or removed. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If use is 1, the dimension Att_Diameter_Value is set That is, the pipe has one diameter and onethickness (V10) for the entire string (i. e.  a constant pipe). If use is 0, the dimension is removed. Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), there is no change tothe super string and this calls return a non-zero value. This function has the new name for V10 onwards.  The old call will still work. A return value of 0 indicates the function call was successful.",
      "id": "704"
    },
    {
      "names": [
        "Integer Get_super_use_pipe(Element elt, Integer &use)",
        "Integer Get_super_use_diameter(Element elt, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Diameter_Value exists for the super string elt. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension existsuse is returned as 0 if the dimension doesn\u2019t exist, or if it is a variable pipe string (i. e.  aAtt_Diameter_Array exists). Note - if it is a constant pipe string (Att_Diameter_Value exists) and a variable pipe string(Att_Diameter_Array exists) then the variable pipe takes precedence. This function has the new name for V10 onwards.  The old call will still work. A return value of 0 indicates the function call was successful.",
      "id": "705"
    },
    {
      "names": [
        "Integer Set_super_use_segment_pipe(Element elt, Integer use)",
        "Integer Set_super_use_segment_diameter(Element elt, Integer use)"
      ],
      "description": "For the super string Element elt, define whether the pipe/culvert dimension Att_Diameter_Arrayis used or removed. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If use is 1, the dimension Att_Diameter_Array is set.  That is, each pipe segment can have adifferent diameter and thickness (V10). If use is 0, the dimension is removed. Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), there is no change tothe super string and this calls return a non-zero value. This function has the new name for V10 onwards.  The old call will still work. A return value of 0 indicates the function call was successful.",
      "id": "714"
    },
    {
      "names": [
        "Integer Set_super_use_culvert(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the pipe/culvert dimension Att_Culvert_Value. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. A value for use of 1 sets the dimension and 0 removes it. Page 424Super String Element\fChapter 5 12dPL Library CallsNote if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), there is no change tothe super string and this calls return a non-zero value. A return value of 0 indicates the function call was successful.",
      "id": "1247"
    },
    {
      "names": [
        "Integer Get_super_use_culvert(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Culvert_Value exists for the super string. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension Att_Culvert_Value exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1246"
    },
    {
      "names": [
        "Integer Set_super_use_segment_culvert(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the pipe/culvert dimension Att_Culvert_Array. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), there is no change tothe super string and this calls return a non-zero value. A return value of 0 indicates the function call was successful.",
      "id": "1251"
    },
    {
      "names": [
        "Integer Get_super_use_segment_culvert(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Culvert_Array exists for the super string. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension Att_Culvert_Array exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1250"
    },
    {
      "names": [
        "Integer Set_super_use_pipe_justify(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the pipe/culvert dimension Att_Pipe_Justify isused or removed. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the pipe or culvert super string has a justificationdefined. If use is 0, the dimension is removed. Note: the same justification flag is used whether the super string is a round pipe or a culvert andthe justification applies for the entire string. A return value of 0 indicates the function call was successful.",
      "id": "1255"
    },
    {
      "names": [
        "Integer Get_super_use_pipe_justify(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Pipe_Justify exists for the Element super of typeSuper. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension existsuse is returned as 0 if the dimension doesn\u2019t exist. Note: the same justification flag is used whether the super string is a round pipe or a culvert andthe justification applies for the entire string. A return value of 0 indicates the function call was successful.",
      "id": "1254"
    },
    {
      "names": [
        "Integer Set_super_pipe_justify(Element super, Integer justify)"
      ],
      "description": "For the Element super of type Super which is a pipe or culvert string (i. e.  Att_Diameter_Value,Att_Diameter_Array, Att_Culvert_Value or Att_Culvert_Array has been set), set the pipe/culvertjustification to justify. The values for justify are given in Pipe/Culvert JustificationSee Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or a correct dimension is not allocated, this call failsand a non-zero function value is returned. Note: the same justification flag is used whether the super string is a pipe or a culvert and thejustification applies for the entire string. A return value of 0 indicates the function call was successful",
      "id": "1256"
    },
    {
      "names": [
        "Integer Get_super_pipe_justify(Element super, Integer &justify)"
      ],
      "description": "For the Element super of type Super which is a pipe or culvert string (i. e.  Att_Diameter_Value,Att_Diameter_Array, Att_Culvert_Value or Att_Culvert_Array has been set), get the pipe/culvertjustification and return it in justify. The values for justify are given in Pipe/Culvert JustificationSee Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or a correct dimension is not allocated, this call failsand a non-zero function value is returned. Note: the same justification flag is used whether the super string is a pipe or a culvert and thejustification applies for the entire string. A return value of 0 indicates the function call was successful",
      "id": "1257"
    },
    {
      "names": [
        "Integer Set_super_pipe(Element super, Real diameter, Real thickness, Integer internal_diameter)"
      ],
      "description": "For the Element super of type Super which is a constant diameter pipe string (i. e.  thedimension flag Att_Diameter_Value has been set and Att_Diameter_Array has not been set), setthe thickness to thickness and the internal diameter to diameter if internal_diameter = 1 or theexternal diameter to diameter if internal_diameter is non zero. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. Note - Get_super_use_pipe can be called to make sure it is a constant diameter pipe string. A return value of 0 indicates the function call was successful.",
      "id": "2645"
    },
    {
      "names": [
        "Integer Get_super_pipe(Element super, Real &diameter, Real thickness, Integer internal_diameter)"
      ],
      "description": "For the Element super of type Super which is a constant diameter round pipe string (i. e. Att_Diameter_Value has been set and Att_Diameter_Array has not been set), get the pipethickness and return it in thickness and the internal diameter and return it in internal_diameter. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. Note - Get_super_use_pipe can be called to make sure it is a constant diameter round pipestring. A return value of 0 indicates the function call was successful",
      "id": "2646"
    },
    {
      "names": [
        "Integer Set_super_segment_pipe(Element super, Integer seg, Real diameter, Real thickness, Integer internal_diameter)"
      ],
      "description": "For the super Element super and segment number seg, set the thickness to thickness and theinternal diameter to diameter if internal_diameter = 1 or the external diameter to diameter ifinternal_diameter is non zero. Page 428Super String Element\fChapter 5 12dPL Library CallsIf super is not a variable pipe string then a non zero return value is returned. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful",
      "id": "2649"
    },
    {
      "names": [
        "Integer Get_super_segment_pipe(Element super, Integer seg, Real &diameter, Real &thickness, Integer &internal_diameter)"
      ],
      "description": "For the super Element super and for segment number seg, get the pipe thickness and return it inthickness, and if the returned value of internal_diameter is 1 then return the internal diameterin diameter otherwise return the external diameter in diameter. If super is not a variable pipe string then a non zero return value is returned. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions.",
      "id": "2650"
    },
    {
      "names": [
        "Integer Set_super_culvert(Element super, Real width, Real height, Real left_thickness, Real right_thickness, Real top_thickness, Real bottom_thickness, Integer internal_width_height)"
      ],
      "description": "For the Element super of type Super which is a constant width and height string (i. e. the pipe/culvert dimension flag Att_Culvert_Value has been set and Att_Culvert_Array not set), thenif internal_width_height =1 then set the culvert internal width to w and the internal height toh. if internal_width_height is not 1 then set the culvert external width to w and the externalheight to h. Set the left thickness to left_thickness, right thickness to right_thickness, top thickness totop_thickness and bottom thickness to bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension Att_Culvert_Value is not allocated,this call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.",
      "id": "2647"
    },
    {
      "names": [
        "Integer Get_super_culvert(Element super, Real &width, Real &height, Real &left_thickness, Real &right_thickness, Real &top_thickness, Real &bottom_thickness, Integer &internal_width_height)"
      ],
      "description": "For the Element super of type Super which is a constant width and height string (i. e. the pipe/culvert dimension flag Att_Culvert_Value has been set and Att_Culvert_Array not set), thenif internal_width_height is returned as 1 then the culvert internal width is returned in w andthe internal height returned in h. if internal_width_height is not returned as 1 then the culvert external width is returned in wand the external height returned in h. The left thickness is returned in left_thickness, right thickness in right_thickness, top thicknessin top_thickness and bottom thickness in bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. A return value of 0 indicates the function call was successfulNote - Get_super_use_culvert can be called to make sure it is a constant culvert string. Page 430Super String Element\fChapter 5 12dPL Library Calls",
      "id": "2648"
    },
    {
      "names": [
        "Integer Set_super_segment_culvert(Element super, Integer seg, Real width, Real height, Real left_thickness, Real right_thickness, Real top_thickness, Real bottom_thickness, Integer internal_width_height)"
      ],
      "description": "For the Element super of type Super which has culvert widths and heights for each segment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), then for segment numberseg:if internal_width_height =1 then set the culvert internal width to w and the internal height toh. if internal_width_height is not 1 then set the culvert external width to w and the externalheight to h. Set the left thickness to left_thickness, right thickness to right_thickness, top thickness totop_thickness and bottom thickness to bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,this call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_segment_culvert can be called to make sure it is a variable segmentculvert string.",
      "id": "2651"
    },
    {
      "names": [
        "Integer Get_super_segment_culvert(Element super, Integer seg, Real &width, Real &height, Real &left_thickness, Real &right_thickness, Real &top_thickness, Real &bottom_thickness, Integer &internal_width_height)"
      ],
      "description": "For the Element super of type Super which has culvert width and heights for each segment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), then for segment numberseg:if internal_width_height is returned as 1 then the culvert internal width is returned in w andthe internal height returned in h. if internal_width_height is not returned as 1 then the culvert external width is returned in wand the external height returned in h. The left thickness is returned in left_thickness, right thickness in right_thickness, top thicknessin top_thickness and bottom thickness in bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperSuper String ElementPage 431\f12d Model Programming Language ManualString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. A return value of 0 indicates the function call was successfulNote - Get_super_use_segment_culvert can be called to make sure it is a variable segmentculvert string.",
      "id": "2652"
    },
    {
      "names": [
        "Integer Get_super_pipe(Element super, Real &diameter)",
        "Integer Get_super_diameter(Element super, Real &diameter)"
      ],
      "description": "For the Element super of type Super which is a constant diameter round pipe string (i. e. Att_Diameter_Value has been set and Att_Diameter_Array has not been set), get the pipediameter and return it in diameter. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. This function has the new name for V10 onwards.  The old call will still work. Note - Get_super_use_pipe can be called to make sure it is a constant diameter pipe string. A return value of 0 indicates the function call was successful",
      "id": "707"
    },
    {
      "names": [
        "Integer Set_super_segment_pipe(Element super, Integer seg, Real diameter)",
        "Integer Set_super_segment_diameter(Element super, Integer seg, Real diameter)"
      ],
      "description": "For the super Element super, set the pipe diameter for segment number seg to diameter. For V10, if super is not a variable pipe string then a non zero return value is returned. For V10,a return value of 0 indicates the function call was successfulFor V9, the return code is always 0. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. Note - for V9, no error code is set if the string in not a variable pipe string.  That needs to checkedusing the Get_super_use_pipe calls. This function has the new name for V10 onwards.  The old call will still work. A return value of 0 indicates the function call was successful",
      "id": "716"
    },
    {
      "names": [
        "Integer Get_super_segment_pipe(Element super, Integer seg, Real &diameter)",
        "Integer Get_super_segment_diameter(Element super, Integer seg, Real &diameter)"
      ],
      "description": "This function has the new name for V10 onwards.  The old call will still work. For the super Element super, get the pipe diameter for segment number seg and return it indiameter. For V10, if super is not a variable pipe string then a non zero return value is returned. For V10,a return value of 0 indicates the function call was successfulFor V9, the return code is always 0. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. Note - for V9, no error code is set if the string in not a variable pipe string.  That needs to checkedusing the Get_super_use_pipe calls.",
      "id": "717"
    },
    {
      "names": [
        "Integer Set_super_culvert(Element super, Real w, Real h)"
      ],
      "description": "For the Element super of type Super which is a constant width and height culvert string (i. e. thepipe/culvert dimension flag Att_Culvert_Value has been set), set the culvert width to w and theheight to h. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated Att_Culvert_Value,this call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_culvert can be called to make sure it is a constant culvert string.",
      "id": "1249"
    },
    {
      "names": [
        "Integer Get_super_culvert(Element super, Real &w, Real &h)"
      ],
      "description": "For the Element super of type Super which is a constant width and height culvert string (i. e. thepipe/culvert dimension flag Att_Culvert_Value has been set), get the culvert width and height andreturn them in w and h respectively. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. A return value of 0 indicates the function call was successfulNote - Get_super_use_culvert can be called to make sure it is a constant culvert string.",
      "id": "1248"
    },
    {
      "names": [
        "Integer Set_super_segment_culvert(Element super, Integer seg, Real w, Real h)"
      ],
      "description": "For the Element super of type Super which has culvert widths and heights for eachsegment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), set the culvertwidth and height for segment number seg to be w and h respectively. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,Super String ElementPage 435\f12d Model Programming Language Manualthis call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_segment_culvert can be called to make sure it is variable segmentculvert string.",
      "id": "1253"
    },
    {
      "names": [
        "Integer Get_super_segment_culvert(Element super, Integer seg, Real &w, Real &h)"
      ],
      "description": "For the Element super of type Super which has culvert widths and heights for eachsegment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), get the culvertwidth and height for segment number seg and return them in w and h respectively. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,this call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_segment_culvert can be called to make sure it is variable segmentculvert string.",
      "id": "1252"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_text_value(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use (set), or not use (remove), the dimensionAtt_Vertex_Text_Value. A value for use of 1 sets the dimension and 0 removes it. If Att_Vertex_Text_Value is used, then the same text is attached to all the vertices of the superstring. Note if the dimension Att_Vertex_Text_Array exists, this call is ignored. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1237"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_text_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Text_Value exists for the super string super. use is returned as 1 if the dimension Att_Vertex_Text_Value exists. use is returned as 0 if the dimension doesn\u2019t exist. If the dimension Att_Vertex_Text_Value exists then the string has the same text for every vertexof the string. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1238"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_text_array(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use (set), or not use (remove), the dimensionAtt_Segment_Text_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Vertex_Text_Array is used, then there is different text at each vertex of the super stringsuper. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Page 440Super String Element\fChapter 5 12dPL Library CallsA return value of 0 indicates the function call was successful.",
      "id": "742"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_text_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Text_Array exists (is used) for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. If Att_Vertex_Text_Array is used, then there is different text on each vertex of the of the string. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "743"
    },
    {
      "names": [
        "Integer Super_vertex_text_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_Vertex_Text_Value exists and the dimensionAtt_Vertex_Text_Array does not exist then there will be one Vertex Text txt for the entire string. In this case (when the dimension Att_Vertex_Text_Value exists and the dimensionAtt_Vertex_Text_Array does not exist) this function sets the Att_Vertex_Text_Array dimensionand new vertex text created for each vertex of super and the new vertex text is given the valuetxt. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "2177"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_annotation_value(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use, or not use, the dimensionAtt_Vertex_Annotate_Value. If the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array doesn\u2019t exist then the string has the one annotation which is used forvertex text on any vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if the dimension Att_Vertex_Annotate_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "750"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_annotation_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Annotate_Value exists for the super string super. If the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array doesn\u2019t exist then the string has the one annotation which is used forvertex text on any vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "751"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_annotation_array(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use, or not use, the dimensionAtt_Vertex_Annotate_Array. If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation forthe vertex text on each vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. Page 442Super String Element\fChapter 5 12dPL Library CallsA value for use of 1 sets the dimension and 0 removes it. A return value of 0 indicates the function call was successful.",
      "id": "752"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_annotation_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Annotate_Array exists for the super string super. If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation forthe vertex text on each vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "753"
    },
    {
      "names": [
        "Integer Super_vertex_annotate_value_to_array(Element elt)"
      ],
      "description": "If for the super string super the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array does not exist then there will be one Annotation annot for the entirestring. In this case (when the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array does not exist), this function sets the Att_Vertex_Annotate_Arraydimension and new Annotations created for each vertex of super and the new Annotation isgiven the value annot. See Vertex Text Annotation Dimensions for information on the Text dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "2178"
    },
    {
      "names": [
        "Integer Set_super_vertex_text(Element super, Integer vert, Text txt)"
      ],
      "description": "For the super Element super, set the vertex text at vertex number vert to be txt. If there is only one Vertex Text for all the vertices then the text for that one Vertex Text is set totxt regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "744"
    },
    {
      "names": [
        "Integer Get_super_vertex_text(Element super, Integer vert, Text &txt)"
      ],
      "description": "For the super string super, return in txt the vertex text on vertex number vert. If there is only one Vertex Text for all the vertices then the text for that one Vertex Text will bereturned in txt regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "745"
    },
    {
      "names": [
        "Integer Set_super_vertex_world_text(Element)"
      ],
      "description": "Set the units for vertex text for the super string super to World.  See Vertex Text AnnotationUnits. A return value of 0 indicates the function call was successful.",
      "id": "747"
    },
    {
      "names": [
        "Integer Set_super_vertex_device_text(Element)"
      ],
      "description": "Set the units for vertex text for the super string super to Screen (also known as Device or Pixel). See Vertex Text Annotation Units. A return value of 0 indicates the function call was successful.",
      "id": "746"
    },
    {
      "names": [
        "Integer Set_super_vertex_paper_text(Element super)"
      ],
      "description": "For an Element super of type Super, set the text units for vertex text to be paper (that ismillimetres). See Vertex Text Annotation Units for the definition of segment text units. If there is Textstyle_Data for the vertex text then this will override theSet_super_vertex_device_text call. A return value of 0 indicates the function call was successful.",
      "id": "1633"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the vertex text units to be the value of type. See Vertex Text Annotation Units for the definition of vertex text units. A return value of 0 indicates the function call was successful.",
      "id": "748"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, return in type the value for the vertex text units for the vertex textof the string. See Vertex Text Annotation Units for the definition of vertex text units. A return value of 0 indicates the function call was successful.",
      "id": "749"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_justify(Element super, Integer vert, Integer just)"
      ],
      "description": "For the super string super, set the justification of the text on vertex number vert to just. See Vertex Text Annotation Definitions for the definition of justification. If there is only one Vertex Text Annotation for all the Vertex Text then the justification for that oneVertex Text Annotation is set to just regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "754"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_justify(Element super, Integer vert, Integer &just)"
      ],
      "description": "For the super string super, return the justification of the vertex text on vertex number vert in just. See Vertex Text Annotation Definitions for the definition of justification. If there is only one Vertex Text Annotation for all the Vertex Text then the justification for that oneVertex Text Annotation will be returned in just regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "755"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_offset_width(Element super, Integer vert, Real offset)"
      ],
      "description": "For the super string super, set the offset (offset width) of the vertex text from vertex number vertto offsetSee Vertex Text Annotation Definitions for the definition of offset (offset width). If there is only one Vertex Text Annotation for all the Vertex Text then the offset width for that oneVertex Text Annotation is set to offset regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "756"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_offset_width(Element super, Integer vert, Real &offset)"
      ],
      "description": "For the super string super, return as offset the offset (offset width) of the vertex text from vertexnumber vert. See Vertex Text Annotation Definitions for the definition of offset (offset width). If there is only one Vertex Text Annotation for all the Vertex Text then the offset width for that oneVertex Text Annotation will be returned in offset regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "757"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_offset_height(Element super, Integer vert, Real raise)"
      ],
      "description": "For the super string super, set the raise (offset height) of the vertex text for vertex number vert toraise. See Vertex Text Annotation Definitions for the definition of raise (offset height)Page 446Super String Element\fChapter 5 12dPL Library CallsIf there is only one Vertex Text Annotation for all the Vertex Text then the raise for that oneVertex Text Annotation is set to raise regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "758"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_offset_height(Element super, Integer vert, Real &raise)"
      ],
      "description": "For the super string super, return as raise the raise of the vertex text from vertex number vert. See Vertex Text Annotation Definitions for the definition of raise (offset height)If there is only one Vertex Text Annotation for all the Vertex Text then the raise for that oneVertex Text Annotation will be returned in raise regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "759"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_colour(Element super, Integer vert, Integer col)"
      ],
      "description": "For the super string super, set the colour number of the vertex text on the vertex number vert tobe col. If there is only one Vertex Text Annotation for all the Vertex Text then the colour number for thatone Vertex Text Annotation is set to col regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "1091"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_colour(Element super, Integer vert, Integer &col)"
      ],
      "description": "For the super string super, return as col the colour number of the vertex text on vertex numbervert. If there is only one Vertex Text Annotation for all the Vertex Text then the colour for that oneVertex Text Annotation will be returned in col regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "1092"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_angle(Element super, Integer vert, Real ang)"
      ],
      "description": "For the super string super, set the angle of rotation of the vertex text on vertex number vert toang.  ang is in radians and is measured counterclockwise from the x-axis. See Vertex Text Annotation Definitions for the definition of angle. If there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation is set to ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "760"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_angle(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the super string super, return the angle of rotation of the vertex text on vertex number vert inang.  ang is measured in radians and is measured counterclockwise from the x-axis. See Vertex Text Annotation Definitions for the definition of angle. If there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation will be returned in ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "761"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_angle2(Element super, Integer vert, Real ang)"
      ],
      "description": "For the super string super, set the 3D beta angle of the vertex text on vertex number vert to ang. ang is in radiansIf there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation is set to ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "3582"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_angle2(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the super string super, return the 3D beta angle of the vertex text on vertex number vert inang.  ang is measured in radians. If there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation will be returned in ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "3583"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_angle3(Element super, Integer vert, Real ang)"
      ],
      "description": "For the super string super, set the 3D gamma angle of the vertex text on vertex number vert toang.  ang is in radiansIf there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation is set to ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "3584"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_angle3(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the super string super, return the 3D gamma angle of the vertex text on vertex number vertin ang.  ang is measured in radians. If there is only one Vertex Text Annotation for all the Vertex Text then the angle for that oneVertex Text Annotation will be returned in ang regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "3585"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_size(Element super, Integer vert, Real sz)"
      ],
      "description": "For the super Element super, set the size of the vertex text on vertex number vert to sz. If there is only one Vertex Text Annotation for all the Vertex Text then the size for that one VertexText Annotation is set to sz regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "762"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_size(Element super, Integer vert, Real &sz)"
      ],
      "description": "For the super string super, return the size of the vertex text on vertex number vert as sz. If there is only one Vertex Text Annotation for all the Vertex Text then the size for that one VertexText Annotation will be returned in sz regardless of the value of vert. A return value of 0 indicates the function call was successful. Super String ElementPage 449\f12d Model Programming Language Manual",
      "id": "763"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_x_factor(Element super, Integer vert, Real xf)"
      ],
      "description": "For the super string super, set the x factor of the vertex text on vertex number vert to xf. If there is only one Vertex Text Annotation for all the Vertex Text then the x factor for that oneVertex Text Annotation is set to xf regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "764"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_x_factor(Element super, Integer vert, Real &x)"
      ],
      "description": "For the super string super, return in xf the x factor of the vertex text on vertex number vert. If there is only one Vertex Text Annotation for all the Vertex Text then the x factor for that oneVertex Text Annotation will be returned in xf regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "765"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_slant(Element super, Integer vert, Real sl)"
      ],
      "description": "For the super string super, set the slant of the vertex text on vertex number vert to sl. If there is only one Vertex Text Annotation for all the Vertex Text then the slant factor for that oneVertex Text Annotation is set to sl regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "766"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_slant(Element super, Integer vert, Real &s)"
      ],
      "description": "For the super string super, return as sl the slant of the vertex text on vertex number vert. If there is only one Vertex Text Annotation for all the Vertex Text then the slant for that oneVertex Text Annotation will be returned in sl regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "767"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_style(Element super, Integer vert, Text ts)"
      ],
      "description": "For the super string super, set the textstyle of the vertex text on vertex number vert to ts. If there is only one Vertex Text Annotation for all the Vertex Text then the textstyle for that oneVertex Text Annotation is set to ts regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "768"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_style(Element super, Integer vert, Text &ts)"
      ],
      "description": "For the super string super, return as ts the textstyle of the vertex text on vertex number vert. If there is only one Vertex Text Annotation for all the Vertex Text then the textstyle for that oneVertex Text Annotation will be returned in ts regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "769"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_ttf_underline(Element super super, Integer vert, Integer underline)"
      ],
      "description": "For the Element super of type Super, set the underline state for the vertex text on vertex numbervert to be underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. If there is only one Vertex Text Annotation for all the Vertex Text then the underline state for thatone Vertex Text Annotation is set to underline regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates underline was successfully set.",
      "id": "2600"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_underline(Element super, Integer vert, Integer &underline)"
      ],
      "description": "Super String ElementPage 451\f12d Model Programming Language ManualFor the Element super of type Super, get the underline state for the vertex text on vertex numbervert and return it as underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. If there is only one Vertex Text Annotation for all the Vertex Text then the underline state for thatone Vertex Text Annotation will be returned in underline regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates underline was successfully returned.",
      "id": "2601"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_ttf_strikeout(Element super, Integer vert, Integer strikeout)"
      ],
      "description": "For the Element super of type Super, set the strikeout state for the vertex text on vertex numbervert to be strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. If there is only one Vertex Text Annotation for all the Vertex Text then the strikeout state for thatone Vertex Text Annotation is set to strikeout regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates strikeout was successfully set.",
      "id": "2602"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_strikeout(Element super, Integer vert, Integer &strikeout)"
      ],
      "description": "For the Element super of type Super, get the strikeout state for the vertex text on vertex numbervert and return it as strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. If there is only one Vertex Text Annotation for all the Vertex Text then the strikeout state for thatone Vertex Text Annotation will be returned in strikeout regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2603"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_ttf_italic(Element super, Integer vert, Integer italic)"
      ],
      "description": "For the Element super of type Super, set the italic state for the vertex text on vertex number vertto be italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. If there is only one Vertex Text Annotation for all the Vertex Text then the italic state for that oneVertex Text Annotation is set to italic regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates italic was successfully set.",
      "id": "2604"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_italic(Element super, Integer vert, Integer &italic)"
      ],
      "description": "For the Element super of type Super, get the italic state for the vertex text on vertex number vertand return it as italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. If there is only one Vertex Text Annotation for all the Vertex Text then the italic state for that oneVertex Text Annotation will be returned in italic regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates italic was successfully returned.",
      "id": "2605"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_ttf_outline(Element elt, Integer vert, Integer outline)"
      ],
      "description": "For the Element super of type Super, set the outline state for the vertex text on vertex numbervert to be outline. If outline = 1, then for a true type font the text will be only shown in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. If there is only one Vertex Text Annotation for all the Vertex Text then the outline state for thatone Vertex Text Annotation is set to outline regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates outline was successfully set.",
      "id": "2775"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_outline(Element elt, Integer vert, Integer &outline)"
      ],
      "description": "For the Element super of type Super, get the outline state for the vertex text on vertex numbervert and return it as outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. If there is only one Vertex Text Annotation for all the Vertex Text then the outline state for thatone Vertex Text Annotation will be returned in outline regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates outline was successfully returned.",
      "id": "2776"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_ttf_weight(Element super, Integer vert, Integer weight)"
      ],
      "description": "For the Element super of type Super, set the weight for the vertex text on vertex number vert tobe weight. For the list of allowable weights, go to Allowable WeightsIf there is only one Vertex Text Annotation for all the Vertex Text then the weight for that oneVertex Text Annotation is set to weight regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates weight was successfully set.",
      "id": "2606"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_weight(Element super, Integer vert, Integer &weight)"
      ],
      "description": "For the Element super of type Super, get the weight for the vertex text on vertex number vertand return it as weight. For the list of allowable weights, go to Allowable WeightsIf there is only one Vertex Text Annotation for all the Vertex Text then the weight for that oneVertex Text Annotation will be returned in weight regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates weight was successfully returned.",
      "id": "2607"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_whiteout(Element superstring, Integer vert, Integer c)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, set the colour number of thecolour used for the whiteout box around the vertex text, to be colour. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). If there is only one Vertex Text Annotation for all the Vertex Text then the colour number of thecolour used for the whiteout box around the vertex text for that one Vertex Text Annotation is setto c regardless of the value of vert. A function return value of zero indicates the colour number was successfully set.",
      "id": "2755"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_whiteout(Element superstring, Integer vert, Integer &c)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, get the colour number that isused for the whiteout box around the vertex text.  The whiteout colour is returned as Integercolour. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). If there is only one Vertex Text Annotation for all the Vertex Text then the colour number that isused for the whiteout box around the vertex text for that one Vertex Text Annotation will bereturned in c regardless of the value of vert. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2756"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_border(Element superstring, Integer vert, Integer c)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, set the colour number of thecolour used for the border of the whiteout box around the vertex text, to be c. If no whiteout border is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). If there is only one Vertex Text Annotation for all the Vertex Text then the colour number of thecolour used for the border of the whiteout box around the vertex text for that one Vertex TextAnnotation is set to c regardless of the value of vert. A function return value of zero indicates the colour number was successfully set.",
      "id": "2765"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_border(Element superstring, Integer vert, Integer &c)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, get the colour number that isused for the border of the whiteout box around the vertex text.  The whiteout border colour isreturned as Integer c. NO_COLOUR is the returned as the colour number if there is no whiteout border. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). If there is only one Vertex Text Annotation for all the Vertex Text then the colour number that isused for the border of the whiteout box around the vertex text for that one Vertex Text Annotationwill be returned in c regardless of the value of vert. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2766"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_border_style(Element superstring, Integer vert, Integer s)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, set the style for the border ofthe whiteout box around the vertex text, according to Integer s. 1for rectangle2for circle3for capsule4for bevel5for triangle 1 (pointed at top)6for triangle 2 (flat line on top)7for pentagon 1 (pointed at top)8for pentagon 2 (flat line on top)9for hexagon 1 (pointed at top)10for hexagon 2 (flat line on top)11for octagon 1 (pointed at top)12for octagon 2 (flat line on top)If there is only one Vertex Text Annotation for all the Vertex Text then the style for the border ofthe whiteout box around the vertex text for that one Vertex Text Annotation is set to s regardlessof the value of vert. A function return value of zero indicates the colour number was successfully set.",
      "id": "3586"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_border_style(Element superstring, Integer vert, Integer &s)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, get the style for the border ofthe whiteout box around the vertex text.  The value is returned as Integer s. Page 456Super String Element\fChapter 5 12dPL Library Calls123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)If there is only one Vertex Text Annotation for all the Vertex Text then the style that is used forthe border of the whiteout box around the vertex text for that one Vertex Text Annotation will bereturned in s regardless of the value of vert. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3587"
    },
    {
      "names": [
        "Integer Set_super_vertex_textstyle_data(Element super, Integer vert, Textstyle_Data d)"
      ],
      "description": "For the Element super of type Super, set the Textstyle_Data for the vertex text on vertexnumber vert to be d. Setting a Textstyle_Data means that all the individual values that are contained in theTextstyle_Data are set rather than having to set each one individually. If the value is blank in the Textstyle_Data d then the existing value is already set for the vertextext will be left alone. If there is only one Vertex Text Annotation for all the Vertex Text then the Textstyle_Data for thatone Vertex Text Annotation is set to d regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Value set. A function return value of zero indicates the Textstyle_Data was successfully set.",
      "id": "1663"
    },
    {
      "names": [
        "Integer Get_super_vertex_textstyle_data(Element elt, Integer vert, Textstyle_Data &d)"
      ],
      "description": "For the Element super of type Super, get the Textstyle_Data for the vertex text on vertexnumber vert and return it as d. Note that the function does not concern that the vertex text exists or not. A non-zero function return value is returned if super is not of type Super. if super does not have the dimension Att_Vertex_Text_Value set the function returns zero, but dremains unchanged. If there is only one Vertex Text Annotation for all the Vertex Text then the Textstyle_Data for thatSuper String ElementPage 457\f12d Model Programming Language Manualone Vertex Text Annotation will be returned in d regardless of the value of vert. A function return value of zero indicates the Textstyle_Data was successfully returned.",
      "id": "1664"
    },
    {
      "names": [
        "Integer Set_super_use_segment_text_value(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use (set), or not use (remove) the dimensionAtt_Segment_Text_Value. A value for use of 1 sets the dimension and 0 removes it. If Att_Segment_Text_Value is used, then the same text is on all the segments of the super string. Note if the dimension Att_Segment_Text_Array exists, this call is ignored. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1239"
    },
    {
      "names": [
        "Integer Get_super_use_segment_text_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Text_Value exists for the super string. use is returned as 1 if the dimension Att_Segment_Text_Value exists. use is returned as 0 if the dimension doesn\u2019t exist. If the dimension Att_Segment_Text_Value exists then the string has the same text for everysegment of the string. See Segment Text Dimensions for information on the Segment Text dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1240"
    },
    {
      "names": [
        "Integer Set_super_use_segment_text_array(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use (set), or not use (remove), the dimensionAtt_Segment_Text_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Segment_Text_Array is used, then there is different text on each segment of the of thestring. See Segment Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful. Page 462Super String Element\fChapter 5 12dPL Library Calls",
      "id": "1189"
    },
    {
      "names": [
        "Integer Get_super_use_segment_text_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Text_Array exists for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. If Att_Segment_Text_Array is used, then there is different text on each segment of the of thestring. See Segment Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1190"
    },
    {
      "names": [
        "Integer Super_segment_text_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_Segment_Text_Value exists and the dimensionAtt_Segment_Text_Array does not exist then there will be one Segment Text txt for the entirestring. In this case (when the dimension Att_Segment_Text_Value exists and the dimensionAtt_Segment_Text_Array does not exist) this function sets the Att_Segment_Text_Arraydimension and new segment text created for each segment of super and the new segment textis given the value txt. See Segment Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "2179"
    },
    {
      "names": [
        "Integer Set_super_use_segment_annotation_value(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove, the dimension Att_Segment_Annotate_Value. If the dimension Att_Segment_Annotate_Value exists and the dimensionAtt_Segment_Annotate_Array doesn\u2019t exist then the string has the one annotation which is usedfor segment text on any segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if the dimension Att_Segment_Annotate_Array exists, this call is ignored. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1193"
    },
    {
      "names": [
        "Integer Get_super_use_segment_annotation_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Annotate_Value exists for the super string. If the dimension Att_Segment_Annotate_Value exists and the dimensionAtt_Segment_Annotate_Array doesn\u2019t exist then the string has the one annotation which is usedfor segment text on any segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1194"
    },
    {
      "names": [
        "Integer Set_super_use_segment_annotation_array(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the dimension Att_Segment_Annotate_Array. If the dimension Att_Segment_Annotate_Array exists then the string has a different annotationfor the segment text on each segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions orPage 464Super String Element\fChapter 5 12dPL Library Calls5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1195"
    },
    {
      "names": [
        "Integer Get_super_use_segment_annotation_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Annotate_Array exists for the super string. If the dimension Att_Segment_Annotate_Array exists then the string has a different annotationfor the segment text on each segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1196"
    },
    {
      "names": [
        "Integer Super_segment_annotate_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_Segment_Annotate_Value exists and thedimension Att_Segment_Annotate_Array does not exist then there will be one Segment TextAnnotate annot for the entire string. In this case (when the dimension Att_Segment_Annotate_Value exists and the dimensionAtt_Segment_Annotate_Array does not exist) this function sets theAtt_Segment_Annotate_Array dimension and new segment Annotates created for each segmentof super and the new segment text Annotate is given the value annotSee Segment Text Annotation Dimensions for information on the Text dimensions or 5. 38. 1Super String Dimensions for information on all the dimensions. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "2180"
    },
    {
      "names": [
        "Integer Set_super_segment_text(Element super, Integer seg, Text text)"
      ],
      "description": "For the super Element super, set the segment text at segment number seg to be txt. If there is only one Segment Text for all the segments then the text for that one Segment Text isset to txt regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1191"
    },
    {
      "names": [
        "Integer Get_super_segment_text(Element super, Integer seg, Text &text)"
      ],
      "description": "For the super Element super, return in txt the segment text on segment number seg. If there is only one Segment Text for all the segments then the text for that one Segment Text willbe returned in txt regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1192"
    },
    {
      "names": [
        "Integer Set_super_segment_world_text(Element super)"
      ],
      "description": "For an Element super of type Super, set the text unit for segment text to be world text. See Segment Text Annotation Units for the definition of segment text units. If there is Textstyle_Data for the segment text then this will override theSet_super_segment_world_text call. A return value of 0 indicates the function call was successful.",
      "id": "1233"
    },
    {
      "names": [
        "Integer Set_super_segment_device_text(Element super)"
      ],
      "description": "For an Element super of type Super, set the text unit for segment text to be pixels (also knownas device text or screen text). See Segment Text Annotation Units for the definition of segment text units. Page 466Super String Element\fChapter 5 12dPL Library CallsIf there is Textstyle_Data for the segment text then this will override theSet_super_segment_device_text call. A return value of 0 indicates the function call was successful.",
      "id": "1232"
    },
    {
      "names": [
        "Integer Set_super_segment_paper_text(Element super)"
      ],
      "description": "For an Element super of type Super, set the text units for segment text to be paper (that ismillimetres). See Segment Text Annotation Units for the definition of segment text units. If there is Textstyle_Data for the segment text then this will override theSet_super_segment_device_text call. A return value of 0 indicates the function call was successful.",
      "id": "1634"
    },
    {
      "names": [
        "Integer Set_super_segment_text_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the segment text units to the value type. See Segment Text Annotation Units for the definition of segment text units. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1234"
    },
    {
      "names": [
        "Integer Get_super_segment_text_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, return in type the value of the segment text units. See Segment Text Annotation Units for the definition of vertex text units. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1235"
    },
    {
      "names": [
        "Integer Set_super_segment_text_justify(Element super, Integer seg, Integer just)"
      ],
      "description": "For the super string super, set the justification of the segment text on segment number seg tojust. See Segment Text Annotation Definitions for the definition of justification. If there is only one Segment Text Annotation for all the Segment Text then the justification forthat one Segment Text Annotation is set to just regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1197"
    },
    {
      "names": [
        "Integer Get_super_segment_text_justify(Element super, Integer seg, Integer &just)"
      ],
      "description": "For the super string super, return the justification of the segment text on segment number seg injust. See Segment Text Annotation Definitions for the definition of justification. If there is only one Segment Text Annotation for all the Segment Text then the justification forthat one Segment Text Annotation will be returned in just regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1198"
    },
    {
      "names": [
        "Integer Set_super_segment_text_offset_width(Element super, Integer seg, Real o)"
      ],
      "description": "For the super string super, set the offset (offset width) of the segment text on segment numberseg to off. See Segment Text Annotation Definitions for the definition of offset. If there is only one Segment Text Annotation for all the Segment Text then the offset for that oneSegment Text Annotation is set to off regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1199"
    },
    {
      "names": [
        "Integer Get_super_segment_text_offset_width(Element super, Integer seg, Real &off)"
      ],
      "description": "For the super string super, return the offset (offset width) of the segment text on segmentnumber seg in off. Page 468Super String Element\fChapter 5 12dPL Library CallsSee Segment Text Annotation Definitions for the definition of offset. If there is only one Segment Text Annotation for all the Segment Text then the offset for that oneSegment Text Annotation will be returned in off regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1200"
    },
    {
      "names": [
        "Integer Set_super_segment_text_offset_height(Element super, Integer seg, Real raise)"
      ],
      "description": "For the super string super, set the raise (offset height) of the segment text on segment numberseg to raise. See Segment Text Annotation Definitions for the definition of raise. If there is only one Segment Text Annotation for all the Segment Text then the raise for that oneSegment Text Annotation is set to raise regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1201"
    },
    {
      "names": [
        "Integer Get_super_segment_text_offset_height(Element super, Integer seg, Real &raise)"
      ],
      "description": "For the super string super, return the raise (offset height) of the segment text on segmentnumber seg in raise. See Segment Text Annotation Definitions for the definition of raise. If there is only one Segment Text Annotation for all the Segment Text then the raise for that oneSegment Text Annotation will be returned in raise regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1202"
    },
    {
      "names": [
        "Integer Set_super_segment_text_colour(Element super, Integer seg, Integer col)"
      ],
      "description": "For the super string super, set the colour number of the segment text on segment number seg tocol. If there is only one Segment Text Annotation for all the Segment Text then the colour number forthat one Segment Text Annotation is set to col regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. Super String ElementPage 469\f12d Model Programming Language ManualA return value of 0 indicates the function call was successful.",
      "id": "1213"
    },
    {
      "names": [
        "Integer Get_super_segment_text_colour(Element super, Integer seg, Integer &col)"
      ],
      "description": "For the super string super, return the colour number of the segment text on segment numberseg in col. If there is only one Segment Text Annotation for all the Segment Text then the colour number forthat one Segment Text Annotation will be returned in col regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1214"
    },
    {
      "names": [
        "Integer Set_super_segment_text_angle(Element super, Integer seg, Real ang)"
      ],
      "description": "For the super string super, set the angle of rotation of the segment text on segment number segto ang. See Segment Text Annotation Definitions for the definition of angle.  ang is measured in radiansand is measured counterclockwise from the direction of the segment. If there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation is set to angle regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1203"
    },
    {
      "names": [
        "Integer Get_super_segment_text_angle(Element super, Integer seg, Real &ang)"
      ],
      "description": "For the super string super, return the angle of rotation of the segment text on segment numberseg in ang. See Segment Text Annotation Definitions for the definition of angle.  ang is measured in radiansand is measured counterclockwise from the direction of the segment. If there is only one Segment Text Annotation for all the Segment Text then angle for that oneSegment Text Annotation will be returned in ang regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1204"
    },
    {
      "names": [
        "Integer Set_super_segment_text_angle2(Element super, Integer seg, Real ang)"
      ],
      "description": "For the super string super, set the 3D beta angle of the segment text on segment number seg toang.  ang is in radiansIf there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation is set to ang regardless of the value of seg. A return value of 0 indicates the function call was successful.",
      "id": "3588"
    },
    {
      "names": [
        "Integer Get_super_segment_text_angle2(Element super, Integer seg, Real &ang)"
      ],
      "description": "For the super string super, return the 3D beta angle of the segment text on segment number segin ang.  ang is measured in radians. If there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation will be returned in ang regardless of the value of seg. A return value of 0 indicates the function call was successful.",
      "id": "3589"
    },
    {
      "names": [
        "Integer Set_super_segment_text_angle3(Element super, Integer seg, Real ang)"
      ],
      "description": "For the super string super, set the 3D gamma angle of the segment text on segment numberseg to ang.  ang is in radiansIf there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation is set to ang regardless of the value of seg. A return value of 0 indicates the function call was successful.",
      "id": "3590"
    },
    {
      "names": [
        "Integer Get_super_segment_text_angle3(Element super, Integer seg, Real &ang)"
      ],
      "description": "For the super string super, return the 3D gamma angle of the segment text on segment numberseg in ang.  ang is measured in radians. If there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation will be returned in ang regardless of the value of seg. Super String ElementPage 471\f12d Model Programming Language ManualA return value of 0 indicates the function call was successful.",
      "id": "3591"
    },
    {
      "names": [
        "Integer Set_super_segment_text_size(Element super, Integer seg, Real sz)"
      ],
      "description": "For the super string super, set the size of the segment text on segment number seg to sz. If there is only one Segment Text Annotation for all the Segment Text then the size for that oneSegment Text Annotation is set to sz regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1205"
    },
    {
      "names": [
        "Integer Get_super_segment_text_size(Element super, Integer seg, Real &sz)"
      ],
      "description": "For the super string super, return the size of the segment text on segment number seg in sz. If there is only one Segment Text Annotation for all the Segment Text then size for that oneSegment Text Annotation will be returned in sz regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1206"
    },
    {
      "names": [
        "Integer Set_super_segment_text_x_factor(Element super, Integer seg, Real xf)"
      ],
      "description": "For the super string super, set the x factor of the segment text on segment number seg to xf. If there is only one Segment Text Annotation for all the Segment Text then the x factor for thatone Segment Text Annotation is set to xf regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1207"
    },
    {
      "names": [
        "Integer Get_super_segment_text_x_factor(Element super, Integer seg, Real &xf)"
      ],
      "description": "Page 472Super String Element\fChapter 5 12dPL Library CallsFor the super string super, return the x factor of the segment text on segment number seg in xf. If there is only one Segment Text Annotation for all the Segment Text then the x factor for thatone Segment Text Annotation will be returned in xf regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1208"
    },
    {
      "names": [
        "Integer Set_super_segment_text_slant(Element super, Integer seg, Real sl)"
      ],
      "description": "For the super string super, set the slant of the segment text on segment number seg to sl. If there is only one Segment Text Annotation for all the Segment Text then the slant for that oneSegment Text Annotation is set to sl regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1209"
    },
    {
      "names": [
        "Integer Get_super_segment_text_slant(Element super, Integer seg, Real &sl)"
      ],
      "description": "For the super string super, return the slant of the segment text on segment number seg in sl. If there is only one Segment Text Annotation for all the Segment Text then the slant for that oneSegment Text Annotation will be returned in sl regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1210"
    },
    {
      "names": [
        "Integer Set_super_segment_text_style(Element super, Integer seg, Text ts)"
      ],
      "description": "For the super string super, set the textstyle of the segment text on segment number seg to ts. If there is only one Segment Text Annotation for all the Segment Text then the textstyle for thatone Segment Text Annotation is set to ts regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1211"
    },
    {
      "names": [
        "Integer Get_super_segment_text_style(Element super, Integer seg, Text &ts)"
      ],
      "description": "For the super string super, return the textstyle of the segment text on segment number seg in ts. If there is only one Segment Text Annotation for all the Segment Text then the textstyle for thatone Segment Text Annotation will be returned in ts regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1212"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_underline(Element super, Integer seg, Integer underline)"
      ],
      "description": "For the super string super, set the underline state of the segment text on segment number segto underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the underline state forthat one Segment Text Annotation is set to underline regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates underline was successfully set.",
      "id": "2608"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_underline(Element super, Integer seg, Integer &underline)"
      ],
      "description": "For the super string super, return the underline state of the segment text on segment numberseg in underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the underline state forthat one Segment Text Annotation will be returned in underline regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates underline was successfully returned.",
      "id": "2609"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_strikeout(Element super, Integer seg, Integer strikeout)"
      ],
      "description": "For the super string super, set the strikeout state of the segment text on segment number seg tostrikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the strikeout state forthat one Segment Text Annotation is set to strikeout regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates strikeout was successfully set.",
      "id": "2610"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_strikeout(Element super, Integer seg, Integer &strikeout)"
      ],
      "description": "For the super string super, return the strikeout state of the segment text on segment number segin strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the strikeout state forthat one Segment Text Annotation will be returned in strikeout regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2611"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_italic(Element super, Integer seg, Integer italic)"
      ],
      "description": "For the super string super, set the italic state of the segment text on segment number seg toitalic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the italic state for thatone Segment Text Annotation is set to italic regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. Super String ElementPage 475\f12d Model Programming Language ManualA function return value of zero indicates italic was successfully set.",
      "id": "2612"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_italic(Element super, Integer seg, Integer &italic)"
      ],
      "description": "For the super string super, return the italic state of the segment text on segment number seg initalic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the italic state for thatone Segment Text Annotation will be returned in italic regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates italic was successfully returned.",
      "id": "2613"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_outline(Element elt, Integer seg, Integer outline)"
      ],
      "description": "For the super string super, set the outline state of the segment text on segment number seg tooutline. If outline = 1, then for a true type font the text will be only shown in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the outline state forthat one Segment Text Annotation is set to outline regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates outline was successfully set.",
      "id": "2777"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_outline(Element elt, Integer seg, Integer &outline)"
      ],
      "description": "For the super string super, return the outline state of the segment text on segment number segin outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. Page 476Super String Element\fChapter 5 12dPL Library CallsIf there is only one Segment Text Annotation for all the Segment Text then the outline state forthat one Segment Text Annotation will be returned in outline regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates outline was successfully returned.",
      "id": "2778"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_weight(Element super, Integer seg, Integer weight)"
      ],
      "description": "For the super string super, set the weight of the segment text on segment number seg toweight. If there is only one Segment Text Annotation for all the Segment Text then the weight for that oneSegment Text Annotation is set to weight regardless of the value of seg. For the list of allowable weights, go to Allowable WeightsA non-zero function return value is returned if super is not of type Super. A function return value of zero indicates weight was successfully set.",
      "id": "2614"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_weight(Element super, Integer seg, Integer &weight)"
      ],
      "description": "For the super string super, return the weight of the segment text on segment number seg inweight. For the list of allowable weights, go to Allowable WeightsIf there is only one Segment Text Annotation for all the Segment Text then the weight for that oneSegment Text Annotation will be returned in weight regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates weight was successfully returned.",
      "id": "2615"
    },
    {
      "names": [
        "Integer Set_super_segment_text_whiteout(Element superstring, Integer seg, Integer c)"
      ],
      "description": "For the super string super, set the colour number of the colour used for the whiteout box aroundthe segment text on segment number seg to c. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour number ofthe colour used for the whiteout box around the segment text for that one Segment TextSuper String ElementPage 477\f12d Model Programming Language ManualAnnotation is set to c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully set.",
      "id": "2757"
    },
    {
      "names": [
        "Integer Get_super_segment_text_whiteout(Element superstring, Integer seg, Integer &c)"
      ],
      "description": "For the super string super, return the colour number that is used for the whiteout box around thesegment text on segment number seg in c. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour numberthat is used for the whiteout box around the segment text for that one Segment Text Annotationwill be returned in c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2758"
    },
    {
      "names": [
        "Integer Set_super_segment_text_border(Element superstring, Integer seg, Integer c)"
      ],
      "description": "For the super string super, set the colour number of the colour used for the border of thewhiteout box around the segment text on segment number seg to c. If no text whiteout border is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour number ofthe colour used for border of the whiteout box around the segment text for that one SegmentText Annotation is set to c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully set.",
      "id": "2767"
    },
    {
      "names": [
        "Integer Get_super_segment_text_border(Element superstring, Integer seg, Integer &c)"
      ],
      "description": "For the super string super, return the colour number that is used as the border of the whiteoutPage 478Super String Element\fChapter 5 12dPL Library Callsbox around the segment text on segment number seg in c. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour numberthat is used for the border around the whiteout box around the segment text for that oneSegment Text Annotation will be returned in c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2768"
    },
    {
      "names": [
        "Integer Set_super_segment_text_border_style(Element superstring, Integer seg, Integer s)"
      ],
      "description": "For segment number seg of the Super String Element superstring, set the style for the border ofthe whiteout box around the segment text, according to Integer s. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)If there is only one Segment Text Annotation for all the Segment Text then the style for theborder of the whiteout box around the segment text for that one Segment Text Annotation is setto s regardless of the value of seg. A function return value of zero indicates the colour number was successfully set.",
      "id": "3592"
    },
    {
      "names": [
        "Integer Get_super_segment_text_border_style(Element superstring, Integer seg, Integer &s)"
      ],
      "description": "For segment number seg of the Super String Element superstring, get the style for the border ofthe whiteout box around the segment text.  The value is returned as Integer s. 12345for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)Super String ElementPage 479\f12d Model Programming Language Manual6789101112for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)If there is only one Segment Text Annotation for all the Segment Text then the style that is usedfor the border of the whiteout box around the segment text for that one Segment Text Annotationwill be returned in s regardless of the value of seg. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3593"
    },
    {
      "names": [
        "Integer Set_super_segment_textstyle_data(Element elt, Integer seg, Textstyle_Data d)"
      ],
      "description": "For the super string super, set the Textstyle_Data of the segment text on segment number segto d. Setting a Textstyle_Data means that all the individual values that are contained in theTextstyle_Data are set rather than having to set each one individually. If the value is blank in the Textstyle_Data d then the value for the segment text would be leftalone. If there is only one Segment Text Annotation for all the Segment Text then the Textstyle_Data forthat one Segment Text Annotation is set to d regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the Textstyle_Data was successfully set.",
      "id": "1665"
    },
    {
      "names": [
        "Integer Get_super_segment_textstyle_data(Element elt, Integer seg, Textstyle_Data &d)"
      ],
      "description": "For the super string super, return the Textstyle_Data for the segment text on segment numberseg in d. Using a Textstyle_Data means that all the individual values for the Segment Text Annotation arereturned in the Textstyle_Data rather than getting each one individually. Note that the function does not concern that the segment text exists or not. If there is only one Segment Text Annotation for all the Segment Text then the Textstyle_Data forthat one Segment Text Annotation will be returned in d regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the Textstyle_Data was successfully returned.",
      "id": "1666"
    },
    {
      "names": [
        "Integer Set_super_use_hatch(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Hatch_Value is used orremoved. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string can have 2 angle hatching. If use is 0, the dimension is removed.  If the string had hatching then the hatching will beremoved. A return value of 0 indicates the function call was successful.",
      "id": "1464"
    },
    {
      "names": [
        "Integer Get_super_use_hatch(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Hatch_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and hatching is enabled for the string. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1465"
    },
    {
      "names": [
        "Integer Set_super_hatch_colour(Element super, Integer col_1, Integer col_2)"
      ],
      "description": "For the super Element super, set the colour of the first hatch lines to the Integer colour col_1andthe colour of the second hatch lines to the Integer colour col_2. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1466"
    },
    {
      "names": [
        "Integer Get_super_hatch_colour(Element super, Integer &col_1, Integer &col_2)"
      ],
      "description": "For the super Element super, return the colour of the first hatch lines as col_1 and the colour ofthe second hatch lines as col_2. Page 482Super String Element\fChapter 5 12dPL Library CallsIf hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1467"
    },
    {
      "names": [
        "Integer Set_super_hatch_angle(Element super, Real ang_1, Real ang_2)"
      ],
      "description": "For the super Element super, set the angle of the first hatch lines to the angle ang_1 and theangle of the second hatch lines to the angle ang_2.  The angles are in radians and measuredcounterclockwise from the x-axis. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1468"
    },
    {
      "names": [
        "Integer Get_super_hatch_angle(Element super, Real &ang_1, Real &ang_2)"
      ],
      "description": "For the super Element super, return the angle of the first hatch lines as ang_1 and the angle ofthe second hatch lines as ang_2.  The angles are in radians and measured counterclockwisefrom the x-axis. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1469"
    },
    {
      "names": [
        "Integer Set_super_hatch_spacing(Element super, Real dist_1, Real dist_2)"
      ],
      "description": "For the super Element super, set the distance between the first hatch lines to the dist_1 and thedistance between the second hatch lines of dist_2.  The units for dist_1 and dist_2 are given byother calls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1470"
    },
    {
      "names": [
        "Integer Get_super_hatch_spacing(Element super, Real &dist_1, Real &dist_2)"
      ],
      "description": "Super String ElementPage 483\f12d Model Programming Language ManualFor the super Element super, return the distance of the first hatch lines as dist_1 and thedistance of the second hatch lines as dist_2.  The units for dist_1 and dist_2 are given by othercalls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1471"
    },
    {
      "names": [
        "Integer Set_super_hatch_plot_spacing(Element super, Real dist_1, Real dist_2)"
      ],
      "description": "For the super Element super, set the plotting distance between the first hatch lines to the dist_1and the plotting distance between the second hatch lines of dist_2.  The units for dist_1 anddist_2 are given by other calls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1544"
    },
    {
      "names": [
        "Integer Get_super_hatch_plot_spacing(Element super, Real &dist_1, Real &dist_2)"
      ],
      "description": "For the super Element super, return the plotting distance of the first hatch lines as dist_1 andthe plotting distance of the second hatch lines as dist_2.  The units for dist_1 and dist_2 aregiven by other calls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1545"
    },
    {
      "names": [
        "Integer Set_super_hatch_origin(Element super, Real x, Real y)"
      ],
      "description": "For the super Element super, both sets of hatch lines go through the point (x,y).  The units for xand y are given by other calls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1472"
    },
    {
      "names": [
        "Integer Get_super_hatch_origin(Element super, Real &x, Real &y)"
      ],
      "description": "For the super Element super, return the origin that both sets of hatch lines go through as (x,y). The units for x and y are given by other calls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1473"
    },
    {
      "names": [
        "Integer Set_super_hatch_device(Element super)"
      ],
      "description": "For the super Element super, set the units for the hatch spacing and the hatch origin to bedevice units. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1474"
    },
    {
      "names": [
        "Integer Set_super_hatch_world(Element super)"
      ],
      "description": "For the super Element super, set the units for the hatch spacing and the hatch origin to be worldunits. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1475"
    },
    {
      "names": [
        "Integer Set_super_hatch_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the units for the hatch spacing and the hatch origin to be:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1476"
    },
    {
      "names": [
        "Integer Get_super_hatch_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the units for the hatch spacing and the hatch origin.  The unitsare returned as type and the values are:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1477"
    },
    {
      "names": [
        "Integer Set_super_hatch_view_angle(Element super, Integer is_relative)"
      ],
      "description": "For the super Element super, set the field controls whether the Angle is relative to the x axis or tothe plotting x axis. if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3444"
    },
    {
      "names": [
        "Integer Get_super_hatch_view_angle(Element super, Integer &is_relative)"
      ],
      "description": "For the super Element super, get the field controls whether the Angle is relative to the x axis orto the plotting x axis.  The field is returned as is_relative with the meaning:if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3445"
    },
    {
      "names": [
        "Integer Set_super_use_solid(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Solid_Value is used orremoved. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string can have solid fill. If use is 0, the dimension is removed.  If the string had solid fill then the solid fill will be removed. A return value of zero indicates the function call was successful.",
      "id": "1478"
    },
    {
      "names": [
        "Integer Get_super_use_solid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Solid_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and solid fill is enabled for the string. use is returned as 0 if the dimension doesn\u2019t exist. A return value of zero indicates the function call was successful.",
      "id": "1479"
    },
    {
      "names": [
        "Integer Set_super_solid_colour(Element super, Integer colour)"
      ],
      "description": "For the super Element super, set the colour of the solid fill to the colour number colour. If solid fill is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1480"
    },
    {
      "names": [
        "Integer Get_super_solid_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the colour number of the solid fill and return it in colour. If solid fill is not enabled for super, then a non-zero return code is returned. Super String ElementPage 487\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "1481"
    },
    {
      "names": [
        "Integer Set_super_solid_blend(Element super, Real blend)"
      ],
      "description": "For the super Element super, set the blend of the solid fill to the blend. If solid fill is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2165"
    },
    {
      "names": [
        "Integer Get_super_solid_blend(Element super, Real &blend)"
      ],
      "description": "For the super Element super, get the blend value of the solid fill and return it in blend. blend will have a value between 0. 0 for showing no colour fill, and 1. 0 for showing full colour fill. If solid fill is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2166"
    },
    {
      "names": [
        "Integer Set_super_use_bitmap(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Bitmap_Value is used orremoved. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string can have bitmap fill. If use is 0, the dimension is removed.  If the string had a bitmap fill then the bitmap fill will beremoved. A return value of zero indicates the function call was successful.",
      "id": "1482"
    },
    {
      "names": [
        "Integer Get_super_use_bitmap(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Bitmap_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and bitmap fill is enabled for the string. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1483"
    },
    {
      "names": [
        "Integer Set_super_bitmap(Element super, Text filename)"
      ],
      "description": "For the super Element super, set the bitmap to be the image in the file of name filename. The image can be bmps or ?. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1484"
    },
    {
      "names": [
        "Integer Get_super_bitmap(Element super, Text &filename)"
      ],
      "description": "Super String ElementPage 489\f12d Model Programming Language ManualFor the super Element super, get the file name of the bitmap fill and return it in filename. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1485"
    },
    {
      "names": [
        "Integer Set_super_bitmap_origin(Element super, Real x, Real y)"
      ],
      "description": "For the super Element super, the left hand corner of the bitmap is placed at the point (x,y).  Theunits for x and y are given in other functions. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1486"
    },
    {
      "names": [
        "Integer Get_super_bitmap_origin(Element super, Real &x, Real &y)"
      ],
      "description": "For the super Element super, return the (x,y) point of the left hand corner of the bitmap.  Theunits for x and y are given in other functions. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1487"
    },
    {
      "names": [
        "Integer Set_super_bitmap_transparent(Element super, Integer colour)"
      ],
      "description": "For the super Element super, set the colour with colour number colour to be transparent in thebitmap. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1488"
    },
    {
      "names": [
        "Integer Get_super_bitmap_transparent(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the transparency colour and return it in colour. Page 490Super String Element\fChapter 5 12dPL Library CallsIf bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1489"
    },
    {
      "names": [
        "Integer Set_super_bitmap_device(Element super)"
      ],
      "description": "For the super Element super, set the units for the bitmap width and height to be device units. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1490"
    },
    {
      "names": [
        "Integer Set_super_bitmap_world(Element super)"
      ],
      "description": "For the super Element super, set the units for the width and height of the bitmap to be worldunits. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1491"
    },
    {
      "names": [
        "Integer Set_super_bitmap_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the units for the width and height of the bitmap to be:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1492"
    },
    {
      "names": [
        "Integer Get_super_bitmap_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the units for width and height of the bitmap.  The units arereturned as type and the values are:Super String ElementPage 491\f12d Model Programming Language Manualif type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1493"
    },
    {
      "names": [
        "Integer Set_super_bitmap_angle(Element super, Real ang)"
      ],
      "description": "For the super Element super, set the angle to rotate the bitmap to be ang.  The angle is inradians and measured counterclockwise from the x-axisIf bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1494"
    },
    {
      "names": [
        "Integer Get_super_bitmap_angle(Element super, Real &ang)"
      ],
      "description": "For the super Element super, get the angle of rotation of bitmap and return it in ang.  The angle isin radians and measured counterclockwise from the x-axisIf bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1495"
    },
    {
      "names": [
        "Integer Set_super_bitmap_size(Element super, Real w, Real h)"
      ],
      "description": "For the super Element super, scale the bitmap to have the width w and height h in the units setin other bitmap calls. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1496"
    },
    {
      "names": [
        "Integer Get_super_bitmap_size(Element super, Real &w, Real &h)"
      ],
      "description": "Page 492Super String Element\fChapter 5 12dPL Library CallsFor the super Element super, get the width and height that the bitmap was scaled to.  The widthis returned in w and the height in h.  The units have been set in other bitmap calls. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1497"
    },
    {
      "names": [
        "Integer Set_super_bitmap_space(Element super, Real x, Real y)"
      ],
      "description": "For the super Element super, set the spacing between adjacent bitmap patterns to be x in the xdirection and y in the y-direction.  The units for x and y are given in other bitmap calls. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1744"
    },
    {
      "names": [
        "Integer Get_super_bitmap_space(Element super, Real &x, Real &y)"
      ],
      "description": "For the super Element super, return the spacing between adjacent bitmap patterns as x in the xdirection and y in the y-direction.  The units for x and y are given in other bitmap calls. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1745"
    },
    {
      "names": [
        "Integer Set_super_bitmap_stagger(Element super, Real stagger)"
      ],
      "description": "For the super Element super, set the stagger between alternate bitmap pattern rows to bestagger.  The unit for stagger is given in other bitmap calls. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1746"
    },
    {
      "names": [
        "Integer Get_super_bitmap_stagger(Element super, Real &stagger)"
      ],
      "description": "For the super Element super, return the stagger between alternate bitmap pattern rows asSuper String ElementPage 493\f12d Model Programming Language Manualstagger.  The unit for stagger is given in other bitmap calls. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1747"
    },
    {
      "names": [
        "Integer Set_super_bitmap_paper(Element super)"
      ],
      "description": "For the super Element super, set the units for the width, height, spacing and stagger of thebitmap pattern to be paper unit. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1748"
    },
    {
      "names": [
        "Integer Set_super_bitmap_view_angle(Element super, Integer is_relative)"
      ],
      "description": "For the super Element super, set the field controls whether the Angle is relative to the x axis or tothe plotting x axis. if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3458"
    },
    {
      "names": [
        "Integer Get_super_bitmap_view_angle(Element super, Integer &is_relative)"
      ],
      "description": "For the super Element super, get the field controls whether the Angle is relative to the x axis orto the plotting x axis.  The field is returned as is_relative with the meaning:if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3459"
    },
    {
      "names": [
        "Integer Set_super_use_pattern(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Pattern_Value is used orremoved. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string can have a pattern. If use is 0, the dimension is removed.  If the string had a pattern then the pattern will be removed. A return value of 0 indicates the function call was successful.",
      "id": "1686"
    },
    {
      "names": [
        "Integer Get_super_use_pattern(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Pattern_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1693"
    },
    {
      "names": [
        "Integer Set_super_pattern(Element super, Text name)"
      ],
      "description": "For the super Element super, set the fill pattern name to be the Text name. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1687"
    },
    {
      "names": [
        "Integer Get_super_pattern(Element super, Text &name)"
      ],
      "description": "Super String ElementPage 495\f12d Model Programming Language ManualFor the super Element super, get the fill pattern name and return it in name. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1694"
    },
    {
      "names": [
        "Integer Set_super_pattern_colour(Element super, Integer colour)"
      ],
      "description": "For the super Element super, set the colour of the fill pattern to the colour number colour. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1688"
    },
    {
      "names": [
        "Integer Get_super_pattern_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the colour number of the fill pattern and return it in colour. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1695"
    },
    {
      "names": [
        "Integer Set_super_pattern_angle(Element super, Real angle)"
      ],
      "description": "For the super Element super, set the angle of the fill pattern to the angle.  The angle is in radianand measured counterclockwise from the x-axis. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1689"
    },
    {
      "names": [
        "Integer Get_super_pattern_angle(Element super, Real &angle)"
      ],
      "description": "For the super Element super, return the angle of the fill pattern as angle.  The angle is in radianand measured counterclockwise from the x-axis. If fill pattern is not enabled for super, then a non-zero return code is returned. Page 496Super String Element\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "1696"
    },
    {
      "names": [
        "Integer Set_super_pattern_size(Element super, Real size)"
      ],
      "description": "For the super Element super, set the size of the fill pattern to the Real size. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1690"
    },
    {
      "names": [
        "Integer Get_super_pattern_size(Element super, Real &size)"
      ],
      "description": "For the super Element super, return the size of the fill pattern as size. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1697"
    },
    {
      "names": [
        "Integer Set_super_pattern_plot_size(Element super, Real size)"
      ],
      "description": "For the super Element super, set the plotting size of the fill pattern to the Real size. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1691"
    },
    {
      "names": [
        "Integer Get_super_pattern_plot_size(Element super, Real &s)"
      ],
      "description": "For the super Element super, return the plotting size of the fill pattern as size. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1698"
    },
    {
      "names": [
        "Integer Set_super_pattern_origin(Element super, Real x, Real y)"
      ],
      "description": "For the super Element super, set the x-y coordinate of the origin the fill pattern to x, y. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1692"
    },
    {
      "names": [
        "Integer Get_super_pattern_origin(Element super, Real &x, Real &y)"
      ],
      "description": "For the super Element super, return the x-y coordinate of the origin the fill pattern as x, y. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1699"
    },
    {
      "names": [
        "Integer Set_super_pattern_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the units for the pattern fill size, spacing and stagger to be:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3446"
    },
    {
      "names": [
        "Integer Get_super_pattern_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the units for the pattern fill size, spacing and stagger.  The unitsare returned as type and the values are:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful. Page 498Super String Element\fChapter 5 12dPL Library Calls",
      "id": "3447"
    },
    {
      "names": [
        "Integer Set_super_pattern_view_angle(Element super, Integer is_relative)"
      ],
      "description": "For the super Element super, set the field controls whether the Angle is relative to the x axis or tothe plotting x axis. if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3448"
    },
    {
      "names": [
        "Integer Get_super_pattern_view_angle(Element super, Integer &is_relative)"
      ],
      "description": "For the super Element super, get the field controls whether the Angle is relative to the x axis orto the plotting x axis.  The field is returned as is_relative with the meaning:if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3449"
    },
    {
      "names": [
        "Integer Set_super_pattern_stagger(Element super, Real stagger)"
      ],
      "description": "For the super Element super, set the stagger between alternate pattern fill rows to be stagger. The unit for stagger is given in other pattern fill calls. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3450"
    },
    {
      "names": [
        "Integer Get_super_pattern_stagger(Element super, Real &stagger)"
      ],
      "description": "Super String ElementPage 499\f12d Model Programming Language ManualFor the super Element super, return the stagger between alternate bitmap pattern rows asstagger.  The unit for stagger is given in other pattern fill calls. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3451"
    },
    {
      "names": [
        "Integer Set_super_pattern_space(Element super, Real xspace, Real yspace)"
      ],
      "description": "For the super Element super, set the x-y spaces of the fill pattern to xspace, yspace.  The unitfor the spaces is given in other pattern fill calls. If pattern fill is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3452"
    },
    {
      "names": [
        "Integer Get_super_pattern_space(Element super, Real &xspace, Real &yspace)"
      ],
      "description": "For the super Element super, return the x-y spaces of the fill pattern as xspace, yspace.  Theunit for the spaces is given in other pattern fill calls. If pattern fill is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3453"
    },
    {
      "names": [
        "Integer Set_super_pattern_solid_colour(Element super, Integer colour)"
      ],
      "description": "For the super Element super, set the solid colour of the fill pattern to the colour number colour. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3454"
    },
    {
      "names": [
        "Integer Get_super_pattern_solid_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the solid colour number of the fill pattern and return it incolour. Page 500Super String Element\fChapter 5 12dPL Library CallsIf fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3455"
    },
    {
      "names": [
        "Integer Set_super_pattern_blend(Element super, Real blend)"
      ],
      "description": "For the super Element super, set the solid fill blend factor of the fill pattern to the blend. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3456"
    },
    {
      "names": [
        "Integer Get_super_pattern_blend(Element super, Real &blend)"
      ],
      "description": "For the super Element super, return the solid fill blend of the fill pattern as blend. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3457"
    },
    {
      "names": [
        "Integer Set_super_use_acad_pattern(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Autocad_Pattern_Value isused or removed. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. If use is 1, the dimension is set.  That is, the super string can have an Autocad pattern. If use is 0, the dimension is removed.  If the string had an Autocad pattern then the Autocadpattern will be removed. A return value of 0 indicates the function call was successful.",
      "id": "2141"
    },
    {
      "names": [
        "Integer Get_super_use_acad_pattern(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Autocad_Pattern_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "2142"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern(Element super, Text name)"
      ],
      "description": "For the super Element super, set the Autocad pattern name to be the Text name. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2143"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern(Element super, Text &name)"
      ],
      "description": "For the super Element super, get the Autocad pattern name and return it in name. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2144"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_colour(Element super, Integer colour)"
      ],
      "description": "For the super Element super, set the colour of the Autocad pattern to the colour number colour. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2145"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the colour number of the Autocad pattern and return it incolour. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2146"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_angle(Element super, Real angle)"
      ],
      "description": "For the super Element super, set the angle of the Autocad pattern to the Real angle.  The angleis in radian and measured counterclockwise from the x-axis. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2147"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_angle(Element super, Real &angle)"
      ],
      "description": "For the super Element super, return the angle of the Autocad pattern as angle.  The angle is inSuper String ElementPage 503\f12d Model Programming Language Manualradian and measured counterclockwise from the x-axis. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2148"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_size(Element super, Real size)"
      ],
      "description": "For the super Element super, set the size of the Autocad pattern to the Real size. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2149"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_size(Element super, Real &size)"
      ],
      "description": "For the super Element super, return the size of the Autocad pattern as size. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2150"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_device(Element super)"
      ],
      "description": "For the super Element super, set the unit for the Autocad pattern to be device unit. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2151"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_world(Element super)"
      ],
      "description": "For the super Element super, set the unit for the Autocad pattern to be world unit. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful. Page 504Super String Element\fChapter 5 12dPL Library Calls",
      "id": "2152"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_paper(Element super)"
      ],
      "description": "For the super Element super, set the unit for the Autocad pattern to be paper unit. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2153"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_type(Element super, Integer type)"
      ],
      "description": "For the super Element super, set the unit for the Autocad pattern to be:if type = 0 then device unitif type = 1 then world unitif type = 2 then paper unitIf Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2154"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the unit for the Autocad pattern.  The unit is returned as superand the value is:if type = 0 then device unitif type = 1 then world unitif type = 2 then paper unitIf Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2155"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_view_angle(Element super, Integer is_relative)"
      ],
      "description": "Super String ElementPage 505\f12d Model Programming Language ManualFor the super Element super, set the field controls whether the Angle is relative to the x axis or tothe plotting x axis. if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If acad pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3460"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_view_angle(Element super, Integer &is_relative)"
      ],
      "description": "For the super Element super, get the field controls whether the Angle is relative to the x axis orto the plotting x axis.  The field is returned as is_relative with the meaning:if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If acad pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3461"
    },
    {
      "names": [
        "Integer Set_super_use_hole(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Hole_Value is used orremoved. See Hole Dimension for information on the hole dimension or 5. 38. 1 Super String Dimensionsforinformation on all dimensions. If use is 1, the dimension is set.  That is, the super string can have holes. If use is 0, the dimension is removed.  If the string had holes then the holes will be removed. A return value of 0 indicates the function call was successful.",
      "id": "1456"
    },
    {
      "names": [
        "Integer Get_super_use_hole(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Hole_Value exists for the super string super. See Hole Dimension for information on hole dimensions or 5. 38. 1 Super String Dimensionsforinformation on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1457"
    },
    {
      "names": [
        "Integer Get_super_holes(Element super, Integer &numberless)"
      ],
      "description": "For the Element super of type Super, the number of holes for the super string is returned asno_holes. If holes are not enabled for the super string then a non-zero return code is returned andno_holes is set to 0. A return value of 0 indicates the function call was successful.",
      "id": "1458"
    },
    {
      "names": [
        "Integer Super_get_hole(Element super, Integer hole_no, Element &hole)"
      ],
      "description": "For the Element super of type Super, the holes number hole_no is returned as the superElement hole. If hole needs to be used in 12d Model and added to a model, then the Element hole must becopied and added to the model. If hole_no is less than zero or greater than the number of holes in super, then a non-zero returncode is returned.  The Element hole is then undefined. A return value of 0 indicates the function call was successful.",
      "id": "1459"
    },
    {
      "names": [
        "Integer Super_delete_hole(Element super, Element hole)"
      ],
      "description": "If Super_get_hole is used to get the hole hole from the Element super then this option can beused to delete hole from super. A return value of zero indicates the function call was successful.",
      "id": "1461"
    },
    {
      "names": [
        "Integer Super_delete_hole(Element super, Integer hole_no)"
      ],
      "description": "Delete the hole number hole_no from the Element super. If there is no hole hole_no, the operation will fail and a non-zero return value is returned. A return value of zero indicates the function call was successful.",
      "id": "1462"
    },
    {
      "names": [
        "Integer Super_delete_all_holes(Element super)"
      ],
      "description": "Delete all the holes from the Element super. A return value of 0 indicates the function call was successful.",
      "id": "1463"
    },
    {
      "names": [
        "Integer Set_super_use_segment_colour(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the colour dimension Att_Colour_Array. A value for use of 1 sets the dimension and 0 removes it. See Colour Dimension for information on Colour dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "726"
    },
    {
      "names": [
        "Integer Get_super_use_segment_colour(Element super, Integer &use)"
      ],
      "description": "Query whether the colour dimension Att_Colour_Array exists for the super string. use is returned as 1 if the dimension Att_Colour_Array exists, or 0 if the dimension doesn\u2019t exist. See Colour Dimension for information on Colour dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "727"
    },
    {
      "names": [
        "Integer Set_super_segment_colour(Element super, Integer seg, Integer colour)"
      ],
      "description": "For the Element super of type Super, set the colour number for the segment number seg to becolour. A non-zero function return value is returned if super is not of type Super, or if super does nothave the colour dimension Att_Colour_Array set. See Colour Dimension for information on Colour dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. A function return value of zero indicates colour was successfully set.",
      "id": "728"
    },
    {
      "names": [
        "Integer Get_super_segment_colour(Element super, Integer seg, Integer &colour)"
      ],
      "description": "For the Element super of type Super, get the colour number for the segment number seg andreturn it as colour. A non-zero function return value is returned if super is not of type Super, or if super does nothave the colour dimension Att_Colour_Array set. See Colour Dimension for information on Colour dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. A function return value of zero indicates colour was successfully returned.",
      "id": "729"
    },
    {
      "names": [
        "Integer Set_super_use_segment_geometry(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Geom_Array is used orremoved. If Att_Geom_Array exists, the string can have Segments (which can be straights, arcs ortransitions) between the vertices of the super string. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. If use is 1, the dimension is set.  That is, the segments of the super string are not just straightsbut of type Segments (which can be straights, arcs or transitions). If use is 0, the dimension is removed.  If the string had Segments for segments then they will beremoved. A return value of 0 indicates the function call was successful.",
      "id": "1838"
    },
    {
      "names": [
        "Integer Get_super_use_segment_geometry(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Geom_Array exists for the super string super. If Att_Geom_Array exists, the string can have Segments (which can be straights, arcs ortransitions) between the vertices of the super string. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists.  That is, the segments of the super string are notjust straights but of type Segments (which can be straights, arcs or transitions). use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1839"
    },
    {
      "names": [
        "Integer Set_super_segment_spiral(Element elt, Integer seg, Spiral trans)"
      ],
      "description": "For the Element super of type Super, set the segment number seg to be the transition trans. A non-zero function return value is returned if super is not of type Super, or if super does notPage 512Super String Element\fChapter 5 12dPL Library Callshave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the transition was successfully set.",
      "id": "1840"
    },
    {
      "names": [
        "Integer Get_super_segment_spiral(Element elt, Integer seg, Spiral &trans)"
      ],
      "description": "For the Element super of type Super, get the Spiral for the segment number seg and return it astrans. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set, or if the segment is not a Spiral. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the Spiral was successfully returned.",
      "id": "1841"
    },
    {
      "names": [
        "Integer Set_super_segment_spiral(Element elt, Integer seg, Real l1, Real r1, Real a1, Real l2, Real r2, Real a2, Integer leading, Integer type)"
      ],
      "description": "For the Element super of type Super, set the segment number seg to be the transition of giveninput components. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the transition was successfully set.",
      "id": "1842"
    },
    {
      "names": [
        "Integer Get_super_segment_spiral(Element elt, Integer seg, Real &l1, Real &r1, Real &a1, Real &l2, Real &r2, Real &a2, Integer &leading, Integer &type)"
      ],
      "description": "For the Element super of type Super, get the Spiral for the segment number seg and return itscomponents. A non-zero function return value is returned if super is not of type Super, or if super does notSuper String ElementPage 513\f12d Model Programming Language Manualhave the dimension Att_Geom_Array set, or if the segment is not a Spiral. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the Spiral was successfully returned.",
      "id": "1843"
    },
    {
      "names": [
        "Integer Set_super_segment_geometry(Element elt, Integer seg, Segment geom)"
      ],
      "description": "For the Element super of type Super, set the segment number seg to be the Segment geom. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the segment was successfully set.",
      "id": "1844"
    },
    {
      "names": [
        "Integer Get_super_segment_geometry(Element elt, Integer seg, Segment &geom)"
      ],
      "description": "For the Element super of type Super, get the Segment for the segment number seg and return itas geom. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the Spiral was successfully returned.",
      "id": "1845"
    },
    {
      "names": [
        "Integer Set_super_segment_geometry(Element elt, Integer seg)"
      ],
      "description": "Clears segment number seg back to line. A function return value of zero indicates the segment was successfully set.",
      "id": "1846"
    },
    {
      "names": [
        "Integer Set_super_segment_curve(Element super, Integer seg, Curve curve)"
      ],
      "description": "For the super string super, set the geometry of segment number seg to the Curve curve. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A return value of zero indicates the function call was successful.",
      "id": "3820"
    },
    {
      "names": [
        "Integer Get_super_segment_curve(Element, Integer seg, Curve &curve)"
      ],
      "description": "For the super string super, get the Curve curve of segment number seg. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A return value of zero indicates the function call was successful.",
      "id": "3819"
    },
    {
      "names": [
        "Integer Set_super_use_extrude(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Extrude_Value is used orremoved. If Att_Extrude_Value is set then an extrusion is allowed on the super string. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and an extrusion is allowed. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1679"
    },
    {
      "names": [
        "Integer Get_super_use_extrude(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Extrude_Value exists for the super string super. If Att_Extrude_Value is set then an extrusion is allowed on the super string. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1680"
    },
    {
      "names": [
        "Integer Super_append_string_extrude(Element super, Element shape)"
      ],
      "description": "Page 516Super String Element\fChapter 5 12dPL Library CallsFor the Element super of type Super which has the dimension Att_Extrude_Value set, add theElement shape to the list of Elements that are extruded along super.  Note: shape must also beof type Super. A non-zero function return value is returned if super or shape is not of type Super, or if theDimension Att_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the shape was successfully added to the list.",
      "id": "2643"
    },
    {
      "names": [
        "Integer Super_append_extrude(Element super, Text extrude_name)"
      ],
      "description": "For the Element super of type Super, get the shape called extrude_name from the fileextrudes. 4d and append it to the list of extrudes for super. Note: the extrudes in the extrudes. 4d file can be more complex than just a simple profile sweptalong the string.  It also included interval extrudes. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set, or if there is no extrude_name in extrudes. 4d. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1923"
    },
    {
      "names": [
        "Integer Super_append_string_extrude(Element string, Element shape, Integer use_string_colour, Integer shape_mirror, Real start_chainage, Real final_chainage)"
      ],
      "description": "what is shape_mirror 0/1use_string_colour 1 use the shape string colour, 0 use string colour colour<no description>",
      "id": "2644"
    },
    {
      "names": [
        "Integer Get_super_extrudes(Element super, Integer &num_extrudes)"
      ],
      "description": "For the Element super of type Super and has the dimension Att_Extrude_Value set, get thenumber of Element that are in the list of extrudes for super and return it in num_extrudes. A non-zero function return value is returned if super is not of type Super, or if the DimensionSuper String ElementPage 517\f12d Model Programming Language ManualAtt_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1921"
    },
    {
      "names": [
        "Integer Super_insert_extrude(Element super, Text extrude_name, Integer where)"
      ],
      "description": "For the Element super of type Super, get the shape called extrude_name from the fileextrudes. 4d and insert into the list of extrudes at position number where.  The existing extrudesfrom position number where upwards are all moved up one position in the list. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set, or if there is no extrude_name in extrudes. 4d. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1922"
    },
    {
      "names": [
        "Integer Super_delete_extrude(Element super, Integer extrude_num)"
      ],
      "description": "For the Element super of type Super, delete the extrude in position number extrude_num fromthe list of extrusions for super. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1924"
    },
    {
      "names": [
        "Integer Super_delete_all_extrudes(Element super)"
      ],
      "description": "Delete all extrudes. For the Element super of type Super, delete all the extrudes from the list of extrusions for super. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Page 518Super String Element\fChapter 5 12dPL Library CallsA return value of 0 indicates the function call was successful.",
      "id": "1925"
    },
    {
      "names": [
        "Integer Set_super_extrude(Element super, Element shape)"
      ],
      "description": "LEGACY FUNCTION - DO NOT USEMany moons ago there was only one profile that could be extruded along the string. Later that was modified and there is now a list of profiles that are extruded. This call is from before there was a list and will behave as if there is no list and will delete the list. Hence this option should not be used. For the Element super of type Super which has the dimension Att_Extrude_Value set, setshape to be the Element that is extruded along super. Note: shape must also be of type Super. WARNING: If this function is called and there is a list of extrudes, the entire list will bedeleted. A non-zero function return value is returned if super or shape is not of type Super, or if theDimension Att_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the shape was successfully set.",
      "id": "1681"
    },
    {
      "names": [
        "Integer Get_super_extrude(Element super, Element &shape)"
      ],
      "description": "LEGACY FUNCTION - DO NOT USEMany moons ago there was only one profile that could be extruded along the string. Later that was modified and there is now a list of profiles that are extruded. This call will only return one profile.  Hence this option should not be used. For the Element super of type Super and has the dimension Att_Extrude_Value set, get theElement shape that defines the 2d profile that is extruded along super. Note: shape will be of type Super. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the shape was successfully returned.",
      "id": "1682"
    },
    {
      "names": [
        "Integer Set_super_use_interval(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Interval_Value is used orremoved. If Att_Interval_Value is set then there is a Real interval_distance and a Real chord_arc_distancestored for the super string. See Interval Dimensions for information on the Interval dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the two intervals are stored. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1702"
    },
    {
      "names": [
        "Integer Get_super_use_interval(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Interval_Value exists for the super string super. If Att_Interval_Value is set then there is a Real interval_distance and a Real chord_arc_distancestored for the super string. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1705"
    },
    {
      "names": [
        "Integer Set_super_interval_distance(Element super, Real value)"
      ],
      "description": "For the Element super of type Super which has the dimension Att_Interval_Value set, set theinterval_distance to value. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Interval_Value is not set. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the interval_distance was successfully set.",
      "id": "1704"
    },
    {
      "names": [
        "Integer Get_super_interval_distance(Element super, Real &value)"
      ],
      "description": "For the Element super of type Super and has the dimension Att_Interval_Value set, get theinterval_distance for super and return it in value. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Interval_Value is not set. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the interval_distance was successfully returned.",
      "id": "1707"
    },
    {
      "names": [
        "Integer Set_super_interval_chord_arc(Element super, Real value)"
      ],
      "description": "For the Element super of type Super which has the dimension Att_Interval_Value set, set thechord_arc_distance to value. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Interval_Value is not set. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the chord_arc_distance was successfully set.",
      "id": "1703"
    },
    {
      "names": [
        "Integer Get_super_interval_chord_arc(Element super, Real &value)"
      ],
      "description": "For the Element super of type Super and has the dimension Att_Interval_Value set, get thechord_arc_distance for super and return it in value. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Interval_Value is not set. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the chord_arc_distance was successfully returned.",
      "id": "1706"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_attribute(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use.  or remove, the dimension Att_Vertex_Attribute_Array. If Att_Vertex_Attribute_Array exists then there can be a type Attributes for each vertex. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. If use is 1, the dimension is set and an Attributes is allowed on each vertex. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "770"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_attribute(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Attribute_Array exists for the super string. If Att_Vertex_Attribute_Array exists then there can be a type Attributes for each vertex. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "771"
    },
    {
      "names": [
        "Integer Set_super_vertex_attributes(Element super, Integer vert, Attributes att)"
      ],
      "description": "For the Element super, set the Attributes for the vertex number vert to att. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, then anon-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute is successfully set.",
      "id": "2003"
    },
    {
      "names": [
        "Integer Get_super_vertex_attributes(Element super, Integer vert, Attributes &att)"
      ],
      "description": "For the Element super, return the Attributes for the vertex number vert as att. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or thevertex number vert has no Attributes, then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute is successfully returned.",
      "id": "2002"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Uid &uid)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or theattribute is not of type Uid then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2004"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Attributes &att)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in att.  The attribute must be of type Attributes. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or theattribute is not of type Attributes then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2005"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt, Integer vert, Integer att_no, Uid &uid)"
      ],
      "description": "For the Element super, get the attribute with number att_no for the vertex number vert andreturn the attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or theattribute is not of type Uid then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2006"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt, Integer vert, Integer att_no, Attributes &att)"
      ],
      "description": "For the Element super, get the attribute with number att_no for the vertex number vert andreturn the attribute value in att.  The attribute must be of type Attributes. If the Element is not of type Super, or the dimension Att_Vertex_Attribute_Array is not set, or theattribute is not of type Attributes then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2007"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Text att_name, Uid uid)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2008"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Text att_name, Attributes att)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2009"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Integer att_no, Uid uid)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute number att_no exists andit is of type Uid, then its value is set to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2010"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Integer att_no, Attributes att)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute number att_no exists andit is of type Attributes, then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2011"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_exists(Element elt, Integer vert, Text att_name, Integer &num)"
      ],
      "description": "Checks to see if for vertex number vert, an attribute of name att_name exists, and if it does,return the number of the attribute as num. A non-zero function return value indicates the attribute exists and its number was successfullyreturned. A zero function return value indicates the attribute does not exist, or the number was notsuccessfully returned. Warning - this is the opposite to most 12dPL function return values",
      "id": "773"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_exists(Element elt, Integer vert, Text att_name)"
      ],
      "description": "Checks to see if for vertex number vert, an attribute of name att_name exists. A non-zero function return value indicates the attribute exists. A zero function return value indicates the attribute does not exist. Warning - this is the opposite to most 12dPL function return values",
      "id": "772"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_delete(Element super, Integer vert, Integer att_no)"
      ],
      "description": "For the Element super, delete the attribute with attribute number att_no for vertex number vert. If the Element super is not of type Super or super has no vertex number vert, then a non-zeroreturn code is returned. A function return value of zero indicates the attribute was deleted.",
      "id": "775"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_delete(Element super, Integer vert, Text att_name)"
      ],
      "description": "For the Element super, delete the attribute with the name att_name for vertex number vert. If the Element super is not of type Super or super has vertex number vert, then a non-zeroreturn code is returned. A function return value of zero indicates the attribute was deleted.",
      "id": "774"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_delete_all(Element super, Integer vert)"
      ],
      "description": "Delete all the attributes of vertex number vert of the super string super. A function return value of zero indicates the function was successful.",
      "id": "776"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_dump(Element super, Integer vert)"
      ],
      "description": "Write out information to the Output Window about the vertex attributes for vertex number vert ofthe super string super. A function return value of zero indicates the function was successful.",
      "id": "777"
    },
    {
      "names": [
        "Integer Super_vertex_attribute_debug(Element super, Integer vert)"
      ],
      "description": "Write out even more information to the Output Window about the vertex attributes for vertexnumber vert of the super string super. A function return value of zero indicates the function was successful.",
      "id": "778"
    },
    {
      "names": [
        "Integer Get_super_vertex_number_of_attributes(Element super, Integer vert, Integer &no_atts)"
      ],
      "description": "Get the total number of attributes for vertex number vert of the Element super. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the number of attributes was successfully returned.",
      "id": "779"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Text &txt)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in txt.  The attribute must be of type Text. Page 528Super String Element\fChapter 5 12dPL Library CallsIf the Element is not of type Super or the attribute is not of type Text then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "780"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Integer &int)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in int.  The attribute must be of type Integer. If the Element is not of type Super or the attribute is not of type Integer then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "781"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Real &real)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in real.  The attribute must be of type Real. If the Element is not of type Super or the attribute is not of type Real then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "782"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Integer att_no, Text &txt)"
      ],
      "description": "For the Element super, get the attribute number att_no for the vertex number vert and return theattribute value in txt.  The attribute must be of type Text. If the Element is not of type Super or the attribute is not of type Text then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "783"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Integer att_no, Integer &int)"
      ],
      "description": "For the Element super, get the attribute number att_no for the vertex number vert and return theattribute value in int.  The attribute must be of type Integer. If the Element is not of type Super or the attribute is not of type Integer then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "784"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Integer att_no, Real &real)"
      ],
      "description": "For the Element super, get the attribute number att_no for the vertex number vert and return theattribute value in real.  The attribute must be of type Real. If the Element is not of type Super or the attribute is not of type Real then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "785"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_name(Element super, Integer vert, Integer att_no, Text &txt)"
      ],
      "description": "For vertex number vert of the Element super, get the name of the attribute number att_no.  Theattribute name is returned in txt. A function return value of zero indicates the attribute name was successfully returned.",
      "id": "786"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_length(Element super, Integer vert, Text att_name, Integer &att_len)"
      ],
      "description": "Page 530Super String Element\fChapter 5 12dPL Library CallsFor vertex number vert of the Element super, get the length (in bytes) of the attribute with thename att_name.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "789"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_length(Element super, Integer vert, Integer att_no, Integer &att_len)"
      ],
      "description": "For vertex number vert of the Element super, get the length (in bytes) of the attribute numberatt_no.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for attributes of type Text and Binary.",
      "id": "790"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_type(Element super, Integer vert, Text att_name, Integer &att_type)"
      ],
      "description": "For vertex number vert of the Element super, get the type of the attribute with name att_name. The attribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "787"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_type(Element super, Integer vert, Integer att_no, Integer &att_type)"
      ],
      "description": "For vertex number vert of the Element super, get the type of the attribute with attribute numberatt_no.  The attribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "788"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Text txt)"
      ],
      "description": "Super String ElementPage 531\f12d Model Programming Language ManualFor the Element super and on the vertex number vert,\uf020if the attribute called att_name does not exist then create it as type Text and give it the valuetxt. \uf020if the attribute called att_name does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "791"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Integer int)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute called att_name does not exist then create it as type Integer and give it the valueint. \uf020if the attribute called att_name does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "792"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Real real)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute called att_name does not exist then create it as type Real and give it the valuereal. \uf020if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "793"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Text txt)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute with number att_no does not exist then create it as type Text and give it thevalue txt. \uf020if the attribute with number att_no does exist and it is type Text, then set its value to txt. Page 532Super String Element\fChapter 5 12dPL Library CallsIf the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "794"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Integer int)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute with number att_no does not exist then create it as type Integer and give it thevalue int. \uf020if the attribute with number att_no does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "795"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Real real)"
      ],
      "description": "For the Element super and on the vertex number vert,\uf020if the attribute with number att_no does not exist then create it as type Real and give it thevalue real. \uf020if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "796"
    },
    {
      "names": [
        "Integer Set_super_use_segment_attribute(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the dimension Att_Segment_Attribute_Array. If the dimension Att_Segment_Attribute_Array exists then there can be an Attributes on eachsegment. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. A return value of 0 indicates the function call was successful.",
      "id": "1060"
    },
    {
      "names": [
        "Integer Get_super_use_segment_attribute(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Attribute_Array exists for the super string. If the dimension Att_Segment_Attribute_Array exists then there can be an Attributes on eachsegment. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1061"
    },
    {
      "names": [
        "Integer Get_super_segment_attributes(Element elt, Integer seg, Attributes &att)"
      ],
      "description": "For the Element super, return the Attributes for the segment number seg as att. If the Element is not of type Super, or Att_Segment_Attribute_Array dimension is not set, or thesegment number seg has no attribute then a non-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute is successfully returned.",
      "id": "2012"
    },
    {
      "names": [
        "Integer Set_super_segment_attributes(Element elt, Integer seg, Attributes att)"
      ],
      "description": "For the Element super, set the Attributes for the segment number seg to att. If the Element is not of type Super, or Att_Segment_Attribute_Array dimension is not set, then anon-zero return value is returned. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the attribute is successfully set.",
      "id": "2013"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element super, Integer seg, Text att_name, Uid &uid)"
      ],
      "description": "For the Element super, get the attribute called att_name for the segment number seg and returnthe attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Super or the attribute is not of type Uid then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2014"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element super, Integer seg, Text att_name, Attributes &att)"
      ],
      "description": "For the Element super, get the attribute called att_name for the segment number seg and returnthe attribute value in att.  The attribute must be of type Attributes. If the Element is not of type Super or the attribute is not of type Attributes then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2015"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element super, Integer seg, Integer att_no, Uid &uid)"
      ],
      "description": "For the Element super, get the attribute with number att_no for the segment number seg andSuper String ElementPage 535\f12d Model Programming Language Manualreturn the attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Super or the attribute is not of type Uid then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2016"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element super, Integer seg, Integer att_no, Attributes &att)"
      ],
      "description": "For the Element super, get the attribute with number att_no for the segment number seg andreturn the attribute value in att.  The attribute must be of type Attributes. If the Element is not of type Super or the attribute is not of type Attributes then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2017"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Text att_name, Uid uid)"
      ],
      "description": "For the Element super and on the segment number seg,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2018"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Text att_name, Attributes att)"
      ],
      "description": "For the Element super and on the segment number seg,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020Page 536Super String Element\fChapter 5 12dPL Library Callsif the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2019"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Integer att_no, Uid uid)"
      ],
      "description": "For the Element super and on the segment number seg, if the attribute number att_no existsand it is of type Uid, then its value is set to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2020"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Integer att_no, Attributes att)"
      ],
      "description": "For the Element super and on the segment number seg, if the attribute number att_no existsand it is of type Attributes, then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2021"
    },
    {
      "names": [
        "Integer Super_segment_attribute_exists(Element elt, Integer seg, Text att_name)"
      ],
      "description": "Checks to see if for segment number seg, an attribute of name att_name exists. A non-zero function return value indicates the attribute exists. A zero function return value indicates the attribute does not exist. Super String ElementPage 537\f12d Model Programming Language ManualWarning - this is the opposite to most 12dPL function return values",
      "id": "1062"
    },
    {
      "names": [
        "Integer Super_segment_attribute_exists(Element elt, Integer seg, Text att_name, Integer &num)"
      ],
      "description": "Checks to see if for segment number seg, an attribute of name att_name exists, and if it does,return the number of the attribute as num. A non-zero function return value indicates the attribute exists and its number was successfullyreturned. A zero function return value indicates the attribute does not exist, or the number was notsuccessfully returned. Warning - this is the opposite to most 12dPL function return values",
      "id": "1063"
    },
    {
      "names": [
        "Integer Get_super_segment_number_of_attributes(Element elt, Integer seg, Integer &no_atts)"
      ],
      "description": "Get the total number of attributes for segment number seg of the Element super. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the number of attributes was successfully returned. A return value of 0 indicates the function call was successful.",
      "id": "1069"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_length(Element super, Integer seg, Text att_name, Integer &att_len)"
      ],
      "description": "For segment number seg of the Element super, get the length (in bytes) of the attribute with thename att_name.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "1079"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_length(Element super, Integer seg, Integer att_no, Integer &att_len)"
      ],
      "description": "For segment number seg of the Element super, get the length (in bytes) of the attribute numberatt_no.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for attributes of type Text and Binary.",
      "id": "1080"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Integer att_no, Real real)"
      ],
      "description": "For the Element super and on the segment number seg,\uf020if the attribute with number att_no does not exist then create it as type Real and give it thevalue real. \uf020if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "1086"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_uid(Element super, Integer use)"
      ],
      "description": "WARNING - Reserved for 12d Solutions Staff Only. Tell the super string super whether to use (set), or not use (remove), the dimensionAtt_Vertex_UID_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Vertex_UID_Array is used, then there is an Integer (referred to as a uid) stored at eachvertex of the super string. This is used by 12d Solutions to store special backtracking numbers on each vertex (for examplefor survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Vertex UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1572"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_uid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_UID_Array exists (is used) for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. If Att_Vertex_UID_Array is used, then there is an Integer (referred to as a uid) stored at eachvertex of the super string. This is used by 12d Solutions to store special backtracking numbers on each vertex (for examplefor survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Vertex UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions.",
      "id": "1573"
    },
    {
      "names": [
        "Integer Set_super_vertex_uid(Element super, Integer vert, Integer num)"
      ],
      "description": "WARNING - Reserved for 12d Solutions Staff Only. For the super Element super, set the vertex uid at vertex number vert to be num. A return value of 0 indicates the function call was successful.",
      "id": "1574"
    },
    {
      "names": [
        "Integer Get_super_vertex_uid(Element super, Integer vert, Integer &num)"
      ],
      "description": "For the super Element super, get the vertex uid at vertex number vert and return it in num. A return value of 0 indicates the function call was successful.",
      "id": "1575"
    },
    {
      "names": [
        "Integer Set_super_use_segment_uid(Element super, Integer use)"
      ],
      "description": "WARNING - Reserved for 12d Solutions Staff Only. Tell the super string super whether to use (set), or not use (remove), the dimensionAtt_Segment_UID_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Segment_UID_Array is used, then there is an Integer stored at each segment of the superstring. This is used by 12d Solutions to store special backtracking numbers on each segment (forexample for survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Segment UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1576"
    },
    {
      "names": [
        "Integer Get_super_use_segment_uid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_UID_Array exists (is used) for the super stringsuper. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. If Att_Segment_UID_Array is used, then there is an Integer stored at each segment of the superstring. This is used by 12d Solutions to store special backtracking numbers on each segment (forexample for survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Segment UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions.",
      "id": "1577"
    },
    {
      "names": [
        "Integer Set_super_segment_uid(Element super, Integer seg, Integer num)"
      ],
      "description": "WARNING - Reserved for 12d Solutions Staff Only. For the super Element super, set the number called uid at segment number seg to be num. A return value of 0 indicates the function call was successful.",
      "id": "1578"
    },
    {
      "names": [
        "Integer Get_super_segment_uid(Element super, Integer seg, Integer &num)"
      ],
      "description": "For the super Element super, get the number called the uid on segment number seg and returnit in num. A return value of 0 indicates the function call was successful.",
      "id": "1579"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_image_value(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Vertex_Image_Value isused.  If the dimension Att_Vertex_Image_Value is set then there can be one image attached toeach vertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. If use is 1, the dimension is set.  That is, the super string can have an image attached to eachvertex (it can be a different image at each vertex). If use is 0, the dimension is removed.  If the string had images then the images will be removed. A return value of 0 indicates the function call was successful.",
      "id": "1767"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_image_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Image_Value exists for the super string super. If the dimension Att_Vertex_Image_Value is set then there can be one image attached to eachvertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1768"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_image_array(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Vertex_Image_Array isused, or removed, for the super string super. If the dimension Att_Vertex_Image_Array is set then there can be more than one image attachedto each vertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. If use is 1, the dimension is set.  That is, each super string vertex can have a number of imagesattached to it. If use is 0, the dimension is removed.  If the super string vertex had images then the images willSuper String ElementPage 551\f12d Model Programming Language Manualbe removed. A return value of 0 indicates the function call was successful.",
      "id": "1769"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_image_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Image_Array exists for the super string super. If the dimension Att_Vertex_Image_Array is set then there can be more than one image attachedto each vertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists.  That is, each super string vertex can have a numberof images attached to it. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1770"
    },
    {
      "names": [
        "Integer Super_vertex_image_value_to_array(Element super)"
      ],
      "description": "If for the super string super the dimension Att_Vertex_Image_Value exists and the dimensionAtt_Vertex_Image_Array does not exist then there will be one image img for the entire string. In this case (when the dimension Att_Vertex_Image_Value exists and the dimensionAtt_ZCoord_Array does not exist) this function sets the Att_Vertex_Image_Array dimension andcreates a new image for each vertex of super and it is given the value img. See Height Dimensions for information on the Height (ZCoord) dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "2176"
    },
    {
      "names": [
        "Integer Super_vertex_image_delete(Element super, Integer vertex_num, Integer image_num)"
      ],
      "description": "For the super Element super, delete image number image_num from vertex numbervertex_num. A return value of 0 indicates the function call was successful.",
      "id": "1862"
    },
    {
      "names": [
        "Integer Super_vertex_image_delete_all(Element super, Integer vertex_num)"
      ],
      "description": "For the super Element super, delete all the images on vertex number vertex_num. A return value of 0 indicates the function call was successful.",
      "id": "1863"
    },
    {
      "names": [
        "Integer Get_super_vertex_number_of_images(Element super, Integer vertex_num, Integer &num_images)"
      ],
      "description": "For the super Element super, return in num_images the number of images on vertex numbervertex_num. A return value of 0 indicates the function call was successful.",
      "id": "1864"
    },
    {
      "names": [
        "Integer Get_super_vertex_image_type(Element elt, Integer vertex, Integer image_no, Text &image_type)"
      ],
      "description": "what is image_type? (it is URL etc)<no description>",
      "id": "1865"
    },
    {
      "names": [
        "Integer Super_vertex_add_URL(Element super, Integer vertex, Text url)"
      ],
      "description": "image_vertex_array or value.  Set the vertex to have text which is treated as url. <no description>",
      "id": "1771"
    },
    {
      "names": [
        "Integer Get_super_vertex_URL(Element elt, Integer vertex, Integer image_no, Text &url)"
      ],
      "description": "get url.  If not url type then error. <no description>",
      "id": "1866"
    },
    {
      "names": [
        "Integer Get_Super_vertex_plan_image(Element super, Integer vertex, Integer image_no, Text &url, Real &width, Real &height, Real &angle, Real &offset_x, Real &offset_y)"
      ],
      "description": "an image type<no description>",
      "id": "1867"
    },
    {
      "names": [
        "Integer Set_super_use_visibility(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use, or remove, the dimension Att_Visible_Array. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. A return value of 0 indicates the function call was successful.",
      "id": "718"
    },
    {
      "names": [
        "Integer Get_super_use_visibility(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Visible_Array exists for the super string. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "719"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_visibility_value(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Vertex_Visible_Value isused or removed. If Att_Vertex_Visible_Value is set and Att_Vertex_Visible_Array is not set, then there is only onevisibility value for all vertices in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If Att_Vertex_Visible_Value is set then the visibility is the same for all vertices in super. If use is 1, the dimension is set and the visibility is the same for all vertices. If use is 0, the dimension is removed. Note that if the dimension Att_Vertex_Visible_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "1580"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_visibility_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Visible_Value exists for the super string super.  IfAtt_Vertex_Visible_Value is set then there is one visibility value for all vertices in super. If Att_Vertex_Visible_Value is set and Att_Vertex_Visible_Array is not set, then there is only onevisibility value for all vertices in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1581"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_visibility_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Vertex_Visible_Array isused or removed. If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex insuper. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Super String ElementPage 557\f12d Model Programming Language ManualIf use is 1, the dimension is set and the visibility is different for each vertex. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1582"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_visibility_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Visible_Array exists for the super string super. If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex insuper. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1583"
    },
    {
      "names": [
        "Integer Set_super_vertex_visibility(Element super, Integer vert, Integer visibility)"
      ],
      "description": "For the Element super (which must be of type Super), set the visibility value for vertex numbervert and to visibility. If visibility is 1, the vertex is visible. If visibility is 0, the vertex is invisible. If the Element super is not of type Super, or Att_Vertex_Visible_Array is not set for super, thena non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "734"
    },
    {
      "names": [
        "Integer Get_super_vertex_visibility(Element super, Integer vert, Integer &visibility)"
      ],
      "description": "For the Element super (which must be of type Super), get the visibility value for vertex numbervert and return it in the Integer visibility. If visibility is 1, the vertex is visible. If visibility is 0, the vertex is invisible. If the Element super is not of type Super, or Att_Vertex_Visible_Array is not set for super, thenPage 558Super String Element\fChapter 5 12dPL Library Callsa non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "735"
    },
    {
      "names": [
        "Integer Set_super_use_segment_visibility_value(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Visible_Value isused or removed. If Att_Segment_Visible_Value is set and Att_Segment_Visible_Array is not set, then the visibilityis the same for all segments in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the visibility is the same for all segments. If use is 0, the dimension is removed. Note that if the dimension Att_Segment_Visible_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "1588"
    },
    {
      "names": [
        "Integer Get_super_use_segment_visibility_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Visible_Value exists for the super string super. If Att_Segment_Visible_Value is set and Att_Segment_Visible_Array is not set, then the visibilityis the same for all segments in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1589"
    },
    {
      "names": [
        "Integer Set_super_use_segment_visibility_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Visible_Array isused or removed. If Att_Segment_Visible_Array is set then there can be a different visibility defined for eachsegment in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the visibility is different for each segment. If use is 0, the dimension is removed. Page 560Super String Element\fChapter 5 12dPL Library CallsA return value of 0 indicates the function call was successful.",
      "id": "1590"
    },
    {
      "names": [
        "Integer Get_super_use_segment_visibility_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Visible_Array exists for the super string super. If Att_Segment_Visible_Array is set then there can be a different visibility defined for eachsegment in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn\u2019t exist. A return value of 0 indicates the function call was successful.",
      "id": "1591"
    },
    {
      "names": [
        "Integer Set_super_segment_visibility(Element super, Integer seg, Integer visibility)"
      ],
      "description": "For the Element super (which must be of type Super), set the visibility value for segmentnumber seg to visibility. If visibility is 1, the segment is visible. If visibility is 0, the segment is invisible. If the Element super is not of type Super, or Att_Segment_Visible_Array is not set for super,then a non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "720"
    },
    {
      "names": [
        "Integer Get_super_segment_visibility(Element super, Integer seg, Integer &visibility)"
      ],
      "description": "For the Element super (which must be of type Super), get the visibility value for segmentnumber seg and return it in the Integer visibility. If visibility is 1, the segment is visible. If visibility is 0, the segment is invisible. If the Element super is not of type Super, or Att_Segment_Visible_Array is not set for super,then a non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringSuper String ElementPage 561\f12d Model Programming Language ManualDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "721"
    },
    {
      "names": [
        "Element Create_align()"
      ],
      "description": "Create an Element of type Super_Alignment. The function return value gives the actual Element created. If the Super Alignment string could not be created, then the returned Element will be null.",
      "id": "2120"
    },
    {
      "names": [
        "Element Create_align(Element seed)"
      ],
      "description": "Create an Element of type Super_Alignment, and set the colour, name, style etc.  of the newstring to be the same as those from the Element seed. If the Super Alignment string could not be created, then the returned Element will be null.",
      "id": "2121"
    },
    {
      "names": [
        "Integer Is_super_alignment_solved(Element super_alignment)"
      ],
      "description": "Check if the geometry of the Element super_alignment solves. Page 578Super Alignment String Element\fChapter 5 12dPL Library CallsThe Element super_alignment must be of type Super_Alignment. A no-zero function return value indicates that the geometry will solve. A zero function return value indicates the geometry for the will not solve, or thatsuper_alignment is not of type Super_Alignment. Warning this is the opposite of most 12dPL function return values.",
      "id": "2680"
    },
    {
      "names": [
        "Integer Get_super_alignment_style(Element super_alignment, Text &style)"
      ],
      "description": "This call retrieves the current alignment style of the super alignment super_alignment andstores its name in the Text style. This call returns 0 if it succeeds and non zero if it fails.",
      "id": "2805"
    },
    {
      "names": [
        "Integer Set_super_alignment_style(Element super_alignment, Text style)"
      ],
      "description": "This call sets the current alignment style of the super alignment super_alignment to be the stylenamed style. This call returns 0 if it succeeds and non zero if it fails.",
      "id": "2806"
    },
    {
      "names": [
        "Element Get_super_alignment_horizontal_string(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the horizontal parts of a super alignmentsuper_alignment",
      "id": "1898"
    },
    {
      "names": [
        "Element Get_super_alignment_vertical_string(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the vertical parts of a super alignmentsuper_alignment",
      "id": "1899"
    },
    {
      "names": [
        "Integer Get_super_alignment_vertical_position(Element super_alignment, Real chainage, Real &level, Real &grade, Real &mvalue)"
      ],
      "description": "Get the details (level, grade, mvalue) of the vertical information of a super alignmentsuper_alignment at a given chainageA return value of zero indicates the function call was successful.",
      "id": "2167"
    },
    {
      "names": [
        "Element Get_super_alignment_widening_left_side(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the left side widening of a super alignmentsuper_alignment",
      "id": "2198"
    },
    {
      "names": [
        "Element Get_super_alignment_widening_right_side(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the right side widening of a super alignmentsuper_alignment",
      "id": "2199"
    },
    {
      "names": [
        "Element Get_super_alignment_super_elevation_left_side(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the left side elevation of a super alignmentsuper_alignment",
      "id": "2200"
    },
    {
      "names": [
        "Element Get_super_alignment_super_elevation_right_side(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the right side elevation of a super alignmentsuper_alignment",
      "id": "2201"
    },
    {
      "names": [
        "Element Get_super_alignment_sight_distance_forward(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the forward sight distance of a super alignmentsuper_alignment",
      "id": "2274"
    },
    {
      "names": [
        "Element Get_super_alignment_sight_distance_reverse(Element super_alignment)"
      ],
      "description": "Return a super string that is the same as the reverse sight distance of a super alignmentsuper_alignment",
      "id": "2275"
    },
    {
      "names": [
        "Integer Get_super_alignment_number_of_profiles(Element alignment, Integer &count)"
      ],
      "description": "Get the number of profiles count of a super alignment alignmentA return value of zero indicates the function call was successful.",
      "id": "2624"
    },
    {
      "names": [
        "Element Get_super_alignment_profile(Element alignment, Integer &index)"
      ],
      "description": "Return a super string that is the same as the profile of given index of a super alignmentalignment",
      "id": "2625"
    },
    {
      "names": [
        "Element Get_super_alignment_profile(Element alignment, Text name)"
      ],
      "description": "Return a super string that is the same as the profile of given name of a super alignmentalignment",
      "id": "2276"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_parts(Element alignment, Integer vert_hori, Dynamic_Text &names)"
      ],
      "description": "Get the list of named part (vertical if vert_hori is 0; horizontal otherwise) names of a superalignment alignment and assign their name to the list namesA return value of zero indicates the function call was successful.",
      "id": "3535"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_positions(Element alignment, Dynamic_Text &names)"
      ],
      "description": "Get the list of named positions of a super alignment alignment and assign their names to the listnamesA return value of zero indicates the function call was successful.",
      "id": "3536"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_part_chainage(Element alignment, Integer vert_hori, Text name, Real &ch)"
      ],
      "description": "Get the chainage ch of named part (vertical if vert_hori is 0; horizontal otherwise) with givenname for a super alignment alignment. A return value of zero indicates the function call was successful.",
      "id": "3537"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_position_chainage(Element alignment, Text name, Real &ch)"
      ],
      "description": "Get the chainage ch of named position with given name for a super alignment alignment. A return value of zero indicates the function call was successful.",
      "id": "3538"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_part_segments(Element alignment, Integer vert_hori, Text name, Dynamic_Integer &segment_indices)"
      ],
      "description": "Get the list of segment indices segment_indices of the named part (vertical if vert_hori is 0;horizontal otherwise) with given name for a super alignment alignment. A return value of zero indicates the function call was successful.",
      "id": "3539"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_part_segment(Element alignment, Integer vert_hori, Text name, Segment &segment)"
      ],
      "description": "Get the Segment segment of the named part (vertical if vert_hori is 0; horizontal otherwise) withgiven name for a super alignment alignment. A return value of zero indicates the function call was successful.",
      "id": "3540"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_chainage(Element alignment, Integer vert_hori, Real ch, Text &name, Real &extension)"
      ],
      "description": "For a super alignment alignment, find the named part (vertical if vert_hori is 0; horizontalotherwise) containing a given chainage ch, set Text name to the part name, and extension tothe extension to the chainage point. A return value of zero indicates the function call was successful.",
      "id": "3541"
    },
    {
      "names": [
        "Integer Get_super_alignment_named_segment(Element alignment, Integer vert_hori, Real ch, Text &name)"
      ],
      "description": "For a super alignment alignment, find the named part (vertical if vert_hori is 0; horizontalotherwise) containing a given chainage ch, set Text name to the part name. A return value of zero indicates the function call was successful.",
      "id": "3542"
    },
    {
      "names": [
        "Integer Set_super_alignment_use_equalities(Element alignment, Integer use)"
      ],
      "description": "For a super alignment alignment, create (if use is 1) or delete (if use is 0) the chainageequalities object within the super alignment. A return value of zero indicates the function call was successful.",
      "id": "2181"
    },
    {
      "names": [
        "Integer Get_super_alignment_use_equalities(Element alignment, Integer &use)"
      ],
      "description": "For a super alignment alignment, check if the chainage equalities object exists within the superalignment and set use to 1 if exists; 0 otherwise. A return value of zero indicates the function call was successful.",
      "id": "2182"
    },
    {
      "names": [
        "Integer Set_super_alignment_equalities_active(Element alignment, Integer active)"
      ],
      "description": "For a super alignment alignment, create (if active is 1) or delete (if active is 0) the chainageequalities object within the super alignment.  If active is 1 then also turn on the equalities objectA return value of zero indicates the function call was successful.",
      "id": "2183"
    },
    {
      "names": [
        "Integer Get_super_alignment_equalities_active(Element alignment, Integer &active)"
      ],
      "description": "For a super alignment alignment, check if the chainage equalities object exists within the superalignment and set active to 1 if exists and turned on; 0 otherwise. A return value of zero indicates the function call was successful.",
      "id": "2184"
    },
    {
      "names": [
        "Integer Super_alignment_equality_part_append(Element alignment, Text part)"
      ],
      "description": "For a super alignment alignment, append a new equality part with the given name part. A return value of zero indicates the function call was successful.",
      "id": "2185"
    },
    {
      "names": [
        "Integer Super_alignment_equality_part_insert(Element alignment, Integer position, Text part)"
      ],
      "description": "For a super alignment alignment, insert a new equality part at the given position with the givenname part. Super Alignment String ElementPage 585\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "2186"
    },
    {
      "names": [
        "Integer Super_alignment_equality_part_delete(Element alignment, Integer position)"
      ],
      "description": "For a super alignment alignment, delete the equality part at the given positionA return value of zero indicates the function call was successful.",
      "id": "2187"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_parts(Element alignment, Integer &num_parts)"
      ],
      "description": "For a super alignment alignment, get the number of the equality parts as num_parts. A return value of zero indicates the function call was successful.",
      "id": "2188"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_part_id(Element alignment, Integer position, Integer &id)"
      ],
      "description": "For a super alignment alignment, get the id of the equality part at given position. A return value of zero indicates the function call was successful.",
      "id": "2189"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_part_type(Element alignment, Integer position, Text &type)"
      ],
      "description": "For a super alignment alignment, get the type of the equality part at given position. A return value of zero indicates the function call was successful.",
      "id": "2190"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_part(Element alignment, Integer position, Text &name)"
      ],
      "description": "For a super alignment alignment, get the name of the equality part at given position. A return value of zero indicates the function call was successful.",
      "id": "2191"
    },
    {
      "names": [
        "Integer Calc_super_alignment_equalities(Element alignment)"
      ],
      "description": "For a super alignment alignment, rebuild the chainage equality. A return value of zero indicates the function call was successful.",
      "id": "2192"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_chainage(Element alignment, Real raw_chainage, Text &equality_name, Integer &equality_zone, Real &equality_offset)"
      ],
      "description": "For a super alignment alignment, get the equality_name; equality_zone; equality_offset ofthe chainage equality part at given raw_chainage. A return value of zero indicates the function call was successful.",
      "id": "2193"
    },
    {
      "names": [
        "Integer Get_super_alignment_raw_chainage(Element alignment, Text equality_name, Integer equality_zone, Real equality_offset, Real &raw_chainage)"
      ],
      "description": "For a super alignment alignment, get the raw_chainage of the chainage equality part with givenequality_name; equality_zone; equality_offset . A return value of zero indicates the function call was successful.",
      "id": "2194"
    },
    {
      "names": [
        "Integer Get_super_alignment_number_of_equalities(Element alignment, Integer &count)"
      ],
      "description": "Super Alignment String ElementPage 587\f12d Model Programming Language ManualFor a super alignment alignment, get the count of number of solved chainage equalities (K-postand internal equalities). A return value of zero indicates the function call was successful.",
      "id": "2195"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_data(Element align, Integer index, Real &raw_chainage, Integer &mode, Text &equality_name, Integer &equality_zone, Real &equality_offset, Text &pre_equality_name, Integer &pre_equality_zone, Real &equality_before)"
      ],
      "description": "For a super alignment alignment, get the chainage equality information: raw_chainage, mode,equality_name, equality_zone, equality_offset, pre_equality_name, pre_equality_zone,equality_before at a given index. A return value of zero indicates the function call was successful.",
      "id": "2196"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_info(Element alignment, Real chainage, Equality_Info &equality_info)"
      ],
      "description": "For a super alignment alignment, get the chainage equality information: equality_info at agiven chainage. A return value of zero indicates the function call was successful.",
      "id": "2223"
    },
    {
      "names": [
        "Integer Get_equality_info_valid(Equality_Info &info, Integer &valid)"
      ],
      "description": "Get the valid flag of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2224"
    },
    {
      "names": [
        "Integer Get_equality_info_name(Equality_Info &info, Text &name)"
      ],
      "description": "Get the name of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2225"
    },
    {
      "names": [
        "Integer Get_equality_info_zone(Equality_Info &info, Integer &zone)"
      ],
      "description": "Get the zone of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2226"
    },
    {
      "names": [
        "Integer Get_equality_info_offset(Equality_Info &info, Real &offset)"
      ],
      "description": "Get the offset of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2227"
    },
    {
      "names": [
        "Integer Get_equality_info_prevalid(Equality_Info &info, Integer &prevalid)"
      ],
      "description": "Get the prevalid flag of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2228"
    },
    {
      "names": [
        "Integer Get_equality_info_prename(Equality_Info &info, Text &prename)"
      ],
      "description": "Get the prename of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2229"
    },
    {
      "names": [
        "Integer Get_equality_info_prezone(Equality_Info &info, Integer &prezone)"
      ],
      "description": "Get the prezone of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2230"
    },
    {
      "names": [
        "Integer Get_equality_info_preoffset(Equality_Info &info, Real &preoffset)"
      ],
      "description": "Get the zone of a super alignment chainage Equality_Info info. A return value of zero indicates the function call was successful.",
      "id": "2231"
    },
    {
      "names": [
        "Integer Set_equality_label_data(Equality_Label &label, Text name, Integer value)"
      ],
      "description": "Set the name and the Integer value of a super alignment chainage Equality_Label label. A return value of zero indicates the function call was successful.",
      "id": "2232"
    },
    {
      "names": [
        "Integer Set_equality_label_data(Equality_Label &label, Text name, Text value)"
      ],
      "description": "Set the name and the Text value of a super alignment chainage Equality_Label label. A return value of zero indicates the function call was successful.",
      "id": "2233"
    },
    {
      "names": [
        "Integer Get_equality_label_data(Equality_Label &label, Text name, Integer &value)"
      ],
      "description": "Get the name and the Integer value of a super alignment chainage Equality_Label label. A return value of zero indicates the function call was successful.",
      "id": "2234"
    },
    {
      "names": [
        "Integer Get_equality_label_data(Equality_Label &label, Text name, Text &value)"
      ],
      "description": "Get the name and the Text value of a super alignment chainage Equality_Label label. A return value of zero indicates the function call was successful.",
      "id": "2235"
    },
    {
      "names": [
        "Integer Create_equality_label(Real raw_chainage, Equality_Info &equality_info, Equality_Label &equality_label, Text &text_label)"
      ],
      "description": "For plotting???Create the text_label from equality_info and equality_label at given raw_chainage. A return value of zero indicates the function call was successful.",
      "id": "2236"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_chainage(Element alignment, Integer item, Real &chainage)"
      ],
      "description": "For a super alignment alignment, get the raw chainage from chainage equality with a givenitem. A return value of zero indicates the function call was successful.",
      "id": "2237"
    },
    {
      "names": [
        "Integer Get_super_alignment_equality_info(Element alignment, Real chainage, Equality_Info &equality_info)"
      ],
      "description": "For a super alignment alignment, get the chainage equality information: equality_info at agiven chainage. A return value of zero indicates the function call was successful.",
      "id": "2238"
    },
    {
      "names": [
        "Integer Resolve_super_alignment(Text model_name, Uid model_id, Text string_name, Uid string_id)"
      ],
      "description": "Resolve the super alignment with given model_name, model_id, string_name, string_id . A return value of zero indicates the function call was successful.",
      "id": "3918"
    },
    {
      "names": [
        "Integer Super_alignment_validate(Element alignment, Integer &has_error)"
      ],
      "description": "Validate the super alignment and set Integer has_error to one if any error occurs on thevalidation; zero otherwise. A return value of zero indicates the function call was successful.",
      "id": "3935"
    },
    {
      "names": [
        "Element Create_arc(Arc arc)"
      ],
      "description": "Create an Element of type Arc from the Arc arc. The arc string has the same centre, radius, start and end points as the Arc arc. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "294"
    },
    {
      "names": [
        "Element Create_arc(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3)"
      ],
      "description": "Create an Element of type Arc through three given points. The arc string has start point (x1,y1,z1), an intermediate point (x2,y2,z2) on the arc and the endpoint (x3,y3,z3). The centre and radius of the arc will be automatically calculated. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "312"
    },
    {
      "names": [
        "Element Create_arc(Real xc, Real yc, Real zc, Real rad, Real xs, Real ys, Real zs, Real xe, Real ye, Real ze)"
      ],
      "description": "Create an Element of type Arc with centre (xc,yc,zc), and radius rad. The points (xs,ys,zs) and (xe,ye,ze) define the start and end points respectively for the arc.  Ifeither of the points do not lie on the plan circle with centre (xc,yc) and radius rad, then the pointis dropped perpendicularly onto the plan circle to define the (x,y) co-ordinates for the relevantstart or end point. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "296"
    },
    {
      "names": [
        "Element Create_arc(Real xc, Real yc, Real zc, Real xs, Real ys, Real zs, Real sweep)"
      ],
      "description": "Create an Element of type Arc with centre point (xc,yc,zc), start point (xs,ys,zs) and sweepangle sweep. The absolute radius is calculated as the distance between the centre and start point of the arc. The sign of the radius comes from the sweep angle. The sweep angle is measured in a clockwise direction from the line joining the centre to the arcstart point.  The units for sweep angles are radians. Hence the sweep angle is measured in radians and a positive value indicates a clockwisedirection and a positive radius. The end point of the arc will be automatically created. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "313"
    },
    {
      "names": [
        "Element Create_arc(Real xc, Real yc, Real zc, Real xs, Real ys, Real zs, Real xe, Real ye, Real ze, Integer dir)"
      ],
      "description": "Create an Element of type Arc with centre (xc,yc,zc), start point (xs,ys,zs) and end pointPage 594Arc String Element\fChapter 5 12dPL Library Calls(xe,ye,ze). The absolute radius is calculated as the distance between the centre and start point of the arc. If dir is positive, the radius is taken to be positive. If dir is negative, the radius is taken to be negative. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "314"
    },
    {
      "names": [
        "Element Create_arc_2(Real xs, Real ys, Real zs, Real rad, Real arc_length, Real start_angle)"
      ],
      "description": "Create an Element of type Arc with radius rad.  The arc starts at the point (xs,ys,zs) with tangentangle start_angle and total arc length arc_length. The centre and end points will be automatically created. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "316"
    },
    {
      "names": [
        "Element Create_arc_3(Real xs, Real ys, Real zs, Real rad, Real arc_length, Real chord_angle)"
      ],
      "description": "Create an Element of type Arc with radius rad.  The arc starts at the point (xs,ys,zs) with a chordangle chord_angle and total arc length arc_length. The centre and end points will be automatically created. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "317"
    },
    {
      "names": [
        "Integer Set_arc_centre(Element elt, Real xc, Real yc, Real zc)"
      ],
      "description": "Set the centre point of the Arc string given by Element elt to (xc,yc,zc). The start and end points are also translated by the plan distance between the old and newcentre. A function return value of zero indicates the centre was successfully modified.",
      "id": "319"
    },
    {
      "names": [
        "Integer Get_arc_centre(Element elt, Real &xc, Real &yc, Real &zc)"
      ],
      "description": "Get the centre point for Arc string given by Element elt. The centre of the arc is (xc,yc,zc). A function return value of zero indicates the centre was successfully returned.",
      "id": "318"
    },
    {
      "names": [
        "Integer Set_arc_radius(Element elt, Real rad)"
      ],
      "description": "Set the radius of the Arc string given by Element elt to rad.  The new radius must be non-zero. The start and end points are projected radially so that they still lie on the arc. A function return value of zero indicates the radius was successfully modified.",
      "id": "321"
    },
    {
      "names": [
        "Integer Get_arc_radius(Element elt, Real &rad)"
      ],
      "description": "Get the radius for Arc string given by Element elt. The radius is given by rad. A function return value of zero indicates the radius was successfully returned.",
      "id": "320"
    },
    {
      "names": [
        "Integer Set_arc_start(Element elt, Real xs, Real ys, Real zs)"
      ],
      "description": "Set the start point of the Arc string given by Element elt to (xs,ys,zs). If the start point does not lie on the arc, then the point (xs,ys,zs) is projected radially onto the arcand the projected point taken as the start point. A function return value of zero indicates the start point was successfully modified.",
      "id": "323"
    },
    {
      "names": [
        "Integer Get_arc_start(Element elt, Real &xs, Real &ys, Real &zs)"
      ],
      "description": "Get the start point for Arc string given by Element elt. The start of the arc is (xs,ys,zs). A function return value of zero indicates that the start point was successfully returned.",
      "id": "322"
    },
    {
      "names": [
        "Integer Set_arc_end(Element elt, Real xe, Real ye, Real ze)"
      ],
      "description": "Set the end point of the Arc string given by Element elt to (xe,ye,ze). If the end point does not lie on the arc, then the point (xe,ye,ze) is projected radially onto the arcand the projected point taken as the end point. A function return value of zero indicates the end point was successfully modified.",
      "id": "325"
    },
    {
      "names": [
        "Integer Get_arc_end(Element elt, Real &xe, Real &ye, Real &ze)"
      ],
      "description": "Get the end point for Arc string given by Element elt. The end of the arc is (xe,ye,ze). A function return value of zero indicates that the end point was successfully returned.",
      "id": "324"
    },
    {
      "names": [
        "Integer Set_arc_data(Element elt, Real xc, Real yc, Real zc, Real rad, Real xs, Real ys, Real zs, Real xe, Real ye, Real ze)"
      ],
      "description": "Set the data for the Arc string given by Element elt. The arc is given the centre (xc,yc,zc), radius rad and start and end points (xs,ys,zs) and(xe,ye,ze) respectively. A function return value of zero indicates the arc data was successfully set.",
      "id": "327"
    },
    {
      "names": [
        "Integer Get_arc_data(Element elt, Real &xc, Real &yc, Real &zc, Real &rad, Real &xs, Real &ys, Real &zs, Real &xe, Real &ye, Real &ze)"
      ],
      "description": "Get the data for the Arc string given by Element elt. The arc has centre (xc,yc,zc), radius rad and start and end points (xs,ys,zs) and (xe,ye,ze)respectively. A function return value of zero indicates that the arc date was successfully returned.",
      "id": "326"
    },
    {
      "names": [
        "Integer Set_arc_interval(Element elt, Real interval)"
      ],
      "description": "Set the chainage interval of the Arc string given by Element elt to interval. A function return value of zero indicates the chainage interval was successfully modified.",
      "id": "2257"
    },
    {
      "names": [
        "Integer Get_arc_interval(Element elt, Real &interval)"
      ],
      "description": "Get the chainage interval for Arc string given by Element elt and assign to interval. A function return value of zero indicates the chainage interval was successfully returned.",
      "id": "2258"
    },
    {
      "names": [
        "Integer Set_arc_chord_arc(Element elt, Real chord_arc)"
      ],
      "description": "Set the chord to arc tolerance for Arc string given by Element elt to chord_arc. A function return value of zero indicates the tolerance was successfully modified.",
      "id": "2259"
    },
    {
      "names": [
        "Integer Get_arc_chord_arc(Element elt, Real &chord_arc)"
      ],
      "description": "Get the chord to arc tolerance for Arc string given by Element elt and assign to chord_arc. A function return value of zero indicates the tolerance was successfully returned.",
      "id": "2260"
    },
    {
      "names": [
        "Element Create_circle(Real xc, Real yc, Real zc, Real rad)"
      ],
      "description": "Create an Element of type Circle with centre (xc,yc), radius rad and z value (height) zc. The function return value gives the actual Element created. If the circle string could not be created, then the returned Element will be null.",
      "id": "307"
    },
    {
      "names": [
        "Element Create_circle(Real xc, Real yc, Real zc, Real xp, Real yp, Real zp)"
      ],
      "description": "Create an Element of type Circle with centre (xc,yc) and point (xp,yp) on the circle. The height of the circle is zc. The radius of the circle will be automatically calculated. The function return value gives the actual Element created. If the circle string could not be created, then the returned Element will be null.",
      "id": "308"
    },
    {
      "names": [
        "Element Create_circle(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3)"
      ],
      "description": "Create an Element of type Circle going through the three points (x1,y1), (x2,y2) and (x3,y3). The height of the circle is z1. The centre and radius of the circle will be automatically created. The function return value gives the actual Element created. If the circle string could not be created, then the returned Element will be null.",
      "id": "309"
    },
    {
      "names": [
        "Integer Set_circle_data(Element elt, Real xc, Real yc, Real zc, Real rad)"
      ],
      "description": "Circle String ElementPage 599\f12d Model Programming Language ManualSet the data for the Circle string given by Element elt. The centre of the circle is set to (xc,yc,zc), the height to zc and the radius to rad. A function return value of zero indicates success.",
      "id": "311"
    },
    {
      "names": [
        "Integer Get_circle_data(Element elt, Real &xc, Real &yc, Real &zc, Real &rad)"
      ],
      "description": "Get the data for the Circle string given by Element elt. The centre of the circle is (xc,yc,zc), height zcand radius rad. A function return value of zero indicates success.",
      "id": "310"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size and colour colour.  The other data isdefaulted. The function return value gives the actual Element created. If the text string could not be created, then the returned Element will be null.",
      "id": "174"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour, Real ang)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size, colour colour and angle ang.  Theother data is defaulted. The function return value gives the actual Element created. Text String ElementPage 601\f12d Model Programming Language ManualIf the text string could not be created, then the returned Element will be null.",
      "id": "175"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour, Real ang, Integer justif)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size, colour colour, angle ang andjustification justif.  The other data is defaulted. The function return value gives the actual Element created. If the text string could not be created, then the returned Element will be null.",
      "id": "176"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour, Real ang, Integer justif, Integer size_mode)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size, colour colour, angle ang, justificationjustif and size mode size_mode.  The other data is defaulted. The function return value gives the actual Element created. If the text string could not be created, then the returned Element will be null.",
      "id": "177"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour, Real ang, Integer justif, Integer size_mode, Real offset_distance, Real rise_distance)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size, colour colour, angle ang, justificationjustif, size mode size_mode, offset offset_distance and rise rise_distance. The function return value gives the actual Element created. If the text string could not be created, then the returned Element will be null.",
      "id": "178"
    },
    {
      "names": [
        "Integer Set_text_data(Element elt, Text text, Real x, Real y, Real size, Integer colour, Real ang, Integer justif, Integer size_mode, Real offset_distance, Real rise_distance)"
      ],
      "description": "Set values for each of the text parameters. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates that the text data was successfully set.",
      "id": "180"
    },
    {
      "names": [
        "Integer Get_text_data(Element elt, Text &text, Real &x, Real &y, Real &size, Integer &colour, Real &ang, Integer &justification, Integer &size_mode, Real &offset_dist, Real &rise_dist)"
      ],
      "description": "Get the values for each of the text parameters. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates that the text data was successfully returned.",
      "id": "179"
    },
    {
      "names": [
        "Integer Set_text_value(Element elt, Text text)"
      ],
      "description": "Set the actual text of the text Element elt. The text is given as Text text. A function return value of zero indicates the data was successfully set.",
      "id": "461"
    },
    {
      "names": [
        "Integer Get_text_value(Element elt, Text &text)"
      ],
      "description": "Get the actual text of the text Element elt. The text is returned as Text text. A function return value of zero indicates the data was successfully returned.",
      "id": "453"
    },
    {
      "names": [
        "Integer Set_text_textstyle_data(Element elt, Textstyle_Data d)"
      ],
      "description": "For the Element elt of type Text, set the Textstyle_Data to be d. Setting a Textstyle_Data means that all the individual values that are contained in theTextstyle_Data are set rather than having to set each one individually. If the value is blank in the Textstyle_Data d then the value in elt would be left alone. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates the Textstyle_Data was successfully set.",
      "id": "1669"
    },
    {
      "names": [
        "Integer Get_text_textstyle_data(Element elt, Textstyle_Data &d)"
      ],
      "description": "For the Element elt of type Text, get the Textstyle_Data for the string and return it as d. A non-zero function return value is returned if elt is not of type Text (and also d would be leftunchanged) . A function return value of zero indicates the Textstyle_Data was successfully returned.",
      "id": "1670"
    },
    {
      "names": [
        "Integer Get_text_length(Element elt, Real &length)"
      ],
      "description": "Get the length of the characters of the text Element elt. The text length is returned as Real length. A function return value of zero indicates the data was successfully returned.",
      "id": "580"
    },
    {
      "names": [
        "Integer Set_text_xyz(Element elt, Real x, Real y, Real z)"
      ],
      "description": "Set the base position of for the text Element elt. The position is given as Real (x,y,z). A function return value of zero indicates the data was successfully set.",
      "id": "462"
    },
    {
      "names": [
        "Integer Get_text_xyz(Element elt, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the base position of for the text Element elt. The position is returned as Real (x,y,z). A function return value of zero indicates the data was successfully returned.",
      "id": "454"
    },
    {
      "names": [
        "Integer Set_text_units(Element elt, Integer units_mode)"
      ],
      "description": "Set the units used for the text parameters of the text Element elt. The mode is given as Integer units_mode. For the values of units_mode, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "466"
    },
    {
      "names": [
        "Integer Get_text_units(Element elt, Integer &units_mode)"
      ],
      "description": "Get the units used for the text parameters of the text Element elt. The mode is returned as Integer units_mode. For the values of units_mode, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "458"
    },
    {
      "names": [
        "Integer Set_text_size(Element elt, Real size)"
      ],
      "description": "Set the size of the characters of the text Element elt. The text size is returned as Real size. A function return value of zero indicates the data was successfully set.",
      "id": "463"
    },
    {
      "names": [
        "Integer Get_text_size(Element elt, Real &size)"
      ],
      "description": "Get the size of the characters of the text Element elt. The text size is returned as Real size. A function return value of zero indicates the data was successfully returned.",
      "id": "455"
    },
    {
      "names": [
        "Integer Set_text_justify(Element elt, Integer justify)"
      ],
      "description": "Set the justification used for the text Element elt. The justification is given as Integer justify. For the values of justify and their meaning, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "465"
    },
    {
      "names": [
        "Integer Get_text_justify(Element elt, Integer &justify)"
      ],
      "description": "Page 606Text String Element\fChapter 5 12dPL Library CallsGet the justification used for the text Element elt. The justification is returned as Integer justify. For the values of justify and their meaning, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "457"
    },
    {
      "names": [
        "Integer Set_text_angle(Element elt, Real ang)"
      ],
      "description": "Set the angle of rotation (in radians) about the text (x,y) point of the text Element elt. The angle is given as Real ang. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "464"
    },
    {
      "names": [
        "Integer Get_text_angle(Element elt, Real &ang)"
      ],
      "description": "Get the angle of rotation (in radians) about the text (x,y) point of the text Element elt and returnthe angle as ang. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "456"
    },
    {
      "names": [
        "Integer Set_text_angle2(Element elt, Real ang2)"
      ],
      "description": "Set the 3D beta angle (in radians) about the text (x,y) point of the text Element elt. The angle is given as Real ang2. A function return value of zero indicates the data was successfully set.",
      "id": "3579"
    },
    {
      "names": [
        "Integer Get_text_angle2(Element elt, Real &ang2)"
      ],
      "description": "Get the 3D beta angle (in radians) about the text (x,y) point of the text Element elt and return theText String ElementPage 607\f12d Model Programming Language Manualangle as ang2. A function return value of zero indicates the data was successfully returned.",
      "id": "3576"
    },
    {
      "names": [
        "Integer Set_text_angle3(Element elt, Real ang3)"
      ],
      "description": "Set the 3D gamma angle (in radians) about the text (x,y) point of the text Element elt. The angle is given as Real ang3. A function return value of zero indicates the data was successfully set.",
      "id": "3580"
    },
    {
      "names": [
        "Integer Get_text_angle3(Element elt, Real &ang3)"
      ],
      "description": "Get the 3D gamma angle (in radians) about the text (x,y) point of the text Element elt and returnthe angle as ang3. A function return value of zero indicates the data was successfully returned.",
      "id": "3577"
    },
    {
      "names": [
        "Integer Set_text_offset(Element elt, Real offset)"
      ],
      "description": "Set the offset distance of the text Element elt. The offset is given as Real offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "467"
    },
    {
      "names": [
        "Integer Get_text_offset(Element elt, Real &offset)"
      ],
      "description": "Get the offset distance of the text Element elt. The offset is returned as Real offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned. Page 608Text String Element\fChapter 5 12dPL Library Calls",
      "id": "459"
    },
    {
      "names": [
        "Integer Set_text_rise(Element elt, Real rise)"
      ],
      "description": "Set the rise distance of the text Element elt. The rise is returned as Real rise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "468"
    },
    {
      "names": [
        "Integer Get_text_rise(Element elt, Real &rise)"
      ],
      "description": "Get the rise distance of the text Element elt. The rise is returned as Real rise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "460"
    },
    {
      "names": [
        "Integer Set_text_height(Element elt, Real height)"
      ],
      "description": "Set the height of the characters of the text Element elt. The text height is given as Real height. A function return value of zero indicates the data was successfully set.",
      "id": "584"
    },
    {
      "names": [
        "Integer Get_text_height(Element elt, Real &height)"
      ],
      "description": "Get the height of the characters of the text Element elt. The text height is returned as Real height. A function return value of zero indicates the data was successfully returned.",
      "id": "579"
    },
    {
      "names": [
        "Integer Set_text_slant(Element elt, Real slant)"
      ],
      "description": "Set the slant of the characters of the text Element elt. The text slant is given as Real slant. A function return value of zero indicates the data was successfully set.",
      "id": "585"
    },
    {
      "names": [
        "Integer Get_text_slant(Element elt, Real &slant)"
      ],
      "description": "Get the slant of the characters of the text Element elt. The text slant is returned as Real slant. A function return value of zero indicates the data was successfully returned.",
      "id": "581"
    },
    {
      "names": [
        "Integer Set_text_style(Element elt, Text style)"
      ],
      "description": "Set the style of the characters of the text Element elt. The text style is given as Text style. A function return value of zero indicates the data was successfully set.",
      "id": "587"
    },
    {
      "names": [
        "Integer Get_text_style(Element elt, Text &style)"
      ],
      "description": "Get the style of the characters of the text Element elt. The text style is returned as Text style. A function return value of zero indicates the data was successfully returned.",
      "id": "583"
    },
    {
      "names": [
        "Integer Set_text_x_factor(Element elt, Real xfact)"
      ],
      "description": "Set the x factor of the characters of the text Element elt. The text x factor is given as Real xfact. A function return value of zero indicates the data was successfully set.",
      "id": "586"
    },
    {
      "names": [
        "Integer Get_text_x_factor(Element elt, Real &xfact)"
      ],
      "description": "Get the x factor of the characters of the text Element elt. The text x factor is returned as Real xfact. A function return value of zero indicates the data was successfully returned.",
      "id": "582"
    },
    {
      "names": [
        "Integer Set_text_ttf_underline(Element elt, Integer underline)"
      ],
      "description": "For the Element elt of type Text, set the underline state to underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates underlined was successfully set.",
      "id": "2596"
    },
    {
      "names": [
        "Integer Get_text_ttf_underline(Element elt, Integer &underline)"
      ],
      "description": "For the Element elt of type Text, get the underline state and return it in underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates underlined was successfully returned.",
      "id": "2592"
    },
    {
      "names": [
        "Integer Set_text_ttf_strikeout(Element elt, Integer strikeout)"
      ],
      "description": "For the Element elt of type Text, set the strikeout state to strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates strikeout was successfully set.",
      "id": "2597"
    },
    {
      "names": [
        "Integer Get_text_ttf_strikeout(Element elt, Integer &strikeout)"
      ],
      "description": "For the Element elt of type Text, get the strikeout state and return it in strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2593"
    },
    {
      "names": [
        "Integer Set_text_ttf_italic(Element elt, Integer italic)"
      ],
      "description": "For the Element elt of type Text, set the italic state to italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates italic was successfully set.",
      "id": "2598"
    },
    {
      "names": [
        "Integer Get_text_ttf_italic(Element elt, Integer &italic)"
      ],
      "description": "For the Element elt of type Text, get the italic state and return it in italic. Page 612Text String Element\fChapter 5 12dPL Library CallsIf italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates italic was successfully returned.",
      "id": "2594"
    },
    {
      "names": [
        "Integer Set_text_ttf_outline(Element elt, Integer outline)"
      ],
      "description": "For the Element elt of type Text, set the outline state to outline. If outline = 1, then for a true type font the text will be only shown in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates outline was successfully set.",
      "id": "2772"
    },
    {
      "names": [
        "Integer Get_text_ttf_outline(Element elt, Integer &outline)"
      ],
      "description": "For the Element elt of type Text, get the outline state and return it in outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates outline was successfully returned.",
      "id": "2771"
    },
    {
      "names": [
        "Integer Set_text_ttf_weight(Element elt, Integer weight)"
      ],
      "description": "For the Element elt of type Text, set the font weight to weight. For the list of allowable weights, go to Allowable WeightsA non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates weight was successfully set.",
      "id": "2599"
    },
    {
      "names": [
        "Integer Get_text_ttf_weight(Element elt, Integer &weight)"
      ],
      "description": "For the Element elt of type Text, get the font weight and return it in weight. For the list of allowable weights, go to Allowable WeightsA non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates weight was successfully returned.",
      "id": "2595"
    },
    {
      "names": [
        "Integer Set_text_whiteout(Element text, Integer colour)"
      ],
      "description": "For the Text Element text, set the colour number of the colour used for the whiteout box aroundthe text, to be colour. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2752"
    },
    {
      "names": [
        "Integer Get_text_whiteout(Element text, Integer &colour)"
      ],
      "description": "For the Text Element text, get the colour number that is used for the whiteout box around thetext.  The whiteout colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2751"
    },
    {
      "names": [
        "Integer Set_text_border(Element text, Integer colour)"
      ],
      "description": "For the Text Element text, set the colour number of the colour used for the border of the whiteoutbox around the text, to be colour. If no whiteout border is required, then set the colour number to NO_COLOUR. Page 614Text String Element\fChapter 5 12dPL Library CallsNote: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2762"
    },
    {
      "names": [
        "Integer Get_text_border(Element text, Integer &colour)"
      ],
      "description": "For the Text Element text, get the colour number that is used for the border of the whiteout boxaround the text.  The whiteout border colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if there is no whiteout border. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2761"
    },
    {
      "names": [
        "Integer Set_text_border_style(Element text, Integer style)"
      ],
      "description": "For the Text Element text, set the the border style that is used for the border of the whiteout boxaround the text accordingly to Integer style. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the border style was successfully set.",
      "id": "3581"
    },
    {
      "names": [
        "Integer Get_text_border_style(Element text, Integer &style)"
      ],
      "description": "For the Text Element text, get the border style that is used for the border of the whiteout boxText String ElementPage 615\f12d Model Programming Language Manualaround the text.  The border style is returned as Integer style. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3578"
    },
    {
      "names": [
        "Integer Create_pipeline()"
      ],
      "description": "Create a pipeline. A function return value of zero indicates the pipeline was created successfully.",
      "id": "1264"
    },
    {
      "names": [
        "Integer Create_pipeline(Element seed)"
      ],
      "description": "Create an Element of type Pipeline, and set the colour, name, style etc.  of the new string to bethe same as those from the Element seed. A function return value of zero indicates the pipeline was created successfully.",
      "id": "1265"
    },
    {
      "names": [
        "Integer Set_pipeline_diameter(Element pipeline, Real diameter)"
      ],
      "description": "Set the diameter for pipeline. Type of the diameter must be Real. A function return value of zero indicates the diameter was successfully set.",
      "id": "1266"
    },
    {
      "names": [
        "Integer Get_pipeline_diameter(Element pipeline, Real &diameter)"
      ],
      "description": "Get the diameter from the Element pipeline. The type of diameter must be Real. A function return value of zero indicates the diameter was returned successfully.",
      "id": "1268"
    },
    {
      "names": [
        "Integer Set_pipeline_length(Element pipeline, Real length)"
      ],
      "description": "Set the length for pipeline. Type of the length must be Real. A function return value of zero indicates the length was successfully set.",
      "id": "1267"
    },
    {
      "names": [
        "Integer Get_pipeline_length(Element pipeline, Real &length)"
      ],
      "description": "Get the length from the Element pipeline. The type of length must be Real. A function return value of zero indicates the length was returned successfully.",
      "id": "1269"
    },
    {
      "names": [
        "Integer Set_pipeline_shape(Element pipeline, Integer shape)"
      ],
      "description": "Set shape shape of a pipeline Element pipelineA return value of zero indicates the function call was successful. List of values for shape0 no pipe nor culvert1 pipe2 culvert",
      "id": "3024"
    },
    {
      "names": [
        "Integer Get_pipeline_shape(Element pipeline, Integer &shape)"
      ],
      "description": "Get shape shape of a pipeline Element pipelineA return value of zero indicates the function call was successful. List of values for shape0 no pipe nor culvert1 pipe2 culvert",
      "id": "3025"
    },
    {
      "names": [
        "Integer Set_pipeline_justification(Element pipeline, Integer justification)"
      ],
      "description": "Set pipe culvert justification justification of a pipeline Element pipelineA return value of zero indicates the function call was successful. List of values for justification0 invert1 centre2 obvert",
      "id": "3026"
    },
    {
      "names": [
        "Integer Get_pipeline_justification(Element pipeline, Integer &justification)"
      ],
      "description": "Get pipe culvert justification justification of a pipeline Element pipelineA return value of zero indicates the function call was successful. List of values for justification0 invert1 centre2 obvert",
      "id": "3027"
    },
    {
      "names": [
        "Integer Set_pipeline_culvert(Element pipeline, Real w, Real h)"
      ],
      "description": "Set pipe culvert width w and height h of a pipeline Element pipelineA return value of zero indicates the function call was successful.",
      "id": "3028"
    },
    {
      "names": [
        "Integer Get_pipeline_culvert(Element pipeline, Real &w, Real &h)"
      ],
      "description": "Get pipe culvert width w and height h of a pipeline Element pipelineA return value of zero indicates the function call was successful.",
      "id": "3029"
    },
    {
      "names": [
        "Element Create_drainage(Integer num_verts, Integer num_pits)"
      ],
      "description": "Create an Element of type Drainage with room for num_verts vertices in the underlying string,and room for num_pits pits. The actual data of the drainage string is set after the string is created. If the drainage string could not be created, then the returned Element will be null.",
      "id": "490"
    },
    {
      "names": [
        "Element Create_drainage(Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_verts, Integer num_pits)"
      ],
      "description": "Create an Element of type drainage. The Element has num_verts vertices with (x,y,z) values for the vertices given in the Real arraysx[], y[] and z[], and the radii of the arcs for the segments between the vertices given by the Realradius array r[] and the Integer bulge array b[] (Bulge arrayb=1 for major arc >180 degrees, b =1 for minor arc < 180 degrees). Page 624Drainage String Element\fChapter 5 12dPL Library CallsThe drainage string also contains Integer num_pits pits. The function return value gives the actual Element created. If the drainage string could not be created, then the returned Element will be null.",
      "id": "489"
    },
    {
      "names": [
        "Integer Set_drainage_data(Element drain, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_verts)"
      ],
      "description": "Set the (x,y,z,r,b) data for the first num_verts vertices of the drainage Element drain. This function allows the user to modify a large number of vertices of the string in one call. The maximum number of vertices that can be set is given by the number of vertices in the string. The (x,y,z,r,b) values for each string vertex are given in the Real arrays x[], y[], z[], r[] and b[]. The number of vertices to be set is given by Integer num_vertsIf the Element drain is not of type Drainage, then nothing is modified and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new Drainage Elements but only modify existing DrainageElements.",
      "id": "2100"
    },
    {
      "names": [
        "Integer Get_drainage_data(Element drain, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer max_verts, Integer &num_verts)"
      ],
      "description": "Get the (x,y,z,r,b) data for the first max_verts points of the drainage Element drain. The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[], z[], r[] and b[]. The maximum number of vertices that can be returned is given by max_verts (usually the size ofthe arrays).  The vertex data returned starts at the first vertex and goes up to the minimum ofmax_verts and the number of vertices in the string. The actual number of vertices returned is returned by Integer num_vertsnum_verts <= max_vertsIf the Element drain is not of type Drainage, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "2097"
    },
    {
      "names": [
        "Integer Set_drainage_data(Element drain, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_verts, Integer start_vert)"
      ],
      "description": "For the drainage Element drain, set the (x,y,z,r,b) data for num_verts vertices, starting at vertexnumber start_vert. This function allows the user to modify a large number of vertices of the string in one call startingat vertex number start_vert rather than vertex one. The maximum number of vertices that can be set is given by the difference between the numberof vertices in the string and the value of start_vert. The (x,y,z,r,f) values for the string vertices are given in the Real arrays x[], y[], z[], r[] and b[]. The number of the first string vertex to be modified is start_vert. The total number of vertices to be set is given by Integer num_vertsIf the Element drain is not of type Drainage, then nothing is modified and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_vert of one gives the same result as the function Set_drainage_data(Elementdrain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer num_verts). (b) This function can not create new Drainage Elements but only modify existing DrainageElements.",
      "id": "2101"
    },
    {
      "names": [
        "Integer Get_drainage_data(Element drain, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_verts, Integer &num_verts, Integer start_vert)"
      ],
      "description": "For a drainage Element drain, get the (x,y,z,r,b) data for max_verts points starting at vertexnumber start_vert. This routine allows the user to return the data from a drainage string in user specified chunks. This is necessary if the number of vertices in the string is greater than the size of the arraysavailable to contain the information. The maximum number of vertices that can be returned is given by max_verts (usually the size ofthe arrays).  For this function, the vertex data returned starts at vertex number start_vert ratherthan vertex one. The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[], z[], r[] and b[]. The actual number of vertices returned is given by Integer num_vertsnum_verts <= max_vertsIf the Element drain is not of type Drainage, then num_verts is set to zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned. Page 626Drainage String Element\fChapter 5 12dPL Library CallsNoteA start_vert of one gives the same result as for the function Get_drainage_data(Elementdrain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer max_verts,Integer &num_verts).",
      "id": "2098"
    },
    {
      "names": [
        "Integer Set_drainage_data(Element drain, Integer i, Real x, Real y, Real z, Real r, Integer b)"
      ],
      "description": "Set the (x,y,z,r,f) data for the ith vertex of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. The radius value is given in Real r. The minor/major value is given in Integer b.  if b = 0, arc < 180 degrees; if b = 1, arc >180degrees. A function return value of zero indicates the data was successfully set.",
      "id": "2102"
    },
    {
      "names": [
        "Integer Get_drainage_data(Element drain, Integer i, Real &x, Real &y, Real &z, Real &r, Integer &b)"
      ],
      "description": "Get the (x,y,z,r,f) data for the ith vertex of the Element drain. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The radius value is returned in Real r. The minor/major value is returned in Integer b. If minor/major is 0, arc < 180. If minor/major is 1, arc > 180A function return value of zero indicates the data was successfully returned.",
      "id": "2099"
    },
    {
      "names": [
        "Integer Set_drainage_outfall_height(Element drain, Real ht)"
      ],
      "description": "Set the outfall height of the drainage Element drain to the value ht. A function return value of zero indicates the outfall height was successfully set.",
      "id": "491"
    },
    {
      "names": [
        "Integer Get_drainage_outfall_height(Element drain, Real &ht)"
      ],
      "description": "Get the outfall height of the drainage Element drain and return it as ht. A function return value of zero indicates the outfall height was successfully returned.",
      "id": "492"
    },
    {
      "names": [
        "Integer Set_drainage_ns_tin(Element drain, Tin tin)"
      ],
      "description": "For the drainage string drain, set the natural surface Tin to be tin. A function return value of zero indicates the tin was successfully set.",
      "id": "1275"
    },
    {
      "names": [
        "Integer Get_drainage_ns_tin(Element drain, Tin &tin)"
      ],
      "description": "For the drainage string drain, get the natural surface Tin and return it in tin. A function return value of zero indicates the tin was successfully returned.",
      "id": "1274"
    },
    {
      "names": [
        "Integer Set_drainage_fs_tin(Element drain, Tin tin)"
      ],
      "description": "For the drainage string drain, set the finished surface Tin to be tin. Page 628Drainage String Element\fChapter 5 12dPL Library CallsA function return value of zero indicates the tin was successfully set.",
      "id": "1273"
    },
    {
      "names": [
        "Integer Get_drainage_fs_tin(Element drain, Tin &tin)"
      ],
      "description": "For the drainage string drain, get the finished surface Tin and return it in tin. A function return value of zero indicates the tin was successfully returned.",
      "id": "1272"
    },
    {
      "names": [
        "Integer Set_drainage_flow(Element drain, Integer dir)"
      ],
      "description": "Set the flow direction of the drainage Element drainThe flow direction is given as Integer dir. dir = 1 means the flow direction is the same as the string direction.  That is, the flow direction isthe same as the chainage direction of the drainage string. dir = 0 means the flow direction is opposite to the string direction.  That is, the flow direction is theopposite direction to the chainage direction of the drainage string. See Drainage Definitions. A function return value of zero indicates the flow direction was successfully set.",
      "id": "539"
    },
    {
      "names": [
        "Integer Get_drainage_flow(Element drain, Integer &dir)"
      ],
      "description": "Get the flow direction of the drainage Element drain and return the flow direction dir. dir = 1 means the flow direction is the same as the string direction.  That is, the flow direction isthe same as the chainage direction of the drainage string. dir = 0 means the flow direction is opposite to the string direction.  That is, the flow direction is theopposite direction to the chainage direction of the drainage string. See Drainage Definitions. A function return value of zero indicates the flow direction was successfully returned.",
      "id": "540"
    },
    {
      "names": [
        "Integer Set_drainage_float(Element drain, Integer string_pit_float)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the value of the flag for the stringfloating pit to string_pit_float. Note: If a pit does not have a pit_float value set for the pit, then the pit uses the string_pit_floatvalue. A pit can be given its own pit_float value using the call Set_drainage_pit_float(Elementdrain,Integer pit,Integer pit_float). If string_pit_float = 1, the top of a pit automatically takes its level (height) from the finishedsurface tin for the drainage string drain. If string_pit_float = 0, the top of the pit level is fixed. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the string_pit_float was successfully set.",
      "id": "1271"
    },
    {
      "names": [
        "Integer Get_drainage_float(Element drain, Integer &string_pit_float)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the value of the flag for the stringfloating pit in string_pit_float. Note: If a pit does not have a pit_float value set for the pit, then the pit uses the string_pit_floatvalue. A pit can be given its own pit_float value using the call Set_drainage_pit_float(Elementdrain,Integer pit,Integer pit_float). If string_pit_float = 1, the top of a pit automatically takes its level (height) from the finishedsurface tin for the drainage string drain. If string_pit_float = 0, the top of the pit level is fixed. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the string_pit_float value was successfully returned.",
      "id": "1270"
    },
    {
      "names": [
        "Integer Get_drainage_trunk(Element drain, Element &trunk)"
      ],
      "description": "For the drainage string drain, determine if drain flows into a trunk string. If there is a trunk string then it is returned as trunk and the function return value is 0.  If a trunkexists, then drain is a branch string. If there is no trunk string and the downstream end of drain is an outlet then the function returnvalue is 44. For all other cases, the function return value is non zero but not 44. See Drainage Definitions.",
      "id": "1444"
    },
    {
      "names": [
        "Integer Drainage_default_grading_to_end(Element drain, Integer pipe_num)"
      ],
      "description": "For the Element drain, which must be of type Drainage, grade from pipe number pipe_num tothe end of the string using the minimum grade, cover etc for the drain. The drainage flow direction is essential to the grading algorithm. A function return value of zero indicates the string was successfully graded.",
      "id": "1700"
    },
    {
      "names": [
        "Integer Drainage_grade_to_end(Element drain, Integer pipe_num, Real slope)"
      ],
      "description": "For the Element drain, which must be of type Drainage, grade from pipe number pipe_num tothe end of the string using the slope slope where the units for slope are 1:in.  That is, 1 vertical :inslope horizontalThe drainage flow direction is essential to the grading algorithm. A function return value of zero indicates the string was successfully graded.",
      "id": "1701"
    },
    {
      "names": [
        "Integer Set_drainage_sewer(Element drainage, Integer type)"
      ],
      "description": "Set the drainage sewer type of the drainage string Element drainage with the Integer type. A return value of zero indicates the function call was successful. The list of values for drainage sewer type0 Drainage1 Sewer2 Water Supply3 All",
      "id": "2954"
    },
    {
      "names": [
        "Integer Get_drainage_sewer(Element drainage, Integer &type)"
      ],
      "description": "Get the drainage sewer type of the drainage string Element drainage to the Integer type. Drainage String ElementPage 631\f12d Model Programming Language ManualA return value of zero indicates the function call was successful. The list of values for drainage sewer type0 Drainage1 Sewer2 Water Supply3 All",
      "id": "2955"
    },
    {
      "names": [
        "Integer Get_drainage_pits(Element drain, Integer &npits)"
      ],
      "description": "For the Element drain, which must of type Drainage, get the number of pits for the string andreturn it in npits.  The number of pipes in npits - 1. The i\u2019th pipe goes from the i\u2019th pit to the (i+1)\u2019th pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "530"
    },
    {
      "names": [
        "Integer Set_drainage_pit(Element drain, Integer p, Real x, Real y, Real z)"
      ],
      "description": "Set the x,y & z for the pth pit of the string Element drain. The x coordinate of the pit is given as Real x. The y coordinate of the pit is given as Real y. The z coordinate of the pit is given as Real z. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "532"
    },
    {
      "names": [
        "Integer Get_drainage_pit(Element drain, Integer p, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the x,y & z for the pth pit of the string Element drain. The x coordinate of the pit is returned in Real x. The y coordinate of the pit is returned in Real y. The z coordinate of the pit is returned in Real z (the cover level). If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "531"
    },
    {
      "names": [
        "Integer Get_drainage_pit_area(Element drain, Integer p, Integer elev, Real &sump_area, Dynamic_Real Page 634 Drainage String Element Chapter 5 12dPL Library Calls &depth-elev, Dynamic_Real &area, Integer &ret_num)"
      ],
      "description": "Get the plan area for the pth pit of the string Element drain at the sump [1] for all pits and \\, top ofchamber[2] and bottom of riser[3] for extended pits. Integer Get_drainage_pit_area(Element element,Integer pit,Integer elev,Real&sump_area,Dynamic_Real &de,Dynamic_Real &area,Integer &ret_num)elev set to a value other than zero will return elev data Dynamic_Real &depth-elevsump_area returns the same value as area[1].  This is for easy access when ret_num = 1. depth-elev return a Dynamic_Real with either depth or elevation values as specified in Integerelev above. area returns area values at the level specified in depth-elevret_num return the number of values in the Dynamic_Reals above.  For extended nodes the areachanges with elevation and the ret_num will be greater than 1If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3796"
    },
    {
      "names": [
        "Integer Set_drainage_pit_name(Element drain, Integer p, Text name)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the name for the pth pit to name. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "513"
    },
    {
      "names": [
        "Integer Get_drainage_pit_name(Element drain, Integer p, Text &name)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the name for the pth pit and return itin name. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "507"
    },
    {
      "names": [
        "Integer Set_drainage_pit_colour(Element drain, Integer pit, Integer colour)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the colour of the pth pit to colournumber colour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2781"
    },
    {
      "names": [
        "Integer Get_drainage_pit_colour(Element drain, Integer p, Integer &colour)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the colour number of the pth pit incolour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2780"
    },
    {
      "names": [
        "Integer Set_drainage_pit_diameter(Element drain, Integer p, Real diameter)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the diameter for the pth pit to diameter. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "511"
    },
    {
      "names": [
        "Integer Get_drainage_pit_diameter(Element drain, Integer p, Real &diameter)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the diameter of the pth pit indiameter. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "505"
    },
    {
      "names": [
        "Integer Set_drainage_pit_symbol_angle(Element drain, Integer p, Real angle)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the angle for the pth pit to angle.  angleis used for both the physical pit, and a symbol used for the pit in a Drainage Plan Plot. angle is in radians and measured in the counter clockwise direction from the x-axis. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2872"
    },
    {
      "names": [
        "Integer Get_drainage_pit_symbol_angle(Element drain, Integer pit, Real &angle)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the angle of the pth pit in angle. angle is used for both the physical pit, and a symbol used for the pit in a Drainage Plan Plot. angle is in radians and measured in the counter clockwise direction from the x-axis. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "2871"
    },
    {
      "names": [
        "Integer Set_drainage_pit_width(Element drain, Integer p, Real width)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the width for the pth pit to width. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2876"
    },
    {
      "names": [
        "Integer Get_drainage_pit_width(Element drain, Integer p, Real &width)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the width of the pth pit in width. See Drainage Pit Definitions. Drainage String ElementPage 637\f12d Model Programming Language ManualIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "2877"
    },
    {
      "names": [
        "Integer Set_drainage_pit_length(Element drain, Integer p, Real length)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the length for the pth pit to length. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2878"
    },
    {
      "names": [
        "Integer Get_drainage_pit_length(Element drain, Integer p, Real &length)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the length of the pth pit in length. See Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "2879"
    },
    {
      "names": [
        "Integer Set_drainage_pit_float_sump(Element drain, Integer pit, Integer sump_float)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pit number pit, set the flag for thefloating sump invert level to sump_float. If sump_float = 1, the invert level of the sump automatically moves to be the invert level of thelowest pipe coming into the pit, plus the sump offset (which is defined by an attribute). If sump_float = 0, the invert level of the sump is fixed and is explicitly set by the callSet_drainage_pit_sump_level(Element drain,Integer pit,Real level). If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the floating sump level flag was successfully set.",
      "id": "2786"
    },
    {
      "names": [
        "Integer Get_drainage_pit_float_sump(Element element, Integer pit, Integer &sump_float)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pit number pit, return the flag for thefloating sump invert level as sump_float. If sump_float = 1, the invert level of the sump automatically moves to be the invert level of thelowest pipe coming into the pit, plus the sump offset (which is defined by an attribute). If sump_float = 0, the invert level of the sump is fixed and is explicitly set by the callSet_drainage_pit_sump_level(Element drain,Integer pit,Real level). If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the floating sump level flag was successfully returned.",
      "id": "2787"
    },
    {
      "names": [
        "Integer Set_drainage_pit_sump_level(Element drain, Integer pit, Real level)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pit number pit, set the pit sumpinvert level to level. This value is only used when the pit floating sump level flag is set to 1.  SeeSet_drainage_pit_float_sump(Element drain,Integer pit,Integer sump_float). See Drainage Pit Cross Section. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the sump invert level was successfully set.",
      "id": "2788"
    },
    {
      "names": [
        "Integer Get_drainage_pit_sump_level(Element drain, Integer pit, Real &level)"
      ],
      "description": "invert of the sumpFor the Element drain, which must be of type Drainage, and pit number pit, return the invertlevel of the sump as level. See Drainage Pit Cross Section. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the sump invert level was successfully returned.",
      "id": "2789"
    },
    {
      "names": [
        "Integer Set_drainage_pit_thickness(Element drain, Integer p, Real bottom, Real front, Real back, Real left, Real right)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the thicknesses for the pth pit tobottom, front back, left and right wherebottom is the thickness of the bottom of the pitfront is the thickness for a round pit and the front thickness for a rectangular pitback is the back thickness for a rectangular pit and not used for a round pitleft is the left thickness for a rectangular pit and not used for a round pitright is the right thickness for a rectangular pit and not used for a round pitSee Drainage Pit Definitions. CAUTION: The Set_drainage_pit_type() and Set_drainage_pit_diameter() call will set thepit thicknesses to the drainage. 4d values. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2870"
    },
    {
      "names": [
        "Integer Get_drainage_pit_thickness(Element drain, Integer p, Real &bottom, Real &front, Real &back, Real &left, Real &right)"
      ],
      "description": "For the Element drain, which must of type Drainage, get the thicknesses for the pth pit andreturn them in bottom, front back, left and right wherebottom is the thickness of the bottom of the pitfront is the thickness for a round pit, and the front thickness for a rectangular pitback is the back thickness for a rectangular pit and not used for a round pitleft is the left thickness for a rectangular pit and not used for a round pitright is the right thickness for a rectangular pit and not used for a round pitSee Drainage Pit Definitions. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the thicknesses was successfully returned.",
      "id": "2869"
    },
    {
      "names": [
        "Integer Set_drainage_use_connection_points(Element drain, Integer use_connection_points)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set whether pit connection points areused or not. If use_connection_points = 0, pit connection points are not used. If use_connection_points = 1, pit connection points are used. If connection points are to be used and there are no custom connection points defined for the pitin the drainage. 4d file, then every pipe goes to the centre of the closest rectangular side, or ontoPage 640Drainage String Element\fChapter 5 12dPL Library Callsthe circle for circular pits. If connection points are to be used and there are custom connection points defined for the pit inthe drainage. 4d file, then the pipes go to the closest connection point. See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the use_connection_points flag was successfully set.",
      "id": "2790"
    },
    {
      "names": [
        "Integer Get_drainage_use_connection_points(Element drain, Integer &use_connection_points)"
      ],
      "description": "For the Element drain, return the pit connection point mode for the string inuse_connection_points. If use_connection_points = 0, pit connection points are not used for drain. If use_connection_points = 1, pit connection points are used for drain. See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the use_connection_points flag was successfullyreturned.",
      "id": "2791"
    },
    {
      "names": [
        "Integer Set_drainage_pit_connection_points_mode(Element drainage, Integer pit, Integer mode)"
      ],
      "description": "Set connection points mode of the drainage string Element drainage at pit index pit to Integermode. A return value of zero indicates the function call was successful. The list of values for connection points mode:0 Centre1 Points2 Perimeter3 Unrestricted",
      "id": "2881"
    },
    {
      "names": [
        "Integer Get_drainage_pit_connection_points_mode(Element drainage, Integer pit, Integer &mode)"
      ],
      "description": "Get connection points mode of the drainage string Element drainage at pit index pit. A return value of zero indicates the function call was successful. The list of values for connection points mode0 Centre1 Points2 Perimeter3 Unrestricted",
      "id": "2882"
    },
    {
      "names": [
        "Integer Set_drainage_pit_symbol_angle_mode(Element drainage, Integer pit, Integer mode)"
      ],
      "description": "Set the pit symbol angle mode of the drainage string Element drainage at pit index pit to Integermode. A return value of zero indicates the function call was successful. The list of values for pit symbol angle mode0 Floating1 Setout String2 Manual",
      "id": "2884"
    },
    {
      "names": [
        "Integer Get_drainage_pit_symbol_angle_mode(Element drainage, Integer pit, Integer &mode)"
      ],
      "description": "Get the pit symbol angle mode of the drainage string Element drainage at pit index pit. A return value of zero indicates the function call was successful. The list of values for pit symbol angle mode0 Floating1 Setout String2 Manual",
      "id": "2883"
    },
    {
      "names": [
        "Integer Set_drainage_pit_2d_connection_mode(Element drainage, Integer pit, Integer mode)"
      ],
      "description": "Set the pit 2d connection mode of the drainage string Element drainage at pit index pit to Integermode. A return value of zero indicates the function call was successful. The list of values for pit 2d connection mode0 Not set1 Grate2 Sump3 Channel4 None",
      "id": "2885"
    },
    {
      "names": [
        "Integer Get_drainage_pit_2d_connection_mode(Element drainage, Integer pit, Integer &mode)"
      ],
      "description": "Get the pit 2d connection mode of the drainage string Element drainage at pit index pit. A return value of zero indicates the function call was successful. The list of values for pit 2d connection mode0 Not set1 Grate2 Sump3 Channel4 None",
      "id": "2886"
    },
    {
      "names": [
        "Integer Get_drainage_pit_connection(Element drainage, Integer mh_index, Integer &mh_con_type, Element &con_string, Integer &con_mh_index, Integer &con_type)"
      ],
      "description": "Get the pit connection information for the drainage string Element drainage at manhole indexmh_index. A return value of zero indicates the function call was successful. Drainage String ElementPage 643\f12d Model Programming Language Manual",
      "id": "2889"
    },
    {
      "names": [
        "Integer Drainage_Adjust_Pit_Connection_Points(Element drain, Integer pit)"
      ],
      "description": "For the Element drain, which must be of type Drainage, recalculate the pit connection points forpit number pit. Note that this needs to be done if the pit was moved or changed.  For example, changing thediameter of the pit. See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the connection points were successfully adjusted.",
      "id": "2792"
    },
    {
      "names": [
        "Integer Drainage_Adjust_Pit_Connection_Points_All(Element drain)"
      ],
      "description": "For the Element drain, which must be of type Drainage, recalculate the pit connection points forall the pits in drain. Note that this needs to be done if pits were moved or changed.  For example, changing thediameter of the pits. See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the connection points were successfully adjusted.",
      "id": "2793"
    },
    {
      "names": [
        "Integer Get_drainage_pit_connection_points(Element drain, Integer pit, Real &lx, Real &ly, Real &rx, Real &ry)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the pit connection points for pitnumber pit. The coordinates of the pit connection point for the pipe that comes into the pit from the left arereturned as (lx,ly). The coordinates of the pit connection point for the pipe that goes out of the pit to the right arereturned as (rx,ry). See Drainage Definitionsfor connection points. Page 644Drainage String Element\fChapter 5 12dPL Library CallsIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the connection points were successfully returned.",
      "id": "2847"
    },
    {
      "names": [
        "Integer Set_drainage_pit_inverts(Element drain, Integer p, Real lhs, Real rhs)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the invert levels of the pipes of drainentering/leaving the pth pit. The invert level of the pipe entering/leaving the left side of the pit is set to Real lhs. The invert level of the pipe entering/leaving the right side of the pit is set to Real rhs. See Drainage Pipe Definitions for invert levels. Note: this is setting the invert levels of the pipes entering/leaving the pth pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "514"
    },
    {
      "names": [
        "Integer Get_drainage_pit_inverts(Element drain, Integer p, Real &lhs, Real &rhs)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the invert levels of the pipes of drainentering/leaving the pth pit. The invert level of the pipe entering/leaving the left side of the pit is returned in lhs. The invert level of the pipe entering/leaving the right side of the pit is returned in rhs. See Drainage Pipe Definitions for invert levels. Note: this is getting the invert levels of the pipes entering/leaving the pth pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "508"
    },
    {
      "names": [
        "Integer Get_drainage_pit_angle(Element drain, Integer p, Real &ang)"
      ],
      "description": "For the Element drain, which must of type Drainage, get the angle between pipes of drainentering and leaving the pth pit, and return the angle as ang. Note: this is not the angle of the drainage pit itself which is returned by the callGet_drainage_pit_symbol_angle(Element drain,Integer pit,Real &angle). If drain is not an Element of type Drainage then a non zero function return code is returned. Drainage String ElementPage 645\f12d Model Programming Language ManualA function return value of zero indicates the data was successfully returned.",
      "id": "517"
    },
    {
      "names": [
        "Integer Get_drainage_pit_angle(Element drain, Integer p, Real &ang, Integer trunk)"
      ],
      "description": "For the Element drain, which must of type Drainage, for the pth pit, get the angle betweenincoming pipe and the outgoing pipe, and return it as ang.  ang is in radians. If the drainage string is using connection points, the direction of the pipes at the connectionpoints are used. If the drainage string is NOT using connection points, the direction of the pipes at the pit centreare used. trunk controls the action to be taken when the pit is at the downstream end of the drainagestring. If trunk in non-zero, then a trunk line will be searched for to obtain the outgoing pipe.  If no trunkline is found, ang = 0. If trunk is zero, ang = 0. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "1294"
    },
    {
      "names": [
        "Integer Get_drainage_pit_chainage(Element drain, Integer p, Real &chainage)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the chainage for the pth pit inchainage. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "520"
    },
    {
      "names": [
        "Integer Get_drainage_pit_chainages(Element drain, Integer pit, Real &ch_lcp, Real &ch_centre, Real &ch_rcp)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for pit number pit, return thechainages of the pit connection points and the chainage of the centre of the pit. The chainage of the pit connection point for the pipe that comes into the pit from the left isreturned as ch_lcp. The chainage of the pit connection point for the pipe that goes out of the pit to the right isPage 646Drainage String Element\fChapter 5 12dPL Library Callsreturned as ch_rcp. The chainage of the centre of the pit is returned as ch_centre. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the chainages were successfully returned.",
      "id": "2848"
    },
    {
      "names": [
        "Integer Get_drainage_pit_shape(Element drain, Integer pit, Integer mode, Element &super_inside, Element &super_outside)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the plan shape of the inside of pitnumber pit as the super string super_inside and the plan shape of the outside of the pit assuper_outside. So for a circular pit with a wall thickness, a super string representing a circle of the diameter ofthe pit is the super_inside and a circle of (diameter + 2*thickness) is the super_outside. If mode = 0, the shapes are given the z-value of the bottom of the pit (sump bottom). If mode = 1, the shapes are given the z-value of the invert of the sump. If mode = 2, the shapes are given the z-value of the grate. If mode = 3, the shapes are given the z-value of the cover. mode = 3 cover levelpit covergratedepth of pitmode = 2 grate levelmode = 1 sump invertmode = 0 bottom of pitIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the shapes were successfully returned.",
      "id": "2849"
    },
    {
      "names": [
        "Integer Set_drainage_pit_float(Element drain, Integer pit, Integer pit_float)"
      ],
      "description": "Drainage String ElementPage 647\f12d Model Programming Language ManualFor the Element drain, which must be of type Drainage, and pit number pit, set the flag for thefloating pit level to pit_float. If pit_float = 1, the top of the pit automatically takes its level (height) from the finished surface tinfor the drainage string drain. If pit_float = 0, the top of the pit level is fixed. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the pit_float value was successfully set.",
      "id": "1277"
    },
    {
      "names": [
        "Integer Get_drainage_pit_float(Element drain, Integer pit, Integer &pit_float)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pit number pit, return the flag for thefloating pit level as pit_float. If pit_float = 1, the top of the pit automatically takes its level (height) from the finished surface tinfor the drainage string drain. If pit_float = 0, the top of the pit level is fixed. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the pit_float value was successfully returned.",
      "id": "1276"
    },
    {
      "names": [
        "Integer Set_drainage_pit_hgl(Element drain, Integer p, Real hgl)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the hgl level for the centre of the pthpit of the string to hgl. If hgl is null then the hgl for the surface is not drawn. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "1241"
    },
    {
      "names": [
        "Integer Get_drainage_pit_hgl(Element drain, Integer p, Real &hgl)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the hgl level for centre of the pth pitand return it in hgl. If hgl is null then the hgl for the surface is not drawn. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned. Page 648Drainage String Element\fChapter 5 12dPL Library Calls",
      "id": "1242"
    },
    {
      "names": [
        "Integer Set_drainage_pit_surface_hgl(Element element, Integer pit, Real surface_hgl)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the surface hgl level for the centre ofthe pth pit of the string, to surface_hgl. If surface_hgl is null then the hgl for the surface is not drawn. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2785"
    },
    {
      "names": [
        "Integer Get_drainage_pit_surface_hgl(Element element, Integer pit, Real &surface_hgl)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the surface hgl level for the centre ofthe pth pit of the string, and return it in surface_hgl. If surface_hgl is null then the hgl for the surface is not drawn. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2784"
    },
    {
      "names": [
        "Integer Set_drainage_pit_hgls(Element drain, Integer p, Real lhs, Real rhs)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the hgl levels of the pipes of drainentering/leaving the pth pit. The hgl level of the pipe entering/leaving the left side of the pit is given as Real lhs. The hgl level of the entering/leaving right side of the pit is given as Real rhs. Note: this is setting the hgl levels for the pipes entering/leaving the pth pit, not the hgl of the pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "538"
    },
    {
      "names": [
        "Integer Get_drainage_pit_hgls(Element drain, Integer p, Real &lhs, Real &rhs)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the hgl levels of the pipes of drainentering/leaving the pth pit. The hgl level of the pipe entering/leaving the left side of the pit is returned in Real lhs. The hgl level of the pipe entering/leaving the right side of the pit is returned in Real rhs. Note: this is getting the hgl levels of the pipes entering/leaving the pth pit, not the hgl of the pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "535"
    },
    {
      "names": [
        "Integer Set_drainage_pit_road_chainage(Element drain, Integer p, Real chainage)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the road chainage for the pth pit tochainage. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "515"
    },
    {
      "names": [
        "Integer Get_drainage_pit_road_chainage(Element drain, Integer p, Real &chainage)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the road chainage for the pth pitin chainage. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "509"
    },
    {
      "names": [
        "Integer Set_drainage_pit_road_name(Element drain, Integer p, Text name)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the road name for the pth pit toname. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "516"
    },
    {
      "names": [
        "Integer Get_drainage_pit_road_name(Element drain, Integer p, Text &name)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the road name for the pth pit inname. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "510"
    },
    {
      "names": [
        "Integer Set_drainage_pit_type(Element drain, Integer p, Text type)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the type for the pth pit to type. If the pit type type is in the drainge. 4d file, then the call also sets the values for the pit to be thosegiven in the drainage. 4d file for the pit type. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "512"
    },
    {
      "names": [
        "Integer Get_drainage_pit_type(Element drain, Integer p, Text &type)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the type for the pth pit in type. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "506"
    },
    {
      "names": [
        "Integer Get_drainage_pit_branches(Element drain, Integer p, Dynamic_Element &branches)"
      ],
      "description": "For the Element drain, which must be of type Drainage, this function returns a list of thebranches (each branch is a Drainage string) that flow into the pth pit of drain.  The list ofbranches is returned in the Dynamic_Element branches. Note: a branch is defined as a drainage string that flows into a non-outlet pit of another drainagestring.  Thus the flow direction of the drainage string is important. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "1443"
    },
    {
      "names": [
        "Integer Get_drainage_pit_depth(Element drain, Integer p, Real &depth)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the depth of the pth pit in depth. If drain is not an Element of type Drainage then a non zero function return code is returned. See for the def inion of pit depth. A function return value of zero indicates the data was successfully returned.",
      "id": "519"
    },
    {
      "names": [
        "Integer Get_drainage_pit_drop(Element drain, Integer p, Real &drop)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the drop through the pth pit indrop. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "518"
    },
    {
      "names": [
        "Integer Get_drainage_pit_ns(Element drain, Integer n, Real &ns_ht)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the height from the naturalsurface tin at the location of the centre of the nth pit in ns_ht. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "521"
    },
    {
      "names": [
        "Integer Get_drainage_pit_fs(Element drain, Integer n, Real &fs_ht)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the height from the finishedsurface tin at the location of the centre of the nth pit in fs_ht. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "522"
    },
    {
      "names": [
        "Integer Set_drainage_pit_extended(Element e, Integer p, Integer extended, Integer adjust_pit_con_points)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the extennded type for the pth pit toextended.  The list of valid type is0 - not extended1 - extended in the width direction2 - extended in the length directionIf adjust_pit_con_points is not zero, recalculate the pit connection points for the pit after theextended type being set. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3965"
    },
    {
      "names": [
        "Integer Get_drainage_pit_extended(Element e, Integer p, Integer &extended)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the extennded type for the pth pit inextended.  The list of valid type is0 - not extended1 - extended in the width direction2 - extended in the length directionIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3966"
    },
    {
      "names": [
        "Integer Set_drainage_pit_base_angle(Element e, Integer p, Real angle, Integer adjust_pit_con_points)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the base angle for the pth pit to angle. If adjust_pit_con_points is not zero, recalculate the pit connection points for the pit after theangle being set. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3967"
    },
    {
      "names": [
        "Integer Get_drainage_pit_base_angle(Element e, Integer p, Real &angle)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the base angle for the pth pit inangle. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3968"
    },
    {
      "names": [
        "Integer Set_drainage_pit_base_angle_mode(Element e, Integer p, Integer base_angle_mode, Integer adjust_pit_con_points)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the base angle mode for the pth pit tobase_angle_mode. If adjust_pit_con_points is not zero, recalculate the pit connection points for the pit after theangle being set. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3969"
    },
    {
      "names": [
        "Integer Get_drainage_pit_base_angle_mode(Element e, Integer p, Integer &base_angle_mode)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the base angle mode for the pth pit inbase_angle_mode. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3970"
    },
    {
      "names": [
        "Integer Set_drainage_pit_base_height(Element e, Integer p, Real pit_base_height)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the base height for the pth pit topit_base_height. Page 654Drainage String Element\fChapter 5 12dPL Library CallsIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3971"
    },
    {
      "names": [
        "Integer Get_drainage_pit_base_height(Element e, Integer p, Real &pit_base_height)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the base height for the pth pit inpit_base_height. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3972"
    },
    {
      "names": [
        "Integer Set_drainage_pit_base_thickness_top(Element e, Integer p, Real pit_base_thickness_top)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the base thickness top for the pth pit topit_base_thickness_top. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3973"
    },
    {
      "names": [
        "Integer Get_drainage_pit_base_thickness_top(Element e, Integer p, Real &pit_base_thickness_top)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the base thickness top for the pth pitin pit_base_thickness_top. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3974"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_thickness(Element e, Integer p, Real pit_riser_thickness, Real Drainage String Element Page 655 12d Model Programming Language Manual pit_riser_thickness_back, Real pit_riser_thickness_left, Real pit_riser_thickness_right)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the riser thicknesses for the pth pit topit_riser_thickness, pit_riser_thickness_back, pit_riser_thickness_left,pit_riser_thickness_right. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3975"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_thickness(Element e, Integer p, Real &pit_riser_thickness, Real &pit_riser_thickness_back, Real &pit_riser_thickness_left, Real &pit_riser_thickness_right)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the riser thicknesses for the pth pit inpit_riser_thickness, pit_riser_thickness_back, pit_riser_thickness_left,pit_riser_thickness_right. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3976"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser(Element e, Integer p, Integer riser)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the active flag for the riser for the pth pitto riser. (1 active, 0 not active)If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3977"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser(Element e, Integer p, Integer &riser)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the active flag for the riser for the pthpit in riser. (1 active, 0 not active)If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3978"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_extended(Element e, Integer p, Integer riser_extended)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the extennded type for the riser for thepth pit to extended.  The list of valid type is0 - not extended1 - extended in the width direction2 - extended in the length directionIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3979"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_extended(Element e, Integer p, Integer &riser_extended)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the extennded type for the riser forthe pth pit in extended.  The list of valid type is0 - not extended1 - extended in the width direction2 - extended in the length directionIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3980"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_colour(Element e, Integer p, Integer colour)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the colour for the riser for the pth pit tocolour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3981"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_colour(Element e, Integer p, Integer &colour)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the colour for the riser for the pth pitin colour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3982"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_diameter(Element e, Integer p, Real pit_riser_diameter)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the diameter for the riser for the pth pitto pit_riser_diameter. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3983"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_diameter(Element e, Integer p, Real &pit_riser_diameter)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the diameter for the riser for the pthpit in pit_riser_diameter. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3984"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_width(Element e, Integer p, Real pit_riser_width)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the width for the riser for the pth pit topit_riser_widthIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3985"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_width(Element e, Integer p, Real &pit_riser_width)"
      ],
      "description": "Page 658Drainage String Element\fChapter 5 12dPL Library CallsFor the Element drain, which must of type Drainage, return the width for the riser for the pth pit inpit_riser_width. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3986"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_offset_xy(Element e, Integer p, Real pit_riser_offset_x, Real pit_riser_offset_y)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the x-y offsets for the riser for the pth pitto pit_riser_offset_x, pit_riser_offset_yIf drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3987"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_offset_xy(Element e, Integer p, Real &pit_riser_offset_x, Real &pit_riser_offset_y)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the x-y offsets for the riser for the pthpit in pit_riser_offset_x, pit_riser_offset_y. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3988"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_manhole_types(Integer &num_types)"
      ],
      "description": "Get the number of pit (manhole, maintenance hole) types from the drainage. 4d file and return thenumber in num_types. A function return value of zero indicates the data was successfully returned.",
      "id": "2077"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_type(Integer i, Text &type)"
      ],
      "description": "Get the name of the i\u2019th manhole type from the drainage. 4d file and return the name in type. A function return value of zero indicates the data was successfully returned.",
      "id": "2078"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_length(Text type, Real &length)"
      ],
      "description": "For the manhole of type type from the drainage. 4d file, return the length as given by the keyword\"mhsize\" in length (the length and width are given by the keyword \"mhsize\"). If there is no such manhole type, -1 is returned as the function return value. If the length does not exist for the manhole type type, -2 is returned as the function return value. A function return value of zero indicates the data was successfully returned.",
      "id": "2079"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_width(Text type, Real &width)"
      ],
      "description": "For the manhole of type type from the drainage. 4d file, return the width as given by the keyword\"mhsize\" in width (the length and width are given by the keyword \"mhsize\"). If there is no such manhole type, -1 is returned as the function return value. If the width does not exist for manhole type type, -2 is returned as the function return value. A function return value of zero indicates the data was successfully returned.",
      "id": "2080"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_description(Text type, Text &description)"
      ],
      "description": "Get the description of the manhole of type type from the drainage. 4d file and return thedescription in description. If there is no such manhole type, -1 is returned as the function return value. If the description does not exist for manhole type type, -2 is returned as the function return value. A function return value of zero indicates the data was successfully returned.",
      "id": "2081"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_notes(Text type, Text &notes)"
      ],
      "description": "Get the notes of the manhole of type type from the drainage. 4d file and return the notes innotes. If there is no such manhole type, -1 is returned as the function return value. If notes do not exist for manhole type type, -2 is returned as the function return value. A function return value of zero indicates the data was successfully returned.",
      "id": "2082"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_group(Text type, Text &group)"
      ],
      "description": "Get the group of the manhole of type type from the drainage. 4d file and return the group ingroup. If there is no such manhole type, -1 is returned as the function return value. If group does not exist for manhole type type, -2 is returned as the function return value. A function return value of zero indicates the data was successfully returned.",
      "id": "2083"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_capacities(Text type, Real &multi, Real &fixed, Real &percent, Real &coeff, Real &power)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type return the values for the generic InletDrainage String ElementPage 661\f12d Model Programming Language Manualcapacities from the file for:cap_multicap_fixedcap_percentcap_coeffcap_power// if undefined the default is 1// if undefined the default is 0// if undefined the default is 0// if undefined the default is 0// if undefined the default is 1A function return value of zero indicates the data was successfully returned.",
      "id": "2084"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_sag_curves(Text type, Integer &n)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, get the number of sag capacity curves(cap_curve_sag) and return the number in n. A function return value of zero indicates the number was successfully returned.",
      "id": "2085"
    },
    {
      "names": [
        "Integer Get_drainage_sag_curve_name(Text type, Text &name)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the name of the sag capacitycurve (cap_curve_sag) in name. A function return value of zero indicates the data was successfully returned.",
      "id": "2086"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_capacities_sag(Text type, Real &multi, Real &fixed, Real &percent, Real &coeff, Real &power)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the sag capacity curve(cap_curve_sag) values from the file for:cap_multicap_fixedcap_percentcap_coeffcap_power// if undefined the default is 1// if undefined the default is 0// if undefined the default is 0// if undefined the default is 0// if undefined the default is 1A function return value of zero indicates the data was successfully returned.",
      "id": "2087"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_sag_curve_coords(Text type, Integer &n)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the number of coordinates in thesag capacity curve (cap_curve_sag) in n. Note - n may be 0. A function return value of zero indicates the number was successfully returned.",
      "id": "2088"
    },
    {
      "names": [
        "Integer Get_drainage_sag_curve_coords(Text type, Real Depth[], Real Qin[], Integer nmax, Integer &num)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the coordinates for the sagcapacity curve (cap_curve_sag) in Depth[] and Qin[]. nmax is the size of the arrays Depth[] and Qin[], and num returns the actual number ofcoordinates. A function return value of zero indicates the coordinates were successfully returned.",
      "id": "2089"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_grade_curves(Text type, Integer &n)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, get the number of grade curves(cap_curve_grade) and return the number in n. A function return value of zero indicates the number was successfully returned.",
      "id": "2090"
    },
    {
      "names": [
        "Integer Get_drainage_grade_curve_name(Text type, Integer i, Text &name)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the name of the i\u2019th grade curve(cap_curve_grade) in name. A function return value of zero indicates the name was successfully returned.",
      "id": "2091"
    },
    {
      "names": [
        "Integer Get_drainage_grade_curve_threshold(Text type, Text name, Integer &by_grade, Real &road_grade, Integer &by_xfall, Real &road_xfall)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, and the capacity on grade curve calledname:if the keyword \"road_grade\" exists then by_grade is set to 1 and the road on grade value isreturned in road_grade.  Otherwise by_grade is set to 0. if the keyword \"road_crossfall\" exists then by_crossfall is set to 1 and the road crossfall value isreturned in road_xfall.  Otherwise by_xfall is set to 0. A function return value of zero indicates the values were successfully returned.",
      "id": "2092"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_capacities_grade(Text type, Text name, Real &multi, Real &fixed, Real &percent, Real &coeff, Real &power)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, and the capacity on grade curve calledname, return the sag capacity curve (cap_curve_grade) values from the file for:cap_multicap_fixedcap_percentcap_coeffcap_power// if undefined the default is 1// if undefined the default is 0// if undefined the default is 0// if undefined the default is 0// if undefined the default is 1A function return value of zero indicates the data was successfully returned.",
      "id": "2093"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_grade_curve_coords(Text type, Text name, Integer &n)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, and the capacity on grade curve calledname, return the number of coordinates in the on grade capacity curve (cap_curve_grade) in n. Note - n may be 0. A function return value of zero indicates the number was successfully returned.",
      "id": "2094"
    },
    {
      "names": [
        "Integer Get_drainage_grade_curve_coords(Text type, Text name, Real Qa[], Real Qin[], Integer nmax, Integer &n)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, and the capacity on grade curve calledname, return the coordinates for the on grade capacity curve (cap_curve_grade) in Qa[] andQin[]. nmax is the size of the arrays Qa[] and Qin[], and num returns the actual number of coordinates. A function return value of zero indicates the coordinates were successfully returned.",
      "id": "2095"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_config(Text type, Text &cap_config)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the value of the keyword\"cap_config\" in cap_config. The value of cap_config must be:\"g\" - for an on grade pit\"s\" - for an sag pitor\"m\" - for a manhole sealed pit. If the value of cap_config is not \"g\", \"s\" or \"m\" then a non zero function return value is returned. A function return value of zero indicates the value was successfully returned.",
      "id": "2103"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_diam(Text type, Real &diameter)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the value of the keyword\"mhdiam\" in diameter. A function return value of zero indicates the value was successfully returned.",
      "id": "2104"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_types(Text water_type, Dynamic_Text &types)"
      ],
      "description": "From the drainage. 4d file, for given purpose water_type, return the list of manhole types intypes. A function return value of zero indicates the types was successfully returned.",
      "id": "3860"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_length(Element drain, Integer pit, Integer att_no, Integer &att_len)"
      ],
      "description": "For pit number pit of the Element drain, get the length (in bytes) of the attribute number att_no. The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for attributes of type Text and Binary.",
      "id": "1005"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_length(Element drain, Integer pit, Text att_name, Integer &att_len)"
      ],
      "description": "For pit number pit of the Element drain, get the length (in bytes) of the attribute with the nameatt_name.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "1004"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_type(Element drain, Integer pit, Integer att_no, Integer &att_type)"
      ],
      "description": "For pit number pit of the Element drain, get the type of the attribute with attribute numberatt_no.  The attribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1003"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_type(Element drain, Integer pit, Text att_name, Integer &att_type)"
      ],
      "description": "For pit number pit of the Element drain, get the type of the attribute with name att_name.  Theattribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned. Drainage String ElementPage 667\f12d Model Programming Language Manual",
      "id": "1002"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_name(Element drain, Integer pit, Integer att_no, Text &name)"
      ],
      "description": "For pit number pit of the Element drain, get the name of the attribute number att_no.  Theattribute name is returned in name. A function return value of zero indicates the attribute name was successfully returned.",
      "id": "1001"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Real &real)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in real.  The attribute must be of type Real. If the Element is not of type Drainage or the attribute is not of type Real then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1000"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Text &txt)"
      ],
      "description": "Page 668Drainage String Element\fChapter 5 12dPL Library CallsFor the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in txt.  The attribute must be of type Text. If the Element is not of type Drainage or the attribute is not of type Text then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "998"
    },
    {
      "names": [
        "Integer Set_data(Choice_Box box, Integer nc, Text choices[])"
      ],
      "description": "Set the values available in the choice list.  There are nc items in the choices list for theChoice_Box box. For exampleText choices[3];choices[1] = \"top\";choices[2] = \"middle\";choices[3] = \"bottom\";Choice_Box choice_box = Create_choice_box(\"Pick from list\",message);Set_data(choice_box,3,choices);Note: To be valid, any data typed into the Choice_Box information area must be from thechoices list. A function return value of zero indicates the nc\u2019th data in the choices list was successfully set.",
      "id": "997"
    },
    {
      "names": [
        "Integer Get_drainage_pit_number_of_attributes(Element drain, Integer pit, Integer &no_atts)"
      ],
      "description": "Get the total number of attributes for pit number pit of the Element drain. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the number of attributes was successfully returned.",
      "id": "994"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Text &txt)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pit number pit and return theattribute value in txt.  The attribute must be of type Text. If the Element is not of type Drainage or the attribute is not of type Text then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute calledatt_name. Drainage String ElementPage 669\f12d Model Programming Language Manual",
      "id": "995"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attributes(Element drain, Integer pit, Attributes &att)"
      ],
      "description": "For the Element drain, return the Attributes for the pit number pit as att. If the Element is not of type Drainage or the pit number pit has no attribute then a non-zeroreturn value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "2022"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attributes(Element drain, Integer pit, Attributes att)"
      ],
      "description": "For the Element drain, set the Attributes for the pit number pit to att. If the Element is not of type Drainage then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully set.",
      "id": "2023"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Uid &uid)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pit number pit and return theattribute value in uid.  The attribute must be of type Uid. Page 670Drainage String Element\fChapter 5 12dPL Library CallsIf the Element is not of type Drainage or the attribute is not of type Uid then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2024"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pit number pit and return theattribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2025"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Uid &uid)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in uid.  The attribute must be of type Uid. If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2026"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributeDrainage String ElementPage 671\f12d Model Programming Language Manualnumber att_no.",
      "id": "2027"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Uid uid)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2028"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Attributes att)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2029"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Uid uid)"
      ],
      "description": "For the Element drain and on the pit number pit, if the attribute number att_no exists and it is oftype Uid, then its value is set to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2030"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Attributes att)"
      ],
      "description": "For the Element drain and on the pit number pit, if the attribute number att_no exists and it is oftype Attributes, then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2031"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Real real)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute with number att_no does not exist then create it as type Real and give it thevalue real. if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1011"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Integer int)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute with number att_no does not exist then create it as type Integer and give it thevalue int. if the attribute with number att_no does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1010"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Text txt)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute with number att_no does not exist then create it as type Text and give it thevalue txt. if the attribute with number att_no does exist and it is type Text then set its value to txt. If the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1009"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Real real)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute called att_name does not exist then create it as type Real and give it the valuereal. if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1008"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Integer int)"
      ],
      "description": "For the Element drain and on the pit number pitif the attribute called att_name does not exist then create it as type Integer and give it the valueint. if the attribute called att_name does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1007"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Text txt)"
      ],
      "description": "For the Element drain and on the pit number pit,if the attribute called att_name does not exist then create it as type Text and give it the valuetxt. if the attribute called att_name does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1006"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_inverts(Element drain, Integer p, Real lhs, Real rhs)"
      ],
      "description": "Set the pipe invert levels for the pth pipe of the string Element drain. The invert level of the left hand end of the pipe is given as Real lhs. The invert level of the right hand end of the pipe is given as Real rhs. See Drainage Pipe Definitions. Note: pipe invert levels can also be set using the call Set_drainage_pit_inverts(Elementdrain,Integer p,Real lhs,Real rhs). If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "536"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_inverts(Element drain, Integer p, Real &lhs, Real &rhs)"
      ],
      "description": "Get the pipe invert levels for the pth pipe of the string Element drain. The invert level of the pipe of the left hand end of the pipe is returned in Real lhs. The invert level of the right hand end of the pipe is returned in Real rhs. See Drainage Pipe Definitions. Note: pipe invert levels can also be returned using the call Get_drainage_pit_inverts(Elementdrain,Integer p,Real &lhs,Real &rhs). If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "533"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_number_of_pipes(Element drain, Integer pipe, Integer n)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for the pipe number pipe, set thenumber of pipes to be n. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the number was successfully set.",
      "id": "2852"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_number_of_pipes(Element drain, Integer pipe, Integer &n)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for the pipe number pipe, return thenumber of pipes as n. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the number was successfully returned.",
      "id": "2853"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_colour(Element drain, Integer p, Integer colour)"
      ],
      "description": "Set the colour of the pth pipe of the Element drain to colour number colour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2783"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_colour(Element drain, Integer p, Integer &colour)"
      ],
      "description": "Get the colour number of the pth pipe of the Element drain and return the colour number incolour. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "2782"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_name(Element drain, Integer p, Text name)"
      ],
      "description": "Set the pipe name for the pth pipe of the string Element drain. The pipe name is given as Text name. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "502"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_name(Element drain, Integer p, Text &name)"
      ],
      "description": "Drainage String ElementPage 681\f12d Model Programming Language ManualGet the pipe name for the pth pipe of the string Element drain. The pipe name is returned in Text name. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "497"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_type(Element drain, Integer p, Text type)"
      ],
      "description": "Set the pipe type for the pth pipe of the string Element drain. The pipe type is given as Text type. If the pipe type type is in the drainge. 4d file, then the call also sets the values for the pipe to bethose given in the drainage. 4d file for the pipe type. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "501"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_type(Element drain, Integer p, Text &type)"
      ],
      "description": "Get the pipe type for the pth pipe of the string Element drain. The pipe type is returned in Text type. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "496"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_cover(Element drain, Integer pipe, Real cover)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set the minimum cover for pipe numberpipe, to cover. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "1442"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_cover(Element drain, Integer pipe, Real &minc, Real &maxc)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the minimum cover value for pipenumber pipe, in cover. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "1441"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_diameter(Element drain, Integer p, Real diameter)"
      ],
      "description": "Set the pipe diameter for the pth pipe of the string Element drain. The pipe diameter is given as Real diameter. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "500"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_width(Element drain, Integer pipe, Real &width)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, set the width ofthe pipe to the value width. If a width is not to be used then set a null value for width. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the width was successfully set.",
      "id": "2857"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_top_width(Element drain, Integer pipe, Real &top_width)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, set the top widthof the pipe to the value top_width. If a top width is not to be used then set a null value for top_width. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the top width was successfully set. Drainage String ElementPage 683\f12d Model Programming Language Manual",
      "id": "2858"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_diameter(Element drain, Integer p, Real &diameter)"
      ],
      "description": "Get the pipe diameter for the pth pipe of the string Element drain. The pipe diameter is returned in Real diameter. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "495"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_width(Element drain, Integer pipe, Real &width)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, get the width ofthe pipe and return it in width. If a width is not to be used then a null value is returned for width. If drain is not an Element of type Drainage then a non zero function return code is returned. See Drainage Pipe Cross Sections. A function return value of zero indicates the width was successfully returned.",
      "id": "2855"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_top_width(Element drain, Integer pipe, Real &top_width)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, get the top widthof the pipe and return it in top_width. If a top width is not to be used then a null value is returned for top_width. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the top width was successfully returned.",
      "id": "2856"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_thickness(Element drain, Integer pipe, Real &top, Real &bottom, Real &left, Real &right)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, set the pipethicknesses to top, bottom, left and right wheretop is the thickness for a round pipe, and the top thickness for a non round pipe. bottom is the thickness of the bottom of the pipe for a non round pipe. left is the thickness of the left of the pipe for a non round pipe. right is the thickness of the right of the pipe for a non round pipe. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the thicknesses were successfully set.",
      "id": "2867"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_thickness(Element drain, Integer pit, Real top, Real bottom, Real left, Real right)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, return the pipethicknesses in top, bottom, left and right wheretop is the thickness for a round pipe, and the top thickness for a non round pipe. bottom is the thickness of the bottom of the pipe for a non round pipe. left is the thickness of the left of the pipe for a non round pipe. right is the thickness of the right of the pipe for a non round pipe. See Drainage Pipe Cross Sections. CAUTION: The Set_drainage_pipe_type() and Set_drainage_pipe_diameter() call will setthe pipe thicknesses to the drainage. 4d values. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the thicknesses were successfully returned.",
      "id": "2868"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_intersects_pit(Element drain, Integer pipe, Real offset, Real &lx, Real &ly, Real &lch, Real &rx, Real &ry, Real &rch)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for pipe number pipe, get the (x,y)coordinates and chainage of the intersection of the pipe offset (in the (x,y) pane) by the distanceoffset, with the pits at either end of the offset pipe. If offset is positive then the pipe is offset to the right of the original pipe, and to the left when theoffset is negative.  Left and right are defined with respect to the direction of the pipe. The coordinates of the intersection of the pipe with the left hand pit are returned as (lx,ly) and theDrainage String ElementPage 685\f12d Model Programming Language Manualchainage of the intersection point as lch. The coordinates of the intersection of the pipe with the right hand pit are returned as (rx,ry) andthe chainage of the intersection point as rch. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the values were successfully returned.",
      "id": "2851"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_shape(Element element, Integer pipe, Integer mode, Dynamic_Element &super_inside, Dynamic_Element &super_outside)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return as super strings, the shape of theinsides of the pipes in the Dynamic_Element super_inside and the shape of the outsides of thepipes in the Dynamic_Element super_outside.  The number of pipes, separation and thicknesssettings are used in generating all the shapes. So this function returns a list of the super strings that \u201cdraw\u201d the plan view of the inside andoutside of the pipes. For a circular pipe with wall thickness, the super_inside string is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + 2*thickness). For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + left_thickness + right_thickness)mode controls the z values assigned to the super strings. If mode = 0, the shapes are given the z-value of the invert levels of the pipes. If mode = 1, the shapes are given the z-value of the centre levels of the pipes. If mode = 2, the shapes are given the z-value of the obvert levels of the pipes. A function return value of 2 indicates the super strings could not be created. A function return value of zero indicates the shapes were successfully returned.",
      "id": "2854"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_shape(Element drain, Integer pipe, Integer mode, Real offset, Element &super_inside, Element &super_outside)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the shape of the inside of pipenumber pipe as the super string super_inside and the shape of the outside of the pipe assuper_outside, and the shapes are offset in the (x,y) plane from the pipe by the distance offset. If offset is positive then the shapes are offset to the right of the pipe and to the left when theoffset is negative.  Left and right is defined with respect to the direction of the pipe. So this function returns a list of the super strings that \u201cdraw\u201d the plan view of the inside andPage 686Drainage String Element\fChapter 5 12dPL Library Callsoutside of the pipe offset by the given value offset. For for a circular pipe with a wall thickness, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + 2*thickness). For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + left_thickness + right_thickness)If mode = 0, the shapes are given the z-value of the invert levels of the pipe. If mode = 1, the shapes are given the z-value of the centre levels of the pipe. If mode = 2, the shapes are given the z-value of the obvert levels of the pipe. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the shapes were successfully returned. Note: the number of pipes and separation are not used for generating the shapes and offset isuse instead.  For generating shapes using number of pipes and separation, seeGet_drainage_pipe_shape(Element element,Integer pipe,Integer mode,Dynamic_Element&super_inside,Dynamic_Element &super_outside)",
      "id": "2850"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_hgls(Element drain, Integer p, Real lhs, Real rhs)"
      ],
      "description": "Set the pipe hgl levels for the pth pipe of the string Element drain. The hgl level of the left hand side of the pipe is set to lhs. The hgl level of the right hand side of the pipe is set to rhs. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "537"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_hgls(Element drain, Integer p, Real &lhs, Real &rhs)"
      ],
      "description": "Get the pipe HGL levels for the pth pipe of the string Element drain. The hgl level of the left hand side of the pipe is returned in lhs. The hgl level of the right hand side of the pipe is returned in rhs. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "534"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_velocity(Element drain, Integer p, Real velocity)"
      ],
      "description": "Get the pipe flow velocity for the pth pipe of the string Element drain. The velocity of the pipe is returned in Real velocity. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "499"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_velocity(Element drain, Integer p, Real &velocity)"
      ],
      "description": "Get the flow velocity for the pth pipe of the string Element drain. The velocity is returned in Real velocity. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "494"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_flow(Element drain, Integer p, Real flow)"
      ],
      "description": "Get the pipe flow volume for the pth pipe of the string Element drain. The velocity of the pipe is returned in Real flow. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "498"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_nominal_diameter(Element drainage, Integer pipe, Real nominal_diameter)"
      ],
      "description": "Set the pipe nominal diameter of the drainage string Element drainage at pipe index pipe toReal nominal_diameter. A return value of zero indicates the function call was successful.",
      "id": "2890"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_separation(Element drainage, Integer pipe, Real separation)"
      ],
      "description": "Set the pipe separation of the drainage string Element drainage at pipe index pipe to Realseparation. A return value of zero indicates the function call was successful.",
      "id": "2892"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_flow(Element drain, Integer p, Real &flow)"
      ],
      "description": "Get the flow volume for the pth pipe of the string Element drain. The volume is returned in Real velocity. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "493"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_length(Element drain, Integer p, Real &length)"
      ],
      "description": "Get the pipe length for the pth pipe of the string Element drain. The length of the pipe is returned in Real length. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "503"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_grade(Element drain, Integer p, Real &grade)"
      ],
      "description": "Get the pipe grade for the pth pipe of the string Element drain. The grade of the pipe is returned in Real grade. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "504"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_ns(Element drain, Integer p, Real ch[], Real ht[], Integer max_pts, Integer &npts)"
      ],
      "description": "For the drainage string drain, get the heights along the pth pipe from the natural surface tin. Because the pipe is long then there will be more than one height and the heights are returned inchainage order along the pipe.  The heights are returned in the arrays ch (for chainage) and ht. The maximum number of natural surface points that can be returned is given by max_pts(usually the size of the arrays). The actual number of points of natural surface is returned in npts. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "523"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_fs(Element drain, Integer p, Real ch[], Real ht[], Integer max_pts, Integer &npts)"
      ],
      "description": "For the drainage string drain, get the heights along the pth pipe from the finished surface tin. Because the pipe is long then there will be more than one height and the heights are returned inchainage order along the pipe.  The heights are returned in the arrays ch (for chainage) and ht. The maximum number of finished surface points that can be returned is given by max_pts(usually the size of the arrays). The actual number of points of finished surface is returned in npts. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "524"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_nominal_diameter(Element drainage, Integer pipe, Real &nominal_diameter)"
      ],
      "description": "Get the pipe nominal diameter nominal_diameter of the drainage string Element drainage atpipe index pipe. A return value of zero indicates the function call was successful.",
      "id": "2891"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_separation(Element drainage, Integer pipe, Real &separation)"
      ],
      "description": "Get the pipe separation separation of the drainage string Element drainage at pipe index pipe. A return value of zero indicates the function call was successful.",
      "id": "2893"
    },
    {
      "names": [
        "Integer Get_drainage_number_of_pipe_types(Integer &n)"
      ],
      "description": "Get the number of pipe types (classes) from the drainage. 4d file and return the number in n. A function return value of zero indicates the data was successfully returned.",
      "id": "2271"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_type(Integer i, Text &type)"
      ],
      "description": "Get the name of the i\u2019th pipe type (class) from the drainage. 4d file and return the name in type. A function return value of zero indicates the data was successfully returned.",
      "id": "2272"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_roughness(Text type, Real &roughness, Integer &roughness_type)"
      ],
      "description": "For the pipe type type, return from the drainage. 4d file, the roughness in roughness androughness type in roughness_type.  Roughness type is MANNING (0) or COLEBROOK (1). If pipe type type does not exist, then a non-zero return value is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "2273"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_types(Text water_type, Dynamic_Text &types)"
      ],
      "description": "From the drainage. 4d file, for given purpose water_type, return the list of pipe types in types. A function return value of zero indicates the types was successfully returned.",
      "id": "3861"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attributes(Element drain, Integer pipe, Attributes att)"
      ],
      "description": "For the Element drain, set the Attributes for the pipe number pipe to att. If the Element is not of type Drainage then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully set.",
      "id": "2033"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attributes(Element drain, Integer pipe, Attributes &att)"
      ],
      "description": "For the Element drain, return the Attributes for the pipe number pipe as att. If the Element is not of type Drainage or the pipe number pipe has no attribute then a non-zeroreturn value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "2032"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Uid &uid)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pipe number pipe and return theattribute value in uid.  The attribute must be of type Uid. If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2034"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pipe number pipe and return theattribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. Drainage String ElementPage 693\f12d Model Programming Language ManualA function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2035"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Uid &uid)"
      ],
      "description": "For the Element drain get the attribute with number att_no for the pipe number pipe and returnthe attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2036"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pipe number pipe and returnthe attribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2037"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Uid uid)"
      ],
      "description": "For the Element drain and on the pipe number pipe,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2038"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Attributes att)"
      ],
      "description": "For the Element drain and on the pipe number pipe,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2039"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Uid uid)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute number att_no exists and itis of type Uid, then its value is set to uid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2040"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Attributes att)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute number att_no exists and itis of type Attributes, then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2041"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_number_of_attributes(Element drain, Integer pipe, Integer &no_atts)"
      ],
      "description": "Get the total number of attributes for pipe number pipe of the Element drain. The total number of attributes is returned in Integer no_atts. A function return value of zero indicates the number of attributes was successfully returned.",
      "id": "1019"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_name(Element drain, Integer pipe, Integer att_no, Text &name)"
      ],
      "description": "For pipe number pipe of the Element drain, get the name of the attribute number att_no.  Theattribute name is returned in name. A function return value of zero indicates the attribute name was successfully returned.",
      "id": "1026"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_type(Element drain, Integer pipe, Text att_name, Integer &att_type)"
      ],
      "description": "For pipe number pipe of the Element drain, get the type of the attribute with name att_name. The attribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1027"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_type(Element drain, Integer pipe, Integer att_no, Integer &att_type)"
      ],
      "description": "For pipe number pipe of the Element drain, get the type of the attribute with attribute numberatt_no.  The attribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1028"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Real real)"
      ],
      "description": "Drainage String ElementPage 701\f12d Model Programming Language ManualFor the Element drain and on the pipe number pipe,\uf020if the attribute called att_name does not exist then create it as type Real and give it the valuereal. \uf020if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributecalled att_name.",
      "id": "1033"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Integer int)"
      ],
      "description": "For the Element drain and on the pipe number pipe,\uf020if the attribute with number att_no does not exist then create it as type Integer and give it thevalue int. \uf020if the attribute with number att_no does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1035"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Real real)"
      ],
      "description": "For the Element drain and on the pipe number pipe,\uf020Page 702Drainage String Element\fChapter 5 12dPL Library Callsif the attribute with number att_no does not exist then create it as type Real and give it thevalue real. \uf020if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1036"
    },
    {
      "names": [
        "Integer Get_drainage_hcs(Element drain, Integer &no_hcs)"
      ],
      "description": "Get the number of house connections for the string Element drain. The number of house connection is returned in Integer no_hcs. A function return value of zero indicates the data was successfully returned.",
      "id": "590"
    },
    {
      "names": [
        "Integer Get_drainage_hc(Element drain, Integer h, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the x,y & z for the hth house connection of the string Element drain. The x coordinate of the house connection is returned in Real x. The y coordinate of the house connection is returned in Real y. The z coordinate of the house connection is returned in Real z. A function return value of zero indicates the data was successfully returned.",
      "id": "591"
    },
    {
      "names": [
        "Integer Set_drainage_hc_adopted_level(Element drain, Integer hc, Real level)"
      ],
      "description": "For the drainage string drain, set the adopted level for the h\u2019th house connection to level. A function return value of zero indicates the data was successfully set.",
      "id": "1302"
    },
    {
      "names": [
        "Integer Get_drainage_hc_adopted_level(Element drain, Integer h, Real &level)"
      ],
      "description": "Get the adopted level for the h\u2019th house connection of the string Element drain. The adopted level of the house connection is returned in Real level. A function return value of zero indicates the data was successfully returned.",
      "id": "598"
    },
    {
      "names": [
        "Integer Set_drainage_hc_bush(Element drain, Integer hc, Text bush)"
      ],
      "description": "For the drainage string drain, set the bush type for the h\u2019th house connection to bush. A function return value of zero indicates the data was successfully set.",
      "id": "1310"
    },
    {
      "names": [
        "Integer Get_drainage_hc_bush(Element drain, Integer h, Text &bush)"
      ],
      "description": "Get the bush type for the h\u2019th house connection of the string Element drain. The bush type of the house connection is returned in Text bush. A function return value of zero indicates the data was successfully returned.",
      "id": "606"
    },
    {
      "names": [
        "Integer Set_drainage_hc_colour(Element drain, Integer hc, Integer colour)"
      ],
      "description": "For the drainage string drain, set the colour number for the h\u2019th house connection to colour. A function return value of zero indicates the data was successfully set.",
      "id": "1307"
    },
    {
      "names": [
        "Integer Get_drainage_hc_colour(Element drain, Integer h, Integer &colour)"
      ],
      "description": "Get the colour for the h\u2019th house connection of the string Element drain. The colour of the house connection is returned in Integer colour. A function return value of zero indicates the data was successfully returned.",
      "id": "603"
    },
    {
      "names": [
        "Integer Set_drainage_hc_depth(Element drain, Integer hc, Real depth)"
      ],
      "description": "For the drainage string drain, set the depth for the h\u2019th house connection to depth. Drainage String ElementPage 705\f12d Model Programming Language ManualA function return value of zero indicates the data was successfully set.",
      "id": "1305"
    },
    {
      "names": [
        "Integer Get_drainage_hc_depth(Element drain, Integer h, Real &depth)"
      ],
      "description": "Get the depth for the h\u2019th house connection of the string Element drain. The depth of the house connection is returned in Real depth. A function return value of zero indicates the data was successfully returned.",
      "id": "601"
    },
    {
      "names": [
        "Integer Set_drainage_hc_diameter(Element drain, Integer hc, Real diameter)"
      ],
      "description": "For the drainage string drain, set the diameter for the h\u2019th house connection to diameter. A function return value of zero indicates the data was successfully set.",
      "id": "1306"
    },
    {
      "names": [
        "Integer Get_drainage_hc_diameter(Element drain, Integer h, Real &diameter)"
      ],
      "description": "Get the diameter for the h\u2019th house connection of the string Element drain. The diameter of the house connection is returned in Real diameter. A function return value of zero indicates the data was successfully returned.",
      "id": "602"
    },
    {
      "names": [
        "Integer Set_drainage_hc_grade(Element drain, Integer hc, Real grade)"
      ],
      "description": "For the drainage string drain, set the grade for the h\u2019th house connection to grade. A function return value of zero indicates the data was successfully set.",
      "id": "1304"
    },
    {
      "names": [
        "Integer Get_drainage_hc_grade(Element drain, Integer h, Real &grade)"
      ],
      "description": "Get the grade for the h\u2019th house connection of the string Element drain. The grade of the house connection is returned in Real grade. A function return value of zero indicates the data was successfully returned.",
      "id": "600"
    },
    {
      "names": [
        "Integer Set_drainage_hc_hcb(Element drain, Integer hc, Integer hcb)"
      ],
      "description": "For the drainage string drain, set the hcb for the h\u2019th house connection to hcb. A function return value of zero indicates the data was successfully set.",
      "id": "1300"
    },
    {
      "names": [
        "Integer Get_drainage_hc_hcb(Element drain, Integer h, Integer &hcb)"
      ],
      "description": "Get the hcb for the h\u2019th house connection of the string Element drain. The hcb of the house connection is returned in Integer hcb. A function return value of zero indicates the data was successfully returned.",
      "id": "596"
    },
    {
      "names": [
        "Integer Set_drainage_hc_length(Element drain, Integer hc, Real length)"
      ],
      "description": "For the drainage string drain, set the length for the h\u2019th house connection to length. A function return value of zero indicates the data was successfully set.",
      "id": "1303"
    },
    {
      "names": [
        "Integer Get_drainage_hc_length(Element drain, Integer h, Real &length)"
      ],
      "description": "Get the length for the h\u2019th house connection of the string Element drain. The length of the house connection is returned in Real length. A function return value of zero indicates the data was successfully returned. Drainage String ElementPage 707\f12d Model Programming Language Manual",
      "id": "599"
    },
    {
      "names": [
        "Integer Set_drainage_hc_level(Element drain, Integer hc, Real level)"
      ],
      "description": "For the drainage string drain, set the level for the h\u2019th house connection to level. A function return value of zero indicates the data was successfully set.",
      "id": "1301"
    },
    {
      "names": [
        "Integer Get_drainage_hc_level(Element drain, Integer h, Real &level)"
      ],
      "description": "Get the level for the h\u2019th house connection of the string Element drain. The level of the house connection is returned in Real level. A function return value of zero indicates the data was successfully returned.",
      "id": "597"
    },
    {
      "names": [
        "Integer Set_drainage_hc_material(Element drain, Integer hc, Text material)"
      ],
      "description": "For the drainage string drain, set the material for the h\u2019th house connection to material. A function return value of zero indicates the data was successfully set.",
      "id": "1309"
    },
    {
      "names": [
        "Integer Get_drainage_hc_material(Element drain, Integer h, Text &material)"
      ],
      "description": "Get the material for the h\u2019th house connection of the string Element drain. The material of the house connection is returned in Text material. A function return value of zero indicates the data was successfully returned.",
      "id": "605"
    },
    {
      "names": [
        "Integer Set_drainage_hc_name(Element drain, Integer hc, Text name)"
      ],
      "description": "For the drainage string drain, set the name for the h\u2019th house connection to name. A function return value of zero indicates the data was successfully set.",
      "id": "1299"
    },
    {
      "names": [
        "Integer Get_drainage_hc_name(Element drain, Integer h, Text &name)"
      ],
      "description": "Get the name for the h\u2019th house connection of the string Element drain. The name of the house connection is returned in Text name. A function return value of zero indicates the data was successfully returned.",
      "id": "595"
    },
    {
      "names": [
        "Integer Set_drainage_hc_side(Element drain, Integer hc, Integer side)"
      ],
      "description": "For the drainage string drain, set the side for the h\u2019th house connection by the value of side. when side = -1, the house connection is on the left side of the string. when side = 1, the house connection is on the right side of the string. A function return value of zero indicates the data was successfully set.",
      "id": "1298"
    },
    {
      "names": [
        "Integer Get_drainage_hc_side(Element drain, Integer h, Integer &side)"
      ],
      "description": "Get the side for the h\u2019th house connection of the string Element drain. The side of the house connection is returned in Integer side. If side = -1, the house connection is on the left side of the string. If side = 1, the house connection is on the right side of the string. A function return value of zero indicates the data was successfully returned.",
      "id": "594"
    },
    {
      "names": [
        "Integer Set_drainage_hc_type(Element drain, Integer hc, Text type)"
      ],
      "description": "For the drainage string drain, set the hc type for the h\u2019th house connection to type. Drainage String ElementPage 709\f12d Model Programming Language ManualA function return value of zero indicates the data was successfully set.",
      "id": "1308"
    },
    {
      "names": [
        "Integer Get_drainage_hc_type(Element drain, Integer h, Text &type)"
      ],
      "description": "Get the type for the h\u2019th house connection of the string Element drain. The type of the house connection is returned in Text type. A function return value of zero indicates the data was successfully returned.",
      "id": "604"
    },
    {
      "names": [
        "Integer Get_drainage_hc_chainage(Element drain, Integer h, Real &chainage)"
      ],
      "description": "Get the chainage for the h\u2019th house connection of the string Element drain. The chainage of the house connection is returned in Real chainage. A function return value of zero indicates the data was successfully returned.",
      "id": "592"
    },
    {
      "names": [
        "Integer Get_drainage_hc_ip(Element drain, Integer h, Integer &ip)"
      ],
      "description": "Get the intersect point for the h\u2019th house connection of the string Element drain. The intersection point of the house connection is returned in Integer ip. ip is zero based (i. e.  the first ip = 0)A function return value of zero indicates the data was successfully returned.",
      "id": "593"
    },
    {
      "names": [
        "Integer Get_drainage_pcs_count(Element element, Integer &no_pcs)"
      ],
      "description": "Get the number of property controls for the string Element drain. The number of property controls is returned in Integer no_pcs. A function return value of zero indicates the data was successfully returned.",
      "id": "7676"
    },
    {
      "names": [
        "Integer Get_drainage_pc_xyz(Element element, Integer pc, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the x,y & z for the pc-th property control of the string Element drain. The x coordinate of the property control is returned in Real x. The y coordinate of the property control is returned in Real y. The z coordinate of the property control is returned in Real z. A function return value of zero indicates the data was successfully returned.",
      "id": "7677"
    },
    {
      "names": [
        "Integer Get_drainage_pc_chainage(Element element, Integer pc, Real &chainage)"
      ],
      "description": "Get the chainage for the pc-th property control of the string Element drain. The chainage of the property control is returned in Real chainage. A function return value of zero indicates the data was successfully returned.",
      "id": "7678"
    },
    {
      "names": [
        "Integer Get_drainage_pc_ip(Element element, Integer pc, Integer &ip)"
      ],
      "description": "Get the intersect point for the pc-th property control of the string Element drain. The intersection point of the property control is returned in Integer ip. ip is zero based (i. e.  the first ip = 0)A function return value of zero indicates the data was successfully returned.",
      "id": "7679"
    },
    {
      "names": [
        "Integer Get_drainage_pc_ratio(Element element, Integer pc, Real &ratio)"
      ],
      "description": "Get the ratio for the pc-th property control of the string Element drain. The ratio of the property control is returned in Real ratio. A function return value of zero indicates the data was successfully returned.",
      "id": "7680"
    },
    {
      "names": [
        "Integer Get_drainage_pc_name(Element element, Integer pc, Text &name)"
      ],
      "description": "Get the name for the pc-th property control of the string Element drain. The name of the property control is returned in Text name. A function return value of zero indicates the data was successfully returned.",
      "id": "7681"
    },
    {
      "names": [
        "Integer Get_drainage_pc_colour(Element element, Integer pc, Integer &colour)"
      ],
      "description": "Get the colour for the pc-th property control of the string Element drain. The colour of the property control is returned in Integer colour. A function return value of zero indicates the data was successfully returned.",
      "id": "7682"
    },
    {
      "names": [
        "Integer Get_drainage_pc_grade(Element element, Integer pc, Real &grade)"
      ],
      "description": "Get the grade for the pc-th property control of the string Element drain. The grade of the property control is returned in Real grade. A function return value of zero indicates the data was successfully returned.",
      "id": "7683"
    },
    {
      "names": [
        "Integer Get_drainage_pc_cover(Element element, Integer pc, Real &cover)"
      ],
      "description": "Get the cover for the pc-th property control of the string Element drain. The cover of the property control is returned in Real cover. A function return value of zero indicates the data was successfully returned.",
      "id": "7684"
    },
    {
      "names": [
        "Integer Get_drainage_pc_start_level(Element element, Integer pc, Real &start_level)"
      ],
      "description": "Get the start_level for the pc-th property control of the string Element drain. The start_level of the property control is returned in Real start_level. A function return value of zero indicates the data was successfully returned.",
      "id": "7685"
    },
    {
      "names": [
        "Integer Get_drainage_pc_diameter(Element element, Integer pc, Real &diameter)"
      ],
      "description": "Get the diameter for the pc-th property control of the string Element drain. The diameter of the property control is returned in Real diameter. A function return value of zero indicates the data was successfully returned.",
      "id": "7686"
    },
    {
      "names": [
        "Integer Get_drainage_pc_boundary(Element element, Integer pc, Real &boundary)"
      ],
      "description": "Get the boundary for the pc-th property control of the string Element drain. The boundary of the property control is returned in Real boundary. A function return value of zero indicates the data was successfully returned.",
      "id": "7687"
    },
    {
      "names": [
        "Integer Set_drainage_pc_name(Element element, Integer pc, Text name)"
      ],
      "description": "For the drainage string drain, set the name for the pc\u2019th property control to Text name. A function return value of zero indicates the data was successfully set.",
      "id": "7688"
    },
    {
      "names": [
        "Integer Set_drainage_pc_colour(Element element, Integer pc, Integer colour)"
      ],
      "description": "For the drainage string drain, set the colour for the pc\u2019th property control to Integer colour. A function return value of zero indicates the data was successfully set.",
      "id": "7689"
    },
    {
      "names": [
        "Integer Set_drainage_pc_grade(Element element, Integer pc, Real grade)"
      ],
      "description": "For the drainage string drain, set the grade for the pc\u2019th property control to Real grade. A function return value of zero indicates the data was successfully set.",
      "id": "7690"
    },
    {
      "names": [
        "Integer Set_drainage_pc_cover(Element element, Integer pc, Real cover)"
      ],
      "description": "For the drainage string drain, set the cover for the pc\u2019th property control to Real cover. A function return value of zero indicates the data was successfully set.",
      "id": "7691"
    },
    {
      "names": [
        "Integer Set_drainage_pc_start_level(Element element, Integer pc, Real start_level)"
      ],
      "description": "For the drainage string drain, set the start level for the pc\u2019th property control to Real start_level. A function return value of zero indicates the data was successfully set.",
      "id": "7692"
    },
    {
      "names": [
        "Integer Set_drainage_pc_diameter(Element element, Integer pc, Real diameter)"
      ],
      "description": "For the drainage string drain, set the diameter for the pc\u2019th property control to Real diameter. A function return value of zero indicates the data was successfully set. Page 714Drainage String Element\fChapter 5 12dPL Library Calls",
      "id": "7693"
    },
    {
      "names": [
        "Integer Set_drainage_pc_boundary(Element element, Integer pc, Real boundary)"
      ],
      "description": "For the drainage string drain, set the boundary for the pc\u2019th property control to Real boundary. A function return value of zero indicates the data was successfully set.",
      "id": "7694"
    },
    {
      "names": [
        "Element Create_feature()"
      ],
      "description": "Create an Element of type FeatureThe function return value gives the actual Element created. If the feature string could not be created, then the returned Element will be null.",
      "id": "872"
    },
    {
      "names": [
        "Element Create_feature(Element seed)"
      ],
      "description": "Create an Element of type Feature and set the colour, name, style etc.  of the new string to be thesame as those from the Element Seed. The function return value gives the actual Element created. If the Feature string could not be created, then the returned Element will be null.",
      "id": "873"
    },
    {
      "names": [
        "Element Create_feature(Text name, Integer colour, Real xc, Real yc, Real zc, Real rad)"
      ],
      "description": "Create an Element of type Feature with name name, colour colour, centre (xc,yc), radius radand z value (height) zc. The function return value gives the actual Element created. If the Feature string could not be created, then the returned Element will be null.",
      "id": "874"
    },
    {
      "names": [
        "Integer Get_feature_centre(Element elt, Real &xc, Real &yc, Real &zc)"
      ],
      "description": "Get the centre point for Feature string given by Element elt. The centre of the Feature is (xc,yc,zc). Page 716Feature String Element\fChapter 5 12dPL Library CallsA function return value of zero indicates the centre was successfully returned.",
      "id": "876"
    },
    {
      "names": [
        "Integer Set_feature_centre(Element elt, Real xc, Real yc, Real zc)"
      ],
      "description": "Set the centre point of the Feature string given by Element elt to (xc,yc,zc). A function return value of zero indicates the centre was successfully modified.",
      "id": "875"
    },
    {
      "names": [
        "Integer Get_feature_radius(Element elt, Real &rad)"
      ],
      "description": "Get the radius for Feature string given by Element elt and return it in rad. A function return value of zero indicates the radius was successfully returned.",
      "id": "878"
    },
    {
      "names": [
        "Integer Set_feature_radius(Element elt, Real rad)"
      ],
      "description": "Set the radius of the Feature string given by Element elt to rad.  The new radius must be nonzero. A function return value of zero indicates the radius was successfully modified.",
      "id": "877"
    },
    {
      "names": [
        "Element Create_interface(Real x[], Real y[], Real z[], Integer f[], Integer num_pts)"
      ],
      "description": "Create an Element of type Interface. The Element has num_pts points with (x,y,z,flag) values given in the Real arrays x[], y[], z[] andInteger array f[]. The function return value gives the actual Element created. If the Interface string could not be created, then the returned Element will be null.",
      "id": "181"
    },
    {
      "names": [
        "Element Create_interface(Integer num_pts)"
      ],
      "description": "Create an Element of type Interface with room for num_pts (x,y,z,flag) points. The actual x, y, z and flag values of the Interface string are set after the string is created. If the Interface string could not be created, then the returned Element will be null.",
      "id": "451"
    },
    {
      "names": [
        "Element Create_interface(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type Interface with room for num_pts (x,y,z,flag) points, and set the colour,name, style etc.  of the new string to be the same as those from the Element seed. The actual x, y, z and flag values of the Interface string are set after the string is created. If the Interface string could not be created, then the returned Element will be null.",
      "id": "668"
    },
    {
      "names": [
        "Integer Get_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z,flag) data for the first max_pts points of the Interface Element elt. The (x,y,z,flag) values at each string point are returned in the Real arrays x[], y[], z[] and Integerarray f[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Interface, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "182"
    },
    {
      "names": [
        "Integer Get_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a Interface Element elt, get the (x,y,z,flag) data for max_pts points starting at the pointnumber start_pt. This routine allows the user to return the data from a Interface string in user specified chunks. This is necessary if the number of points in the string is greater than the size of the arraysavailable to contain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Integerarray f[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Interface, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function. Interface String ElementPage 719\f12d Model Programming Language Manual",
      "id": "183"
    },
    {
      "names": [
        "Integer Get_interface_data(Element elt, Integer i, Real &x, Real &y, Real &z, Integer &f)"
      ],
      "description": "Get the (x,y,z,flag) data for the ith point of the string. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The flag value is returned in Integer f. A function return value of zero indicates the data was successfully returned.",
      "id": "184"
    },
    {
      "names": [
        "Integer Set_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer num_pts)"
      ],
      "description": "Set the (x,y,z,flag) data for the first num_pts points of the Interface Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z,flag) values at each string point are given in the Real arrays x[], y[], z[] and Integerarray f[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type Interface, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new Interface Elements but only modify existing Interface Elements.",
      "id": "185"
    },
    {
      "names": [
        "Integer Set_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the Interface Element elt, set the (x,y,z,flag) data for num_pts points starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_ptrather than point one. Page 720Interface String Element\fChapter 5 12dPL Library CallsThe maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z,flag) values for the string points are given in the Real arrays x[], y[], z[] and Integerarray f[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type Interface, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new Interface Elements but only modify existing InterfaceElements.",
      "id": "186"
    },
    {
      "names": [
        "Integer Set_interface_data(Element elt, Integer i, Real x, Real y, Real z, Integer flag)"
      ],
      "description": "Set the (x,y,z,flag) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. The flag value is given in Integer flag. A function return value of zero indicates the data was successfully set.",
      "id": "187"
    },
    {
      "names": [
        "Element Create_grid_string()"
      ],
      "description": "Return an Element of type grid string. Use calls Set_grid_geometry and Set_grid_range to setup the data of the grid string.",
      "id": "2908"
    },
    {
      "names": [
        "Tin Create_grid_tin(Text name)"
      ],
      "description": "Create a grid Tin with the given name. The function return value gives the actual Tin created. Use calls Set_grid_geometry and Set_grid_range to setup the data of the grid string.",
      "id": "2909"
    },
    {
      "names": [
        "Integer Can_edit_grid_data(Element elt, Integer &result)"
      ],
      "description": "Set the Integer value result to 1 if the grid data of Element elt can be edited, 0 otherwise. A return value of 1 indicates the Element elt does not have valid grid data. A return value of 0 indicates the Element elt has valid grid data.",
      "id": "2910"
    },
    {
      "names": [
        "Integer Set_grid_geometry(Element elt, Real origin_x, Real origin_y, Real spacing_x, Real spacing_y, Real angle)"
      ],
      "description": "Set the geometry the grid data of the Element elt with the origin point (origin_x,origin_y),spacing space_x, space_y in the x, y direction and with angle angle. A return value of 10 indicates the Element elt does not have valid unlocked grid data. A return value of 0 indicates the grid data was set successfully.",
      "id": "2911"
    },
    {
      "names": [
        "Integer Get_grid_geometry(Element elt, Real &origin_x, Real &origin_y, Real &spacing_x, Real &spacing_y, Real &angle)"
      ],
      "description": "Get the geometry the grid data of the Element elt to the origin point (origin_x,origin_y), spacingspace_x, space_y in the x, y direction and with angle angle. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 0 indicates the grid data was set successfully.",
      "id": "2912"
    },
    {
      "names": [
        "Integer Set_grid_range(Element elt, Integer xmin, Integer ymin, Integer xmax, Integer ymax)"
      ],
      "description": "Set the range the grid data of the Element elt with x-range from xmin to xmax y-range fromymin to ymax. A return value of 10 indicates the Element elt does not have valid unlocked grid data. A return value of 11 indicates the input range is not valid. A return value of 100 indicates the input range exceeded the points limit. A return value of 0 indicates the grid data was set successfully.",
      "id": "2913"
    },
    {
      "names": [
        "Integer Get_grid_range(Element elt, Integer &xmin, Integer &ymin, Integer &xmax, Integer &ymax)"
      ],
      "description": "Get the geometry the grid data of the Element elt with the origin point (origin_x,origin_y),spacing space_x, space_y in the x, y direction and with angle angle. Grid String and Grid Tin ElementPage 723\f12d Model Programming Language ManualA return value of 10 indicates the Element elt does not have valid grid data. A return value of 0 indicates the grid data was set successfully.",
      "id": "2914"
    },
    {
      "names": [
        "Integer Grid_get_x_count(Element elt, Integer &count)"
      ],
      "description": "Get the number of point in x-range of the grid data of the Element elt as Integer count. A return value of 10 indicates the Element elt does not have valid grid data. A return value of zero indicates the function call was successful.",
      "id": "2915"
    },
    {
      "names": [
        "Integer Grid_get_y_count(Element elt, Integer &count)"
      ],
      "description": "Get the number of point in y-range of the grid data of the Element elt as Integer count. A return value of 10 indicates the Element elt does not have valid grid data. A return value of zero indicates the function call was successful.",
      "id": "2916"
    },
    {
      "names": [
        "Integer Grid_get_x_range(Element elt, Integer &count)"
      ],
      "description": "Get the number of cells in x-range of the grid data of the Element elt as Integer count. If the result is valid, it should be 1 less than the result of get points call. A return value of 10 indicates the Element elt does not have valid grid data. A return value of zero indicates the function call was successful.",
      "id": "2917"
    },
    {
      "names": [
        "Integer Grid_get_y_range(Element elt, Integer &count)"
      ],
      "description": "Get the number of cells in y-range of the grid data of the Element elt as Integer count. If the result is valid, it should be 1 less than the result of get points call. A return value of 10 indicates the Element elt does not have valid grid data. A return value of zero indicates the function call was successful. Grid String and Grid Tin ElementPage 725\f12d Model Programming Language Manual",
      "id": "2918"
    },
    {
      "names": [
        "Integer Grid_world_to_grid(Element elt, Real world_x, Real world_y, Real &grid_x, Real &grid_y)"
      ],
      "description": "Transform world coordinate (world_x, world_y) to grid coordinate (grid_x, grid_y) of the griddata of the Element elt. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2919"
    },
    {
      "names": [
        "Integer Grid_world_to_cell(Element elt, Real world_x, Real world_y, Real &cell_x, Real &cell_y)"
      ],
      "description": "Transform world coordinate (world_x, world_y) to cell coordinate (cell_x, cell_y) of the griddata of the Element elt. Page 726Grid String and Grid Tin Element\fChapter 5 12dPL Library CallsA return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2920"
    },
    {
      "names": [
        "Integer Grid_world_to_cell(Element elt, Real world_x, Real world_y, Integer &cell_x, Integer &cell_y)"
      ],
      "description": "Transform world coordinate (world_x, world_y) to cell indices (Integer cell_x, Integer cell_y) ofthe grid data of the Element elt. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2921"
    },
    {
      "names": [
        "Integer Grid_grid_to_world(Element elt, Real grid_x, Real grid_y, Real &world_x, Real &world_y)"
      ],
      "description": "Transform grid coordinate (grid_x, grid_y) of the grid data of the Element elt to world coordinate(world_x, world_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2922"
    },
    {
      "names": [
        "Integer Grid_grid_to_cell(Element elt, Real grid_x, Real grid_y, Real &cell_x, Real &cell_y)"
      ],
      "description": "Transform grid coordinate (grid_x, grid_y) of the grid data of the Element elt to cell coordinate(cell_x, cell_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2923"
    },
    {
      "names": [
        "Integer Grid_grid_to_cell(Element elt, Real grid_x, Real grid_y, Integer &cell_x, Integer &cell_y)"
      ],
      "description": "Transform grid coordinate (grid_x, grid_y) to cell indices (Integer cell_x, Integer cell_y) of thegrid data of the Element elt. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2924"
    },
    {
      "names": [
        "Integer Grid_cell_to_world(Element elt, Real cell_x, Real cell_y, Real &world_x, Real &world_y)"
      ],
      "description": "Transform cell coordinate (cell_x, cell_y) of the grid data of the Element elt to world coordinate(world_x, world_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2925"
    },
    {
      "names": [
        "Integer Grid_cell_to_world(Element elt, Integer cell_x, Integer cell_y, Real &world_x, Real &world_y)"
      ],
      "description": "Transform cell indices (cell_x, cell_y) of the grid data of the Element elt to world coordinate(world_x, world_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2926"
    },
    {
      "names": [
        "Integer Grid_cell_to_grid(Element elt, Real cell_x, Real cell_y, Real &grid_x, Real &grid_y)"
      ],
      "description": "Transform cell coordinate (cell_x, cell_y) of the grid data of the Element elt to grid coordinate(grid_x, grid_y). Page 728Grid String and Grid Tin Element\fChapter 5 12dPL Library CallsA return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2927"
    },
    {
      "names": [
        "Integer Grid_cell_to_grid(Element elt, Integer cell_x, Integer cell_y, Real &grid_x, Real &grid_y)"
      ],
      "description": "Transform cell indices (cell_x, cell_y) of the grid data of the Element elt to grid coordinate(grid_x, grid_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2928"
    },
    {
      "names": [
        "Integer Shift_grid_range(Element elt, Integer xshift, Integer yshift)"
      ],
      "description": "Shift the grid data of the Element elt to world coordinate by (xshift, yshift) cells in the x, ydirection.  For example: the new index for minimum grid x equal the old one minus xshift. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the shift failed. A return value of zero indicates the function call was successful.",
      "id": "2929"
    },
    {
      "names": [
        "Integer Set_grid_heights(Element elt)"
      ],
      "description": "Null the heights of the grid data of the Element elt. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the nulling action failed. A return value of zero indicates the function call was successful.",
      "id": "2930"
    },
    {
      "names": [
        "Integer Set_grid_heights(Element elt, Real value)"
      ],
      "description": "Set the heights of the grid data of the Element elt to single Real value. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the set action failed. A return value of zero indicates the function call was successful.",
      "id": "2931"
    },
    {
      "names": [
        "Integer Set_grid_heights(Element elt, Tin tin)"
      ],
      "description": "Set the heights of the grid data of the Element elt to levels of Tin tin. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2932"
    },
    {
      "names": [
        "Integer Set_grid_heights(Element elt, Dynamic_Element list)"
      ],
      "description": "Set the heights of the grid data of the Element elt according to Dynamic_Element list. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2933"
    },
    {
      "names": [
        "Integer Set_grid_height(Element elt, Integer xc, Integer yc, Real ht)"
      ],
      "description": "Set the height at cell indices (xc, yc) of the grid data of the Element elt with Real ht. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the set action failed. A return value of zero indicates the function call was successful.",
      "id": "2934"
    },
    {
      "names": [
        "Integer Get_grid_height(Element elt, Integer xc, Integer yc, Real &ht)"
      ],
      "description": "Get the height at cell indices (xc, yc) of the grid data of the Element elt to Real ht. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the get action failed. A return value of zero indicates the function call was successful.",
      "id": "2935"
    },
    {
      "names": [
        "Integer Convert_grid_string_to_grid_tin(Element elt, Text tin_name, Tin &tin)"
      ],
      "description": "Create a new grid Tin tin with name tin_name according to the grid data of element elt. A return value of 10 indicates there already a tin named tin_name. A return value of 11 indicates the creation failed. A return value of zero indicates the function call was successful.",
      "id": "2936"
    },
    {
      "names": [
        "Integer Convert_grid_tin_to_grid_string(Element tin, Element &elt)"
      ],
      "description": "Create a new grid string elt according to the grid data of tin Element tin. A return value of 11 indicates the creation failed. A return value of zero indicates the function call was successful.",
      "id": "2937"
    },
    {
      "names": [
        "Integer Convert_grid_to_strings(Element elt, Dynamic_Element &list)"
      ],
      "description": "Create a list of strings Dynamic_Element list according to the grid data of element elt. A return value of 11 indicates the creation failed. A return value of zero indicates the function call was successful.",
      "id": "2938"
    },
    {
      "names": [
        "Integer Convert_grid_to_tin(Element elt, Text tin_name, Tin &tin)"
      ],
      "description": "Create a new grid Tin tin with name tin_name according to the grid data of element elt. A return value of 10 indicates there already a tin named tin_name. A return value of 11 indicates the creation failed. A return value of zero indicates the function call was successful.",
      "id": "2939"
    },
    {
      "names": [
        "Integer Compute_merged_grid(Dynamic_Element list, Real &origin_x, Real &origin_y, Real &spacing_x, Real &spacing_y, Real &angle, Integer &xmin, Integer &ymin, Integer &xmax, Integer &ymax)"
      ],
      "description": "Calculate the data of the geometry and the range of the merging of grid data of a listDynamic_Element list. The values for the geometry data returns at Real x-y coordinate of the origin (origin_x origin_y)x-y spacing spacing_x spacing_y, grid rotation angle. The values for the range data return at Integer xmin ymin xmax ymax. A return value of 11 indicates the list has no element with valid grid data. A return value of 12 indicates the list has only one element with valid grid data. A return value of 14 indicates the merging failed. A return value of zero indicates the function call was successful.",
      "id": "2940"
    },
    {
      "names": [
        "Integer Merge_grids(Dynamic_Element list, Element &grid)"
      ],
      "description": "Merge the grid data of a list Dynamic_Element list to the grid data of Element grid. A return value of 11 indicates the list has no element with valid grid data. A return value of 12 indicates the list has only one element with valid grid data. A return value of 14 indicates the merging failed. A return value of zero indicates the function call was successful.",
      "id": "2941"
    },
    {
      "names": [
        "Element Create_face(Real x[], Real y[], Real z[], Integer num_pts)"
      ],
      "description": "The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[]. The function return value gives the actual Element created. If the face string could not be created, then the returned Element will be null.",
      "id": "1215"
    },
    {
      "names": [
        "Element Create_face(Integer num_npts)"
      ],
      "description": "Create an Element of type face with room for num_pts (x,y,z) points. The actual x, y and z values of the face string are set after the string is created. If the face string could not be created, then the returned Element will be null.",
      "id": "1216"
    },
    {
      "names": [
        "Element Create_face(Integer num_npts, Element seed)"
      ],
      "description": "Create an Element of type face with room for num_pts (x,y) points, and set the colour, name,style etc.  of the new string to be the same as those from the Element seed. The actual x, y and z values of the face string are set after the string is created. If the face string could not be created, then the returned Element will be null.",
      "id": "1217"
    },
    {
      "names": [
        "Integer Get_face_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z) data for the first max_pts vertices of the face Element elt. Face String ElementPage 733\f12d Model Programming Language ManualThe (x,y,z) values at each string vertex are returned in the Real arrays x[], y[] and z[]. The maximum number of vertices that can be returned is given by max_pts (usually the size ofthe arrays).  The vertex data returned starts at the first vertex and goes up to the minimum ofmax_pts and the number of vertices in the string. The actual number of vertices returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type face, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "78"
    },
    {
      "names": [
        "Integer Get_face_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a face Element elt, get the (x,y,z) data for max_pts vertices starting at vertex numberstart_pt. This routine allows the user to return the data from a face string in user specified chunks. This is necessary if the number of vertices in the string is greater than the size of the arraysavailable to contain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the vertex data returned starts at vertex number start_pt rather thanvertex one. The (x,y,z) values at each string vertex is returned in the Real arrays x[], y[] and z[]. The actual number of vertices returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type face, then num_pts is set to zero and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function.",
      "id": "79"
    },
    {
      "names": [
        "Integer Get_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts)",
        "Integer Set_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer num_pts)"
      ],
      "description": "Strings Replaced by Super StringsPage 831\f12d Model Programming Language ManualGet the (x,y,z) data for the first max_pts points of the pipe Element elt. The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type pipe, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned. Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)Set the (x,y,z) data for the first num_pts points of the pipe Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z) values for each string point are given in the Real arrays x[], y[] and z[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type pipe, then nothing is modified and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new pipe Elements but only modify existing pipe Elements.",
      "id": "80"
    },
    {
      "names": [
        "Integer Set_face_data(Element elt, Real x[], Real y[], Real z[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the face Element elt, set the (x,y,z) data for num_pts vertices, starting at vertex numberstart_pt. This function allows the user to modify a large number of vertices of the string in one call startingat vertex number start_pt rather than the first vertex (vertex one). The maximum number of vertices that can be set is given by the difference between the numberof vertices in the string and the value of start_pt. The (x,y,z) values for the string vertices are given in the Real arrays x[], y[] and z[]. The number of the first string vertex to be modified is start_pt. The total number of vertices to be set is given by Integer num_ptsIf the Element elt is not of type face, then nothing is modified and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new face Elements but only modify existing face Elements.",
      "id": "81"
    },
    {
      "names": [
        "Integer Get_face_data(Element elt, Integer i, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the (x,y,z) data for the ith vertex of the string. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the data was successfully returned.",
      "id": "82"
    },
    {
      "names": [
        "Integer Get_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts, Integer start_pt)",
        "Integer Set_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer num_pts, Integer start_pt)",
        "Integer Get_pipe_data(Element elt, Integer i, Real &x, Real &y, Real &z)",
        "Integer Set_pipe_data(Element elt, Integer i, Real x, Real y, Real z)"
      ],
      "description": "For a pipe Element elt, get the (x,y,z) data for max_pts points starting at point number start_pt. This routine allows the user to return the data from a pipe string in user specified chunks. This is necessary if the number of points in the string is greater than the size of the arraysavailable to contain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[]. The actual number of points returned is given by Integer num_ptsPage 832Strings Replaced by Super Strings\fChapter 5 12dPL Library Callsnum_pts <= max_ptsIf the Element elt is not of type pipe, then num_pts is set to zero and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function. Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integerstart_pt)For the pipe Element elt, set the (x,y,z) data for num_pts points, starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z) values for the string points are given in the Real arrays x[], y[] and z[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type pipe, then nothing is modified and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new pipe Elements but only modify existing pipe Elements. Get_pipe_data(Element elt,Integer i, Real &x,Real &y,Real &z)Get the (x,y,z) data for the ith point of the string. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the data was successfully returned. Set_pipe_data(Element elt,Integer i,Real x,Real y,Real z)Strings Replaced by Super StringsPage 833\f12d Model Programming Language ManualSet the (x,y,z) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. A function return value of zero indicates the data was successfully set.",
      "id": "83"
    },
    {
      "names": [
        "Integer Get_face_hatch_distance(Element elt, Real &dist)"
      ],
      "description": "Get the distance between the hatch lines for the face string elt.  The distance is returned as distA function return value of zero indicates the data was successfully returned.",
      "id": "1218"
    },
    {
      "names": [
        "Integer Set_face_hatch_distance(Element elt, Real dist)"
      ],
      "description": "Set the distance between the hatch lines for the face string elt to be distThe distance is given in world units. A function return value of zero indicates the data was successfully set.",
      "id": "1219"
    },
    {
      "names": [
        "Integer Get_face_hatch_angle(Element elt, Real &ang)"
      ],
      "description": "Get the angle of the hatch lines for the face string elt.  The angle is returned as ang. The angle is given in radians and is measured in the counter-clockwise direction from the x-axis. A function return value of zero indicates the data was successfully returned.",
      "id": "1220"
    },
    {
      "names": [
        "Integer Set_face_hatch_angle(Element elt, Real ang)"
      ],
      "description": "Set the angle of the hatch lines for the face string elt to be angA function return value of zero indicates the data was successfully set.",
      "id": "1221"
    },
    {
      "names": [
        "Integer Get_face_hatch_colour(Element elt, Integer &colour)"
      ],
      "description": "Get the colour of the solid fill for the face string elt.  The colour number is returned as colour. A function return value of zero indicates the data was successfully returned.",
      "id": "1222"
    },
    {
      "names": [
        "Integer Set_face_hatch_colour(Element elt, Integer colour)"
      ],
      "description": "Set the colour of the solid fill for the face string elt to the colour number colour. A function return value of zero indicates the data was successfully set.",
      "id": "1223"
    },
    {
      "names": [
        "Integer Get_face_edge_colour(Element elt, Integer &colour)"
      ],
      "description": "Get the colour of the edge of the face string elt.  The colour number is returned as colour. A function return value of zero indicates the data was successfully returned.",
      "id": "1224"
    },
    {
      "names": [
        "Integer Set_face_edge_colour(Element elt, Integer colour)"
      ],
      "description": "Set the colour of the edge of the face string elt to the colour number colour. A function return value of zero indicates the data was successfully set.",
      "id": "1225"
    },
    {
      "names": [
        "Integer Get_face_hatch_mode(Element elt, Integer &mode)"
      ],
      "description": "Get the mode of the hatch of the face string elt.  The value of mode is returned as mode. If the mode is 1, then the hatch pattern is drawn when the face is on a plan view. If the mode is 0, then the hatch pattern is not drawn when the face is on a plan view. A function return value of zero indicates the data was successfully returned.",
      "id": "1226"
    },
    {
      "names": [
        "Integer Set_face_hatch_mode(Element elt, Integer mode)"
      ],
      "description": "Set the mode of the hatch pattern of the face string elt to the value mode. If the mode is 1, then the hatch pattern is drawn when the face is on a plan view. If the mode is 0, then the hatch pattern is not drawn when the face is on a plan view. A function return value of zero indicates the data was successfully set.",
      "id": "1227"
    },
    {
      "names": [
        "Integer Get_face_fill_mode(Element elt, Integer &mode)"
      ],
      "description": "Get the mode of the fill of the face string elt.  The value of mode is returned as mode. If the mode is 1, then the face is filled with the face colour when the face is on a plan view. If the mode is 0, then the face is not filled when the face is on a plan view. A function return value of zero indicates the data was successfully returned.",
      "id": "1228"
    },
    {
      "names": [
        "Integer Set_face_fill_mode(Element elt, Integer mode)"
      ],
      "description": "Set the mode of the fill of the face string elt to the value mode. If the mode is 1, then the face is filled with the face colour when the face is on a plan view. If the mode is 0, then the face is not filled when the face is on a plan view. A function return value of zero indicates the data was successfully set.",
      "id": "1229"
    },
    {
      "names": [
        "Integer Get_face_edge_mode(Element elt, Integer &mode)"
      ],
      "description": "Get the mode of the edge of the face string elt.  The value of mode is returned as mode. If the mode is 1, then the edge is drawn with the edge colour when the face is on a plan view. If the mode is 0, then the edge is not drawn when the face is on a plan view. A function return value of zero indicates the data was successfully returned.",
      "id": "1230"
    },
    {
      "names": [
        "Integer Set_face_edge_mode(Element elt, Integer mode)"
      ],
      "description": "Set the mode for displaying the edge of the face string elt to the value mode. If the mode is 1, then the edge is drawn with the edge colour when the face is on a plan view. If the mode is 0, then the edge is not drawn when the face is on a plan view. A function return value of zero indicates the data was successfully set.",
      "id": "1231"
    },
    {
      "names": [
        "Integer DRF_dimension_horizontal_points_create(Text style_name, Text format_text, Real sx, Real sy, Real ex, Real ey, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring horizontal distance between two points (andadd to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, end point ex ey, dimension point dx dyA return value of zero indicates the function call was successful.",
      "id": "2956"
    },
    {
      "names": [
        "Integer DRF_dimension_vertical_points_create(Text style_name, Text format_text, Real sx, Real sy, Real ex, Real ey, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring vertical distance between two points (andadd to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, end point ex ey, dimension point dx dyA return value of zero indicates the function call was successful.",
      "id": "2957"
    },
    {
      "names": [
        "Integer DRF_dimension_aligned_points_create(Text style_name, Text format_text, Real sx, Real sy, Real ex, Real ey, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring aligned distance between two points (andadd to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, end point ex ey, dimension point dx dyA return value of zero indicates the function call was successful.",
      "id": "2958"
    },
    {
      "names": [
        "Integer DRF_dimension_aligned_points_fixoffset_create(Text style_name, Text format_text, Real sx, Real sy, Real ex, Real ey, Real dx, Real dy, Real fix_offset Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring aligned distance between two points withfixed offset (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, end point ex ey, dimension point dx dy; and fixed offset value fix_offsetA return value of zero indicates the function call was successful.",
      "id": "2959"
    },
    {
      "names": [
        "Integer DRF_dimension_rotated_points_create(Text style_name, Text format_text, Real sx, Real sy, Real ex, Real ey, Real dx, Real dy, Real rotation_angle, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring rotated distance between two points (andadd to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, end point ex ey, dimension point dx dy; and angle for rotation rotation_angleA return value of zero indicates the function call was successful.",
      "id": "2960"
    },
    {
      "names": [
        "Integer DRF_dimension_horizontal_segment_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring horizontal distance between the start andend points of a Segment base_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyA return value of zero indicates the function call was successful.",
      "id": "2961"
    },
    {
      "names": [
        "Integer DRF_dimension_vertical_points_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Page 742Drafting Elements\fChapter 5 12dPL Library CallsCreate a new dimension as Element out measuring vertical distance between the start and endpoints of a Segment base_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyA return value of zero indicates the function call was successful.",
      "id": "2962"
    },
    {
      "names": [
        "Integer DRF_dimension_aligned_segment_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring aligned distance between the start and endpoints of a Segment base_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyA return value of zero indicates the function call was successful.",
      "id": "2963"
    },
    {
      "names": [
        "Integer DRF_dimension_aligned_segment_fixoffset_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Real fix_offset Model &model, Element &out)"
      ],
      "description": "Create a new dimension with fixed offset as Element out measuring aligned distance betweenthe start and end points of a Segment base_segment (and add to Model model if the model isvalid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and fixed offset value fix_offsetA return value of zero indicates the function call was successful.",
      "id": "2964"
    },
    {
      "names": [
        "Integer DRF_dimension_rotated_segment_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Real rotation_angle, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring rotated distance between the start and endpoints of a Segment base_segment (and add to Model model if the model is valid). Drafting ElementsPage 743\f12d Model Programming Language ManualOther input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and rotation angle rotation_angleA return value of zero indicates the function call was successful.",
      "id": "2965"
    },
    {
      "names": [
        "Integer DRF_dimension_drop_perpendicular_create(Text style_name, Text format_text, Real sx, Real sy, Segment base_segment, Real dx, Real dy, Real fix_offset, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring perpendicular dropping distance from thestart points (of x-y coordinate sx sy) to a Segment base_segment (and add to Model model ifthe model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and value of fixed offset fix_offsetA return value of zero indicates the function call was successful.",
      "id": "2966"
    },
    {
      "names": [
        "Integer DRF_dimension_length_create(Text style_name, Text format_text, Segment base_seg, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring the length of a Segment base_segment(and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyA return value of zero indicates the function call was successful.",
      "id": "2967"
    },
    {
      "names": [
        "Integer DRF_dimension_length_fixoffset_create(Text style_name, Text format_text, Segment base_seg, Real dx, Real dy, Real fix_offset, Model &model, Element &out)"
      ],
      "description": "Create a new dimension with fixed offset as Element out measuring the length of a Segmentbase_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and fixed offset fix_offsetPage 744Drafting Elements\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "2968"
    },
    {
      "names": [
        "Integer DRF_dimension_angular_points_create(Text style_name, Text format_text, Real sx, Real sy, Real ax, Real ay, Real ex, Real ey, Real dx, Real dy, Integer dir, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring the angle of three points (and add to Modelmodel if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of start pointsx sy, angle point ax ay, end point ex ey, dimension point dx dyA return value of zero indicates the function call was successful.",
      "id": "2969"
    },
    {
      "names": [
        "Integer DRF_dimension_angular_segment_create(Text style_name, Text format_text, Segment line1, Segment line2, Real dx, Real dy, Integer i1, Integer i2, Integer ir, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring the angle from two lines Segment line1,line2 (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dydirection of the first line i1, 0 is the same as the line, 1 is reverse directiondirection of the second line i2, 0 is the same as the line, 1 is reverse directioncheck if reverse dimension ir, 0 is normal dimension, 1 is reverseA return value of zero indicates the function call was successful.",
      "id": "2970"
    },
    {
      "names": [
        "Integer DRF_dimension_radial_create(Text style_name, Text format_text, Segment base_arc, Real dx, Real dy, Integer float_dim, Model &model, Element &out)"
      ],
      "description": "Create a dimension s Element out measuring the radius of an arc Segment base_arc (and addto Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionDrafting ElementsPage 745\f12d Model Programming Language Manualpoint dx dyInteger float_dim indicating if the dimension if floating, 0 is no, 1 is yesA return value of zero indicates the function call was successful.",
      "id": "2971"
    },
    {
      "names": [
        "Integer DRF_dimension_diameter_create(Text style_name, Text format_text, Segment base_arc, Real dx, Real dy, Integer float_dim, Model &model, Element &out)"
      ],
      "description": "Create a dimension s Element out measuring the diameter of an arc Segment base_arc (andadd to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyInteger float_dim indicating if the dimension if floating, 0 is no, 1 is yesA return value of zero indicates the function call was successful.",
      "id": "2972"
    },
    {
      "names": [
        "Integer DRF_dimension_area_create(Text style_name, Text format_text, Element polygon, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring the area of a Element polygon (and add toModel model if the model is valid). Other input parameters: Text style_name; Text format_textA return value of zero indicates the function call was successful.",
      "id": "2973"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_move_dim(Real dx, Real dy, Element &dimension, Integer move_mode)"
      ],
      "description": "Move the dimension point of a dimension Element dimension. move_mode 1 means: the value of dx dy are added to x-y coordinate of the current dimensionpoint. move_mode 0 means: the value of dx dy are the new to x-y coordinate of the dimension point. A return value of zero indicates the function call was successful.",
      "id": "2975"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_move_start(Real dx, Real dy, Element &dimension, Integer move_mode)"
      ],
      "description": "Move the start point of a dimension Element dimension. move_mode 1 means: the value of dx dy are added to x-y coordinate of the current start point. move_mode 0 means: the value of dx dy are the new to x-y coordinate of the start point. A return value of zero indicates the function call was successful.",
      "id": "2976"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_move_end(Real dx, Real dy, Element &dimension, Integer move_mode)"
      ],
      "description": "Move the end point of a dimension Element dimension. move_mode 1 means: the value of dx dy are added to x-y coordinate of the current end point. move_mode 0 means: the value of dx dy are the new to x-y coordinate of the end point. A return value of zero indicates the function call was successful.",
      "id": "2977"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_set_start(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_dim)"
      ],
      "description": "Set the start point of a dimension Element drf_dim with the associative point defined by thereference string ref_string, vertex index (or IP index) ref_ip and distance to the vertex ref_ext. A return value of zero indicates the function call was successful.",
      "id": "3899"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_set_end(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_dim)"
      ],
      "description": "Set the end point of a dimension Element drf_dim with the associative point defined by thereference string ref_string, vertex index (or IP index) ref_ip and distance to the vertex ref_ext. A return value of zero indicates the function call was successful. Drafting ElementsPage 747\f12d Model Programming Language Manual",
      "id": "3900"
    },
    {
      "names": [
        "Integer DRF_get_dimension_styles(Dynamic_Text &styles)"
      ],
      "description": "Set the list of texts styles with the names of all dimension styles in the current project. A return value of zero indicates the function call was successful.",
      "id": "3378"
    },
    {
      "names": [
        "Integer DRF_dimension_style_property(Text style_name, Text property_name, Integer &value)"
      ],
      "description": "Get the Interger value of the property property_name of a dimension style with given namestyle_name. If there is no dimension style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3473"
    },
    {
      "names": [
        "Integer DRF_dimension_style_property(Text style_name, Text property_name, Real &value)"
      ],
      "description": "Get the Real value of the property property_name of a dimension style with given namestyle_name. If there is no dimension style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3474"
    },
    {
      "names": [
        "Integer DRF_dimension_style_property(Text style_name, Text property_name, Text &value)"
      ],
      "description": "Get the Text value of the property property_name of a dimension style with given namestyle_name. Page 748Drafting Elements\fChapter 5 12dPL Library CallsIf there is no dimension style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3475"
    },
    {
      "names": [
        "Integer DRF_dimension_area_create(Text style_name, Text format_text, Element poly_inp, Element &dimension_out)"
      ],
      "description": "Create a new area dimension as Element dimension_out . The associative polygon is referenced by Element poly_inp. Other input parameters: Text style_name; Text format_text;A return value of zero indicates the function call was successful.",
      "id": "3896"
    },
    {
      "names": [
        "Integer DRF_leader_create(Text style_name, Text leader_text, Real ax, Real ay, Real hx, Real hy, Model &model, Element &out)"
      ],
      "description": "Create a new leader as Element out (and add to Model model if the model is valid). Other input parameters: Text style_name; Text leader_text; Real x-y coordinate for arrow pointax ay, hook point hx hyA return value of zero indicates the function call was successful.",
      "id": "2974"
    },
    {
      "names": [
        "Integer DRF_leader_edit_move_hook(Real hx, Real hy, Element &leader, Integer move_mode)"
      ],
      "description": "Mode the hook point of a leader Element leader. move_mode 1 means: the value of dx dy are added to x-y coordinate of the current hook point. move_mode 0 means: the value of dx dy are the new to x-y coordinate of the hook point. A return value of zero indicates the function call was successful.",
      "id": "2978"
    },
    {
      "names": [
        "Integer DRF_leader_edit_move_arrow(Real hx, Real hy, Element &leader, Integer move_mode)"
      ],
      "description": "Mode the arrow point of a leader Element leader. move_mode 1 means: the value of dx dy are added to x-y coordinate of the current arrow point. move_mode 0 means: the value of dx dy are the new to x-y coordinate of the arrow point. A return value of zero indicates the function call was successful.",
      "id": "2979"
    },
    {
      "names": [
        "Integer DRF_get_leader_arrow(Element leader, Real &arrow_x, Real &arrow_y)"
      ],
      "description": "Get the arrow point xy-coordinate arrow_x arrow_y of a leader Element leaderPage 750Drafting Elements\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3088"
    },
    {
      "names": [
        "Integer DRF_get_leader_hook(Element leader, Real &hook_x, Real &hook_y)"
      ],
      "description": "Get the hook point xy-coordinate hook_x hook_y of a leader Element leaderA return value of zero indicates the function call was successful.",
      "id": "3089"
    },
    {
      "names": [
        "Integer DRF_get_leader_text(Element leader, Text &leader_text)"
      ],
      "description": "Get the leader text leader_text of a leader Element leaderA return value of zero indicates the function call was successful.",
      "id": "3090"
    },
    {
      "names": [
        "Integer DRF_set_leader_hook_angle(Element leader, Real hook_angle)"
      ],
      "description": "Set the hook angle of a leader Element leader to the new value hook_angleA return value of zero indicates the function call was successful.",
      "id": "3483"
    },
    {
      "names": [
        "Integer DRF_set_leader_info_tin(Element &leader, Tin tin)"
      ],
      "description": "Set the associative Tin of the Element leader to the new value tinA return value of zero indicates the function call was successful.",
      "id": "3901"
    },
    {
      "names": [
        "Integer DRF_leader_edit_set_arrow_point(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_leader)"
      ],
      "description": "Set the associative object of the Element leader to the point defined by Element ref_stringvertex index ref_ip and distance to the vertex ref_ext. A return value of zero indicates the function call was successful.",
      "id": "3902"
    },
    {
      "names": [
        "Integer DRF_leader_edit_set_arrow_segment(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_leader)"
      ],
      "description": "Set the associative object of the Element leader to the segment defined by Element ref_stringvertex index ref_ip ; the position of the arrow is determined by the distance to the vertex ref_ext. A return value of zero indicates the function call was successful.",
      "id": "3903"
    },
    {
      "names": [
        "Integer DRF_leader_edit_set_arrow_element(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_leader)"
      ],
      "description": "Set the associative object of the Element leader to the element defined by Element ref_string ;the position of the arrow is determined by vertex index ref_ip and the distance to the vertexref_ext. A return value of zero indicates the function call was successful.",
      "id": "3904"
    },
    {
      "names": [
        "Integer DRF_get_leader_hook_angle(Element leader, Real &hook_angle)"
      ],
      "description": "Get the Real hook_angle of a leader Element leaderA return value of zero indicates the function call was successful.",
      "id": "3484"
    },
    {
      "names": [
        "Integer DRF_get_leader_styles(Dynamic_Text &styles)"
      ],
      "description": "Set the list of texts styles with the names of all leader styles in the current project. Page 752Drafting Elements\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3379"
    },
    {
      "names": [
        "Integer DRF_leader_style_property(Text style_name, Text property_name, Integer &value)"
      ],
      "description": "Get the Interger value of the property property_name of a leader style with given namestyle_name. If there is no leader style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3476"
    },
    {
      "names": [
        "Integer DRF_leader_style_property(Text style_name, Text property_name, Real &value)"
      ],
      "description": "Get the Real value of the property property_name of a leader style with given namestyle_name. If there is no leader style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3477"
    },
    {
      "names": [
        "Integer DRF_leader_style_property(Text style_name, Text property_name, Text &value)"
      ],
      "description": "Get the Text value of the property property_name of a leader style with given namestyle_name. If there is no leader style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3478"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative_point(Text style_name, Text format_text, Integer type, Text ref_ele_name, Uid ref_ele_id, Text ref_mod_name, Uid ref_mod_id, Text ref_part_name, Integer ref_ip, Real ref_ext, Text ref_tin, Integer ref_method, Real ax, Real ay, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association point belongs to a string with name and id ref_ele_name ref_ele_id within thecontaining models ref_mod_name ref_mod_id - the looking up method for the element isdetermined by Integer ref_method - not yet used. Within the given string, the point is located using ref_part_name (only when the string is a superalignment with named parts), or segment number ref_ip, the distance to the start of the segmentref_ext, the name of the reference tin ref_tin if the type involves tin. The list of valid association (Integer) type is10Vertex_Text_Typevertex text or vertex attributes of a super string12Vertex_XYZ_Type13Vertex_XY_Type,14Point_XYZ_Type,15Point_XY_Type16Level_Type17Tin_Level_Type18Tin_Depth_Type19Grade_Percent_Type20Grade_1_In_Type25Tin_Aspect_Type27Tin_Slope_1_In_Type28Tin_Slope_Percent_Type29XYZ_Type30XY_Type,,,,,,,,,,,,Other input parameters: Text style_name; Text format_text; Real x-y coordinate for arrow pointax ay, hook point hx hyA return value of zero indicates the function call was successful.",
      "id": "3879"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative_segment(Text style_name, Text format_text, Integer type, Text ref_ele_name, Uid ref_ele_id, Text ref_mod_name, Uid ref_mod_id, Text ref_part_name, Integer ref_ip, Real ref_ext, Integer ref_method, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association segment belongs to a string with name and id ref_ele_name ref_ele_id withinthe containing models ref_mod_name ref_mod_id - the looking up method for the element isPage 754Drafting Elements\fChapter 5 12dPL Library Callsdetermined by Integer ref_method - not yet used. Within the given string, the segment is located using ref_part_name (only when the string is asuper alignment with named parts), or segment number ref_ip, the distance of the arrow to thestart of the segment ref_ext. The list of valid association (Integer) type is4Segment_Length_Type,5Segment_Length_3d_Type6Segment_Bearing_Type7Segment_Length_Bearing_Type,8Segment_Radius_Type11Segment_Text_Type,,,, segment text or segment attributes of a super stringOther input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3880"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative_element(Text style_name, Text format_text, Integer type, Text ref_ele_name, Uid ref_ele_id, Text ref_mod_name, Uid ref_mod_id, Text ref_part_name, Integer ref_ip, Real ref_ext, Integer ref_method, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association element is referenced by name and id ref_ele_name ref_ele_id within thecontaining models ref_mod_name ref_mod_id - the looking up method for the element isdetermined by Integer ref_method - not yet used. The location of the arrow is defined using ref_part_name (only when the element is a superalignment with named parts), or segment number ref_ip, the distance of the arrow to the start ofthe segment ref_ext. The list of valid association (Integer) type is1Area_Type,2String_Length_Type3String_Length_3d_Type9String_Name_Type,,, name or attributes of the element21Centroid_XY_Type,22Centre_XY_Type, medial axis centre of a string24Volume_Type, only for trimeshOther input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3881"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative_element(Text style_name, Text format_text, Integer type, Text ref_ele_name, Uid ref_ele_id, Text ref_mod_name, Uid ref_mod_id, Integer ref_method, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association element is referenced by name and id ref_ele_name ref_ele_id within thecontaining models ref_mod_name ref_mod_id - the looking up method for the element isdetermined by Integer ref_method - not yet used. The location of the arrow is automatically set at the centroid or centre of the selected elementThe list of valid association (Integer) type is1Area_Type,21Centroid_XY_Type,22Centre_XY_Type, medial axis centre of a stringOther input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3882"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative(Text style_name, Text format_text, Integer type, Text ref_tin, Real ax, Real ay, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association is defined by the arrow point coordinate ax ay and reference tin ref_tin (if thetype involves tin). The location of the arrow is automatically set at the centroid or centre of the selected elementThe list of valid association (Integer) type is17Tin_Level_Type,25Tin_Aspect_Type,26Tin_Colour_Type,27Tin_Slope_1_In_Type28Tin_Slope_Percent_Type29XYZ_Type30XY_Type,,,,Other input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyPage 756Drafting Elements\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3894"
    },
    {
      "names": [
        "Integer DRF_leader_text_create(Text style_name, Text leader_text, Element ref_string, Integer ref_ip, Real ref_ext, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new text leader as Element out_leader . The association of the arrow is referenced Element ref_string, segment number ref_ip, and thedistance to the start of the segment ref_ext. Other input parameters: Text style_name; Text leader_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3895"
    },
    {
      "names": [
        "Integer DRF_table_create(Text table_name, Text style_name, Integer auto_size, Integer nr, Integer nc, Real cw, Real rh, Integer ti, Integer hi, Real px, Real py, Real ar, Model &model, Element &table)"
      ],
      "description": "Create a drafting Element table (and add to Model model if the model valid)Table name table_name name of output elementName of table style style_nameAuto resizing table auto_size 0 for no, 1 for yesNumber of rows nrNumber of column ncColumn width cwRow height rhIncluding title row ti 0 for no, 1 for yesIncluding header row hi 0 for no, 1 for yesTop left x coordinate pxTop left y coordinate pyRotation angle of the table arA return value of zero indicates the function call was successful.",
      "id": "3059"
    },
    {
      "names": [
        "Integer DRF_table_edit_cell(Integer row, Integer column, Text value, Element &table)"
      ],
      "description": "Edit a cell of a drafting Element table at given row number row, column number column with thenew value Text valueA return value of one indicates the number row or column is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3060"
    },
    {
      "names": [
        "Integer DRF_table_edit_cell(Integer row, Integer column, Real value, Element &table)"
      ],
      "description": "Edit a cell of a drafting Element table at given row number row, column number column with thenew value Real valueA return value of one indicates the number row or column is out of bound. Page 758Drafting Elements\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3061"
    },
    {
      "names": [
        "Integer DRF_table_edit_cell(Integer row, Integer column, Integer value, Element &table)"
      ],
      "description": "Edit a cell of a drafting Element table at given row number row, column number column with thenew value Integer valueNote that row 1 is used for the title row and row 2 is used for the header row (even when they arenot used in the table). A return value of one indicates the number row or column is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3062"
    },
    {
      "names": [
        "Integer Macro_attribute_delete(Integer att_no)"
      ],
      "description": "Delete the macro attribute with the Integer att_no in current macro. A function return value of zero indicates the attribute was deleted.",
      "id": "3859"
    },
    {
      "names": [
        "Integer DRF_table_get_number_row_column(Element table, Integer &nr, Integer &nc)"
      ],
      "description": "Get the number of rows nr and the number of columns nc of a drafting Element table.  Note thatthe header and title row (if used) are not counted in nr. A return value of zero indicates the function call was successful. Drafting ElementsPage 759\f12d Model Programming Language Manual",
      "id": "3095"
    },
    {
      "names": [
        "Integer DRF_table_get_row_height(Element table, Integer row_number, Real &row_height)"
      ],
      "description": "Get row height row_height at row number row_number of a drafting Element tableA return value of zero indicates the function call was successful.",
      "id": "3096"
    },
    {
      "names": [
        "Integer DRF_table_get_column_width(Element table, Integer col_number, Real &col_width)"
      ],
      "description": "Get column width col_width at column number col_number of a drafting Element tableA return value of zero indicates the function call was successful.",
      "id": "3097"
    },
    {
      "names": [
        "Integer DRF_table_get_origin(Element table, Real &x_origin, Real &y_origin)"
      ],
      "description": "Get X-Y coordinate (x_origin,y_origin) of the origin point (top left corner) of a drafting Elementtable. A return value of zero indicates the function call was successful.",
      "id": "3203"
    },
    {
      "names": [
        "Integer DRF_table_get_offset(Element table, Real &x_offset, Real &y_offset)"
      ],
      "description": "Not yet implementedA return value of zero indicates the function call was successful.",
      "id": "3205"
    },
    {
      "names": [
        "Integer DRF_table_get_rotation(Element table, Real &rotation)"
      ],
      "description": "Page 760Drafting Elements\fChapter 5 12dPL Library CallsGet the rotation angle of a drafting Element table. A return value of zero indicates the function call was successful.",
      "id": "3207"
    },
    {
      "names": [
        "Integer DRF_table_set_row_height(Element table, Integer row_number, Real row_height)"
      ],
      "description": "Set row height to row_height at row number row_number of a drafting Element tableA return value of zero indicates the function call was successful.",
      "id": "3098"
    },
    {
      "names": [
        "Integer DRF_table_set_column_width(Element table, Integer col_number, Real col_width)"
      ],
      "description": "Set column width to col_width at column number col_number of a drafting Element tableA return value of zero indicates the function call was successful.",
      "id": "3099"
    },
    {
      "names": [
        "Integer DRF_table_set_origin(Element table, Real x_origin, Real y_origin)"
      ],
      "description": "Set the X-Y coordinate origin point (top left corner) of a drafting Element table to(x_origin,y_origin). A return value of zero indicates the function call was successful.",
      "id": "3202"
    },
    {
      "names": [
        "Integer DRF_table_set_offset(Element table, Real x_offset, Real y_offset)"
      ],
      "description": "Not yet implementedA return value of zero indicates the function call was successful.",
      "id": "3204"
    },
    {
      "names": [
        "Integer DRF_table_set_rotation(Element table, Real rotation)"
      ],
      "description": "Set the rotation angle of a drafting Element table to Real rotation. A return value of zero indicates the function call was successful.",
      "id": "3206"
    },
    {
      "names": [
        "Integer DRF_get_table_styles(Dynamic_Text &styles)"
      ],
      "description": "Set the list of texts styles with the names of all table styles in the current project. A return value of zero indicates the function call was successful.",
      "id": "3380"
    },
    {
      "names": [
        "Integer DRF_table_style_property(Text style_name, Text property_name, Integer &value)"
      ],
      "description": "Get the Interger value of the property property_name of a table style with given namestyle_name. If there is no table style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3470"
    },
    {
      "names": [
        "Integer DRF_table_style_property(Text style_name, Text property_name, Real &value)"
      ],
      "description": "Get the Real value of the property property_name of a table style with given name style_name. If there is no table style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3471"
    },
    {
      "names": [
        "Integer DRF_table_style_property(Text style_name, Text property_name, Text &value)"
      ],
      "description": "Get the Text value of the property property_name of a table style with given name style_name. If there is no table style of given name, the return value is 1. Page 762Drafting Elements\fChapter 5 12dPL Library CallsThis function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3472"
    },
    {
      "names": [
        "Integer DRF_table_edit_resize(Integer nr, Integer nc, Element &table)"
      ],
      "description": "Resize the number of row and column of a drafting Element table to Integers nr and ncrespectively. A return value of zero indicates the resize was successful.",
      "id": "3816"
    },
    {
      "names": [
        "Integer DRF_table_edit_resize_column(Integer nc, Element &table)"
      ],
      "description": "Resize the number of column of a drafting Element table to Integer nrA return value of zero indicates the resize was successful.",
      "id": "3817"
    },
    {
      "names": [
        "Integer DRF_table_edit_resize_row(Integer nr, Element &table)"
      ],
      "description": "Resize the number of row of a drafting Element table to Integer nrA return value of zero indicates the resize was successful.",
      "id": "3818"
    },
    {
      "names": [
        "Integer DRF_recalc(Element &draft)"
      ],
      "description": "Recalculate a drafting element draftA return value of zero indicates the function call was successful.",
      "id": "3100"
    },
    {
      "names": [
        "Integer DRF_get_style(Element draft, Text &style)"
      ],
      "description": "Get the style name style of a drafting element draftA return value of zero indicates the function call was successful.",
      "id": "3091"
    },
    {
      "names": [
        "Integer DRF_drafting_edit_set_style(Text style_name, Element &draft)"
      ],
      "description": "Change the style of a drafting Element draft to a new style with the name Text style_name. A return value of zero indicates the function call was successful.",
      "id": "2980"
    },
    {
      "names": [
        "Integer DRF_drafting_edit_set_format_text(Text new_text, Element &draft)"
      ],
      "description": "Update the text format of a dimension or leader text of a leader Element draft to a new Textnew_text. A return value of zero indicates the function call was successful.",
      "id": "2981"
    },
    {
      "names": [
        "Integer DRF_get_override_names(Element drf, Integer &count, Dynamic_Text &names, Dynamic_Integer &types)"
      ],
      "description": "Get all the style overriding information of a drafting element drf, including: the number count offields being override, the list of all those field names, the list of types for the value of thoseoverrides.  The sizes the two lists names and types should equal count.  The value in the listtypes should be 2 - Integer or 3 - Real or 4 - Text. A return value of zero indicates the function call was successful.",
      "id": "3463"
    },
    {
      "names": [
        "Integer DRF_get_override_value(Element drf, Text name, Integer &value)"
      ],
      "description": "Get the Integer value of override of a drafting element drf with the field of given name. If the input is not a drafting element, the return value is 1. If the input drafting elment has no override, the return value is 8. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If there is no override of the given name, the return value is 15. If the override of the given name is not of Integer type, the return value is 16. If the value of the override is invalid, the return value is 17A return value of zero indicates the function call was successful.",
      "id": "3464"
    },
    {
      "names": [
        "Integer DRF_get_override_value(Element drf, Text name, Real &value)"
      ],
      "description": "Get the Real value of override of a drafting element drf with the field of given name. If the input is not a drafting element, the return value is 1. If the input drafting elment has no override, the return value is 8. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If there is no override of the given name, the return value is 15. If the override of the given name is not of Real type, the return value is 16. If the value of the override is invalid, the return value is 17A return value of zero indicates the function call was successful.",
      "id": "3465"
    },
    {
      "names": [
        "Integer DRF_get_override_value(Element drf, Text name, Text &value)"
      ],
      "description": "Get the Text value of override of a drafting element drf with the field of given name. If the input is not a drafting element, the return value is 1. If the input drafting elment has no override, the return value is 8. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If there is no override of the given name, the return value is 15. If the override of the given name is not of Text type, the return value is 16. If the value of the override is invalid, the return value is 17A return value of zero indicates the function call was successful.",
      "id": "3466"
    },
    {
      "names": [
        "Integer DRF_set_override_value(Element &drf, Text name, Integer value)"
      ],
      "description": "Set the Integer value of the override of given name in a drafting element drf. If the input is not a drafting element, the return value is 1. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If the override of the given name is not of Integer type, the return value is 16. A return value of zero indicates the function call was successful.",
      "id": "3467"
    },
    {
      "names": [
        "Integer DRF_set_override_value(Element &drf, Text name, Real value)"
      ],
      "description": "Set the Real value of the override of given name in a drafting element drf. If the input is not a drafting element, the return value is 1. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If the override of the given name is not of Real type, the return value is 16. A return value of zero indicates the function call was successful.",
      "id": "3468"
    },
    {
      "names": [
        "Integer DRF_set_override_value(Element &drf, Text name, Text value)"
      ],
      "description": "Set the Text value of the override of given name in a drafting element drf. Page 766Drafting Elements\fChapter 5 12dPL Library CallsIf the input is not a drafting element, the return value is 1. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If the override of the given name is not of Text type, the return value is 16. A return value of zero indicates the function call was successful.",
      "id": "3469"
    },
    {
      "names": [
        "Integer DRF_clear_overrides(Element &drf)"
      ],
      "description": "Clear all overrides of a drafting elment drf. A return value of zero indicates the function call was successful.",
      "id": "3482"
    },
    {
      "names": [
        "Integer DRF_remove_association(Element &drf)"
      ],
      "description": "Clear all associative object of a drafting elment drf. A return value of zero indicates the function call was successful.",
      "id": "3897"
    },
    {
      "names": [
        "Integer DRF_is_associative(Element drf, Integer &is_associative)"
      ],
      "description": "Check to see if the drafting elment drf has any associative object and set Integer is_associativeto 1 if the answer is yes, 0 otherwiseA return value of zero indicates the function call was successful.",
      "id": "3898"
    },
    {
      "names": [
        "Integer Trimesh_number_of_points(Element trimesh, Integer &number_points)"
      ],
      "description": "Get the number of points number_points of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3005"
    },
    {
      "names": [
        "Integer Trimesh_number_of_triangles(Element trimesh, Integer &number_triangles)"
      ],
      "description": "Get the number of triangles number_triangles of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3006"
    },
    {
      "names": [
        "Integer Trimesh_number_of_edges(Element e, Integer &number_edges)"
      ],
      "description": "Get the number of edges number_edges of a trimesh Element trimesh. Page 768Trimesh Element\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3525"
    },
    {
      "names": [
        "Integer Trimesh_get_point_coord(Element trimesh, Integer point_index, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the xyz-coordinate x y z of the point with index point_index of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3007"
    },
    {
      "names": [
        "Integer Trimesh_get_triangle_points(Element trimesh, Integer triangle_index, Integer &p1_index, Integer &p2_index, Integer &p3_index)"
      ],
      "description": "Get three point indices p1_index p2_index p3_index of the triangle with index triangle_indexof a trimesh Element trimesh. The points in the triangles p1_index, p2_index and p3_index are in a counter clockwise orderaround the triangle.  See 5. 51 Trimesh Element. p1_indexnormal pointingoutp2_indexp3_indexA return value of zero indicates the function call was successful.",
      "id": "3008"
    },
    {
      "names": [
        "Integer Trimesh_get_triangle_points_coords(Element trimesh, Integer triangle_index, Integer &p1_index, Integer &p2_index, Integer &p3_index, Real &x1, Real &y1, Real &z1, Real &x2, Real &y2, Real &z2, Real &x3, Real &y3, Real &z3)"
      ],
      "description": "Get three point indices p1_index p2_index p3_index of the triangle with index triangle_indexof a trimesh Element trimesh; and also the xyz-coordinate of the three point x1 y1 z1, x2 y2 z2,Trimesh ElementPage 769\f12d Model Programming Language Manualx3, y3, z3. The points p1_index, p2_index and p3_index are in a counter clockwise order around thetriangle.  See 5. 51 Trimesh ElementPlan Viewp1_indexp2_indexnormal pointingoutp3_indexA return value of zero indicates the function call was successful.",
      "id": "3009"
    },
    {
      "names": [
        "Integer Trimesh_get_triangle_edges(Element trimesh, Integer triangle_index, Integer &e1_index, Integer &e2_index, Integer &e3_index)"
      ],
      "description": "Get three indices e1_index e2_index e3_index of the three edges of the triangle with indextriangle_index of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3526"
    },
    {
      "names": [
        "Integer Trimesh_get_edge_triangles_points(Element e, Integer edge_index, Integer &triangles_count, Integer &triangle1_index, Integer &triangle2_index, Integer &vertex1_index, Integer &vertex2_index)"
      ],
      "description": "Get the details of edge with given edge_index of a Element eNumber of triangles contain that edge triangles_count.  On a \"good\" closed trimesh, this numbershould be always 2. The indices of the two triangles containing the edge: triangle1_index, triangle2_index. The indices of the two vertices at the two end of the edge: vertex1_index, vertex2_index. A return value of zero indicates the function call was successful.",
      "id": "3527"
    },
    {
      "names": [
        "Integer Is_trimesh(Element e)"
      ],
      "description": "Return 1 if the input Element e is a trimesh; return 0 for otherwise.",
      "id": "3010"
    },
    {
      "names": [
        "Integer Get_trimesh_centroid(Element trimesh, Real &centroid_x, Real &centroid_y, Real &centroid_z)"
      ],
      "description": "Get the xyz-coordinate centroid_x centroid_y centroid_z of the centroid of the trimeshA return value of zero indicates the function call was successful.",
      "id": "3019"
    },
    {
      "names": [
        "Integer Get_trimesh_surface_area(Element trimesh, Real &area)"
      ],
      "description": "Get surface area of an trimesh Element trimeshA return value of zero indicates the function call was successful.",
      "id": "3020"
    },
    {
      "names": [
        "Integer Get_trimesh_volume(Element trimesh, Real &volume)"
      ],
      "description": "Get Real volume of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3033"
    },
    {
      "names": [
        "Integer Trimesh_closed(Element trimesh, Integer &is_closed)"
      ],
      "description": "Set the value is_closed to 1 if trimesh Element trimesh l is closed; 0 otherwiseA return value of zero indicates the function call was successful.",
      "id": "3021"
    },
    {
      "names": [
        "Integer Trimesh_get_solid(Element e, Integer &solid)"
      ],
      "description": "Get the value solid of given trimesh 1 is solid; 0 otherwiseA return value of zero indicates the function call was successful.",
      "id": "7699"
    },
    {
      "names": [
        "Integer Trimesh_set_solid(Element e, Integer solid)"
      ],
      "description": "Set the value solid to 1 if trimesh Element trimesh is solid; 0 otherwiseA return value of zero indicates the function call was successful.",
      "id": "7700"
    },
    {
      "names": [
        "Integer Form_trimesh_from_tin(Tin tin, Text mesh_name, Real mesh_offset, Real mesh_depth, Integer colour, Element &trimesh_out)"
      ],
      "description": "Do not use this one as the output only the first one from the list. Use Form_trimeshes_from_tin insteadForm a trimesh trimesh_out with name mesh_name, colour, from a tin, offset mesh_offset,depth mesh_depthA return value of zero indicates the function call was successful.",
      "id": "3023"
    },
    {
      "names": [
        "Integer Form_trimeshes_from_tin(Tin tin, Text mesh_name, Real mesh_offset, Real mesh_depth, Integer colour, Dynamic_Element &trimeshes_out)"
      ],
      "description": "Form a trimesh trimesh_out with name mesh_name, colour, from a tin, offset mesh_offset,depth mesh_depthA return value of zero indicates the function call was successful.",
      "id": "3092"
    },
    {
      "names": [
        "Integer Form_trimesh_from_points(Dynamic_Real xyzs, Dynamic_Integer face_ix, Element &trimesh_out)"
      ],
      "description": "Form a trimesh trimesh_out from a list of xyz-coordinates xyzs, and a list of vertex index forfaces face_ixA return value of zero indicates the function call was successful. Note that the two list number are grouped by triple, the first one as the xyz of point, the secondone as index of three corners of triangleExample of xyzs {0 1 0 1 0 0 0 -1 0 -1 0 0 0 0 1} defines a square with four points on z = 0plane and a top point in the middleface_ix {3 2 1 4 3 1 1 2 5 2 3 5 3 4 5 4 1 5} define 6 faces of the pyramid: 2 at the base,and 4 on four sides",
      "id": "3093"
    },
    {
      "names": [
        "Integer Form_trimesh_from_points(Dynamic_Real xyzs, Dynamic_Integer face_ix, Dynamic_Integer colour_lists, Dynamic_Integer colour_ix, Element &trimesh_out)"
      ],
      "description": "Form a trimesh trimesh_out from a list of xyz-coordinates xyzs, and a list of vertex index forfaces face_ixFaces of trimesh are coloured according to the index colour_ix as referring to the list of colourscolour_listsA return value of zero indicates the function call was successful. Note that the two list number are grouped by triple, the first one as the xyz of point, the secondone as index of three corners of triangleExample of xyzs {0 1 0 1 0 0 0 -1 0 -1 0 0 0 0 1} defines a square with four points on z = 0plane and a top point in the middleface_ix {3 2 1 4 3 1 1 2 5 2 3 5 3 4 5 4 1 5} define 6 faces of the pyramid: 2 at the base,and 4 on four sidescolour_lists {5 9} assume that 5 means blue and 9 means greenThe size of colour_ix must equal one third of the size of face_ixcolour_ix {1 1 2 2 2 2} defines that the two base triangles of the pyramid are blue and the foursides are green",
      "id": "3094"
    },
    {
      "names": [
        "Integer Trimesh_get_face_colour(Element trimesh, Integer face_index, Integer &colour)"
      ],
      "description": "Get the colour of a face with index face_index of a trimesh Element trimesh. Trimesh ElementPage 773\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "3032"
    },
    {
      "names": [
        "Integer Form_trimeshes_from_element(Element e, Integer flags, Integer copy_attributes, Text name_prepost, Dynamic_Element &trimeshes_list)"
      ],
      "description": "Create a list trimeshes trimeshes_list from the Element eCreation flag Integer flag: 0 for everything, or a sum of a subset of0x001 Extrude0x002 OBJ-mesh0x004 Billboard0x008 Super String Pipe0x010 Super String Culvert0x020 Drainage String0x040 Super Alignment0x080 Pipeline StringFlag for copying attribute from input element to result trimesh copy_attributes: 0 not copyattributes, 1 copy attributesPre*post rule for naming result trimeshes name_prepost based on the name of input elementA return value of zero indicates the function call was successful.",
      "id": "3050"
    },
    {
      "names": [
        "Integer Form_trimesh_from_polygons(Dynamic_Element polygons, Integer vertex_info, Integer edge_info, Integer face_info, Text mesh_name, Integer mesh_colour, Element &trimesh_out, Text &return_message)"
      ],
      "description": "Form a trimesh trimesh_out using a list of input 3D polygons polygonFlag vertex_info (0 no 1 yes) for copy vertex ids of polygons to vertex info of result trimeshFlag edge_info (0 no 1 yes) for copy segment names of polygons to edge info of result trimeshFlag face_info (0 no 1 yes) for copy face colour of polygons to face colours of result trimeshName of result mesh mesh_nameColour of result mesh mesh_colourOutput message return_messageA return value of zero indicates the function call was successful.",
      "id": "3063"
    },
    {
      "names": [
        "Integer Form_trimesh_from_polygons(Dynamic_Element polygons, Integer vertex_info, Integer edge_info, Integer face_info, Text mesh_name, Integer mesh_colour, Integer polymesh, Element &trimesh_out, Text &return_message)"
      ],
      "description": "Form a trimesh trimesh_out using a list of input 3D polygons polygonFlag vertex_info (0 no 1 yes) for copy vertex ids of polygons to vertex info of result trimeshFlag edge_info (0 no 1 yes) for copy segment names of polygons to edge info of result trimeshFlag face_info (0 no 1 yes) for copy face colour of polygons to face colours of result trimeshFlag polymesh (0 no 1 yes) for using the input polygons as polymesh faces of result trimeshName of result mesh mesh_nameColour of result mesh mesh_colourOutput message return_messageA return value of zero indicates the function call was successful.",
      "id": "7639"
    },
    {
      "names": [
        "Integer Trimesh_section(Element trimesh, Real point_x, Real point_y, Real point_z, Real point_direction, Real point_grade, Real width, Real height, Integer &internal_return, Integer &result_closed, Integer &size_section_points, Dynamic_Real &section_xs, Dynamic_Real &section_ys, Dynamic_Real &section_world_xs, Dynamic_Real &section_world_ys, Dynamic_Real &section_world_zs, Dynamic_Integer &section_edge_indexes, Dynamic_Text &section_edge_names, Dynamic_Integer &section_edge_colours, Dynamic_Integer &section_vertex_indexes, Dynamic_Text &section_vertex_names, Dynamic_Integer &section_vertex_colours)"
      ],
      "description": "Section through the trimesh using a given 3D rectangle. The centre of the rectangle is given by the X-Y-Z coordinate (point_x, point_y, point_z).  Therotation angle of the rectangle in the X-Y plane (in radian anticlockwise from the X-axis) is givenby point_direction.  The tilt angle of the rectangle in relative to the Z-axis (in radian) is given bypoint_grade.  The sizes of the rectangle are given by width and height. Integer internal_return might give some indication why the sectioning failed, the list of valuesare given bellow. Trimesh ElementPage 775\f12d Model Programming Language ManualIf the sectioning is a closed cut, then result_closed is 1; and 0 otherwise. The number of points of the result sectioning is given in size_section_points. The last 11 parameters are details about those sectioning points.  All of them should be list withexactly size_section_points items in each.  The first items on those list are information about thefirst point of the sectioning; and the second items on those list are information about the secondpoint of the sectioning; and so forth. section_xs, section_ys: x-y-coordinate of the section points on the section plane (where theorigin is of the world coordinate (point_x, point_y, point_z)). section_world_xs, section_world_ys, section_world_zs: world x-y-z-coordinate of thesection pointssection_edge_indexes: if none zero, then it is the edge index of the trimesh edge that thesection point is in; and then the names and colours of those edge are given insection_edge_names and section_edge_colours. section_vertex_indexes: if none zero, then it is the vertex index of the trimesh vertex that thesection point is in; and then the names and colours of those vertices are given insection_vertex_names and section_vertex_colours. A return value of 0 indicates the function call was successful. A return value of 1 indicates Element trimesh is not a trimesh nor a trimesh reference. A return value of 2 indicates Element trimesh is not valid. A return value of -1, -2, -3, or -4 indicates there are internal error with the Element trimesh. A return value of 12 indicates the sectioning was not successful.  The Integer internal_returncoming from the list might indicate the reason. 0 Ok,1 Not A Vertical Section,2 Null Data,3 Non Manifold,4 Not Closed,5 Not Connected,6 No Intersection,7 Partial Intersection,8 Multiple Intersection,9 Unknown,",
      "id": "3208"
    },
    {
      "names": [
        "Integer Trimesh_get_blend_factor(Element trimesh, Real &blend_factor)"
      ],
      "description": "Get the blend_factor of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3382"
    },
    {
      "names": [
        "Integer Trimesh_set_blend_factor(Element trimesh, Real blend_factor)"
      ],
      "description": "Set new value for the blend_factor of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3383"
    },
    {
      "names": [
        "Integer Trimesh_get_face_infos_count(Element e, Integer &infos_count)"
      ],
      "description": "Get the size infos_count of the face information list of a trimesh e. The function returns 9 if the trimesh has no face information. A return value of zero indicates the function call was successful.",
      "id": "3489"
    },
    {
      "names": [
        "Integer Trimesh_get_face_info_by_index(Element e, Integer info_index, Integer &colour, Text &name)"
      ],
      "description": "Get the colour and name of the item with given index info_index in the face information list of atrimesh e. The function returns 9 if the trimesh has no face information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3490"
    },
    {
      "names": [
        "Integer Trimesh_set_face_info_by_index(Element e, Integer info_index, Integer colour, Text name)"
      ],
      "description": "Set the colour and name of the item with given index info_index in the face information list of atrimesh e. The function returns 9 if the trimesh has no face information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3491"
    },
    {
      "names": [
        "Integer Trimesh_append_face_info(Element e, Integer colour, Text name)"
      ],
      "description": "Append a new information item with given colour and name to the end of the face informationlist of a trimesh e. A return value of zero indicates the function call was successful.",
      "id": "3492"
    },
    {
      "names": [
        "Integer Trimesh_get_face_info_index(Element e, Integer face_number, Integer &info_index)"
      ],
      "description": "Get the info_index of a face with given number face_number of a trimesh e. The function returns 9 if the trimesh has no face information. The function returns 3 if the given face_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3493"
    },
    {
      "names": [
        "Integer Trimesh_set_face_info_index(Element e, Integer face_number, Integer info_index)"
      ],
      "description": "Set the info_index of a face with given number face_number of a trimesh e. The function returns 9 if the trimesh has no face information. The function returns 3 if the given face_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3494"
    },
    {
      "names": [
        "Integer Trimesh_set_face_infos_flags(Element e, Dynamic_Integer colours, Dynamic_Text names, Dynamic_Integer flags)"
      ],
      "description": "Replace all the face information in a trimesh e with new details from two lists colours, names. The two list must be of the same sizes or the function returns 5. Also set all the infomation index of all faces to the values in the list flags, if the size of flags isdifferent from the number of faces in the trimesh, the function returns 6. If any index in the list flags is not valid, the function returns 7; a valid index can be 0 (meaning noPage 778Trimesh Element\fChapter 5 12dPL Library Callsinformation used for that face) or any value in the range 1 to the size of colours. A return value of zero indicates the function call was successful.",
      "id": "3495"
    },
    {
      "names": [
        "Integer Trimesh_get_edge_infos_count(Element e, Integer &infos_count)"
      ],
      "description": "Get the size infos_count of the edge information list of a trimesh e. The function returns 9 if the trimesh has no edge information. A return value of zero indicates the function call was successful.",
      "id": "3496"
    },
    {
      "names": [
        "Integer Trimesh_get_edge_info_by_index(Element e, Integer info_index, Integer &colour, Text &name)"
      ],
      "description": "Get the colour and name of the item with given index info_index in the edge information list ofa trimesh e. The function returns 9 if the trimesh has no edge information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3497"
    },
    {
      "names": [
        "Integer Trimesh_set_edge_info_by_index(Element e, Integer info_index, Integer colour, Text name)"
      ],
      "description": "Set the colour and name of the item with given index info_index in the edge information list of atrimesh e. The function returns 9 if the trimesh has no edge information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3498"
    },
    {
      "names": [
        "Integer Trimesh_append_edge_info(Element e, Integer colour, Text name)"
      ],
      "description": "Append a new information item with given colour and name to the end of the edge informationlist of a trimesh e. A return value of zero indicates the function call was successful.",
      "id": "3499"
    },
    {
      "names": [
        "Integer Trimesh_get_edge_info_index(Element e, Integer edge_number, Integer &info_index)"
      ],
      "description": "Get the info_index of an edge with given number edge_number of a trimesh e. The function returns 9 if the trimesh has no edge information. The function returns 3 if the given edge_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3500"
    },
    {
      "names": [
        "Integer Trimesh_set_edge_info_index(Element e, Integer edge_number, Integer info_index)"
      ],
      "description": "Set the info_index of an edge with given number edge_number of a trimesh e. The function returns 9 if the trimesh has no edge information. The function returns 3 if the given edge_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3501"
    },
    {
      "names": [
        "Integer Trimesh_set_edge_infos_flags(Element e, Dynamic_Integer colours, Dynamic_Text names, Dynamic_Integer flags)"
      ],
      "description": "Replace all the edge information in a trimesh e with new details from two lists colours, names. The two list must be of the same sizes or the function returns 5. Also set all the infomation index of all edges to the values in the list flags, if the size of flags isdifferent from the number of edges in the trimesh, the function returns 6. If any index in the list flags is not valid, the function returns 7; a valid index can be 0 (meaning noinformation used for that edge) or any value in the range 1 to the size of colours. A return value of zero indicates the function call was successful.",
      "id": "3502"
    },
    {
      "names": [
        "Integer Trimesh_get_vertex_infos_count(Element e, Integer &infos_count)"
      ],
      "description": "Get the size infos_count of the vertices information list of a trimesh e. The function returns 9 if the trimesh has no vertex information. A return value of zero indicates the function call was successful.",
      "id": "3764"
    },
    {
      "names": [
        "Integer Trimesh_get_vertex_info_by_index(Element e, Integer info_index, Integer &colour, Text &name)"
      ],
      "description": "Get the colour and name of the item with given index info_index in the vertex information list ofa trimesh e. The function returns 9 if the trimesh has no vertex information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3765"
    },
    {
      "names": [
        "Integer Trimesh_set_vertex_info_by_index(Element e, Integer info_index, Integer colour, Text name)"
      ],
      "description": "Set the colour and name of the item with given index info_index in the vertex information list ofa trimesh e. The function returns 9 if the trimesh has no vertex information. The function returns 3 if the given index info_index is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3766"
    },
    {
      "names": [
        "Integer Trimesh_append_vertex_info(Element e, Integer colour, Text name)"
      ],
      "description": "Append a new information item with given colour and name to the end of the vertex informationlist of a trimesh e. A return value of zero indicates the function call was successful. Trimesh ElementPage 781\f12d Model Programming Language Manual",
      "id": "3767"
    },
    {
      "names": [
        "Integer Trimesh_get_vertex_info_index(Element e, Integer vertex_number, Integer &info_index)"
      ],
      "description": "Get the info_index of a vertex with given number vertex_number of a trimesh e. The function returns 9 if the trimesh has no vertex information. The function returns 3 if the given vertex_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3768"
    },
    {
      "names": [
        "Integer Trimesh_set_vertex_info_index(Element e, Integer vertex_number, Integer info_index)"
      ],
      "description": "Set the info_index of a vertex with given number vertex_number of a trimesh e. The function returns 9 if the trimesh has no vertex information. The function returns 3 if the given vertex_number is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3769"
    },
    {
      "names": [
        "Integer Trimesh_set_vertex_infos_flags(Element e, Dynamic_Integer colours, Dynamic_Text names, Dynamic_Integer flags)"
      ],
      "description": "Replace all the vertex information in a trimesh e with new details from two lists colours, names. The two list must be of the same sizes or the function returns 5. Also set all the infomation index of all vertices to the values in the list flags, if the size of flags isdifferent from the number of vertices in the trimesh, the function returns 6. If any index in the list flags is not valid, the function returns 7; a valid index can be 0 (meaning noinformation used for that vertex) or any value in the range 1 to the size of colours. A return value of zero indicates the function call was successful.",
      "id": "3770"
    },
    {
      "names": [
        "Integer Trimesh_drop_point_3d(Element trimesh, Real point_x, Real point_y, Real point_z, Integer &vert_ix, Real &vert_o, Real &vert_dr_x, Real &vert_dr_y, Real &vert_dr_z, Integer &edge_ix, Real &edge_o, Real &edge_dr_x, Real &edge_dr_y, Real &edge_dr_z, Integer &face_ix, Real &face_o, Real &face_dr_x, Real &face_dr_y, Real &face_dr_z)"
      ],
      "description": "Drop a point with xyz coordinate (point_x,point_y,point_z) to a trimesh Element to get theresults on:Vertex: index vert_ix, offset vert_o, drop to position (vert_dr_z,vert_dr_y,vert_dr_z)Edge: index edge_ix, offset edge_o, drop to position (edge_dr_z,edge_dr_y,edge_dr_z)Face: index face_ix, offset face_o, drop to position (face_dr_z,face_dr_y,face_dr_z)A return value of zero indicates the function call was successful.",
      "id": "3503"
    },
    {
      "names": [
        "Integer Trimesh_edit_set_vertex(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Set the vertex index i of a trimesh element e to a new xyz coordinate (x,y,z)The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3504"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_vertex(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Move the xyz coordinate of vertex index i of a trimesh element e by (dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3505"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_edge(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Move the xyz coordinates of the two ends of the edge with index i of a trimesh element e by(dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. Trimesh ElementPage 783\f12d Model Programming Language ManualA return value of zero indicates the function call was successful.",
      "id": "3506"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_face(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Move the xyz coordinates of the three conners of the face with index i of a trimesh element e by(dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3507"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_vertices(Element e, Dynamic_Integer is, Real dx, Real dy, Real dz, Text &error)"
      ],
      "description": "Move the xyz coordinates of all vertices with index given in the list is of a trimesh element e by(dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3508"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_vertices(Element e, Real dx, Real dy, Real dz, Text &error)"
      ],
      "description": "Move the xyz coordinates of all vertices of a trimesh element e by (dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3509"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_vertex(Element e, Integer i, Text &error)"
      ],
      "description": "Hide the vertex with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. Page 784Trimesh Element\fChapter 5 12dPL Library Calls",
      "id": "3510"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_edge(Element e, Integer i, Text &error)"
      ],
      "description": "Hide the edge with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3511"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_face(Element e, Integer i, Text &error)"
      ],
      "description": "Hide the face with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3512"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_vertices(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Hide the vertices with indices given by the list is of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3513"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_edges(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Hide the edges with indices given by the list isof a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3514"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_faces(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Hide the faces with indices given by the list is of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3515"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_vertex(Element e, Integer i, Text &error)"
      ],
      "description": "Remove the vertex with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3516"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_edge(Element e, Integer i, Text &error)"
      ],
      "description": "Remove the edge with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3517"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_face(Element e, Integer i, Text &error)"
      ],
      "description": "Remove the face with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3518"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_vertices(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Page 786Trimesh Element\fChapter 5 12dPL Library CallsRemove the vertices with indices given by the list is of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3519"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_edges(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Remove the edges with indices given by the list isof a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3520"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_faces(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Remove the faces with indices given by the list is of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3521"
    },
    {
      "names": [
        "Integer Trimesh_edit_add_vertex(Element e, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Add a new the vertex with xyz coordinate (x,y,z) to the trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3522"
    },
    {
      "names": [
        "Integer Trimesh_edit_add_face(Element e, Integer i, Integer j, Integer k, Text &error)"
      ],
      "description": "Add a new the face with the three corners as vertices with indices i,j,k to the trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. Trimesh ElementPage 787\f12d Model Programming Language Manual",
      "id": "3523"
    },
    {
      "names": [
        "Integer Trimesh_edit_split_edge(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Split the edge with index i of a trimesh element e at a point with xyz coordinate (x,y,z). The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3524"
    },
    {
      "names": [
        "Integer Trimesh_boolean_union(Element trimesh1, Element trimesh2, Integer keep_vertex_info, Integer keep_edge_info, Integer keep_face_info, Text output_trimesh_name, Integer output_trimesh_colour, Element &trimesh_out, Text &error)"
      ],
      "description": "Find the boolean union of trimesh1 and trimesh2 and assign the result to (trimesh) Elementtrimesh_out.  The name output_trimesh_name and the colour output_trimesh_colour will beused for the result.  The result trimesh will also keep the vertices, edges, faces information of theoriginal trimeshes if the respective values of keep_vertex_info, keep_edge_info,keep_face_info are non zero. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3803"
    },
    {
      "names": [
        "Integer Trimesh_boolean_difference(Element trimesh1, Element trimesh2, Integer keep_vertex_info, Integer keep_edge_info, Integer keep_face_info, Text output_trimesh_name, Integer output_trimesh_colour, Element &trimesh_out, Text &error)"
      ],
      "description": "Find the boolean difference between trimesh1 and trimesh2 and assign the result to (trimesh)Element trimesh_out.  The name output_trimesh_name and the colouroutput_trimesh_colour will be used for the result.  The result trimesh will also keep the vertices,edges, faces information of the original trimeshes if the respective values of keep_vertex_info,keep_edge_info, keep_face_info are non zero. The Text error would be set to the corresponding error message if the function failed. Page 788Trimesh Element\fChapter 5 12dPL Library CallsA return value of zero indicates the function call was successful.",
      "id": "3804"
    },
    {
      "names": [
        "Integer Trimesh_boolean_intersection(Element trimesh1, Element trimesh2, Integer keep_vertex_info, Integer keep_edge_info, Integer keep_face_info, Text output_trimesh_name, Integer output_trimesh_colour, Element &trimesh_out, Text &error)"
      ],
      "description": "Find the boolean intersection of trimesh1 and trimesh2 and assign the result to (trimesh)Element trimesh_out.  The name output_trimesh_name and the colouroutput_trimesh_colour will be used for the result.  The result trimesh will also keep the vertices,edges, faces information of the original trimeshes if the respective values of keep_vertex_info,keep_edge_info, keep_face_info are non zero. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3805"
    },
    {
      "names": [
        "Integer Get_trimesh_areas(Element trimesh, Integer &has_top_area, Real &top_area, Integer &has_bottom_area, Real &bottom_area, Integer &has_surrounding_area, Real &surrounding_area, Integer &has_surface_area, Real &surface_area, Integer &has_top_plan_area, Real &top_plan_area, Integer &has_bottom_plan_area, Real &bottom_plan_area, Text &error)"
      ],
      "description": "Get various area information of a simple trimesh Element trimesh and assign the result tovariables of corresponding names. For each type of area there is a corresponding Integer flag indicate that it is valid.  For example:the Real top_area only valid when Integer has_top_area is 1. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3806"
    },
    {
      "names": [
        "Integer Get_trimesh_top_faces(Element trimesh, Integer faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the top faces of a simple trimesh Element trimesh and assign the total number to Integerfaces_count and the list of face indices to Dynamic_Integer face_indices. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3807"
    },
    {
      "names": [
        "Integer Get_trimesh_bottom_faces(Element trimesh, Integer faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the bottom faces of a simple trimesh Element trimesh and assign the total number toInteger faces_count and the list of face indices to Dynamic_Integer face_indices. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3808"
    },
    {
      "names": [
        "Integer Get_trimesh_surrounding_faces(Element trimesh, Integer faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the surrounding faces of a simple trimesh Element trimesh and assign the total numberto Integer faces_count and the list of face indices to Dynamic_Integer face_indices. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3809"
    },
    {
      "names": [
        "Integer Get_trimesh_collapsing_faces(Element trimesh, Integer faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "A face of a trimesh is called collapsing if its area is zero, in another word the normal vector of acollapsing face is undefined. Get all the collapsing faces of a simple trimesh Element trimesh and assign the total number toInteger faces_count and the list of face indices to Dynamic_Integer face_indices. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. Page 790Trimesh Element\fChapter 5 12dPL Library Calls",
      "id": "3810"
    },
    {
      "names": [
        "Integer Get_trimesh_areas(Element trimesh, Real tolerance, Integer &has_top_area, Real &top_area, Integer &has_bottom_area, Real &bottom_area, Integer &has_surrounding_area, Real &surrounding_area, Integer &has_surface_area, Real &surface_area, Integer &has_top_plan_area, Real &top_plan_area, Integer &has_bottom_plan_area, Real &bottom_plan_area, Text &error)"
      ],
      "description": "Get various areas information of a simple trimesh Element trimesh based on given toleranceand assign the result to variables of corresponding names. For each type of area there is a corresponding Integer flag indicate that it is valid.  For example:the Real top_area only valid when Integer has_top_area is 1. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3826"
    },
    {
      "names": [
        "Integer Get_trimesh_top_faces(Element trimesh, Real tolerance, Integer &patches_count, Dynamic_Integer &patch_sizes, Integer &faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the top faces of a simple trimesh Element trimesh based on given tolerance and assignthe total number to Integer faces_count and the list of face indices to Dynamic_Integerface_indices.  These indices are grouped into continuous patches, the number of patches isreturned in patches_count, and the sizes for indivisual patches are returned in patch_sizes. For example: faces_count = 8 and face_indices = { 1,3, 5,9,6, 12,13,7 }patches_count = 3 and patch_sizes = {3, 2, 3}. There are 8 top faces which are grouped into 3 patches, the first patch contains three triangles{1,3,5}, the second patch contains two triangles {9,6}, and the third patch contain three triangles{13,7}. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3830"
    },
    {
      "names": [
        "Integer Get_trimesh_bottom_faces(Element trimesh, Real tolerance, Integer &patches_count, Dynamic_Integer &patch_sizes, Integer &faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the bottom faces of a simple trimesh Element trimesh based on given tolerance andassign the total number to Integer faces_count and the list of face indices to Dynamic_Integerface_indices.  These indices are grouped into continuous patches, the number of patches isreturned in patches_count, and the sizes for indivisual patches are returned in patch_sizes. For example: faces_count = 8 and face_indices = { 1,3, 5,9,6, 12,13,7 }patches_count = 3 and patch_sizes = {3, 2, 3}. There are 8 bottom faces which are grouped into 3 patches, the first patch contains threetriangles {1,3,5}, the second patch contains two triangles {9,6}, and the third patch contain threetriangles {13,7}. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3827"
    },
    {
      "names": [
        "Integer Get_trimesh_collapsing_faces(Element trimesh, Real tolerance, Integer &patches_count, Dynamic_Integer &patch_sizes, Integer &faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the collapsing faces of a simple trimesh Element trimesh based on given tolerance andassign the total number to Integer faces_count and the list of face indices to Dynamic_Integerface_indices.  These indices are grouped into continuous patches, the number of patches isreturned in patches_count, and the sizes for indivisual patches are returned in patch_sizes. For example: faces_count = 8 and face_indices = { 1,3, 5,9,6, 12,13,7 }patches_count = 3 and patch_sizes = {3, 2, 3}. There are 8 collapsing faces which are grouped into 3 patches, the first patch contains threetriangles {1,3,5}, the second patch contains two triangles {9,6}, and the third patch contain threetriangles {13,7}. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3828"
    },
    {
      "names": [
        "Integer Get_trimesh_surrounding_faces(Element trimesh, Real tolerance, Integer &patches_count, Dynamic_Integer &patch_sizes, Integer &faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Page 792Trimesh Element\fChapter 5 12dPL Library CallsGet all the surrounding faces of a simple trimesh Element trimesh based on given toleranceand assign the total number to Integer faces_count and the list of face indices toDynamic_Integer face_indices.  These indices are grouped into continuous patches, the numberof patches is returned in patches_count, and the sizes for indivisual patches are returned inpatch_sizes. For example: faces_count = 8 and face_indices = { 1,3, 5,9,6, 12,13,7 }patches_count = 3 and patch_sizes = {3, 2, 3}. There are 8 surrounding faces which are grouped into 3 patches, the first patch contains threetriangles {1,3,5}, the second patch contains two triangles {9,6}, and the third patch contain threetriangles {13,7}. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3829"
    },
    {
      "names": [
        "Integer Get_sub_trimesh(Element trimesh, Dynamic_Integer &sub_faces_ix, Element &sub_mesh)"
      ],
      "description": "Form a new Element sub_mesh from a given trimesh Element trimesh based on given patch offace indices Dynamic_Integer sub_face_ix. A return value of zero indicates the function call was successful.",
      "id": "3831"
    },
    {
      "names": [
        "Integer Trimesh_get_disjoint(Element trimesh_input, Dynamic_Element &disjoint_parts)"
      ],
      "description": "Split trimesh trimesh_input into disjoint components disjoint_parts.  All vertices in each one ofthe trimesh results are connected. A return value of zero indicates the function call was successful.",
      "id": "5443"
    },
    {
      "names": [
        "Integer Trimesh_heal(Element &trimesh_in, Text &return_message)"
      ],
      "description": "Try to heal \"bad\" trimesh trimesh_in into a \"good\" one () by removing duplicated edges, faces,change edges, faces direction.  If the input cannot be heal, some error message will be returnedin return_message. A return value of zero indicates the function call was successful.",
      "id": "5444"
    },
    {
      "names": [
        "Integer Get_face_heights_at_point(Element trimesh, Real px, Real py, Dynamic_Real &face_heights, Text &return_message)"
      ],
      "description": "Get the list of cut face_heights (z coordinate) of a vertical line at px py to the faces of Elementtrimesh. Some error message will be returned in return_message. A return value of zero indicates the function call was successful.",
      "id": "7625"
    },
    {
      "names": [
        "Integer Set_trimesh_edge_info_by_string(Dynamic_Element &trimeshes, Dynamic_Element strings, Integer set_edge_name, Integer set_edge_colour, Real tolerance)"
      ],
      "description": "Set the edge information of a list of trimeshes using the name and colour from a list of strings atclose by position using Real tolerance. A return value of zero indicates the function call was successful.",
      "id": "7669"
    },
    {
      "names": [
        "Integer Trimesh_get_closest_point(Element trimesh, Real xp, Real yp, Real zp, Real &x, Real &y, Real &z, Real &off, Integer &face, Integer &edge, Integer &vertex)"
      ],
      "description": "Get the cloest drop point from given 3d point (xp,yp,zp) to a given trimesh.  The coordinate ofthe result is returned as Real numbers (x,y,z); the offset distance is returned in Real off; the facenumber, edge number and vertex number of the drop point are returned in Integer face, edgeand vertex. A return value of zero indicates the function call was successful.",
      "id": "7708"
    },
    {
      "names": [
        "Integer Trimesh_get_furthest_point(Element trimesh, Real xp, Real yp, Real zp, Real &x, Real &y, Real &z, Real &off, Integer &face, Integer &edge, Integer &vertex)"
      ],
      "description": "Page 794Trimesh Element\fChapter 5 12dPL Library CallsGet the furthest drop point from given 3d point (xp,yp,zp) to a given trimesh.  The coordinate ofthe result is returned as Real numbers (x,y,z); the offset distance is returned in Real off; the facenumber, edge number and vertex number of the drop point are returned in Integer face, edgeand vertex. A return value of zero indicates the function call was successful.",
      "id": "7709"
    },
    {
      "names": [
        "Integer Trimesh_get_lowest_point(Element trimesh, Real xp, Real yp, Real &z, Integer &face)"
      ],
      "description": "Get the lowest face point from given 2d point (xp,yp) of a given trimesh; the z-coordinate of theresult is returned as Real numbers z; the trimesh face number is returned in Integer face. A return value of zero indicates the function call was successful.",
      "id": "7710"
    },
    {
      "names": [
        "Integer Trimesh_get_highest_point(Element trimesh, Real xp, Real yp, Real &z, Integer &face)"
      ],
      "description": "Get the highest face point from given 2d point (xp,yp) of a given trimesh; the z-coordinate of theresult is returned as Real numbers z; the trimesh face number is returned in Integer face. A return value of zero indicates the function call was successful.",
      "id": "7711"
    },
    {
      "names": [
        "Integer Convert_to_polymesh(Real deflection, Integer relative_deflection, Dynamic_Element &trimeshes)"
      ],
      "description": "Convert all trimesh in the list trimeshes to polymesh. If relative_deflection is not zero, then the angle deflection will be use as the maximum value inthe conversion. A return value of zero indicates the function call was successful.",
      "id": "7746"
    },
    {
      "names": [
        "Element Create_plot_frame(Text name)"
      ],
      "description": "Create an Element of type Plot_Frame. The function return value gives the actual Element created. If the plot frame could not be created, then the returned Element will be null.",
      "id": "607"
    },
    {
      "names": [
        "Integer Get_plot_frame_name(Element elt, Text &name)"
      ],
      "description": "Get the name of the plot frame in Element elt. The name value is returned in Text name. A function return value of zero indicates the data was successfully returned.",
      "id": "608"
    },
    {
      "names": [
        "Integer Get_plot_frame_scale(Element elt, Real &scale)"
      ],
      "description": "Get the scale of the plot frame in Element elt. The scale value is returned in Real scale.  The value for scale is 1:scale. A function return value of zero indicates the data was successfully returned.",
      "id": "609"
    },
    {
      "names": [
        "Integer Get_plot_frame_rotation(Element elt, Real &rotation)"
      ],
      "description": "Get the rotation of the plot frame in Element elt. The name value is returned in Real rotation.  The units for rotation are radians. A function return value of zero indicates the data was successfully returned.",
      "id": "610"
    },
    {
      "names": [
        "Integer Get_plot_frame_origin(Element elt, Real &x, Real &y)"
      ],
      "description": "Get the origin of the plot frame in Element elt. The x origin value is returned in Real x. The y origin value is returned in Real y. A function return value of zero indicates the data was successfully returned.",
      "id": "611"
    },
    {
      "names": [
        "Integer Get_plot_frame_sheet_size(Element elt, Real &w, Real &h)"
      ],
      "description": "Get the sheet size of the plot frame in Element elt. The width value is returned in Real w. The height value is returned in Real h. A function return value of zero indicates the data was successfully returned.",
      "id": "612"
    },
    {
      "names": [
        "Integer Get_plot_frame_sheet_size(Element elt, Text &size)"
      ],
      "description": "Get the sheet size of the plot frame in Element elt. The sheet size is returned in Text size. A function return value of zero indicates the data was successfully returned.",
      "id": "613"
    },
    {
      "names": [
        "Integer Get_plot_frame_margins(Element elt, Real &l, Real &b, Real &r, Real &t)"
      ],
      "description": "Get the sheet margins of the plot frame in Element elt. The left margin value is returned in Real l. The bottom margin value is returned in Real b. The right margin value is returned in Real r. The top margin value is returned in Real t. Plot Frame ElementPage 797\f12d Model Programming Language ManualA function return value of zero indicates the data was successfully returned.",
      "id": "614"
    },
    {
      "names": [
        "Integer Get_plot_frame_text_size(Element elt, Real &text_size)"
      ],
      "description": "Get the text size of the plot frame in Element elt. The text size is returned in Text text_size. A function return value of zero indicates the data was successfully returned.",
      "id": "615"
    },
    {
      "names": [
        "Integer Get_plot_frame_draw_border(Element elt, Integer &draw_border)"
      ],
      "description": "Get the draw border of the plot frame in Element elt. The draw border flag is returned in Integer draw_border. A function return value of zero indicates the data was successfully returned.",
      "id": "616"
    },
    {
      "names": [
        "Integer Get_plot_frame_draw_viewport(Element elt, Integer &draw_viewport)"
      ],
      "description": "Get the draw viewport of the plot frame in Element elt. The draw viewport flag is returned in Integer draw_viewport. A function return value of zero indicates the data was successfully returned.",
      "id": "617"
    },
    {
      "names": [
        "Integer Get_plot_frame_draw_title_file(Element elt, Integer &draw_title)"
      ],
      "description": "Get the draw title file of the plot frame in Element elt. The draw title file flag is returned in Integer draw_title. A function return value of zero indicates the data was successfully returned.",
      "id": "618"
    },
    {
      "names": [
        "Integer Get_plot_frame_colour(Element elt, Integer &colour)"
      ],
      "description": "Get the colour of the plot frame in Element elt. The colour value is returned Integer colour. A function return value of zero indicates the data was successfully returned.",
      "id": "619"
    },
    {
      "names": [
        "Integer Get_plot_frame_textstyle(Element elt, Text &textstyle)"
      ],
      "description": "Get the textstyle of the plot frame in Element elt. The textstyle value is returned in Text textstyle. A function return value of zero indicates the data was successfully returned.",
      "id": "620"
    },
    {
      "names": [
        "Integer Get_plot_frame_plotter(Element elt, Integer &plotter)"
      ],
      "description": "Get the plotter of the plot frame in Element elt. The plotter value is returned in Integer plotter. A function return value of zero indicates the data was successfully returned.",
      "id": "621"
    },
    {
      "names": [
        "Integer Get_plot_frame_plotter_name(Element elt, Text &plotter_name)"
      ],
      "description": "Get the plotter name of the plot frame in Element elt. The plotter name is returned in the Text plotter_name. A function return value of zero indicates the plotter _name was returned successfully.",
      "id": "686"
    },
    {
      "names": [
        "Integer Get_plot_frame_plot_file(Element elt, Text &plot_file)"
      ],
      "description": "Get the plot file of the plot frame in Element elt. The plot file value is returned in Text plot_file. A function return value of zero indicates the data was successfully returned.",
      "id": "622"
    },
    {
      "names": [
        "Integer Get_plot_frame_title_1(Element elt, Text &title)"
      ],
      "description": "Get the first title line of the plot frame in Element elt. The title line value is returned in Text title. A function return value of zero indicates the data was successfully returned.",
      "id": "623"
    },
    {
      "names": [
        "Integer Get_plot_frame_title_2(Element elt, Text &title)"
      ],
      "description": "Get the second title line of the plot frame in Element elt. The title line value is returned in Text title. A function return value of zero indicates the data was successfully returned.",
      "id": "624"
    },
    {
      "names": [
        "Integer Get_plot_frame_title_file(Element elt, Text &title_file)"
      ],
      "description": "Get the title file of the plot frame in Element elt. The title file value is returned in Text title_file. A function return value of zero indicates the data was successfully returned.",
      "id": "625"
    },
    {
      "names": [
        "Integer Set_plot_frame_name(Element elt, Text name)"
      ],
      "description": "Set the name of the plot frame in Element elt. The name value is defined in Text name. Page 800Plot Frame Element\fChapter 5 12dPL Library CallsA function return value of zero indicates the data was successfully set.",
      "id": "626"
    },
    {
      "names": [
        "Integer Set_plot_frame_scale(Element elt, Real scale)"
      ],
      "description": "Set the scale of the plot frame in Element elt. The scale value is defined in Real scale. A function return value of zero indicates the data was successfully set.",
      "id": "627"
    },
    {
      "names": [
        "Integer Set_plot_frame_rotation(Element elt, Real rotation)"
      ],
      "description": "Set the rotation of the plot frame in Element elt. The rotation value is defined in Real rotation. A function return value of zero indicates the data was successfully set.",
      "id": "628"
    },
    {
      "names": [
        "Integer Set_plot_frame_origin(Element elt, Real x, Real y)"
      ],
      "description": "Set the origin of the plot frame in Element elt. The x origin value is defined in Real x. The y origin value is defined in Real y. A function return value of zero indicates the data was successfully set.",
      "id": "629"
    },
    {
      "names": [
        "Integer Set_plot_frame_sheet_size(Element elt, Real w, Real h)"
      ],
      "description": "Set the sheet size of the plot frame in Element elt. The width value is defined in Real w. The height value is defined in Real h. A function return value of zero indicates the data was successfully set. Plot Frame ElementPage 801\f12d Model Programming Language Manual",
      "id": "630"
    },
    {
      "names": [
        "Integer Set_plot_frame_sheet_size(Element elt, Text size)"
      ],
      "description": "Set the sheet size of the plot frame in Element elt. The sheet size is defined in Text size. A function return value of zero indicates the data was successfully set.",
      "id": "631"
    },
    {
      "names": [
        "Integer Set_plot_frame_margins(Element elt, Real l, Real b, Real r, Real t)"
      ],
      "description": "Set the sheet margins of the plot frame in Element elt. The left margin value is defined in Real l. The bottom margin value is defined in Real b. The right margin value is defined in Real r. The top margin value is defined in Real t. A function return value of zero indicates the data was successfully set.",
      "id": "632"
    },
    {
      "names": [
        "Integer Set_plot_frame_text_size(Element elt, Real text_size)"
      ],
      "description": "Set the text size of the plot frame in Element elt. The text size is defined in Text text_size. A function return value of zero indicates the data was successfully set.",
      "id": "633"
    },
    {
      "names": [
        "Integer Set_plot_frame_draw_border(Element elt, Integer draw_border)"
      ],
      "description": "Set the draw border of the plot frame in Element elt. The draw border flag is defined in Integer draw_border. A function return value of zero indicates the data was successfully set. Page 802Plot Frame Element\fChapter 5 12dPL Library Calls",
      "id": "634"
    },
    {
      "names": [
        "Integer Set_plot_frame_draw_viewport(Element elt, Integer draw_viewport)"
      ],
      "description": "Set the draw viewport of the plot frame in Element elt. The draw viewport flag is defined in Integer draw_viewport. A function return value of zero indicates the data was successfully set.",
      "id": "635"
    },
    {
      "names": [
        "Integer Set_plot_frame_draw_title_file(Element elt, Integer draw_title)"
      ],
      "description": "Set the draw title file of the plot frame in Element elt. The draw title file flag is defined in Integer draw_title. A function return value of zero indicates the data was successfully set.",
      "id": "636"
    },
    {
      "names": [
        "Integer Set_plot_frame_colour(Element elt, Integer colour)"
      ],
      "description": "Set the colour of the plot frame in Element elt. The colour value is defined Integer colour. A function return value of zero indicates the data was successfully set.",
      "id": "637"
    },
    {
      "names": [
        "Integer Set_plot_frame_textstyle(Element elt, Text textstyle)"
      ],
      "description": "Set the textstyle of the plot frame in Element elt. The textstyle value is defined in Text textstyleA function return value of zero indicates the data was successfully set.",
      "id": "638"
    },
    {
      "names": [
        "Integer Set_plot_frame_plotter(Element elt, Integer plotter)"
      ],
      "description": "Set the plotter of the plot frame in Element elt. The plotter value is defined in Integer plotter. A function return value of zero indicates the data was successfully set.",
      "id": "639"
    },
    {
      "names": [
        "Integer Set_plot_frame_plotter_name(Element elt, Text plotter_name)"
      ],
      "description": "Set the plotter name of the plot frame in Element elt. The plotter name is given in the Text plotter_name. A function return value of zero indicates the plotter name was successfully set.",
      "id": "687"
    },
    {
      "names": [
        "Integer Set_plot_frame_plot_file(Element elt, Text plot_file)"
      ],
      "description": "Set the plot file of the plot frame in Element eltThe plot file value is defined in Text plot_file. A function return value of zero indicates the data was successfully set.",
      "id": "640"
    },
    {
      "names": [
        "Integer Set_plot_frame_title_1(Element elt, Text title_1)"
      ],
      "description": "Set the first title line of the plot frame in Element elt. The title line value is defined in Text title_1. A function return value of zero indicates the data was successfully set.",
      "id": "641"
    },
    {
      "names": [
        "Integer Set_plot_frame_title_2(Element elt, Text title_2)"
      ],
      "description": "Page 804Plot Frame Element\fChapter 5 12dPL Library CallsSet the second title line of the plot frame in Element elt. The title line value is defined in Text title_2. A function return value of zero indicates the data was successfully set.",
      "id": "642"
    },
    {
      "names": [
        "Integer Set_plot_frame_title_file(Element elt, Text title_file)"
      ],
      "description": "Set the title file of the plot frame in Element eltThe title file value is defined in Text title_file. A function return value of zero indicates the data was successfully set.",
      "id": "643"
    },
    {
      "names": [
        "Element Create_2d(Real x[], Real y[], Real zvalue, Integer num_pts)"
      ],
      "description": "Create an Element of type 2d. The Element has num_pts points with (x,y) values given in the Real arrays x[] and y[]. The height of the string is given by the Real zvalue. The function return value gives the actual Element created. If the 2d string could not be created, then the returned Element will be null.",
      "id": "77"
    },
    {
      "names": [
        "Element Create_2d(Integer num_pts)"
      ],
      "description": "Create an Element of type 2d with room for num_pts (x,y) points. The actual x and y values and the height of the 2d string are set after the string is created. If the 2d string could not be created, then the returned Element will be null.",
      "id": "448"
    },
    {
      "names": [
        "Element Create_2d(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type 2d with room for num_pts (x,y) points, and set the colour, name, styleetc.  of the new string to be the same as those from the Element seed. The actual x and y values and the height of the 2d string are set after the string is created. If the 2d string could not be created, then the returned Element will be null.",
      "id": "665"
    },
    {
      "names": [
        "Integer Get_2d_data(Element elt, Real x[], Real y[], Real &zvalue, Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the string height and the (x,y) data for the first max_pts points of the 2d Element elt. The x and y values at each string point are returned in the Real arrays x[] and y[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsThe height of the 2d string is returned in the Real zvalue. If the Element elt is not of type 2d, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "69"
    },
    {
      "names": [
        "Integer Get_2d_data(Element elt, Real x[], Real y[], Real &zvalue, Integer max_pt, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a 2d Element elt, get the string height and the (x,y) data for max_pts points starting at pointnumber start_pt. This routine allows the user to return the data from a 2d string in user specified chunks.  This isnecessary if the number of points in the string is greater than the size of the arrays available tocontain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y) values at each string point are returned in the Real arrays x[] and y[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsThe height of the 2d string is returned in the Real zvalue. If the Element elt is not of type 2d, then num_pts is set to zero and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function.",
      "id": "70"
    },
    {
      "names": [
        "Integer Get_2d_data(Element elt, Integer i, Real &x, Real &y)"
      ],
      "description": "Get the (x,y) data for the ith point of the string. The x value is returned in Real x. The y value is returned in Real y. A function return value of zero indicates the data was successfully returned.",
      "id": "73"
    },
    {
      "names": [
        "Integer Get_2d_data(Element elt, Real &z)"
      ],
      "description": "Get the height of the 2d string given by Element elt. The height of the string is returned in Real z. A function return value of zero indicates the height was successfully returned.",
      "id": "75"
    },
    {
      "names": [
        "Integer Set_2d_data(Element elt, Real x[], Real y[], Integer num_pts)"
      ],
      "description": "Set the (x,y) data for the first num_pts points of the 2d Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y) values at each string point are given in the Real arrays x[] and y[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type 2d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new 2d Elements - it only modifies existing 2d Elements.",
      "id": "71"
    },
    {
      "names": [
        "Integer Set_2d_data(Element elt, Real x[], Real y[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the 2d Element elt, set the (x,y) data for num_pts points starting at point number start_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. Strings Replaced by Super StringsPage 809\f12d Model Programming Language ManualThe (x,y) values for the string points are given in the Real arrays x[] and y[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type 2d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new 2d Elements but only modify existing 2d Elements. \uf020",
      "id": "72"
    },
    {
      "names": [
        "Integer Set_2d_data(Element elt, Integer i, Real x, Real y)"
      ],
      "description": "Set the (x,y) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. A function return value of zero indicates the data was successfully set.",
      "id": "74"
    },
    {
      "names": [
        "Integer Set_2d_data(Element elt, Real z)"
      ],
      "description": "Modify the height of the 2d Element elt. The new height is given in the Real z. A function return value of zero indicates the height was successfully set.",
      "id": "76"
    },
    {
      "names": [
        "Element Create_3d(Line line)"
      ],
      "description": "Create an Element of type 3d from the Line line. The created Element will have two points with co-ordinates equal to the end points of the Lineline. The function return value gives the actual Element created. If the 3d string could not be created, then the returned Element will be null.",
      "id": "295"
    },
    {
      "names": [
        "Element Create_3d(Real x[], Real y[], Real z[], Integer num_pts)"
      ],
      "description": "Create an Element of type 3d. The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[]. The function return value gives the actual Element created. If the 3d string could not be created, then the returned Element will be null.",
      "id": "84"
    },
    {
      "names": [
        "Element Create_3d(Integer num_pts)"
      ],
      "description": "Create an Element of type 3d with room for num_pts (x,y,z) points. The actual x, y and z values of the 3d string are set after the string is created. If the 3d string could not be created, then the returned Element will be null.",
      "id": "449"
    },
    {
      "names": [
        "Element Create_3d(Integer num_pts, Element seed)"
      ],
      "description": "Strings Replaced by Super StringsPage 811\f12d Model Programming Language ManualCreate an Element of type 3d with room for num_pts (x,y) points, and set the colour, name, styleetc.  of the new string to be the same as those from the Element seed. The actual x, y and z values of the 3d string are set after the string is created. If the 3d string could not be created, then the returned Element will be null.",
      "id": "666"
    },
    {
      "names": [
        "Element Create_4d(Real x[], Real y[], Real z[], Text t[], Integer num_pts)"
      ],
      "description": "Create an Element of type 4d.  The Element has num_pts points with (x,y,z,text) values given inthe Real arrays x[], y[], z[] and Text array t[]. The function return value gives the actual Element created. If the 4d string could not be created, then the returned Element will be null.",
      "id": "91"
    },
    {
      "names": [
        "Element Create_4d(Integer num_pts)"
      ],
      "description": "Create an Element of type 4d with room for num_pts (x,y,z,text) points. The actual x, y, z and text values of the 4d string are set after the string is created. If the 4d string could not be created, then the returned Element will be null. Strings Replaced by Super StringsPage 815\f12d Model Programming Language Manual",
      "id": "450"
    },
    {
      "names": [
        "Element Create_4d(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type 4d with room for num_pts (x,y) points, and set the colour, name, styleetc.  of the new string to be the same as those from the Element seed. The actual x, y, z and text values of the 4d string are set after the string is created. If the 4d string could not be created, then the returned Element will be null.",
      "id": "667"
    },
    {
      "names": [
        "Integer Set_4d_data(Element elt, Real x[], Real y[], Real z[], Text t[], Integer num_pts)"
      ],
      "description": "Set the (x,y,z,text) data for the first num_pts points of the 4d Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z,text) values at each string point are given in the Real arrays x[], y[], z[] and Text arrayt[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type 4d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new 4d Elements but only modify existing 4d Elements.",
      "id": "87"
    },
    {
      "names": [
        "Integer Set_4d_data(Element elt, Real x[], Real y[], Real z[], Text t[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the 4d Element elt, set the (x,y,z,text) data for num_pts points, starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z,text) values for the string points are given in the Real arrays x[], y[], z[] and Text arrayt[]. Page 816Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsThe number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type 4d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new 4d Elements but only modify existing 4d Elements.",
      "id": "88"
    },
    {
      "names": [
        "Integer Set_4d_data(Element elt, Integer i, Real x, Real y, Real z, Text t)"
      ],
      "description": "Set the (x,y,z,text) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. The text value is given in Text t. A function return value of zero indicates the data was successfully set.",
      "id": "90"
    },
    {
      "names": [
        "Integer Get_4d_data(Element elt, Real x[], Real y[], Real z[], Text t[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z,text) data for the first max_pts points of the 4d Element elt. The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Textarray t[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type 4d, then num_pts is set to zero and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "85"
    },
    {
      "names": [
        "Integer Get_4d_data(Element elt, Real x[], Real y[], Real z[], Text t[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a 4d Element elt, get the (x,y,z,text) data for max_pts points starting at point numberstart_pt. This routine allows the user to return the data from a 4d string in user specified chunks.  This isnecessary if the number of points in the string is greater than the size of the arrays available tocontain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Textarray t[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type 4d, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function.",
      "id": "86"
    },
    {
      "names": [
        "Integer Get_4d_data(Element elt, Integer i, Real &x, Real &y, Real &z, Text &t)"
      ],
      "description": "Get the (x,y,z,text) data for the ith point of the string. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The text value is returned in Text t. A function return value of zero indicates the data was successfully returned.",
      "id": "89"
    },
    {
      "names": [
        "Integer Set_4d_textstyle_data(Element elt, Textstyle_Data d)"
      ],
      "description": "For the Element elt of type 4d, set the Textstyle_Data to be d. Setting a Textstyle_Data means that all the individual values that are contained in theTextstyle_Data are set rather than having to set each one individually. Page 818Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsIf the value is blank in the Textstyle_Data d then the value in the 4d string would be leftunchanged. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates the Textstyle_Data was successfully set.",
      "id": "1667"
    },
    {
      "names": [
        "Integer Get_4d_textstyle_data(Element elt, Textstyle_Data &d)"
      ],
      "description": "For the Element elt of type 4d, get the Textstyle_Data for the string and return it as d. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates the Textstyle_Data was successfully returned.",
      "id": "1668"
    },
    {
      "names": [
        "Integer Set_4d_units(Element elt, Integer units_mode)"
      ],
      "description": "Set the units used for the text parameters of the 4d Element elt. The mode is given as Integer units_mode. For the values of units_mode, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "447"
    },
    {
      "names": [
        "Integer Get_4d_units(Element elt, Integer &units_mode)"
      ],
      "description": "Get the units used for the text parameters of the 4d Element elt. The mode is returned as Integer units_mode. For the values of units_mode, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "441"
    },
    {
      "names": [
        "Integer Set_4d_size(Element elt, Real size)"
      ],
      "description": "Set the size of the characters of the 4d text of the Element elt. Strings Replaced by Super StringsPage 819\f12d Model Programming Language ManualThe text size is given as Real size. A function return value of zero indicates the data was successfully set.",
      "id": "442"
    },
    {
      "names": [
        "Integer Get_4d_size(Element elt, Real &size)"
      ],
      "description": "Get the size of the characters of the 4d text of the Element elt. The text size is returned as Real size. A function return value of zero indicates the data was successfully returned.",
      "id": "436"
    },
    {
      "names": [
        "Integer Set_4d_justify(Element elt, Integer justify)"
      ],
      "description": "Set the justification used for the text parameters of the 4d Element elt. The justification is given as Integer justify. For the values of justify and their meaning, see 5. 9 Textstyle Data. A function return vale of zero indicates the data was successfully set.",
      "id": "446"
    },
    {
      "names": [
        "Integer Get_4d_justify(Element elt, Integer &justify)"
      ],
      "description": "Get the justification used for the text parameters of the 4d Element elt. The justification is returned as Integer justify. For the values of justify and their meaning, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "440"
    },
    {
      "names": [
        "Integer Set_4d_angle(Element elt, Real angle)"
      ],
      "description": "Set the angle of rotation (in radians) about each 4d point (x,y) of the text of the 4d Element elt. The angle is given as Real angle. Page 820Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsFor a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "445"
    },
    {
      "names": [
        "Integer Get_4d_angle(Element elt, Real &angle)"
      ],
      "description": "Get the angle of rotation (in radians) about each 4d point (x,y) of the text of the 4d Element elt. angle is measured in an anti-clockwise direction from the horizontal axis. The angle is returned as Real angle. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "439"
    },
    {
      "names": [
        "Integer Set_4d_angle2(Element elt, Real angle2)"
      ],
      "description": "Set the 3D beta angle of rotation (in radians) about each 4d point (x,y) of the text of the 4dElement elt. The angle is given as Real angle2. A function return value of zero indicates the data was successfully set.",
      "id": "3573"
    },
    {
      "names": [
        "Integer Get_4d_angle2(Element elt, Real &angle2)"
      ],
      "description": "Get the 3D beta angle of rotation (in radians) about each 4d point (x,y) of the text of the 4dElement elt. . The angle is returned as Real angle2. A function return value of zero indicates the data was successfully returned.",
      "id": "3570"
    },
    {
      "names": [
        "Integer Set_4d_angle3(Element elt, Real angle3)"
      ],
      "description": "Set the 3D gamma angle of rotation (in radians) about each 4d point (x,y) of the text of the 4dElement elt. Strings Replaced by Super StringsPage 821\f12d Model Programming Language ManualThe angle is given as Real angle3. A function return value of zero indicates the data was successfully set.",
      "id": "3574"
    },
    {
      "names": [
        "Integer Get_4d_angle2(Element elt, Real &angle3)"
      ],
      "description": "Get the 3D gamma angle of rotation (in radians) about each 4d point (x,y) of the text of the 4dElement elt. The angle is returned as Real angle2. A function return value of zero indicates the data was successfully returned.",
      "id": "3571"
    },
    {
      "names": [
        "Integer Set_4d_offset(Element elt, Real offset)"
      ],
      "description": "Set the offset distance of the text to be used for each 4d point (x,y) for the 4d Element elt. The offset is returned as Real offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "443"
    },
    {
      "names": [
        "Integer Get_4d_offset(Element elt, Real &offset)"
      ],
      "description": "Get the offset distance of the text to be used for each 4d point (x,y) for the 4d Element elt. The offset is returned as Real offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "437"
    },
    {
      "names": [
        "Integer Set_4d_rise(Element elt, Real rise)"
      ],
      "description": "Set the rise distance of the text to be used for each 4d point (x,y) for the 4d Element elt. The rise is given as Real rise. Page 822Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsFor a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "444"
    },
    {
      "names": [
        "Integer Get_4d_rise(Element elt, Real &rise)"
      ],
      "description": "Get the rise distance of the text to be used for each 4d point (x,y) for the 4d Element elt. The rise is returned as Real rise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "438"
    },
    {
      "names": [
        "Integer Set_4d_height(Element elt, Real height)"
      ],
      "description": "Set the height of the characters of the 4d text of the Element elt. The text height is given as Real height. A function return value of zero indicates the data was successfully set.",
      "id": "648"
    },
    {
      "names": [
        "Integer Get_4d_height(Element elt, Real &height)"
      ],
      "description": "Get the height of the characters of the 4d text of the Element elt. The text height is returned as Real height. A function return value of zero indicates the data was successfully returned.",
      "id": "644"
    },
    {
      "names": [
        "Integer Set_4d_slant(Element elt, Real slant)"
      ],
      "description": "Set the slant of the characters of the 4d text of the Element elt. The text slant is given as Real slant. A function return value of zero indicates the data was successfully set.",
      "id": "649"
    },
    {
      "names": [
        "Integer Get_4d_slant(Element elt, Real &slant)"
      ],
      "description": "Get the slant of the characters of the 4d text of the Element elt. The text slant is returned as Real slant. A function return value of zero indicates the data was successfully returned.",
      "id": "645"
    },
    {
      "names": [
        "Integer Set_4d_x_factor(Element elt, Real xfact)"
      ],
      "description": "Set the x factor of the characters of the 4d text of the Element elt. The text x factor is given as Real xfact. A function return value of zero indicates the data was successfully set.",
      "id": "650"
    },
    {
      "names": [
        "Integer Get_4d_x_factor(Element elt, Real &xfact)"
      ],
      "description": "Get the x factor of the characters of the 4d text of the Element elt. The text x factor is returned as Real xfact. A function return value of zero indicates the data was successfully returned.",
      "id": "646"
    },
    {
      "names": [
        "Integer Set_4d_style(Element elt, Text style)"
      ],
      "description": "Set the style of the characters of the 4d text of the Element elt. The text style is given as Text style. A function return value of zero indicates the data was successfully set.",
      "id": "651"
    },
    {
      "names": [
        "Integer Get_4d_style(Element elt, Text &style)"
      ],
      "description": "Get the style of the characters of the 4d text of the Element elt. The text style is returned as Text style. A function return value of zero indicates the data was successfully returned.",
      "id": "647"
    },
    {
      "names": [
        "Integer Set_4d_ttf_underline(Element elt, Integer underline)"
      ],
      "description": "For the Element elt of type 4d, set the underline state to underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates underlined was successfully set.",
      "id": "2588"
    },
    {
      "names": [
        "Integer Get_4d_ttf_underline(Element elt, Integer &underline)"
      ],
      "description": "For the Element elt of type 4d, get the underline state and return it in underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates underlined was successfully returned.",
      "id": "2584"
    },
    {
      "names": [
        "Integer Set_4d_ttf_strikeout(Element elt, Integer strikeout)"
      ],
      "description": "For the Element elt of type 4d, set the strikeout state to strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. Strings Replaced by Super StringsPage 825\f12d Model Programming Language ManualA function return value of zero indicates strikeout was successfully set.",
      "id": "2589"
    },
    {
      "names": [
        "Integer Get_4d_ttf_strikeout(Element elt, Integer &strikeout)"
      ],
      "description": "For the Element elt of type 4d, get the strikeout state and return it in strikeout. For a diagram, see 5. 9 Textstyle Data. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2585"
    },
    {
      "names": [
        "Integer Set_4d_ttf_weight(Element elt, Integer weight)"
      ],
      "description": "For the Element elt of type 4d, set the font weight to weight. For the list of allowable weights, go to Allowable WeightsA non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates weight was successfully set.",
      "id": "2591"
    },
    {
      "names": [
        "Integer Get_4d_ttf_weight(Element elt, Integer &weight)"
      ],
      "description": "For the Element elt of type 4d, get the font weight and return it in weight. Allowable WeightsThe allowable numbers for weight are:0 = FW_DONTCARE100 = FW_THIN200 = FW_EXTRALIGHT300 = FW_LIGHT400 = FW_NORMAL500 = FW_MEDIUM600 = FW_SEMIBOLD700 = FW_BOLD800 = FW_EXTRABOLD900 = FW_HEAVYPage 826Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsNote that in the distributed file set_ups. h these are defined as:#define FW_DONTCARE#define FW_THIN#define FW_EXTRALIGHT#define FW_LIGHT#define FW_NORMAL#define FW_MEDIUM#define FW_SEMIBOLD#define FW_BOLD#define FW_EXTRABOLD#define FW_HEAVY#define FW_ULTRALIGHT#define FW_REGULAR#define FW_DEMIBOLD#define FW_ULTRABOLD#define FW_BLACK0100200300400500600700800900FW_EXTRALIGHTFW_NORMALFW_SEMIBOLDFW_EXTRABOLDFW_HEAVYA non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates weight was successfully returned.",
      "id": "2587"
    },
    {
      "names": [
        "Integer Set_4d_ttf_italic(Element elt, Integer italic)"
      ],
      "description": "For the Element elt of type 4d, set the italic state to italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates italic was successfully set.",
      "id": "2590"
    },
    {
      "names": [
        "Integer Get_4d_ttf_italic(Element elt, Integer &italic)"
      ],
      "description": "For the Element elt of type 4d, get the italic state and return it in italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates italic was successfully returned.",
      "id": "2586"
    },
    {
      "names": [
        "Integer Set_4d_ttf_outline(Element elt, Integer outline)"
      ],
      "description": "For the Element elt of type 4d, set the outline state to outline. If outline = 1, then for a true type font the text will be only shown in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates outline was successfully set.",
      "id": "2770"
    },
    {
      "names": [
        "Integer Get_4d_ttf_outline(Element elt, Integer &outline)"
      ],
      "description": "For the Element elt of type 4d, get the outline state and return it in outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates outline was successfully returned.",
      "id": "2769"
    },
    {
      "names": [
        "Integer Set_4d_whiteout(Element element, Integer colour)"
      ],
      "description": "For the 4d Element elt, set the colour number of the colour used for the whiteout box aroundvertex text, to be colour. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2750"
    },
    {
      "names": [
        "Integer Get_4d_whiteout(Element element, Integer &colour)"
      ],
      "description": "For the 4d Element elt, get the colour number that is used for the whiteout box around vertexPage 828Strings Replaced by Super Strings\fChapter 5 12dPL Library Callstext.  The whiteout colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2749"
    },
    {
      "names": [
        "Integer Set_4d_border(Element element, Integer colour)"
      ],
      "description": "For the 4d Element elt, set the colour number of the colour used for the border of the whiteoutbox around vertex text, to be colour. If no whiteout border is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2760"
    },
    {
      "names": [
        "Integer Get_4d_border(Element element, Integer &colour)"
      ],
      "description": "For the 4d Element elt, get the colour number that is used for the border of the whiteout boxaround vertex text.  The whiteout border colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if there is no whiteout border. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2759"
    },
    {
      "names": [
        "Integer Set_4d_border_style(Element element, Integer style)"
      ],
      "description": "For the 4d Element elt, set the border style of the whiteout box around vertex text, according toInteger style. 12345for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)Strings Replaced by Super StringsPage 829\f12d Model Programming Language Manual6789101112for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "3575"
    },
    {
      "names": [
        "Integer Get_4d_border_style(Element element, Integer &style)"
      ],
      "description": "For the 4d Element elt, get the style that is used for the border of the whiteout box around vertextext.  The value is returned as Integer style. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3572"
    },
    {
      "names": [
        "Element Create_pipe(Real x[], Real y[], Real z[], Integer num_pts)"
      ],
      "description": "Create an Element of type pipe. The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[]. The function return value gives the actual Element created. If the pipe string could not be created, then the returned Element will be null.",
      "id": "676"
    },
    {
      "names": [
        "Element Create_pipe(Integer num_pts)"
      ],
      "description": "Create an Element of type pipe with room for num_pts (x,y,z) points. The actual x, y and z values of the pipe string are set after the string is created. If the pipe string could not be created, then the returned Element will be null.",
      "id": "677"
    },
    {
      "names": [
        "Element Create_pipe(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type pipe with room for num_pts (x,y) points, and set the colour, name,style etc.  of the new string to be the same as those from the Element seed. The actual x, y and z values of the pipe string are set after the string is created. If the pipe string could not be created, then the returned Element will be null.",
      "id": "678"
    },
    {
      "names": [
        "Integer Get_pipe_diameter(Element elt, Real &diameter)"
      ],
      "description": "Get the pipe diameter of the string Element elt. The pipe diameter is returned in Real diameter. A function return value of zero indicates the data was successfully returned.",
      "id": "681"
    },
    {
      "names": [
        "Integer Set_pipe_diameter(Element elt, Real diameter)"
      ],
      "description": "Set the pipe diameter of the string Element elt. The pipe diameter is given as Real diameter. A function return value of zero indicates the data was successfully set.",
      "id": "679"
    },
    {
      "names": [
        "Integer Get_pipe_justify(Element elt, Integer &justify)"
      ],
      "description": "Get the justification used for the pipe Element eltThe justification is returned as Integer justify. A function return value of zero indicates the data was successfully returned.",
      "id": "682"
    },
    {
      "names": [
        "Integer Set_pipe_justify(Element elt, Integer justify)"
      ],
      "description": "Set the justification used for the text parameter of the pipe Element elt. Page 834Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsThe justification is given as Integer justify. A function return value of zero indicates the data was successfully set.",
      "id": "680"
    },
    {
      "names": [
        "Element Create_polyline(Real x[], Real y[], Real z[], Real r[], Integer f[], Integer num_pts)"
      ],
      "description": "Create an Element of type polyline. The Element has num_pts points with (x,y,z) values given in the Real arrays x[], y[] and z[], andarcs between consecutive points given in the Real array r[] and the Integer array bulge[]. The radius of the arc between the nth and the n+1 point is given by r[n] and the arc is on the rightof the line joining the nth and n+1 point if r[n] is positive, and on the left if r[n] is negative.  Hencethe absolute value of r[n] gives the radius of the curve between the nth and n+1 point and thesign of r[n] defines what side the curve lies on. The value of bulge[n] defines whether the arc is a minor or major arc.  A value of 0 denotes aminor arc and 1 a major arc. The function return value gives the actual Element created. If the polyline string could not be created, then the returned Element will be null.",
      "id": "481"
    },
    {
      "names": [
        "Element Create_polyline(Integer num_pts)"
      ],
      "description": "Create an Element of type Polyline with room for num_pts (x,y,z,r,bulge) points. The actual x, y, z, r, and bulge values of the polyline string are set after the string is created. If the polyline string could not be created, then the returned Element will be null.",
      "id": "482"
    },
    {
      "names": [
        "Element Create_polyline(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type Polyline with room for num_pts (x,y,z,r,bulge) points, and set thecolour, name, style etc.  of the new string to be the same as those from the Element seed. The actual x, y, z, r, and bulge values of the polyline string are set after the string is created. If the polyline string could not be created, then the returned Element will be null.",
      "id": "669"
    },
    {
      "names": [
        "Element Create_polyline(Segment seg)"
      ],
      "description": "Create an Element of type Polyline from the Segment seg.  The segment may be a Line, or Arc. The created Element will have two points with co-ordinates equal to the end points of theSegment seg. The function return value gives the actual Element created. If the polyline string could not be created, then the returned Element will be null.",
      "id": "554"
    },
    {
      "names": [
        "Integer Get_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z,r,b) data for the first max_pts points of the polyline Element elt. The (x,y,z,r,b) values at each string point are returned in the Real arrays x[], y[], z[], r[] and b[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Polyline, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "483"
    },
    {
      "names": [
        "Integer Get_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "Strings Replaced by Super StringsPage 837\f12d Model Programming Language ManualFor a polyline Element elt, get the (x,y,z,r,f) data for max_pts points starting at point numberstart_pt. This routine allows the user to return the data from a polyline string in user specified chunks.  Thisis necessary if the number of points in the string is greater than the size of the arrays available tocontain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z,r,f) values at each string point are returned in the Real arrays x[], y[], z[], r[] and f[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Polyline, then num_pts is set to zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function.",
      "id": "484"
    },
    {
      "names": [
        "Integer Get_polyline_data(Element elt, Integer i, Real &x, Real &y, Real &z, Real &r, Integer &f)"
      ],
      "description": "Get the (x,y,z,r,f) data for the ith point of the Polyline Element elt. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The radius value is returned in Real r. The minor/major value is returned in Integer f. A function return value of zero indicates the data was successfully returned.",
      "id": "485"
    },
    {
      "names": [
        "Integer Set_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer num_pts)"
      ],
      "description": "Set the (x,y,z,r,f) data for the first num_pts points of the polyline Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z,r,f) values for each string point are given in the Real arrays x[], y[], z[], r[] and f[]. The number of points to be set is given by Integer num_ptsPage 838Strings Replaced by Super Strings\fChapter 5 12dPL Library CallsIf the Element elt is not of type Polyline, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new Polyline Elements but only modify existing Polyline Elements.",
      "id": "486"
    },
    {
      "names": [
        "Integer Set_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the polyline Element elt, set the (x,y,z,r,f) data for num_pts points, starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z,r,f) values for the string points are given in the Real arrays x[], y[], z[], r[]and f[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type Polyline, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new Polyline Elements but only modify existing PolylineElements.",
      "id": "487"
    },
    {
      "names": [
        "Integer Set_polyline_data(Element elt, Integer i, Real x, Real y, Real z, Real r, Integer f)"
      ],
      "description": "Set the (x,y,z,r,f) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. The radius value is given in Real r. The minor/major value is given in Integer f. A function return value of zero indicates the data was successfully set.",
      "id": "488"
    },
    {
      "names": [
        "Element Create_align()"
      ],
      "description": "Create an Element of type Alignment. The function return value gives the actual Element created. If the Alignment string could not be created, then the returned Element will be null.",
      "id": "92"
    },
    {
      "names": [
        "Element Create_align(Element seed)"
      ],
      "description": "Create an Element of type Alignment, and set the colour, name, style etc.  of the new string to bethe same as those from the Element seed. If the alignment string could not be created, then the returned Element will be null.",
      "id": "670"
    },
    {
      "names": [
        "Integer Append_hip(Element elt, Real x, Real y)"
      ],
      "description": "Append a horizontal intersection point (hip) with plan co-ordinates (x,y) to the Element eltAlignment String ElementPage 841\f12d Model Programming Language Manual.  The radius and spiral lengths are set to zero. The order in which the hips are appended is taken as the order of the hips in the Alignmentstring. The hips must be appended in order of increasing chainage along the Alignment string. Append_hip is used to place the first hip as well as the subsequent hips. A function return value of zero indicates that the hip was successfully appended.",
      "id": "93"
    },
    {
      "names": [
        "Integer Append_hip(Element elt, Real x, Real y, Real rad)"
      ],
      "description": "Append a horizontal intersection point (hip) with plan co-ordinates (x,y) and curve radius rad tothe Element elt.  The spiral lengths are set to zero. A zero curve radius indicates that no curve is present. A function return value of zero indicates that the hip was successfully appended.",
      "id": "94"
    },
    {
      "names": [
        "Integer Append_hip(Element elt, Real x, Real y, Real rad, Real left_spiral, Real right_spiral)"
      ],
      "description": "Append to the Element elt a horizontal intersection point (hip) with co-ordinates (x,y), curveradius rad and left and right spirals of length left_spiral and right_spiral respectively. A zero curve radius indicates that no curve is present. A zero spiral length indicates that a spiral is not present. A function return value of zero indicates that the hip was successfully appended.",
      "id": "95"
    },
    {
      "names": [
        "Integer Get_hip_points(Element elt, Integer &num_pts)"
      ],
      "description": "Get the number of hips, num_pts, in the Alignment Element elt. A function return value of zero indicates the number of hip points was successfully returned.",
      "id": "100"
    },
    {
      "names": [
        "Integer Get_hip_data(Element elt, Integer i, Real &x, Real &y)"
      ],
      "description": "Get the plan co-ordinates (x,y) of the ith hip point of the Alignment string elt. A function return value of zero indicates the hip data was successfully returned.",
      "id": "101"
    },
    {
      "names": [
        "Integer Get_hip_data(Element elt, Integer i, Real &x, Real &y, Real &rad)"
      ],
      "description": "Get the plan co-ordinates (x,y) and the curve radius, rad, for the ith hip point of the Alignmentstring elt. If the radius is:positive,negative,zero,it is a right hand curveit is a left hand curve. there is no curve. A function return value of zero indicates the hip data was successfully returned.",
      "id": "102"
    },
    {
      "names": [
        "Integer Get_hip_data(Element elt, Integer i, Real &x, Real &y, Real &rad, Real &left_spiral, Real &right_spiral)"
      ],
      "description": "Get the plan co-ordinates (x,y), the curve radius rad, and the left and right spiral lengths,left_spiral and right_spiral for the ith hip point of the Alignment Element elt. If the radius is:positive,negative,zero,it is a right hand curveit is a left hand curve. there is no curve. A spiral length of zero indicates that there is no spiral. A function return value of zero indicates the hip data was successfully returned.",
      "id": "103"
    },
    {
      "names": [
        "Integer Set_hip_data(Element elt, Integer i, Real x, Real y)"
      ],
      "description": "Modify the plan co-ordinates (x,y) of the ith hip point of the Alignment string elt.  The existingcurve radius and spiral lengths are not altered. The ith hip point must already exist. A function return value of zero indicates the hip was successfully set. Alignment String ElementPage 843\f12d Model Programming Language Manual",
      "id": "104"
    },
    {
      "names": [
        "Integer Set_hip_data(Element elt, Integer i, Real x, Real y, Real rad)"
      ],
      "description": "Modify the plan co-ordinates (x,y) and the curve radius, rad, of the ith hip point of the Alignmentstring elt.  The spiral lengths are not altered. The ith hip point must already exist. A function return value of zero indicates the hip was successfully set.",
      "id": "105"
    },
    {
      "names": [
        "Integer Set_hip_data(Element elt, Integer i, Real x, Real y, Real rad, Real left_spiral, Real right_spiral)"
      ],
      "description": "Modify the plan co-ordinates (x,y), the curve radius rad, and the left and right spiral lengths,left_spiral and right_spiral for the ith hip point of the Alignment string elt. The ith hip point must already exist. A function return value of zero indicates the hip was successfully set.",
      "id": "106"
    },
    {
      "names": [
        "Integer Insert_hip(Element elt, Integer i, Real x, Real y)"
      ],
      "description": "Insert a new hip with plan co-ordinates (x,y) before the existing ith hip point. The curve radius and spiral lengths are set to zero. The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one. If i is greater than number of hips, then the new hip is appended to the string. If i is less than one, then the new hip is prepended to the string. A function return value of zero indicates the hip was inserted successfully.",
      "id": "107"
    },
    {
      "names": [
        "Integer Insert_hip(Element elt, Integer i, Real x, Real y, Real rad)"
      ],
      "description": "Insert a new hip with plan co-ordinates (x,y) and curve radius rad before the existing ith hippoint. Page 844Alignment String Element\fChapter 5 12dPL Library CallsThe spiral lengths are set to zero. The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one. If i is greater than number of hips, then the new hip is appended to the string. If i is less than one, then the new hip is prepended to the string. A function return value of zero indicates the hip was inserted successfully.",
      "id": "108"
    },
    {
      "names": [
        "Integer Insert_hip(Element elt, Integer i, Real x, Real y, Real rad, Real left_spiral, Real right_spiral)"
      ],
      "description": "Insert a new hip with plan co-ordinates (x,y), curve radius rad and left and right spirals of lengthleft_spiral and right_spiral respectively, before the existing ith hip point. The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one. If i is greater than number of hips, then the new hip is appended to the string. If i is less than one, then the new hip is prepended to the string. A function return value of zero indicates the hip was inserted successfully.",
      "id": "109"
    },
    {
      "names": [
        "Integer Delete_hip(Element elt, Integer i)"
      ],
      "description": "Delete the ith hip from the Alignment string elt. The position of all subsequent hips is decreased by one. A function return value of zero indicates the hip was successfully deleted.",
      "id": "110"
    },
    {
      "names": [
        "Integer Get_hip_type(Element elt, Integer hip_no, Text &type)"
      ],
      "description": "Get the type of the horizontal intersection point number hip_no for the Alignment string elt. The Text type has a returned value ofSpiralCurveIPif there is spiral/s and horizontal curve at the hip. if there is a horizontal curve with no spirals at the hip. if there are no spirals or horizontal curves at the hip. A function return value of zero indicates the hip information was successfully returned.",
      "id": "397"
    },
    {
      "names": [
        "Integer Get_hip_geom(Element elt, Integer hip_no, Integer mode, Real &x, Real &y)"
      ],
      "description": "Return the (x,y) co-ordinates of the critical horizontal points around the horizontal intersectionpoint hip_no (i. e.  tangent spiral points, spiral curve points etc. ) for the Alignment string elt. The type of critical point (x,y) returned is specified by mode and depends on the type of the hip. The following table gives the description of the returned co-ordinate (x,y) and whether or not themode is applicable for the given HIP type (Y means applicable, N means not applicable). ModeReturned co-ordinateHIPHIP TypeCurveSpiral012345HIP co-ordsstart tangentend tangentcurve centrespiral-curvecurve-spiralYNNNNNYY TCY CTYNNYY TSY STYYYA function return value of zero indicates the hip information was successfully returned and thatthe mode was appropriate for the HIP type of the hip hip_no.",
      "id": "395"
    },
    {
      "names": [
        "Integer Append_vip(Element elt, Real ch, Real ht)"
      ],
      "description": "Append a vertical intersection point (vip) with chainage-height co-ordinates (ch,ht) to theElement elt.  The parabolic curve length is set to zero. The order in which the vips are appended is taken as the order of the vips in the Alignment string. The vips must be appended in order of increasing chainage along the Alignment string. Append_vip is used to place the first vip as well as the subsequent vips. A function return value of zero indicates the vip was appended successfully.",
      "id": "96"
    },
    {
      "names": [
        "Integer Append_vip(Element elt, Real ch, Real ht, Real parabolic)"
      ],
      "description": "Append to the Element elt a vertical intersection point (vip) with chainage-height co-ordinates(ch,ht) and a parabolic curve of length parabolic. A parabolic curve length of zero indicates no curve is present. A function return value of zero indicates the vip was appended successfully.",
      "id": "97"
    },
    {
      "names": [
        "Integer Append_vip(Element elt, Real ch, Real ht, Real length, Integer mode)"
      ],
      "description": "Append to the Element elt a vertical intersection point (vip) with chainage-height co-ordinates(ch,ht) and a curve of length length. If mode = 0 or 1, the curve is a parabolic vertical curveIf mode = 2, the curve is a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates the vip was appended successfully.",
      "id": "98"
    },
    {
      "names": [
        "Integer Get_vip_points(Element elt, Integer &num_pts)"
      ],
      "description": "Get the number of vips, num_pts, in the Alignment string elt. A function return value of zero indicates the number of vip points was successfully returned.",
      "id": "111"
    },
    {
      "names": [
        "Integer Get_vip_data(Element elt, Integer i, Real &ch, Real &ht)"
      ],
      "description": "Get the chainage-height co-ordinates (ch,ht) of the ith vip point for the Alignment string elt. A function return value of zero indicates the vip data was successfully returned.",
      "id": "112"
    },
    {
      "names": [
        "Integer Get_vip_data(Element elt, Integer i, Real &ch, Real &ht, Real &parabolic)"
      ],
      "description": "Get the chainage-height co-ordinates (ch,ht) and the parabolic curve length parabolic for the ithvip point of the Alignment string elt. A function return value of zero indicates the vip data was successfully returned.",
      "id": "113"
    },
    {
      "names": [
        "Integer Get_vip_data(Element elt, Integer i, Real &ch, Real &ht, Real &value, Integer &mode)"
      ],
      "description": "Get the chainage-height co-ordinates (ch,ht) and the curve length value for the ith vip point ofthe Alignment string elt. If mode = 0 or 1, the curve is a parabolic vertical curveIf mode = 2, the curve is a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates the vip data was successfully returned.",
      "id": "114"
    },
    {
      "names": [
        "Integer Set_vip_data(Element elt, Integer i, Real ch, Real ht)"
      ],
      "description": "Modify the chainage-height co-ordinates (ch,ht) of the ith vip point for the Alignment string elt. The existing parabolic curve length is not altered. The ith vip point must already exist. A function return value of zero indicates the vip data was successfully set.",
      "id": "115"
    },
    {
      "names": [
        "Integer Set_vip_data(Element elt, Integer i, Real ch, Real ht, Real parabolic)"
      ],
      "description": "Modify the chainage-height co-ordinates (ch,ht) and the parabolic curve length parabolic, forthe ith vip point of the Alignment string elt. The ith vip point must already exist. A function return value of zero indicates the vip data was successfully set.",
      "id": "116"
    },
    {
      "names": [
        "Integer Set_vip_data(Element elt, Integer i, Real ch, Real ht, Real value, Integer mode)"
      ],
      "description": "Modify the chainage-height co-ordinates (ch,ht) and the curve length value, for the i\u2019th vip pointof the Alignment string elt. If mode = 0 or 1, the curve is set to be a parabolic vertical curveIf mode = 2, the curve is set to be a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates the vip data was successfully returned.",
      "id": "117"
    },
    {
      "names": [
        "Integer Insert_vip(Element elt, Integer i, Real ch, Real ht)"
      ],
      "description": "Insert a new vip with chainage-height co-ordinates (ch,ht) before the existing i\u2019th vip point. The parabolic curve length is set to zero. The inserted vip becomes the ith vip and the position of all subsequent vips increases by one. If i is greater than number of vips, then the new vip is appended to the string. If i is less than one, then the new vip is prepended to the string. A function return value of zero indicates that the vip was successfully inserted.",
      "id": "118"
    },
    {
      "names": [
        "Integer Insert_vip(Element elt, Integer i, Real ch, Real ht, Real parabolic)"
      ],
      "description": "Insert a new vip with chainage-height co-ordinates (ch,ht) and parabolic length parabolic beforethe existing ith vip point. The inserted vip becomes the ith vip and the position of all subsequent vips increases by one. If i is greater than number of vips, then the new vip is appended to the string. If i is less than one, then the new vip is prepended to the string. A function return value of zero indicates that the vip was successfully inserted.",
      "id": "119"
    },
    {
      "names": [
        "Integer Insert_vip(Element elt, Integer i, Real ch, Real ht, Real value, Integer mode)"
      ],
      "description": "Insert a new vip with chainage-height co-ordinates (ch,ht) and curve length value before theexisting i\u2019th vip point. The inserted vip becomes the ith vip and the position of all subsequent vips increases by one. If i is greater than number of vips, then the new vip is appended to the string. If i is less than one, then the new vip is prepended to the string. If mode = 0 or 1, the curve is set to be a parabolic vertical curveIf mode = 2, the curve is set to be a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates that the vip was successfully inserted.",
      "id": "120"
    },
    {
      "names": [
        "Integer Delete_vip(Element elt, Integer i)"
      ],
      "description": "Delete the ith vip from the Alignment string elt. The position of all subsequent vips is decreased by one. A function return value of zero indicates that the vip was successfully deleted.",
      "id": "121"
    },
    {
      "names": [
        "Integer Calc_alignment(Element elt)"
      ],
      "description": "Use all the horizontal and vertical data to calculate the full geometry for the Alignment string. A Calc_alignment must be done before the Alignment string can be used in 12d Model. A function return value of zero indicates the geometry of the alignment was successfullycalculated.",
      "id": "99"
    },
    {
      "names": [
        "Integer Get_vip_type(Element elt, Integer vip_no, Text &type)"
      ],
      "description": "Get the type of the vertical intersection point number vip_no for the Alignment string elt. The Text type has a returned value ofVCCurveIPif there is a parabolic curve at the vip. if there is a circular curve at the vip. if there is no vertical curves at the vip. A function return value of zero indicates the vip information was successfully returned.",
      "id": "398"
    },
    {
      "names": [
        "Integer Get_vip_geom(Element elt, Integer vip_no, Integer mode, Real &chainage, Real &height)"
      ],
      "description": "Return the chainage and height co-ordinates of the critical points (tangent points, curve centre)for vertical intersection point number vip_no of the Alignment string elt. The type of critical point (chainage,height) returned is given by mode and depends on the type ofthe vip. The following table gives the description of the returned co-ordinates (chainage,height) andstates whether the mode is applicable or not for the given VIP type (Y means applicable, Nmeans not applicable). VIP TypePage 850Alignment String Element\fChapter 5 12dPL Library CallsModeReturned co-ordinateVIPVCCurve0VIP co-ordsYYY1start tangentNY TCY TC2end tangentNY CTY CT3curve centreNNYA function return value of zero indicates that the vip information was successfully returned andthat the mode was appropriate for the VIP type of the vip number vip_no.",
      "id": "396"
    },
    {
      "names": [
        "Integer Get_hip_id(Element elt, Integer position, Integer &id)"
      ],
      "description": "<no description>",
      "id": "1451"
    },
    {
      "names": [
        "Integer Get_vip_id(Element elt, Integer position, Integer &id)"
      ],
      "description": "<no description>",
      "id": "1452"
    },
    {
      "names": [
        "Integer Select_string(Text msg, Element &string)"
      ],
      "description": "Write the message msg to the 12d Model Output Window and wait until a selection is made. If a pickable Element is selected, then return the Element picked by the user in string and thefunction return value is 1. If no pickable Element is picked and the function returns, then the function returns codes are:-1012indicates cancel was chosen from the pick-ops menu. pick unsuccessfulpick was successfula cursor pick",
      "id": "29"
    },
    {
      "names": [
        "Integer Select_string(Text msg, Element &string, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Write the message msg to the 12d Model Output Window and then return the Element pickedby the user.  The co-ordinates of the picked point are also returned. The picked Element is returned in the Element string. The co-ordinates and chainage of the picked point on the Element string are (x,y,z) and chrespectively. The value ht is reserved for future use and should be ignored. A function return value of-1012",
      "id": "214"
    },
    {
      "names": [
        "Integer Select_string(Text msg, Element &string, Real &x, Real &y, Real &z, Real &ch, Real &ht, Integer &dir)"
      ],
      "description": "Write the message msg to the 12d Model Output Window and then return the Element picked bythe user.  The co-ordinates of the picked point are also returned plus whether the string selectingwas picked in the same direction as the string, or the opposite direction to the string. The picked Element is returned in the Element string. The co-ordinates and chainage of the picked point on the Element string are (x,y,z) and chrespectively. The value ht is reserved for future use and should be ignored. The value dir indicates if the picking motion was in the same direction as the selected string, orin the opposite direction. dir =dir =when the picking motion was in the same direction as the selected string. when the picking motion was in the opposite direction as the selected string. A function return value of-1012indicates cancel was chosen from the pick-ops menu. pick unsuccessfulpick was successfula cursor pick",
      "id": "547"
    },
    {
      "names": [
        "Integer Element_draw(Element elt, Integer col_num)"
      ],
      "description": "Draw the Element elt in the colour number col_num on all the views that elt is displayed on. A function return value of zero indicates that elt was drawn successfully.",
      "id": "372"
    },
    {
      "names": [
        "Integer Element_draw(Element elt)"
      ],
      "description": "Draw the Element elt in its natural colour on all the views that elt is displayed on. A function return value of zero indicates that elt was drawn successfully.",
      "id": "371"
    },
    {
      "names": [
        "Integer String_closed(Element elt, Integer &closed)"
      ],
      "description": "Checks to see if the Element elt is closed.  That is, check if the first and the last points of theelement are the same.  The close status is returned as closed. If closed is1then elt is closed0then elt is not closed (i. e.  open)A zero function return value indicates that the closure check was successful.",
      "id": "368"
    },
    {
      "names": [
        "Integer String_open(Element elt)"
      ],
      "description": "Open the Element elt. That is, if the first and the last points of the elt are the same, then delete the last point of elt. A function return value of zero indicates that elt was successfully opened.",
      "id": "366"
    },
    {
      "names": [
        "Integer String_close(Element elt)"
      ],
      "description": "Close the Element elt. That is, if the first and the last points of elt are not the same, then add a point to the end of eltwhich is the same as the first point of elt. A function return value of zero indicates that elt was successfully closed.",
      "id": "367"
    },
    {
      "names": [
        "Integer Get_length(Element string, Real &length)"
      ],
      "description": "Get the plan length of the Element string (which equals the end chainage minus the startchainage) and return the plan length in length. Page 854General Element Operations\fChapter 5 12dPL Library CallsA function return value of zero indicates the plan length was successfully returned.",
      "id": "122"
    },
    {
      "names": [
        "Integer Get_length_3d(Element string, Real &length)"
      ],
      "description": "Get the 3d length of the Element string and return the 3d length in length. A function return value of zero indicates the 3d length was successfully returned.",
      "id": "359"
    },
    {
      "names": [
        "Integer Get_length_3d(Element string, Real ch, Real &length)"
      ],
      "description": "Get the 3d length of the Element string from the start of the string up the given chainage ch. Return the 3d length in length. A function return value of zero indicates the 3d length was successfully returned.",
      "id": "2681"
    },
    {
      "names": [
        "Integer Plan_area(Element string, Real &plan_area)"
      ],
      "description": "Calculate the plan area of the Element string.  If the Element is not closed, then the first and lastpoints are joined before calculating the area.  For an arc, the plan area of the sector is returned. The plan area is returned in the Real plan_area. A function return value of zero indicates the plan area was successfully returned.",
      "id": "221"
    },
    {
      "names": [
        "Integer Plan_area_signed(Element string, Real &plan_area)"
      ],
      "description": "Calculate the signed plan area of the Element string.  If the Element is not closed, then the firstand last points are joined before calculating the area.  For an arc, the plan area of the sector isreturned. The signed plan area is returned in the Real plan_area. A function return value of zero indicates the signed plan area was successfully returned.",
      "id": "3137"
    },
    {
      "names": [
        "Integer Surface_area_tin_polygon(Tin tin, Element polygon, Real &slope_area, Real &plan_area)"
      ],
      "description": "Calculate the slop area and plan area of the Element polygon within given Tin tin.  If the Elementis not closed, then the first and last points are joined before calculating the area. The slop area is returned in the Real slop_area. The plan area is returned in the Real plan_area. A function return value of zero indicates the signed plan area was successfully returned.",
      "id": "3736"
    },
    {
      "names": [
        "Integer Get_position(Element elt, Real ch, Real &x, Real &y, Real &z, Real &inst_dir)"
      ],
      "description": "For the Element elt, get the (x,y,z) position and instantaneous direction (inst_dir - as an angle,measured in radians) of the point at chainage ch on elt. A function return value of zero indicates success.",
      "id": "190"
    },
    {
      "names": [
        "Integer Get_position(Element elt, Real ch, Real &x, Real &y, Real &z, Real &inst_dir, Real &rad, Real &inst_grade)"
      ],
      "description": "For a Element, elt, of type Alignment only, get the (x,y,z) position, radius rad, instantaneousdirection (inst_dir - as an angle, measured in radians) and instantaneous grade (inst_grade) ofa point on elt at chainage ch. A function return value of zero indicates success.",
      "id": "471"
    },
    {
      "names": [
        "Integer Get_position(Element string, Real ch, Real &x, Real &y, Real &z, Real &dir, Integer &vertex, Real &distance)"
      ],
      "description": "For the Element string, find the point at the chainage ch.  Return the coordinate of the point in(x,y,z); the direction (the angle of the tangent) of the point in dir; the index of the vertex beforethe point in vertex; and the distance past that vertex distance. A return value of zero indicates the function call was successful. Not implemented for all strings.",
      "id": "1775"
    },
    {
      "names": [
        "Integer Drop_point(Element elt, Real xd, Real yd, Real zd, Real &xf, Real &yf, Real &zf, Real &ch, Real &inst_dir, Real &off)"
      ],
      "description": "In plan, drop the point (xd,yd) perpendicularly onto the Element elt.  If the point cannot bedropped onto any segment of the Element, then the point is dropped onto the closest end point. A z-value for the dropped point is created by interpolation. The position of the dropped point on the Element is returned in xf, yf and zf.  The chainage of thedropped point on the string is ch and inst_dir the instantaneous direction (as an angle,measured in radians) at the dropped point. Off is the plan distance from the original point to the dropped point on the string. A function return value of zero indicates that the drop was successful.",
      "id": "191"
    },
    {
      "names": [
        "Integer Drop_point(Element elt, Real xd, Real yd, Real zd, Real &xf, Real &yf, Real &zf, Real &ch, Real &inst_dir, Real &off, Segment &segment)"
      ],
      "description": "In plan, drop the point (xd,yd) perpendicularly onto the Element elt.  If the point cannot bedropped onto any segment of the Element, then the point is dropped onto the closest end point. A z-value for the dropped point is created by interpolation. The position of the dropped point on the Element is returned in xf, yf and zf.  The chainage of thedropped point on the string is ch and inst_dir the instantaneous direction (as an angle,measured in radians) at the dropped point. Off is the plan distance from the original point to the dropped point on the string. Segment segment is the link of the string that the point drops onto. A function return value of zero indicates that the drop was successful.",
      "id": "302"
    },
    {
      "names": [
        "Integer Parallel(Element elt, Real distance, Element &parallelled)"
      ],
      "description": "Plan parallel the Element elt by the distance distance. The parallelled Element is returned as the Element parallelled.  The z-values are not modified,i. e.  they are the same as for elt. A function return value of zero indicates the parallel was successful.",
      "id": "365"
    },
    {
      "names": [
        "Integer String_self_intersects(Element elt, Integer &intersects)"
      ],
      "description": "Find the number of self intersections for the Element elt. The number of self intersections is returned as intersects. A function return value of zero indicates that there were no errors in the function. NoteFor Elements of type Alignment, Arc, Circle and Text the number of intersects is set to negative.",
      "id": "328"
    },
    {
      "names": [
        "Integer Loop_clean(Element elt, Point ok_pt, Element &new_elt)"
      ],
      "description": "This routine tries to remove any plan loops in the Element elt. If elt is closed, then the function assumes that the Point ok_pt is near a segment of the stringthat will also be in the cleaned string. If elt is open, then the function starts cleaning from the end of the string closest to the Pointok_pt. The cleaned Element is returned as Element new_elt. Page 858General Element Operations\fChapter 5 12dPL Library CallsA function return value of zero indicates the clean was successful. NoteLoop_clean is not defined for the Elements of type Alignment, Arc, Circle and Text",
      "id": "329"
    },
    {
      "names": [
        "Integer Get_read_locks(Element elt, Integer &num_locks)"
      ],
      "description": "For a valid Element elt, return the number of read locks on elt in num_locks. Note: There are no 12dPL functions that a macro programmer can use to set read locks.  Theyare automatically assigned and removed as required by various 12dPL functions. A function return value of zero indicates the number of read locks was successfully returned.",
      "id": "1453"
    },
    {
      "names": [
        "Integer Get_write_locks(Element elt, Integer &num_locks)"
      ],
      "description": "For a valid Element elt, return the number of write locks on elt in num_locks. Note: There are no 12dPL functions that a macro programmer can use to set write locks.  Theyare automatically assigned and removed as required by various 12dPL functions. A function return value of zero indicates the number of write locks was successfully returned.",
      "id": "1454"
    },
    {
      "names": [
        "Integer String_replace(Element from, Element &to)"
      ],
      "description": "Copy the contents of the Element from and use them to replace the contents of the Element to. The id/Uid of to is not replaced. The Elements to and from must be strings and also be the same string types.  For example,both of type Super. Note: this will not work for Elements of type Tin. A function return value of zero indicates the replace was successful.",
      "id": "1176"
    },
    {
      "names": [
        "Integer Line_cut_string(Real px, Real py, Real dir, Real cut_lim, Element string, Real &cx, Real &cy)"
      ],
      "description": "Find the closest cut of a line going through an original point px, py with direct dir to a stringstring. The cut cannot be further from the original point than cut_lim, the x-y coordinate of the closestcut are returned in cx, cyA function return value of zero indicates that a valid cut point found.",
      "id": "5445"
    },
    {
      "names": [
        "Integer Valid_string_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid string name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2277"
    },
    {
      "names": [
        "Integer Valid_model_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid model name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2278"
    },
    {
      "names": [
        "Integer Valid_tin_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid tin name by substituting spaces for any illegal characters inold_name; leading and trailing spaces in the new name also being removed.  The new name isreturned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2279"
    },
    {
      "names": [
        "Integer Valid_attribute_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid attribute name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingCreating Valid NamesPage 861\f12d Model Programming Language Manualspaces being removed.",
      "id": "2280"
    },
    {
      "names": [
        "Integer Valid_attribute_path(Text old_path, Text &valid_path)"
      ],
      "description": "Convert the Text old_path to a valid attribute path by substituting spaces for any illegalcharacters in old_path.  The new path is returned in valid_path. The function returns one if all the characters in the old_path are valid; no substituting needed. The function returns two if the old_path contains mixture of valid and invalid characters . The function returns three if all the characters in the old_path are invalid or spaces.",
      "id": "3722"
    },
    {
      "names": [
        "Integer Valid_attribute_xpath(Text old_path, Text &valid_path)"
      ],
      "description": "Convert the Text old_path to a valid attribute path with potentially array syntax by substitutingspaces for any illegal characters in old_path.  The new path is returned in valid_path. The function returns one if all the characters in the old_path are valid; no substituting needed. The function returns two if the old_path contains mixture of valid and invalid characters . The function returns three if all the characters in the old_path are invalid or spaces. The function returns four if the path containing any invalid array syntax.",
      "id": "3723"
    },
    {
      "names": [
        "Integer Valid_linestyle_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid linestyle name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2281"
    },
    {
      "names": [
        "Integer Valid_symbol_name(Text old_name, Text &valid_name)"
      ],
      "description": "Page 862Creating Valid Names\fChapter 5 12dPL Library CallsConvert the Text old_name to a valid symbol name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2282"
    },
    {
      "names": [
        "XML_Document Create_XML_document()"
      ],
      "description": "This call creates a new XML document.  This is the entry point for all macro code that works withXML.  Existing files can then be read into the document, or the code may start to build up nodesinto the document.",
      "id": "2436"
    },
    {
      "names": [
        "Integer Read_XML_document(XML_Document doc, Text file)"
      ],
      "description": "Reads the supplied file and loads the nodes into the supplied XML Document object. Returns 0 if successful.",
      "id": "2419"
    },
    {
      "names": [
        "Integer Write_XML_document(XML_Document doc, Text file)"
      ],
      "description": "Writes the supplied XML Document to the given file name. Returns 0 if successful.",
      "id": "2420"
    },
    {
      "names": [
        "Integer Get_XML_declaration(XML_Document doc, Text &version, Text &encoding, Integer &standalone)"
      ],
      "description": "Finds and returns the values from the XML declaration in the given document.  Not all documentsmay contain XML declarations. Returns 0 if successful.",
      "id": "2437"
    },
    {
      "names": [
        "Integer Set_XML_declaration(XML_Document doc, Text version, Text encoding, Integer standalone)"
      ],
      "description": "This call sets the details for the XML declaration.  If the document does not already contain anXML declaration, one will be added to the top of the document. Returns 0 if successful.",
      "id": "2438"
    },
    {
      "names": [
        "XML_Node Create_node(Text name)"
      ],
      "description": "This call creates a new XML node.  This node can have its value set, or have other childrennodes appended to it.  It must also be either set as the root node (see Set_Root_Node) orappended to another node (see Append_Node) to become part of a document.",
      "id": "2435"
    },
    {
      "names": [
        "Integer Get_root_node(XML_Document doc, XML_Node &node)"
      ],
      "description": "This call finds and retrieves the node at the root of the document.  This is the top level node.  Ifthere is no root node, the call will return non 0. Returns 0 if successful.",
      "id": "2421"
    },
    {
      "names": [
        "Integer Set_root_node(XML_Document, XML_Node &node)"
      ],
      "description": "This call sets the root node (the top level node) for the given document.  There must be at mostone root node in a document.",
      "id": "2422"
    },
    {
      "names": [
        "Integer Get_number_of_nodes(XML_Node node)"
      ],
      "description": "XMLPage 865\f12d Model Programming Language ManualThis call returns the number of children nodes for the given nodes.  A node may contain 0 or morechildren.",
      "id": "2423"
    },
    {
      "names": [
        "Integer Get_child_node(XML_Node node, Integer index, XML_Node &child_node)"
      ],
      "description": "This call retrieves the n'th child, as specified by index, of a parent node and stores it in thechild_node argument. Returns 0 if successful.",
      "id": "2424"
    },
    {
      "names": [
        "Integer Get_child_node(XML_Node node, Text name, XML_Node &child_node)"
      ],
      "description": "This call retrieves the first instance of a child of a parent node, by its name.  If there is more thanone element of the same name, this call will only return the first.  The retrieved node will be storedin the child_node argument. This call will return 0 if successful.",
      "id": "2439"
    },
    {
      "names": [
        "Integer Append_node(XML_Node parent, XML_Node new_node)"
      ],
      "description": "This call appends a child node to a parent node.  A parent node may contain 0 or more childrennodes.  The new_node cannot already being a child of another node; if it is the call will fail withthe return value 1. This call will return 0 if successful.",
      "id": "2425"
    },
    {
      "names": [
        "Integer Remove_node(XML_Node parent, Integer index)"
      ],
      "description": "This call removes the n'th child node, as given by index, from the supplied parent node. This call will return 0 if successful.",
      "id": "2426"
    },
    {
      "names": [
        "Integer Get_parent_node(XML_Node child, XML_Node &parent)"
      ],
      "description": "This call will find the parent node of the supplied child and store it in the parent argument. This call will return 0 if successful.",
      "id": "2427"
    },
    {
      "names": [
        "Integer Get_next_sibling_node(XML_Node node, XML_Node &sibling)"
      ],
      "description": "Given a node, this call will retrieve the next sibling, or same level node. In the following example, Child2 is the next sibling of Child1. <Parent><Child1/><Child2/></Parent>This call will return 0 if successful.",
      "id": "2428"
    },
    {
      "names": [
        "Integer Get_prev_sibling_node(XML_Node node, XML_Node &sibling)"
      ],
      "description": "Given a node, this call will retrieve the previous sibling, or same level node. In the following example, Child1 is the previous sibling of Child2. <Parent><Child1/><Child2/></Parent>This call will return 0 if successful.",
      "id": "2429"
    },
    {
      "names": [
        "Integer Get_node_name(XML_Node node, Text &name)"
      ],
      "description": "This call will retrieve the name of a supplied node and store it in the name argument. The name of a node is the value within the brackets or tags.  In the following example, MyNode isthe name of the node. <MyNode>1234</MyNode>This call will return 0 if successful. XMLPage 867\f12d Model Programming Language Manual",
      "id": "2433"
    },
    {
      "names": [
        "Integer Get_node_attribute(XML_Node node, Text name, Text &value)"
      ],
      "description": "This call will try find an attribute of given name belonging to the supplied node, and will store thevalue in the value attribute. In the following example, the data stored in value will be: MyAttributeData<MyNode MyAttribute=\"MyAttributeData\" />This call will return 0 if successful.",
      "id": "2440"
    },
    {
      "names": [
        "Integer Set_node_attribute(XML_Node node, Text name, Text value)"
      ],
      "description": "This call will set the value of an attribute attached to a node.  If it does not exist, the attribute willbe created. This call will return 0 if successful.",
      "id": "2441"
    },
    {
      "names": [
        "Integer Remove_node_attribute(XML_Node node, Text name)"
      ],
      "description": "This call will attempt to remove a node of a given name from the supplied node. This call will return 0 if successful.",
      "id": "2442"
    },
    {
      "names": [
        "Integer Is_text_node(XML_node &node)"
      ],
      "description": "This call will attempt to determine if a node is a text only node or not. A text node is one that contains only text, and no other child nodes. This call will return 1 if the node is a text node.",
      "id": "2430"
    },
    {
      "names": [
        "Integer Get_node_text(XML_Node &node, Text &text)"
      ],
      "description": "This call will attempt to retrieve the internal text value of a node and store it in text. Not all nodes may contain text. In the following example, the value of text will be set to MyText<MyNode>MyText</MyNode>This call will return 0 if successful.",
      "id": "2431"
    },
    {
      "names": [
        "Integer Set_node_text(XML_Node &node, Text value)"
      ],
      "description": "This call will set the internal text of node to the value. This call will return 0 if successful.",
      "id": "2432"
    },
    {
      "names": [
        "XML_Node Create_text_node(Text name, Text value)"
      ],
      "description": "This call will create a new text node of the given name and set the internal text to the given value. This call will return the created node.",
      "id": "2434"
    },
    {
      "names": [
        "Integer Get_node_attributes(XML_Node node, Integer &attributes_count)"
      ],
      "description": "Count the number of attributes attributes_count of an XML_Node nodeA return value of zero indicates the function call was successful.",
      "id": "3056"
    },
    {
      "names": [
        "Integer Get_node_attributes(XML_Node node, Integer &attributes_count, Dynamic_Text &names, Dynamic_Text &values)"
      ],
      "description": "XMLPage 869\f12d Model Programming Language ManualCount the number of attributes attributes_count of an XML_Node nodeOutput the list of attribute names to namesOutput the list of attribute values to valuesA return value of zero indicates the function call was successful.",
      "id": "3057"
    },
    {
      "names": [
        "Integer Write_XML_Document(XML_Document doc, File &file)"
      ],
      "description": "Write XML_Document doc to File file. A return value of -1 indicates the File file did not exist. A return value of -2 indicates the XML_Document doc did not exist. A return value of -3 indicates the XML_Document doc was not valid. A return value of -4 indicates the saving failed. A return value of zero indicates the function call was successful.",
      "id": "2951"
    },
    {
      "names": [
        "Integer Write_XML(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and write the 12d XML of all the Elements in the Model model tothe file.  Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don\u2019t write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Just for this macro call, there is an extra bit in the bool_flags of value 1048576.  When this bit ison, then a valid 12D XML header and the corresponding closing tag will also be added to theoutput file to form a valid 12D XML file. Page 870XML\fChapter 5 12dPL Library CallsNull values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3199"
    },
    {
      "names": [
        "Integer XML_to_12da(Text xml_filename, Text tda_filename)"
      ],
      "description": "From a given 12dXML file xml_filename, and write the equivalent 12d Ascii (12da) to a filetda_filename. A function return value of zero indicates the data was successfully written.",
      "id": "3729"
    },
    {
      "names": [
        "Integer Translate_XML_file(Text xml_filename, Text xslt_filename, Integer output_type, Integer decimal, Text output_filename)"
      ],
      "description": "Translate a given XML report file xml_filename using the transformation given in a filexslt_filename; write the output to the file output_filename. Interger output_file_type: 3 HTML; 4 PDF; 7 CSVIf some Real to be convert to text in the output file, the number of decimal will be usedA function return value of zero indicates the data was successfully written.",
      "id": "3730"
    },
    {
      "names": [
        "Integer ADAC_get_xsd_path(Text version, Text &path)"
      ],
      "description": "Return the XSD path of ADAC version Integer version to Text path. A return value of zero indicates the function call was successful.",
      "id": "2952"
    },
    {
      "names": [
        "Integer XSD_get_type_enumerations(Text xsd, Text schema, Text frag_path, Dynamic_Text &enums, Text &elem_type)"
      ],
      "description": "XMLPage 871\f12d Model Programming Language ManualGet the enumerations for a simple or primitive type in the Text schema of file named Text xsd. The list of enumerations is returned to Dynamic_Text enums. The type of the enumeration list is returned to Text elem_types. A return value of zero indicates the function call was successful. The list of values for XSF primitive typeTextBooleanIntegerDoubleFloatDurationDate_TimeTimeDate",
      "id": "2953"
    },
    {
      "names": [
        "Integer Map_file_create(Map_File &file)"
      ],
      "description": "Create a mapping file.  The file unit is returned as Map_file file. A function return value of zero indicates the file was opened successfully.",
      "id": "864"
    },
    {
      "names": [
        "Integer Map_file_open(Text file_name, Text prefix, Integer use_ptline, Map_File &file)"
      ],
      "description": "Open up a mapping file to read. The file unit is returned as Map_file file. The prefix of models is given as Text prefix. The string type is given as Integer use_ptline,0 \u2013 point string1 \u2013 line sting. A function return value of zero indicates the file was opened successfully.",
      "id": "865"
    },
    {
      "names": [
        "Integer Map_file_close(Map_File file)"
      ],
      "description": "Close a mapping file.  The file being closed is Map_file file. A function return value of zero indicates the file was closed successfully.",
      "id": "866"
    },
    {
      "names": [
        "Integer Map_file_number_of_keys(Map_File file, Integer &number)"
      ],
      "description": "Get the number of keys in a mapping file. The file is given as Map_file file. The number of keys is returned in Integer number. A function return value of zero indicates the number was returned successfully.",
      "id": "868"
    },
    {
      "names": [
        "Integer Map_file_add_key(Map_File file, Text key, Text name, Text model, Integer colour, Integer ptln, Text style)"
      ],
      "description": "Add key to a mapping file. The file is given in Map_file file. The key is given in Text key. The string name is given in Text name. The model name is given in Text model. The string colour is given in Integer colour. The string type is given in Integer ptln. The string style is given in Text style. A function return value of zero indicates the key was added successfully.",
      "id": "869"
    },
    {
      "names": [
        "Integer Map_file_get_key(Map_File file, Integer n, Text &key, Text &name, Text &model, Integer &colour, Integer &ptln, Text &style)"
      ],
      "description": "Get nth key\u2019s data from a mapping file. The file is given in Map_file file. The key is returned in Text key. The string name is returned in Text name. The model name is returned in Text model. The string colour is returned in Integer colour. The string type is returned in Integer ptln. The string style is returned in Text style. A function return value of zero indicates the key was returned successfully.",
      "id": "870"
    },
    {
      "names": [
        "Integer Map_file_find_key(Map_File file, Text key, Integer &number)"
      ],
      "description": "Find the record number from a mapping file that contains the given key. The file unit is given in Map_file file. Page 874Map File\fChapter 5 12dPL Library CallsThe record number is returned in Integer number. A function return value of zero indicates the key was find successfully.",
      "id": "871"
    },
    {
      "names": [
        "Integer Read_project_settings_file(Text project_settings_filename)"
      ],
      "description": "Read a project settings file (. 12dsettings) into the current project. A function return value of zero indicates the file was read successfully.",
      "id": "3731"
    },
    {
      "names": [
        "Integer Get_active_project_settings_profile(Text &active_profile_name)"
      ],
      "description": "Get the name active_profile_name for the active project settings profile of the current project. A function return value of zero indicates the function call was successful",
      "id": "3732"
    },
    {
      "names": [
        "Integer Set_active_project_settings_profile(Text active_profile_name)"
      ],
      "description": "Set the profile of name active_profile_name as the active project settings profile of the currentproject. A function return value of zero indicates the function call was successful",
      "id": "3733"
    },
    {
      "names": [
        "Integer Get_project_settings_profiles_count()",
        "3734 Get_project_settings_profile_name(Integer profile_index, Text &profile_name)",
        "Integer Get_project_settings_profile_name(Integer profile_index, Text &profile_name)",
        "Integer Remove_project_setting(Text name)"
      ],
      "description": "A function return value of zero indicates the file was opened successfully.",
      "id": "3545"
    },
    {
      "names": [
        "Integer Project_setting_exists(Text name)"
      ],
      "description": "A function return value of one indicates the setting exists; return zero otherwise.",
      "id": "3546"
    },
    {
      "names": [
        "Integer Get_project_setting_integer(Text name)"
      ],
      "description": "",
      "id": "3547"
    },
    {
      "names": [
        "Real Get_project_setting_real(Text name)"
      ],
      "description": "",
      "id": "3548"
    },
    {
      "names": [
        "Text Get_project_setting_text(Text name)"
      ],
      "description": "",
      "id": "3549"
    },
    {
      "names": [
        "Integer Get_project_setting_colour(Text name)"
      ],
      "description": "",
      "id": "3551"
    },
    {
      "names": [
        "Integer Set_project_setting_integer(Text name, Integer value)"
      ],
      "description": "",
      "id": "3552"
    },
    {
      "names": [
        "Integer Set_project_setting_real(Text name, Real value)"
      ],
      "description": "",
      "id": "3553"
    },
    {
      "names": [
        "Integer Set_project_setting_text(Text name, Text value)"
      ],
      "description": "",
      "id": "3554"
    },
    {
      "names": [
        "Integer Set_project_setting_colour(Text name, Integer value)"
      ],
      "description": "",
      "id": "3555"
    },
    {
      "names": [
        "Integer Set_project_setting_attributes(Text name, Attributes value)"
      ],
      "description": "",
      "id": "3556"
    },
    {
      "names": [
        "Integer Set_message_mode(Integer mode)"
      ],
      "description": "When macros are running, progress information can be displayed in the information/errormessage area.  Most 12dPL computational intensive functions have standard messages that canbe displayed.  For example, when triangulating, regular messages showing the number of pointstriangulated can be displayed.  Or the message running with the ticker character \"/\" rotatingthrough 360 degrees. The user can have the standard 12dPL messages displayed, or replace them at any time by auser defined message (set using the function Set_message_text). If mode is set to0the user defined message1the standard 12dPL messageis displayed in the information/error message area. A function return value of zero indicates the mode was successfully set.",
      "id": "427"
    },
    {
      "names": [
        "void Set_message_text(Text msg)"
      ],
      "description": "Set the user defined information message to msg.  This is a prefix for the ticker \"/\". When the message mode is set to 0 (using the function Set_message_mode), msg is displayedin the information/error message area.  The message msg is followed by a rotating ticker (/) toindicate to the user that the macro is running. A function return value of zero indicates the message was successfully set.",
      "id": "426"
    },
    {
      "names": [
        "void Prompt(Text msg)"
      ],
      "description": "Print the message msg to the prompt message area of the macro console. Prompt Message AreaIf another message is written to the prompt message area then the previous messagewill be overwritten by the new message.",
      "id": "34"
    },
    {
      "names": [
        "Integer Prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then wait for the user to type text intothe user reply area of the Macro Console.  When <enter> is pressed then the text in the userreply area is returned in ret. That is, write out the message msg and get a Text ret from the Macro Console when the text isterminated by pressing <enter>. The reply is returned in Text ret. A function return value of zero indicates the text is returned successfully.",
      "id": "28"
    },
    {
      "names": [
        "Integer Prompt(Text msg, Integer &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back an Integer from theuser reply area of the Macro Console. That is, write out the message msg and wait for an integer reply from the Macro Console.  Thereply is terminated by pressing <enter>. The reply is returned in Integer ret. A function return value of zero indicates that the Integer was returned successfully.",
      "id": "26"
    },
    {
      "names": [
        "Integer Prompt(Text msg, Real &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Real from the userreply area of the Macro Console.  The reply is terminated by pressing <enter>. The reply is returned in Real ret. A function return value of zero indicates that the Real was returned successfully.",
      "id": "27"
    },
    {
      "names": [
        "Integer Colour_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area of the Macro Console and then read backtext from the user reply area of the Macro Console as the name of a 12d Model colour. If LB is clicked on the colour choice icon at the right hand end of the user reply area, a list of allexisting colours is placed in a pop-up.  If a colour is selected from the pop -up (using LB), thecolour name is written to the user reply area. The reply, either typed or selected from the colour pop-up, is then terminated by pressing<Enter>. information/error message areaprompt message areacolour choice iconuser reply areacolour choice pop upIf the text is a valid colour then a function return value of zero is returned and the colour name isreturned in ret. If the text is not a valid colour name, then the message Error - invalid colour is written to theinformation message area and a non-zero function return value is returned. information/error message areaA function return value of zero indicates the Text ret is a valid colour name and is successfullyPage 884Macro Console\fChapterreturned.",
      "id": "404"
    },
    {
      "names": [
        "Integer Error_prompt(Text msg)"
      ],
      "description": "Print the message msg to the information/error message area of the Macro Console, andwrites Press return to continue to the prompt message area and then waits for an <enter> in theuser reply area before the macro continues. information/errormessage areaprompt message areauser reply areaA function return value of zero indicates the function terminated successfully.",
      "id": "419"
    },
    {
      "names": [
        "Integer Choice_prompt(Text msg, Integer no_choices, Text choices[], Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, user reply area,the list of text given in the Text array choices is placed in a pop-up.  If one of the choices isselected from the pop-up (using LB), the choice is placed in the user reply area. The reply, either typed or selected from the choice pop-up, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the text is returned successfully.",
      "id": "421"
    },
    {
      "names": [
        "Integer File_prompt(Text msg, Text wild_card_key, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the folder icon at the right hand end of the user reply area, a list of all files inMacro ConsolePage 885\f12d Model Programming Language Manualthe current area which match the wild_card_key (for example, *. dat) is placed in a pop-up.  If afile is selected from the pop-up (using LB), the file name is placed in the user reply area. If a name is entered without a dot ending (e. g.  fred and not fred. csv say) then the ending after thedot in the wild_card_key is automatically added to the name. For example, if wild_card_key = \"*. rpt\" and \"fred\" is type in as the file name, then ret will bereturned as ret = \"fred. rpt\". The reply, either typed or selected from the file pop-up, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "405"
    },
    {
      "names": [
        "Integer Model_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the user replyarea of the Macro Console. If LB is clicked on the model icon at the right hand end of the user reply area, a list of all existingmodels is placed in a pop-up.  If a model is selected from the pop-up (using LB), the model name isplaced in the user reply area. MB for \"Same As\" also applies.  That is, If MB is clicked in the user reply area and then a string froma model on a view is selected, the name of the model containing the selected string is written to theuser reply area. msg written to prompt message areaClick LB to on the icon tobring up the list of modelsto select fromuser reply areaThe reply, either typed or selected from the model pop-up or Same As, must be terminated bypressing <Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "401"
    },
    {
      "names": [
        "Integer Template_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. Page 886Macro Console\fChapterIf LB is pressed on the icon at the right hand end of the user reply area, a list of all existingtemplates is placed in a pop-up.  If a template is selected from the pop-up (using LB), thetemplate name is placed in the user reply area. The reply, either typed or selected from the template popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the text is returned successfully.",
      "id": "403"
    },
    {
      "names": [
        "Integer Tin_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the tin icon at the right hand end of the user reply area, a list of all existing tinsis placed in a pop-up.  If a tin is selected from the pop-up (using LB), the Tin name is placed in theuser reply area. The reply, either typed or selected from the Tin popup, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "402"
    },
    {
      "names": [
        "Integer Tin_prompt(Text msg, Integer mode, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the tin icon at the right hand end of the user reply area, a list of all existing tinsis placed in a pop-up.  If a tin is selected from the pop-up (using LB), the Tin name is placed in theuser reply area. The value of mode determines whether Super Tins are listed in the pop-up. Mode0Don\u2019t list SuperTin. 1List SuperTin. The reply, either typed or selected from the Tin pop-up, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "684"
    },
    {
      "names": [
        "Integer View_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the view icon at the right hand end of the user reply area, a list of all existingviews is placed in a pop-up.  If a view is selected from the pop-up (using LB), the view name isplaced in the user reply area. The reply, either typed or selected from the view popup, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "406"
    },
    {
      "names": [
        "Integer Yes_no_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, a yes/no pop-upis placed on the screen.  If yes or no is selected from the pop-up (using LB), the selected test isplaced in the user reply area. The reply, either typed or selected from the yes/no popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "420"
    },
    {
      "names": [
        "Integer Plotter_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the plotter icon at the right hand end of the user reply area, a list of all existingplotters is placed in a pop-up.  If a plotter is selected from the pop-up (using LB), the plotter nameis placed in the user reply area. The reply, either typed or selected from the plotter popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "817"
    },
    {
      "names": [
        "Integer Sheet_size_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existingsheet sizes is placed in a pop-up.  If a sheet size is selected from the pop-up (using LB), thesheet size name is placed in the user reply area. The reply, either typed or selected from the sheet_size popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "818"
    },
    {
      "names": [
        "Integer Linestyle_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the linestyle icon at the right hand end of the user reply area, a list of allexisting linestyles is placed in a pop-up.  If a linestyle is selected from the pop-up (using LB), thelinestyle name is placed in the user reply area. The reply, either typed or selected from the linestyle popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "819"
    },
    {
      "names": [
        "Integer Textstyle_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the textstyle icon at the right hand end of the user reply area, a list of allexisting textstyles is placed in a pop-up.  If a textstyle is selected from the pop-up (using LB), thetextstyle name is placed in the user reply area. The reply, either typed or selected from the textstyle popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. Macro ConsolePage 889\f12d Model Programming Language ManualA function return value of zero indicates the Text ret is returned successfully.",
      "id": "820"
    },
    {
      "names": [
        "Integer Justify_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existingjustifications is placed in a pop-up.  If a Justify is selected from the pop-up (using LB), the Justifyname is placed in the user reply area. The reply, either typed or selected from the Justify popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "821"
    },
    {
      "names": [
        "Integer Angle_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the angle icon at the right hand end of the user reply area, a list of Anglemeasure options is placed in a pop-up.  If a Angle is selected from the pop-up (using LB), theAngle name is placed in the user reply area. The reply, either typed or selected from the Angle popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "822"
    },
    {
      "names": [
        "Integer Function_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the function icon at the right hand end of the user reply area, a list of allexisting 12d Model Functions is placed in a pop-up.  If a Function is selected from the pop-up(using LB), the Function name is placed in the user reply area. The reply, either typed or selected from the Function popup, must be terminated by pressingPage 890Macro Console\fChapter<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "823"
    },
    {
      "names": [
        "Integer Project_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the icon at the right hand end of the user reply area, a list of all existingProjects in the folder is placed in a pop-up.  If a Project is selected from the pop-up (using LB), theProject name is placed in the user reply area. The reply, either typed or selected from the Project popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "824"
    },
    {
      "names": [
        "Integer Directory_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the folder icon at the right hand end of the user reply area, the Select Folderdialogue is opened.  If a Folder is selected by clicking on it with LB and then clicking on the SelectFolder button, the Folder name is placed in the user reply area. The reply, either typed or selected from the Select Folder dialogue, must be terminated bypressing <Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "825"
    },
    {
      "names": [
        "Integer Text_units_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existingText units is placed in a pop-up.  If a Text_units is selected from the pop-up (using LB), the TextMacro ConsolePage 891\f12d Model Programming Language Manualunits name is placed in the user reply area. The reply, either typed or selected from the Text_units popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "826"
    },
    {
      "names": [
        "Integer XYZ_prompt(Text msg, Real &x, Real &y, Real &z)"
      ],
      "description": "Print the message msg to the prompt message area and then read back what must be xvalue y-value z- value with the values separated by one or more spaces. If LB is clicked on the pick icon at the right hand end of the user reply area, an XYZ pick isstarted and when a pick is made, the coordinates of the pick, separated by spaces, are written inthe user reply area. The reply, either typed or selected from the Pick, must be terminated by pressing <Enter> for themacro to continue. The values are returned in x, y and z. A function return value of zero indicates values x, y and z are successfully returned.",
      "id": "827"
    },
    {
      "names": [
        "Integer Name_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the Name icon at the right hand end of the user reply area, a list of all existingNames is placed in a pop-up.  If a Name is selected from the pop-up (using LB), the Name isplaced in the user reply area. The reply, either typed or selected from the Name popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "828"
    },
    {
      "names": [
        "Integer Panel_prompt(Text panel_name, Integer interactive, Integer no_field, Text field_name[], Text field_value[])"
      ],
      "description": "Page 892Macro Console\fChapterPop up a panel of the name panel_name. No_field specifies how many fields you wish to fill in for the panel. The name of each field is specified in Field_name array. The value of each field is specified in field_value array. If interactive is 1, the panel is displayed and remains until the finish button is selected. If interactive is 0, the panel is displayed, runs the option and then closes. A function return value of zero indicates success. See example Defining and Using Panel_prompt",
      "id": "685"
    },
    {
      "names": [
        "Integer Panel_prompt(Text panel_name, Integer interactive, Text data)"
      ],
      "description": "Pop up a panel of the name panel_name. Data specifies the SLF or SLX content.  Note, SLF content is deprecated and only for compatibiltypurposes.  Where a panel has been changed, the SLF content may no longer work.  See exampleMacro ConsolePage 893\f12d Model Programming Language Manualbelow:For SLF based dataIf interactive is 1, the panel is displayed and remains until the finish button is selected. If interactive is 0, the panel is displayed, runs the option and then closes. For SLX based dataIf interactive is 0xff01, the panel is displayed and remains until the finish button is selected. If interactive is 0xff00, the panel is displayed, runs the option and then closes. A function return value of zero indicates success. See example Defining and Using Panel_prompt",
      "id": "2068"
    },
    {
      "names": [
        "Integer Get_cursor_position(Integer &x, Integer &y)"
      ],
      "description": "Get the cursor position (x,y). The units of x and y are screen units (pixels). The type of x and y must be Integer. A function return value of zero indicates the position was returned successfully.",
      "id": "1329"
    },
    {
      "names": [
        "Integer Set_cursor_position(Integer x, Integer y)"
      ],
      "description": "Set the cursor position with the coordinates (x, y). The units of x and y are screen units (pixels). A function return value of zero indicates the position was successfully set.",
      "id": "1330"
    },
    {
      "names": [
        "Panel Create_panel(Text title_text)"
      ],
      "description": "Create a panel with the title title_text. If LB is clicked on the X on the top right corner of the panel, the text \"Panel Quit\" is returned asthe cmd argument to Wait_on_widgets. Click LB on X to send the\"Panel Quit\" commandClick LB on the Widows icon tobring up the Windows panelIf LB is clicked on the Windows icon on the top left hand corner of the panel,Click LB on X to send the\"Panel About\" commandClick LB on X to send the\"Panel About\" commandSee Wait_on_widgets(Integer &id,Text &cmd,Text &msg). For an example of a panel with Widgets Tin_Box, Buttons, Message_Box and Horizontal andVertical Groups etc, see Panel Example:The function return value is the created Panel. Note: the Show_widget(Panel panel) call must be made to display the panel on the screen - seePanel Example:.",
      "id": "843"
    },
    {
      "names": [
        "Panel Create_panel(Text title_text, Integer sizing_enable)"
      ],
      "description": "Panels and WidgetsPage 901\f12d Model Programming Language ManualSame as the above function, this function also creates a panel with the title title_text, but with anextra parameter sizing_enable to control the user resizing.  The resulting panel is resizable onlyif sizing_enable is not zero. The function return value is the created Panel.",
      "id": "3791"
    },
    {
      "names": [
        "Integer Append(Widget widget, Panel panel)"
      ],
      "description": "Append the Widget widget to the Panel panel. The Panel displays the Widgets from the top in the order that the Widgets are Appended to thePanel.  That is, the first Widget appended is at the top of the Panel.  The last Widget appended isat the bottom of the Widget. Rather than a Panel having just a simple structure of a number of Widgets appended to thePanel, Horizontal and Vertical grouping can be used to collect the Widgets together in logicalfashions and then the Horizontal and Vertical groups are Appended to the Panel using thisAppend(Widget widget, Panel panel) call.  There are even more complicated groupings allowedincluding Panel pages, Grid Controls and Trees. See 5. 61. 3 Horizontal Group, 5. 61. 4 Vertical Group, 5. 61. 9 Panel Page, 5. 61. 14GridCtrl_Box,5. 61. 15 Tree Box CallsA function return value of zero indicates the widget was appended successfully. For an example of a panel with Widgets Tin_Box, Buttons, Message_Box and Horizontal andVertical Groups etc, see Panel Example:",
      "id": "852"
    },
    {
      "names": [
        "Integer Write_SLX(Panel panel, Text filename)"
      ],
      "description": "Write screen layout file of the Panel panel to the file named filename. A return value of zero indicates the file was successfully written.",
      "id": "2903"
    },
    {
      "names": [
        "Integer Read_SLX(Panel panel, Text filename)"
      ],
      "description": "Apply the screen layout file named filename to the Panel panel. A return value of zero indicates the layout was successfully applied.",
      "id": "2904"
    },
    {
      "names": [
        "Horizontal_Group Create_horizontal_group(Integer mode)"
      ],
      "description": "Create a Widget of type Horizontal_Group. A Horizontal_Group is used to collect a number of Widgets together.  The Widgets are added tothe Horizontal_Group using the Append(Widget widget,Horizontal_Group group) call.  The Widgetsare automatically spaced horizontally in the order that they are appended. mode has the values (defined in set_ups. h)// modes for Horizontal_Group (note -1 is also allowed)For BALANCE_WIDGETS_OVER_WIDTH = 1the widgets in the horizontal group are all given the same width and are evenly spacedhorizontally.  So the widgets all have the size of what the largest widget needed. For ALL_WIDGETS_OWN_WIDTH = 2the widgets in the horizontal group are all their own size all. For COMPRESS_WIDGETS_OVER_WIDTH = 4. The function return value is the created Horizontal_Group.",
      "id": "845"
    },
    {
      "names": [
        "Horizontal_Group Create_button_group()"
      ],
      "description": "Create a Widget of type Horizontal_Group to hold Widgets of type Button. A Horizontal_Group is used to collect a number of Widgets together.  The Widgets are added tothe Horizontal_Group using the Append(Widget widget,Horizontal_Group group) call.  The Widgetsare automatically spaced horizontally in the order that they are appended. The Create_button_group goes a bit further than Create_horizontal_group in making the buttonspacing more even. The function return value is the created Horizontal_Group.",
      "id": "846"
    },
    {
      "names": [
        "Integer Append(Widget widget, Horizontal_Group group)"
      ],
      "description": "Append the Widget widget to the Horizontal_Group group. A Horizontal_Group is used to collect a number of Widgets together and the Widgets are addedto the Horizontal_Group using this call.  The Widgets are automatically spaced horizontally in theorder that they are appended. A function return value of zero indicates the Widget was appended successfully.",
      "id": "853"
    },
    {
      "names": [
        "Integer Set_border(Horizontal_Group group, Text text)"
      ],
      "description": "Set a border for the Horizontal_Group group with Text text. on the top left side of the border. If text is blank, the border is removed. Horizontal_Group of two Buttonswith no borderHorizontal_Group of two Buttonswith border and text \"Buttons\"A function return value of zero indicates the border was successfully set.",
      "id": "1098"
    },
    {
      "names": [
        "Integer Set_border(Horizontal_Group group, Integer bx, Integer by)"
      ],
      "description": "Set a gap around the border of the Horizontal_Group group. bx sets the left and right side gap around the border. by sets the top and bottom side gap around of the border. The units of bx and by are screen units (pixels). A function return value of zero indicates the border gap was successfully set. Page 906Panels and Widgets\fChapterHorizontal_Group of two Buttonswith default border gapsand text \"Buttons\"Horizontal_Group of two Buttonswith border gaps bx =10 and by = 20and text \"Buttons\"",
      "id": "858"
    },
    {
      "names": [
        "Integer Set_gap(Horizontal_Group group, Integer gap)"
      ],
      "description": "Set a horizontal gap of at least gap screen units (pixels) between the Widgets of theHorizontal_Group group. A function return value of zero indicates the vertical gap was successfully set.",
      "id": "1506"
    },
    {
      "names": [
        "Integer Set_radio(Horizontal_Group group, Named_Tick_Box tick, Integer left_hand_side)"
      ],
      "description": "Under development, not yet ready",
      "id": "7704"
    },
    {
      "names": [
        "Integer Set_button(Horizontal_Group group, Named_Tick_Box tick, Integer left_hand_side)"
      ],
      "description": "Under development, not yet ready",
      "id": "7706"
    },
    {
      "names": [
        "Vertical_Group Create_vertical_group(Integer mode)"
      ],
      "description": "Create a widget of type Vertical_Group. A Vertical_Group is used to collect a number of Widgets together.  The Widgets are added to theVertical_Group using the Append(Widget widget,Vertical_Group group) call.  All the Widgetsappended to the Vertical_Group are given the same width.  The Widgets are automaticallyspaced vertically in the order that they are appended to the Vertical_Group. mode has the values (defined in set_ups. h)// modes for Vertical_Group (note -1 is also allowed)For BALANCE_WIDGETS_OVER_HEIGHT = 1the widgets in the vertical group are evenly spaced vertically. For ALL_WIDGETS_OWN_HEIGHT=2For ALL_WIDGETS_OWN_LENGTH = 4The function return value is the created Vertical_Group.",
      "id": "844"
    },
    {
      "names": [
        "Integer Append(Widget widget, Vertical_Group group)"
      ],
      "description": "Append the Widget widget to the Vertical_Group group. A function return value of zero indicates the widget was appended successfully.",
      "id": "854"
    },
    {
      "names": [
        "Integer Set_border(Vertical_Group group, Text text)"
      ],
      "description": "Set a border of the Vertical_Group group with Text text. on the top left side of the border.  If text isblank, the border is removed. Page 908Panels and Widgets\fChapterA function return value of zero indicates the border was successfully set. The tins are a Vertical_Group of4 Widgets with no borderThe same Vertical_Group of 4 Widgetswith border and text \"Tins\"Note that for the left and right gaps thatthe width of the panel doesn\u2019t changebut the gap from the sides of the panelto the box is increased",
      "id": "1099"
    },
    {
      "names": [
        "Integer Set_border(Vertical_Group group, Integer bx, Integer by)"
      ],
      "description": "Set a gap around the border of the Vertical_Group group. bx sets the left and right side gap around the border. by sets the top and bottom side gap around of the border. The units of bx and by are screen units (pixels). A function return value of zero indicates the border gap was successfully set. Vertical_Group of 4 Widgetswith default border gapsand text \"Tins\"Vertical_Group of 4 Widgetswith border gaps bx =10 and by = 20and text \"Tins\"Note that for the left and right gaps thatthe width of the panel doesn\u2019t changebut the gap from the sides of the panelto the box is increasedPanels and WidgetsPage 909\f12d Model Programming Language Manual",
      "id": "859"
    },
    {
      "names": [
        "Integer Set_gap(Vertical_Group group, Integer gap)"
      ],
      "description": "Set a vertical gap of at least gap screen units (pixels) between the Widgets of the Vertical_Groupgroup. A function return value of zero indicates the vertical gap was successfully set.",
      "id": "1507"
    },
    {
      "names": [
        "Integer Get_sizing_constraints(Widget widget, Integer &horizontal_mode, Integer &vertical_mode)"
      ],
      "description": "Get the horizontal_mode and vertical_mode of the sizing constraints for given Widget widget. Meaning of the sizing constraint modes0 Sizing_Balance_Resize balance the widgets over the available space (and set them to be thesame size)1 Sizing_Balance_No_Resize balance the widgets over the available space (and keep themtheir original size)2 Sizing_Fill fill the widgets to entirely fill the available space3 Sizing_Fill_No_Resize size to fill the available space, but don't resize after that4 Sizing_Original keep the widgets in their original size and location5 Sizing_Default do whatever the container wants to doA function return value of zero indicates the sizing constraints was successfully returned.",
      "id": "3822"
    },
    {
      "names": [
        "Integer Set_sizing_constraints(Widget widget, Integer horizontal_mode, Integer vertical_mode)"
      ],
      "description": "Set the horizontal_mode and vertical_mode of the sizing constraints for given Widget widget. Meaning of the sizing constraint modes0 Sizing_Balance_Resize balance the widgets over the available space (and set them to be thesame size)1 Sizing_Balance_No_Resize balance the widgets over the available space (and keep themtheir original size)2 Sizing_Fill fill the widgets to entirely fill the available spacePage 910Panels and Widgets\fChapter3 Sizing_Fill_No_Resize size to fill the available space, but don't resize after that4 Sizing_Original keep the widgets in their original size and location5 Sizing_Default do whatever the container wants to doA function return value of zero indicates the sizing constraints was successfully set.",
      "id": "3823"
    },
    {
      "names": [
        "Integer Set_radio(Vertical_Group group, Named_Tick_Box tick, Integer left_hand_side)"
      ],
      "description": "Under development, not yet ready",
      "id": "7705"
    },
    {
      "names": [
        "Integer Set_button(Vertical_Group group, Named_Tick_Box tick, Integer left_hand_side)"
      ],
      "description": "Under development, not yet ready",
      "id": "7707"
    },
    {
      "names": [
        "Integer Wait_on_widgets(Integer &id, Text &cmd, Text &msg)"
      ],
      "description": "When the user activates a Widget displayed on the screen (for example by clicking on a ButtonWidget), the id, cmd and msg from the widget is passed back to Wait_on_widgets. id is the id of the Widget that has been activated. cmd is the command text that is returned from the Widget. msg is the message text that is returned from the Widget. A function return value of zero indicates the data was successfully returned. Note: there might be unknown events might be passed to Wait_on_widgets, the return value willstill be zero in those case, but id, cmd and msg will remain unchanged. Note: for a Button, the returned cmd is the Text reply given when the Button was created.  SeeCreate_button(Text title_text,Text reply).",
      "id": "857"
    },
    {
      "names": [
        "Integer Wait_on_events(Integer64 &id, Text &cmd, Text &msg)"
      ],
      "description": "When the user activates a Widget displayed on the screen (for example by clicking on a ButtonWidget), the id, cmd and msg from the widget is passed back to Wait_on_widgets. id is the id of the Widget that has been activated. cmd is the command text that is returned from the Widget. msg is the message text that is returned from the Widget. A function return value of zero indicates the data was successfully returned. Note: there might be unknown events might be passed to Wait_on_events, the return value willstill be zero in those case, but id, cmd and msg will remain unchanged. Note: for a Button, the returned cmd is the Text reply given when the Button was created.  SeeCreate_button(Text title_text,Text reply).",
      "id": "5422"
    },
    {
      "names": [
        "Integer64 Get_id64(Widget widget)"
      ],
      "description": "Return the ID of a given Widget widget as a 64bit Integer.",
      "id": "5423"
    },
    {
      "names": [
        "Integer Use_browse_button(Widget widget, Integer mode)"
      ],
      "description": "Set whether the browse button is available for Widget widget. If mode = 1 use the browse buttonif mode = 0 don\u2019t use the browse button. The default value for a Widget is mode = 1. If the browse button is not used, the space where the button would be, is removed. Note: This call must be made before the Panel that contains the widget is shown. A function return value of zero indicates the value was valid. Browse button of a WidgetUse_browse_button mode = 1Use_browse_button mode = 0",
      "id": "1095"
    },
    {
      "names": [
        "Integer Show_browse_button(Widget widget, Integer mode)"
      ],
      "description": "This calls you to show or hide the browse button for the Widget widget. If mode = 1 show the browse buttonif mode = 0 don\u2019t show the browse button. The default value for a Widget is mode = 1. This call can be made after the Widget has been added to a panel and allows the Browse buttonof the Widget to be turned on and off under the programmers control. Note if Use_browse_button was called with a mode of 0 then this call is ineffective.  SeeUse_browse_button(Widget widget,Integer mode)A function return value of zero indicates the mode was successfully set. Browse Button ofthe Tin_Box WidgetShow_browse_button mode = 1Show_browse_button mode = 0",
      "id": "1096"
    },
    {
      "names": [
        "Integer Set_enable(Widget widget, Integer mode)"
      ],
      "description": "Set the enabled mode for the Widget widget. Ifmode = 1mode = 0the Widget is to be enabledthe Widget is not to be enabled. The default value for a Widget is mode = 1. Note If the widget is not enabled, it will be greyed out in the standard Windows fashion and nointeraction with the Widget is possible. A function return value of zero indicates the mode was successfully set. Set_enable mode = 1Set_enable mode = 0All parts of the disabled Widget are greyed out",
      "id": "1101"
    },
    {
      "names": [
        "Integer Get_enable(Widget widget, Integer &mode)"
      ],
      "description": "Check if the Widget widget is enabled or disabled.  See Set_enable(Widget widget,Integermode)Return the Integer mode wheremode = 1 if the Widget is enabledmode = 0 if the Widget is not enabled. A function return value of zero indicates the mode was returned successfully.",
      "id": "1100"
    },
    {
      "names": [
        "Integer Set_optional(Widget widget, Integer mode)"
      ],
      "description": "Set the optional mode for the Widget widget. That is, if the Widget field is blank, the title text to the left is greyed out, signifying that this Widget isoptional. Ifmode = 1mode = 0the widget is optionalthe widget is not optional. The default value for a Widget is mode = 0. If this mode is used (i. e.  1), the widget must be able to accept a blank response for the field, orassume a reasonable value. A function return value of zero indicates the mode was successfully set. Set_optional mode = 0Widget titlegreyed outSet_optional mode = 1",
      "id": "1324"
    },
    {
      "names": [
        "Integer Get_optional(Widget widget, Integer &mode)"
      ],
      "description": "Check if the Widget widget is optional.  That is, the Widget does not have to be answered. SeeSet_optional(Widget widget,Integer mode)Return the Integer mode wheremode = 1 if the Widget is optionalmode = 0 if the Widget is not optional. A function return value of zero indicates the mode was returned successfully.",
      "id": "1325"
    },
    {
      "names": [
        "Integer Set_visible(Widget widget, Integer mode)"
      ],
      "description": "Set the visible mode for the Widget widget. Ifmode = 1mode = 0the widget is visible, and not displayed on the panelthe widget is not visible and not displayed. Even if the widget is invisible, it still takes the same space on a panel. The default value for a Widget is visible.  That is, mode = 1. A function return value of zero indicates the visibility was successfully set. Panels and WidgetsPage 915\f12d Model Programming Language ManualWidget is visibleSet_visible mode = 1Widget is invisibleSet_visible mode = 0Space is still left wherethe Widget is even thoughit is invisible",
      "id": "1614"
    },
    {
      "names": [
        "Integer Get_visible(Widget widget, Integer &mode)"
      ],
      "description": "Get the visibility mode for the Widget widget. Return the Integer mode wheremode = 1 if the Widget is visiblemode = 0 if the Widget is not visible. A function return value of zero indicates the visibility was returned successfully.",
      "id": "1615"
    },
    {
      "names": [
        "Integer Set_name(Widget widget, Text text)"
      ],
      "description": "Set the title text of the Widget widget. A Widget is usually given a title when it is first created This call can be made after the Widget hasbeen added to a panel and allows the title of the Widget to be changed under the programmerscontrol. A function return value of zero indicates the title was successfully set.",
      "id": "1326"
    },
    {
      "names": [
        "Integer Get_name(Widget widget, Text &text)"
      ],
      "description": "Get the title text from the Widget widget. Page 916Panels and Widgets\fChapterA function return value of zero indicates the text was returned successfully.",
      "id": "1327"
    },
    {
      "names": [
        "Integer Set_dump_name(Widget widget, Text text)"
      ],
      "description": "Set the dump name of the Widget widget to Text text. A return value of zero indicates the function call was successful.",
      "id": "2905"
    },
    {
      "names": [
        "Integer Get_dump_name(Widget widget, Text &text)"
      ],
      "description": "Get the dump name of the Widget widget to set to Text text. A return value of zero indicates the function call was successful.",
      "id": "2906"
    },
    {
      "names": [
        "Integer Get_dump_name(Widget widget, Text &text, Integer effective)"
      ],
      "description": "Get the dump name of the Widget widget to set to Text text. If effective is not zero, the name is \"effective\". A return value of zero indicates the function call was successful.",
      "id": "2907"
    },
    {
      "names": [
        "Integer Set_error_message(Widget widget, Text text)"
      ],
      "description": "This call is used to set the error message for a Widget if it is validated and there is an error. LJG ?When there is an error, text is sent to the associated Message_Box of the widget, the focus isset to the widget and the cursor is moved to the widget. A function return value of zero indicates the text was successfully set.",
      "id": "1437"
    },
    {
      "names": [
        "Integer Set_width_in_chars(Widget widget, Integer num_char)"
      ],
      "description": "Set the Widget widget to be num_char characters wide. A function return value of zero indicates the width was set successful.",
      "id": "1042"
    },
    {
      "names": [
        "Integer Show_widget(Widget widget)"
      ],
      "description": "Show the Widget widget at the cursor\u2019s current position. Note: The call Show_widget(Widget widget,Integer x,Integer y) allows you to give the screencoordinates to position the Widget.  See Show_widget(Widget widget,Integer x,Integer y). A function return value of zero indicates the widget was shown successfully.",
      "id": "855"
    },
    {
      "names": [
        "Integer Show_widget(Widget widget, Integer x, Integer y)"
      ],
      "description": "Show the Widget widget at the screen coordinates x, y.  The units for x and y are pixels. A function return value of zero indicates the widget was shown successfully.",
      "id": "1039"
    },
    {
      "names": [
        "Integer Hide_widget(Widget widget)"
      ],
      "description": "Hide the Widget widget.  That is, don\u2019t display the Widget on the screen. Note the Widget still exists but it is not visible on the screen.  The Widget will appear again bycalling Show_widget.  See Show_widget(Widget widget). A function return value of zero indicates the widget was hidden successfully.",
      "id": "856"
    },
    {
      "names": [
        "Integer Set_size(Widget widget, Integer x, Integer y)"
      ],
      "description": "Page 918Panels and Widgets\fChapterSet the size in screen units (pixels) of the Widget widget with the width x and height y. The type of x and y must be Integer. A function return value of zero indicates the size was successfully set.",
      "id": "1365"
    },
    {
      "names": [
        "Integer Get_size(Widget widget, Integer &x, Integer &y)"
      ],
      "description": "Get the size in screen units (pixels) of the Widget widget in x and y. The type of x and y must be Integer. A function return value of zero indicates the size was returned successfully.",
      "id": "1331"
    },
    {
      "names": [
        "Integer Get_widget_size(Widget widget, Integer &w, Integer &h)"
      ],
      "description": "Get the size of the Widget widget in screen units (pixels)The width of widget is returned in w and the height of widget is returned in h. A function return value of zero indicates the size was successfully returned.",
      "id": "1041"
    },
    {
      "names": [
        "Integer Set_cursor_position(Widget widget)"
      ],
      "description": "Move the cursor position to the Widget widget. A function return value of zero indicates the position was successfully set.",
      "id": "1059"
    },
    {
      "names": [
        "Integer Get_widget_position(Widget widget, Integer &x, Integer &y)"
      ],
      "description": "Get the screen position of the Widget widget. The position of the widget is returned in x, y.  The units of x and y are screen units (pixels). A function return value of zero indicates the position was successfully returned.",
      "id": "1040"
    },
    {
      "names": [
        "Integer Get_position(Widget widget, Integer &x, Integer &y)"
      ],
      "description": "Get the screen position of the Widget widget. The position of the widget is returned in x, y.  The units of x and y are screen units (pixels). A function return value of zero indicates the position was successfully returned.",
      "id": "1366"
    },
    {
      "names": [
        "Integer Get_id(Widget widget)",
        "Integer Set_focus(Widget widget)"
      ],
      "description": "When a Widget is created, it is given a unique identifying number (id) in the project. This function get the id of the Widget widget and returns id as the function return value. That is, the Integer function return value is the Widget id. D = 879Set_focus(Widget widget)Set the focus to the typed input area for an Input Widget widget, or on the button for a ButtonWidget widget. After this call all typed input will go to this widget. A function return value of zero indicates the focus was successfully set.",
      "id": "1097"
    },
    {
      "names": [
        "Integer Set_tooltip(Widget widget, Text tip)"
      ],
      "description": "Sets the tool tip message for the Widget widget to tip. When the user hovers over widget, this message tip will be displayed as a Windows tooltip. A function return value of zero indicates the tooltip was successfully set. Tooltip shown as cursorgoes over the Widget",
      "id": "1363"
    },
    {
      "names": [
        "Integer Get_tooltip(Widget widget, Text &tip)"
      ],
      "description": "Queries the current tool tip message and returns the message in tip. A function return value of zero indicates the tooltip was successfully returned.",
      "id": "1364"
    },
    {
      "names": [
        "Integer Set_help(Widget widget, Integer help_num)"
      ],
      "description": "For the Widget widget, the help number for widget is set to help_num. This is currently not used. A function return value of zero indicates the help number was successfully set. Note: See 5. 61. 13. 4 Help Button for creating a Help button that allows the macro to access the12d Model Extra Help system.",
      "id": "1312"
    },
    {
      "names": [
        "Integer Get_help(Widget widget, Integer &help_num)"
      ],
      "description": "Get the help number for Widget widget and return it in help_num. Panels and WidgetsPage 923\f12d Model Programming Language ManualThe type of help must be integer. A function return value of zero indicates the help number was successfully returned. Note: See 5. 61. 13. 4 Help Button for creating a Help button that allows the macro to access the12d Model Extra Help system.",
      "id": "1313"
    },
    {
      "names": [
        "Integer Set_help(Widget widget, Text help_message)"
      ],
      "description": "For the Widget widget, the help message for widget is set to help_message. This help message will be sent back to 12d Model via Wait_on_widgets(Integer &id,Text&cmd,Text &msg) with command cmd equal to \u201cHelp\u201d, and msg equal to help_message. So a sample bit of code to handle help isWait_on_widgets(id,cmd,msg);if (cmd == \u201cHelp\u201d) {;Winhelp(panel,\"12d. hlp\",'a',msg);// in the Winhelp file 12d. hlp,// find and display the a table entry msgcontinue;}A function return value of zero indicates the text was successfully set.",
      "id": "1314"
    },
    {
      "names": [
        "Integer Get_help(Widget widget, Text &help_message)"
      ],
      "description": "Queries the current help message for a widget and returns the message in help_mesage. A function return value of zero indicates the message was successfully returned.",
      "id": "1315"
    },
    {
      "names": [
        "Integer Winhelp(Widget widget, Text help_file, Text key)"
      ],
      "description": "Calls the Windows help system to display the key from the k table of the Windows help filehelp_file.  The Windows help file help_file must exist and be in a location that can be found. A function return value of zero indicates the function was successful.",
      "id": "1316"
    },
    {
      "names": [
        "Integer Winhelp(Widget widget, Text help_file, Integer table, Text key)"
      ],
      "description": "Calls the Windows help system to display the key from the named table of the help file help_file. table takes the form \u2018a\u2019, \u2018k\u2019 etc.  The Windows help file help_file must exist and be in a locationthat can be found. A function return value of zero indicates the function was successful.",
      "id": "1317"
    },
    {
      "names": [
        "Integer Winhelp(Widget widget, Text help_file, Integer help_id)"
      ],
      "description": "Calls the Windows help system to display the key from the k table of the help file help_file.  TheWindows help file help_file must exist and be in a location that can be found. A function return value of zero indicates the function was successful.",
      "id": "1318"
    },
    {
      "names": [
        "Integer Winhelp(Widget widget, Text help_file, Integer helpid, Integer popup)"
      ],
      "description": "Calls the Windows help system to display the help with help number help_id from the k table ofthe help file help_file.  The Windows help file help_file must exist and be in a location that can befound.  If popup is not zero then the help information appears as a popup style help; If popup iszero then the help information appears as a normal help. A function return value of zero indicates the function was successful.",
      "id": "1319"
    },
    {
      "names": [
        "Widget_Pages Create_widget_pages()"
      ],
      "description": "A Widget_Pages object allows a number of controls to exist in the same physical location on adialog.  This is very handy if you want a field to change between a Model_Box, View_Box or thelike. A bit of sample code might look like,Vertical_Group vgroup1 = Create_vertical_group(0);Model_Box mbox = Create_model_box(\u2026);Append(mbox,vgroup1);Vertical_Group vgroup2 = Create_vertical_group(0);View_Box vbox = Create_view_box(\u2026);Append(vbox,vgroup2);Widget_Pages pages = Create_widget_pages();Append(vgroup1,pages);Append(vgroup2,pages);Set_page(page,1)// this shows the 1st page - vgroup1The function return value is the created Widget_pages.",
      "id": "1243"
    },
    {
      "names": [
        "Integer Append(Widget widget, Widget_Pages pages)"
      ],
      "description": "Append Widget widget into the Widget_Pages pages. For each item appended, another page is created. If you want more than 1 item on a page, add each item to a Horizontal_Group, Vertical_Group. A function return value of zero indicates the widget was appended successfully.",
      "id": "1244"
    },
    {
      "names": [
        "Integer Set_page(Widget_Pages pages, Integer n)"
      ],
      "description": "Show (display on the screen) the n\u2019th page of the Widget_Pages pages. Note the \"n\u2019th page\" is the n\u2019th widget appended to the Widget_Pages pages. All the controls associated with the n\u2019th page_no are shown. A function return value of zero indicates the page was successfully set. Page 926Panels and Widgets\fChapter",
      "id": "1245"
    },
    {
      "names": [
        "Integer Set_page(Widget_Pages pages, Widget widget)"
      ],
      "description": "Show (display on the screen) the page of pages containing the Widget widget. All the controls associated with the widget are shown. A function return value of zero indicates the page was successfully set.",
      "id": "1606"
    },
    {
      "names": [
        "Integer Get_page(Widget_Pages pages, Widget widget, Integer &page_no)"
      ],
      "description": "For the Widget_Pages pages, get the page number of the page containing the Widget widget. Note the \"n\u2019th page\" of a Widget_Pages is the n\u2019th widget appended to the Widget_Pages. The page n umber is returned as page_no. A function return value of zero indicates the page number was successfully returned.",
      "id": "1607"
    },
    {
      "names": [
        "Integer Set_dynamic_sizing(Widget_Pages pages, Integer enable)"
      ],
      "description": "Set dynamic sizing ability for Widget page pages by Integer enable (1 - yes, 0 - no). A function return value of zero indicates the page was successfully set.",
      "id": "3963"
    },
    {
      "names": [
        "Integer Get_dynamic_sizing(Widget_Pages pages, Integer &enable)"
      ],
      "description": "For the Widget_Pages pages, check the dynamic sizing ability and return it in Integer enable (1- yes, 0 - no). A function return value of zero indicates the page property was successfully returned.",
      "id": "3964"
    },
    {
      "names": [
        "Angle_Box Create_angle_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Angle_Box for inputting and validating angles.  See 5. 61. 10. 1Angle_Box. An angle is typed into the Angle_Box in hp notation (i. e.  ddd. mmssss) but after it is validated it isdisplayed in degrees, minutes and seconds.  However the validated angle is stored in theAngle_Box as a Real in radians. The Angle_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayAngle_Box validation messages. The function return value is the created Angle_Box.",
      "id": "886"
    },
    {
      "names": [
        "Integer Set_data(Angle_Box box, Real angle)"
      ],
      "description": "Set the data for the Angle_Box box to the Real value angle. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. A function return value of zero indicates the data was successfully set.",
      "id": "888"
    },
    {
      "names": [
        "Integer Set_data(Angle_Box box, Text text_data)"
      ],
      "description": "Set the text displayed in the Angle_Box box to the Text text_data. Note that text_data should be in degrees, minutes and seconds using the hp notation (i. e. ddd. mmssss) BUT the text_data can be any text at all and may not even be a valid angle (indegrees in hp notation).  This may lead to an error when the Angle_Box is validated. A function return value of zero indicates the data was successfully set, even if the text_data willnot validate.",
      "id": "1515"
    },
    {
      "names": [
        "Integer Get_data(Angle_Box box, Text &text_data)",
        "See Validate(Angle_Box box, Real &angle)",
        "889 Validate(Angle_Box box, Real &angle)",
        "Integer Validate(Angle_Box box, Real &angle)"
      ],
      "description": "Validate the contents of the Angle_Box box and return the angle in radians angle. angle is in radians and is measured in a counterclockwise direction from the positive x-axis. The function returns the value of:NO_NAME if the Widget Angle_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "887"
    },
    {
      "names": [
        "Attributes_Box Create_attributes_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Attributes_Box.  See 5. 61. 10. 2 Attributes_Box. The Attributes_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayAttribute_Box validation messages. The function return value is the created Attributes_Box.",
      "id": "2210"
    },
    {
      "names": [
        "Integer Set_data(Attributes_Box box, Attributes &data)"
      ],
      "description": "Set the data of type Attributes for the Attributes_Box box to data. A function return value of zero indicates the data was successfully set.",
      "id": "2213"
    },
    {
      "names": [
        "Integer Set_data(Attributes_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Attributes_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2214"
    },
    {
      "names": [
        "Integer Get_data(Attributes_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Attributes_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2212"
    },
    {
      "names": [
        "Integer Validate(Attributes_Box box, Attributes &result)"
      ],
      "description": "Validate the contents of Attributes_Box box and return the Attributes in result. The function returns the value of:NO_NAME if the Widget Attributes_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2211"
    },
    {
      "names": [
        "Billboard_Box Create_billboard_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Billboard_Box.  See 5. 61. 10. 3 Billboard_Box. The Billboard_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayBillboard_Box validation messages. The function return value is the created Billboard_Box.",
      "id": "1871"
    },
    {
      "names": [
        "Integer Set_data(Billboard_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Billboard_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1873"
    },
    {
      "names": [
        "Integer Get_data(Billboard_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Billboard_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1874"
    },
    {
      "names": [
        "Integer Validate(Billboard_Box box, Text &result)"
      ],
      "description": "Validate the contents of Billboard_Box box and return the name of the billboard in Text result. The function returns the value of:NO_NAME if the Widget Billboard_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return valuesPage 934Panels and Widgets\fChapter",
      "id": "1872"
    },
    {
      "names": [
        "Integer Get_billboard_size(Text name, Real &w, Real &h)"
      ],
      "description": "Get world size from billboards. 4d file with width w and height h. A function return value of zero indicates the size was successfully returned.",
      "id": "1932"
    },
    {
      "names": [
        "Bitmap_Fill_Box Create_bitmap_fill_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Bitmap_Fill_Box.  See 5. 61. 10. 4 Bitmap_Fill_Box. The Bitmap_Fill_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayBitmap_Fill_Box validation messages. The function return value is the created Bitmap_Fill_Box.",
      "id": "1879"
    },
    {
      "names": [
        "Integer Validate(Bitmap_Fill_Box box, Text &result)"
      ],
      "description": "Validate the contents of Bitmap_Fill_Box box and return the name of the bitmap in Text result. The function returns the value of:NO_NAME if the Widget Bitmap_Fill_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1880"
    },
    {
      "names": [
        "Integer Set_data(Bitmap_Fill_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Bitmap_Fill_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1881"
    },
    {
      "names": [
        "Integer Get_data(Bitmap_Fill_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Bitmap_Fill_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Page 936Panels and Widgets\fChapter",
      "id": "1882"
    },
    {
      "names": [
        "Chainage_Box Create_chainage_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Chainage_Box.  See 5. 61. 10. 5 Chainage_Box. The Chainage_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayChainage_Box validation messages. The function return value is the created Chainage_Box.",
      "id": "2203"
    },
    {
      "names": [
        "Integer Validate(Chainage_Box box, Real &result)"
      ],
      "description": "Validate the contents of Chainage_Box box and return the chainage in Real result. The function returns the value of:NO_NAME if the Widget Chainage_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2204"
    },
    {
      "names": [
        "Integer Get_data(Chainage_Box box, Text &text_data)"
      ],
      "description": "Panels and WidgetsPage 939\f12d Model Programming Language ManualGet the data of type Text from the Chainage_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2205"
    },
    {
      "names": [
        "Integer Set_data(Chainage_Box box, Real real_data)"
      ],
      "description": "Set the data of type Real for the Chainage_Box box to real_data. A function return value of zero indicates the data was successfully set.",
      "id": "2206"
    },
    {
      "names": [
        "Integer Set_data(Chainage_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Chainage_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2207"
    },
    {
      "names": [
        "Choice_Box Create_choice_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Choice_Box.  See 5. 61. 10. 6 Choice_Box. The Choice_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayChoice_Box validation messages. The function return value is the created Choice_Box.",
      "id": "890"
    },
    {
      "names": [
        "Choice_Box Create_choice_box(Text title_text, Message_Box message, Integer allow_search)"
      ],
      "description": "Create an input Widget of type Choice_Box.  See 5. 61. 10. 6 Choice_Box. The Choice_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayChoice_Box validation messages. If allow_search is non zero, then the search mechanism is enable for the created choice box. The function return value is the created Choice_Box.",
      "id": "7697"
    },
    {
      "names": [
        "Integer Validate(Choice_Box box, Text &result)"
      ],
      "description": "Validate the contents of Choice_Box box and return the Text result. The function returns the value of:NO_NAME if the Widget Choice_Box is optional and the box is left empty1 if no other return code is needed and result is valid. -1 if there is an invalid choice. zero if there is a drastic error. So a function return value of zero indicates that there is an error as well as other values. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is not zero even when you think it shouldbe.  The actual value of the function return code must be checked to see what is going on.  Forexample, when there is an incorrect choice, the function return value is -2.",
      "id": "891"
    },
    {
      "names": [
        "Integer Get_data(Choice_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Choice_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "893"
    },
    {
      "names": [
        "Integer Set_data(Choice_Box box, Text text_data)"
      ],
      "description": "Page 942Panels and Widgets\fChapterSet the data of type Text for the Choice_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "892"
    },
    {
      "names": [
        "Projection_Box Create_projection_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Projection_Box. The Projection_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayColour_Box validation messages. The function return value is the created Projection_Box.",
      "id": "7730"
    },
    {
      "names": [
        "Integer Validate(Projection_Box box, Text &name, Text &type, Text &data)"
      ],
      "description": "Validate the contents of Projection_Box box and return the type and data. The function returns the value of:NO_NAME if the Widget Projection_Box is optional and the box is left empty-1 if the text in the Projection_Box is not a valid projection. TRUE (1) if the projection is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error.  For example, theProjection_Box is not optional and is left blank. Warning this is the opposite of most 12dPL function return values",
      "id": "7731"
    },
    {
      "names": [
        "Integer Set_data(Projection_Box box, Text data)"
      ],
      "description": "Set the data for the Projection_Box box to be the text data. A function return value of zero indicates the colour number was successfully set.",
      "id": "7732"
    },
    {
      "names": [
        "Integer Set_data(Projection_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Projection_Box box to data. A function return value of zero indicates the data was successfully set.",
      "id": "7733"
    },
    {
      "names": [
        "Colour_Box Create_colour_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Colour_Box.  See 5. 61. 10. 8 Colour_Box. The Colour_Box is created with the title title_text. Panels and WidgetsPage 947\f12d Model Programming Language ManualThe Message_Box message is normally the message box for the panel and is used to displayColour_Box validation messages. The function return value is the created Colour_Box.",
      "id": "894"
    },
    {
      "names": [
        "Integer Validate(Colour_Box box, Integer &col_num)"
      ],
      "description": "Validate the contents of Colour_Box box and return the Integer colour number I in col_num. The function returns the value of:NO_NAME if the Widget Colour_Box is optional and the box is left empty-1 if the text in the Colour_Box is not a valid colour number or colour name. TRUE (1) if no other return code is needed and col_num is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error.  For example, the Colour_Box isnot optional and is left blank. Warning this is the opposite of most 12dPL function return valuesDouble Warning the function return can be non zero but the col_num is unusable.",
      "id": "895"
    },
    {
      "names": [
        "Integer Set_data(Colour_Box box, Integer colour_num)"
      ],
      "description": "Set the data for the Colour_Box box to be the colour number colour_num. This is the colour number that will be first displayed in the Colour_Box. colour_num must be Integer. A function return value of zero indicates the colour number was successfully set.",
      "id": "896"
    },
    {
      "names": [
        "Integer Set_data(Colour_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Colour_Box box to text_data. This is the colour name that will be first displayed in the Colour_Box. A function return value of zero indicates the data was successfully set.",
      "id": "1328"
    },
    {
      "names": [
        "Integer Get_data(Colour_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Colour_Box box and return it in text_data. This is the colour name entered into the Colour_Box. A function return value of zero indicates the data was successfully returned.",
      "id": "897"
    },
    {
      "names": [
        "Date_Time_Box Create_date_time_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Date_Time_Box.  See 5. 61. 10. 9 Date_Time_Box. The Date_Time_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayDate_Time_Box validation messages. By default, the format for a new Date_Time_Box is set to Show_Date and the value for is_gmt isfalse; see the below Set_format and Set_gmt call for more detailThe function return value is the created Date_Time_Box.",
      "id": "1883"
    },
    {
      "names": [
        "Integer Set_format(Date_Time_Box box, Integer format)"
      ],
      "description": "Set the format for the Date_Time_Box box to Integer format. The list of valid format is:Show_Date0Show_Time1Show_Date_Time2Show_Time_Decimals3Show_Date_Time_Decimals 4A function return value of zero indicates the data was successfully set.",
      "id": "2289"
    },
    {
      "names": [
        "Integer Set_gmt(Date_Time_Box box, Integer is_gmt)"
      ],
      "description": "Set the GMT property for the Date_Time_Box box to Integer is_gmt. If value is_gmt is not zero, then the Date_Time_Box is in GMT. If value is_gmt is not zero, then the Date_Time_Box is using local machine time. A function return value of zero indicates the data was successfully set.",
      "id": "2290"
    },
    {
      "names": [
        "Integer Validate(Date_Time_Box box, Text &data)"
      ],
      "description": "Validate the contents of Date_Time_Box box and return the time in Text data. The function returns the value of:NO_NAME if the Widget Date_Time_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and data is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1884"
    },
    {
      "names": [
        "Integer Validate(Date_Time_Box box, Integer &data)"
      ],
      "description": "Validate the contents of Date_Time_Box box and return the time in Integer data as the numberof seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time(UTC). The function returns the value of:NO_NAME if the Widget Date_Time_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and data is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2287"
    },
    {
      "names": [
        "Integer Validate(Date_Time_Box box, Real &data)"
      ],
      "description": "Validate the contents of Date_Time_Box box and return the time in Real data as the number ofseconds elapsed since midnight (00:00:00), January 1, 1601, Coordinated Universal Time(UTC). The function returns the value of:NO_NAME if the Widget Date_Time_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and data is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Panels and WidgetsPage 951\f12d Model Programming Language ManualWarning this is the opposite of most 12dPL function return values",
      "id": "2288"
    },
    {
      "names": [
        "Integer Set_data(Date_Time_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Date_Time_Box box to text_data. There are various text format for text_data that the call will accept such as DD/MM/YYYYHH:MM:SS or DD-MMM-YYYY HH:MM:SS. Warning the call only work after the containing panel has been shown. A function return value of zero indicates the data was successfully set.",
      "id": "1885"
    },
    {
      "names": [
        "Integer Get_data(Date_Time_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Date_Time_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1886"
    },
    {
      "names": [
        "Integer Set_data(Date_Time_Box box, Integer integer_data)"
      ],
      "description": "Set the data of type Integer for the Date_Time_Box box to integer_data as the number ofseconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated Universal Time(UTC). Warning the call only work after the containing panel has been shown. A function return value of zero indicates the data was successfully set.",
      "id": "2283"
    },
    {
      "names": [
        "Integer Get_data(Date_Time_Box box, Integer &integer_data)"
      ],
      "description": "Get the data of type Integer from the Date_Time_Box box and return it in integer_data as thenumber of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated UniversalTime (UTC). A function return value of zero indicates the data was successfully returned. Page 952Panels and Widgets\fChapter",
      "id": "2284"
    },
    {
      "names": [
        "Integer Set_data(Date_Time_Box box, Real real_data)"
      ],
      "description": "Set the data of type Real for the Date_Time_Box box to real_data as the number of secondselapsed since midnight (00:00:00), January 1, 1601, Coordinated Universal Time (UTC). Warning the call only work after the containing panel has been shown. A function return value of zero indicates the data was successfully set.",
      "id": "2285"
    },
    {
      "names": [
        "Integer Get_data(Date_Time_Box box, Real &real_data)"
      ],
      "description": "Get the data of type Real from the Date_Time_Box box and return it in real_data as the numberof seconds elapsed since midnight (00:00:00), January 1, 1601, Coordinated Universal Time(UTC). A function return value of zero indicates the data was successfully returned.",
      "id": "2286"
    },
    {
      "names": [
        "Directory_Box Create_directory_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Directory_Box.  See 5. 61. 10. 10 Directory_Box. The Directory_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayDirectory_Box validation messages. The value of mode is listed in the Appendix A - Directory modeThe function return value is the created Directory_Box.",
      "id": "898"
    },
    {
      "names": [
        "Integer Validate(Directory_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Directory_Box box and return the Text result. The value of mode is listed in the Appendix A - Directory mode.  See Directory ModeThe function returns the value of:NO_NAME if the Widget Directory_Box is optional and the box is left emptyNO_DIRECTORY, DIRECTORY_EXISTS, or NEW_DIRECTORY. TRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "899"
    },
    {
      "names": [
        "Integer Get_data(Directory_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Directory_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "901"
    },
    {
      "names": [
        "Integer Set_data(Directory_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Directory_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "900"
    },
    {
      "names": [
        "Draw_Box Create_draw_box(Integer box_width, Integer box_height, Integer border)"
      ],
      "description": "Create an input Widget of type Draw_Box with the drawing area defined by the parametersbox_width, box_height and border which are all in screen units (pixels). See 5. 61. 10. 11Draw_Box. The function return value is the created Draw_Box.",
      "id": "1337"
    },
    {
      "names": [
        "Integer Get_size(Draw_Box, Integer &actual_width, Integer &actual_height)"
      ],
      "description": "Get the width and height in pixels of the Draw_Box drawing area on the panel and return thevalues in actual_width and actual_height.  See 5. 61. 10. 11 Draw_Box for the calculations ofwidth and height. A function return value of zero indicates the width and height were successfully returned.",
      "id": "1352"
    },
    {
      "names": [
        "Integer Set_origin(Draw_Box box, Real x, Real y)"
      ],
      "description": "Set the coordinates of the left hand bottom corner of the Draw_Box box to (x,y) where x and yare given in the units of the Draw_Box. A function return value of zero indicates the origin was successfully set.",
      "id": "1340"
    },
    {
      "names": [
        "Integer Set_scale(Draw_Box box, Real xs, Real ys)"
      ],
      "description": "Change the units for the x-axis and the y-axis of the Draw_Box box. The new length of one unit in the x-direction is xs times the previous unit length on the x-axis. For example, if xs = 0. 5, then the new unit length along the x-axis is half the size of the previousunit length. Similarly, the new length of one unit in the y-direction is ys times the previous unit length on they-axis. A function return value of zero indicates the scales were successfully set.",
      "id": "1341"
    },
    {
      "names": [
        "Integer Start_batch_draw(Draw_Box box)"
      ],
      "description": "The Start_batch_draw command must be given before any drawing calls for the Draw_Box boxare made. Any drawing calls made before Start_batch_draw is called will do nothing and return a non-zerofunction return code (that is, the call was not successful). A function return value of zero indicates the batch draw call was successful.",
      "id": "1361"
    },
    {
      "names": [
        "Integer End_batch_draw(Draw_Box box)"
      ],
      "description": "<no description>",
      "id": "1362"
    },
    {
      "names": [
        "Integer Clear(Draw_Box box, Integer r, Integer g, Integer b)"
      ],
      "description": "Clear the Draw_Box box and then fill box with a colour given by r, g and b. The colour is given in rgb which requires three Integers with values between 0 and 255, oneeach for red, green and blue.  The red, green and blue values are given in r, g and b respectively. If Clear is called before a Start_batch_draw (box) call is made, then the Clear fails and a nonzero function return value is returned. A function return value of zero indicates the clear was successful.",
      "id": "1344"
    },
    {
      "names": [
        "Integer Set_colour(Draw_Box box, Integer colour_num)"
      ],
      "description": "For the Draw_Box box, set the drawing colour for following line work to have the 12d Modelcolour colour_num. A function return value of zero indicates the set was successful.",
      "id": "1342"
    },
    {
      "names": [
        "Integer Set_colour(Draw_Box box, Integer r, Integer g, Integer b)"
      ],
      "description": "For the Draw_Box box, set the drawing colour for following line work to have the an rgb colour. Page 960Panels and Widgets\fChapterThe colour is given in rgb which requires three Integers with values between 0 and 255, oneeach for red, green and blue. The red, green and blue values are given in r, g and b respectively. A function return value of zero indicates the set was successful.",
      "id": "1343"
    },
    {
      "names": [
        "Integer Move_to(Draw_Box box, Real x, Real y)"
      ],
      "description": "For the Draw_Box box, move the current position of the drawing nib to (x, y) where x and y aregiven in the units of the Draw_Box. If Move_to is called before a Start_batch_draw (box) call is made, then the Move_to fails and anon-zero function return value is returned. A function return value of zero indicates the move was successful.",
      "id": "1338"
    },
    {
      "names": [
        "Integer Draw_to(Draw_Box box, Real x, Real y)"
      ],
      "description": "For the Draw_Box box, draw from the current position to (x, y) where x and y are given in theunits of the Draw_Box. If Draw_to is called before a Start_batch_draw (box) call is made, then the Draw_to fails and anon-zero function return value is returned. A function return value of zero indicates the draw was successful.",
      "id": "1339"
    },
    {
      "names": [
        "Integer Draw_polyline(Draw_Box box, Integer num_pts, Real x[], Real y[])"
      ],
      "description": "For the Draw_Box box, draw the polyline of num_pts points with the x-coordinates given in thearray x[], and the y-coordinates in the array y[]. If Draw_polyline is called before a Start_batch_draw (box) call is made, then the Draw_polylinefails and a non-zero function return value is returned. A function return value of zero indicates the draw was successful.",
      "id": "1355"
    },
    {
      "names": [
        "Integer Set_text_colour(Draw_Box box, Integer r, Integer g, Integer b)"
      ],
      "description": "Set the colour used for the drawing text in the Draw_Box box. The colour is given in rgb which requires three Integers with values between 0 and 255, oneeach for red, green and blue. The red, green and blue values are given in r, g and b respectively. A function return value of zero indicates the colour was successfully set.",
      "id": "1346"
    },
    {
      "names": [
        "Integer Set_text_font(Draw_Box box, Text font)"
      ],
      "description": "For the Draw_Box box, set the font for the following text calls to be the True Type Font font. A function return value of zero indicates the text font was successfully set.",
      "id": "1349"
    },
    {
      "names": [
        "Integer Set_text_weight(Draw_Box box, Integer weight)"
      ],
      "description": "Set the text weight weight for the Draw_Box box. A function return value of zero indicates the weight was successfully set.",
      "id": "1350"
    },
    {
      "names": [
        "Integer Set_text_align(Draw_Box box, Integer mode)"
      ],
      "description": "Set the text alignment to mode for any text drawn in the Draw_Box box after the Set_text_aligncall. The values for mode are given in Text Alignment Modes for Draw_Box.  The file set_ups. h needsto be included for the modes to be defined. The default mode is that the coordinates of the text are for the top left of the bounding boxsurrounding the text. A function return value of zero indicates the text alignment was successfully set.",
      "id": "1351"
    },
    {
      "names": [
        "Integer Draw_text(Draw_Box box, Real x, Real y, Real size, Real angle, Text txt)"
      ],
      "description": "Page 962Panels and Widgets\fChapterIn the Draw_Box box, draw the text txt at the position (x,y) where the coordinates (x,y) are in theDraw_Box\u2019s coordinate system. The text has size size (in pixels), and the rotation angle of angle radians. If Draw_text is called before a Start_batch_draw (box) call is made, then the Draw_text fails anda non-zero function return value is returned. A function return value of zero indicates the text was successfully drawn.",
      "id": "1345"
    },
    {
      "names": [
        "File_Box Create_file_box(Text title_text, Message_Box message, Integer mode, Text wild)"
      ],
      "description": "Create an input Widget of type File_Box for inputting and validating files. The File_Box is created with the title title_text (see File_Box ). The Message_Box message is normally the message box for the panel and is used to displayFile_Box validation messages. If <enter> is typed into the File_Box, automatic validation is performed by the File_Box according tomode.  What the validation is, what messages are written to Message_Box, and what actionsautomatically occur, depend on the value of mode. For example,CHECK_FILE_NEW20 // if the file doesn\u2019t exists, the message says \"will be created\"// if it exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see File Mode ). If LB is clicked on the icon at the right hand end of the File_Box, a list of the files in the current areawhich match the wild card text wild (for example, *. dat) Is placed in a pop-up.  If a file is selectedfrom the pop-up (using LB), the file name is placed in the information area of the File_Box andvalidation performed according to mode. The function return value is the created File_Box. Special Note:#include \"set_ups. h\" must be in the macro code to define CHECK_FILE_NEW etc.",
      "id": "906"
    },
    {
      "names": [
        "File_Box Create_file_box(Text title_text, Text description, Message_Box message, Integer mode, Text wild)"
      ],
      "description": "This call is identical to the above 906 but with an extra Text parameter description which is usedon return (usually warning or error) messages on the Message_Box message or on the outputwindow.",
      "id": "3989"
    },
    {
      "names": [
        "Integer Validate(File_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of File_Box box and return the text typed into the File_Box in result. The value of mode is listed in the Appendix A - File mode.  See File Mode. The function returns the value of:NO_NAME if the Widget File_Box is optional and the box is left emptyNO_FILE, FILE_EXISTS, or NO_FILE_ACCESS. TRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "907"
    },
    {
      "names": [
        "Integer Get_data(File_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the File_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "909"
    },
    {
      "names": [
        "Integer Set_data(File_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the File_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "908"
    },
    {
      "names": [
        "Integer Get_wildcard(File_Box box, Text &data)"
      ],
      "description": "Get the wildcard from the File_Box box. The type of data must be Text. A function return value of zero indicates the wildcard data was returned successfully.",
      "id": "1321"
    },
    {
      "names": [
        "Integer Set_wildcard(File_Box box, Text text_data)"
      ],
      "description": "Set the wildcard to the File_Box box. The type of data must be Text. A function return value of zero indicates the wildcard data was successfully set.",
      "id": "1320"
    },
    {
      "names": [
        "Integer Add_wildcard(File_Box box, Text pattern, Integer include_in_default)"
      ],
      "description": "Add (can be additional) wildcard pattern to the File_Box box. If include_in_default is non zero, then the new pattern is choose a the default pattern for thebox. A function return value of zero indicates the wildcard data was successfully set.",
      "id": "7702"
    },
    {
      "names": [
        "Integer Get_directory(File_Box box, Text &data)"
      ],
      "description": "Get folder for the file from the File_Box box and return the folder in data. A function return value of zero indicates the directory data was returned successfully.",
      "id": "1323"
    },
    {
      "names": [
        "Integer Set_directory(File_Box box, Text text_data)"
      ],
      "description": "Set the folder to the file in the File_Box box to the Text data. A function return value of zero indicates the directory data was successfully set.",
      "id": "1322"
    },
    {
      "names": [
        "Integer Set_many(File_Box box, Integer mode)"
      ],
      "description": "Set the Text_Edit_Box box to support many files if mode is non-zero, disable it otherwise. Panels and WidgetsPage 967\f12d Model Programming Language ManualA function return value of zero indicates that the function call was successful.",
      "id": "1547"
    },
    {
      "names": [
        "Integer Get_many(File_Box box, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:1 if the File_Box box supports many files. 0 otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1548"
    },
    {
      "names": [
        "Integer Set_encoding(File_Box box, Integer encoding)"
      ],
      "description": "Set file encoding for File_Box box with Integer encoding. A return value of zero indicates the function call was successful. List of value for file encoding0 Native1 Ansi2 Unicode3 Unicode Little Endian4 Unicode Big Endian5 UTF_86 UTF-16_Little_Endian",
      "id": "2947"
    },
    {
      "names": [
        "Integer Get_encoding(File_Box box, Integer &encoding)"
      ],
      "description": "Get file encoding for File_Box box to Integer encoding. A return value of zero indicates the function call was successful. List of value for file encoding0 Native1 Ansi2 Unicode3 Unicode Little EndianPage 968Panels and Widgets\fChapter4 Unicode Big Endian5 UTF_86 UTF-16_Little_Endian",
      "id": "2948"
    },
    {
      "names": [
        "Integer Set_show_encodings(File_Box box, Integer show)"
      ],
      "description": "Set show encoding of the File_Box box to: false if Integer show is 0; true otherwise. A return value of zero indicates the function call was successful.",
      "id": "2949"
    },
    {
      "names": [
        "Integer Get_show_encodings(File_Box box, Integer &show)"
      ],
      "description": "Set Integer show to: 1 if the File_Box box shows the encoding; 0 otherwise. A return value of zero indicates the function call was successful.",
      "id": "2950"
    },
    {
      "names": [
        "Integer Set_libraries(File_Box box, Integer data)"
      ],
      "description": "Set the property of browsing to 12D library folder of the Input_Box box to false if data is 0; to trueotherwise. A return value of zero indicates the function call was successful.",
      "id": "2863"
    },
    {
      "names": [
        "Integer Get_libraries(File_Box box, Integer &data)"
      ],
      "description": "If the property of browsing to 12D library folder of the Input_Box box is true then set the value ofdata to 1; otherwise set the value of data to 0. A return value of zero indicates the function call was successful.",
      "id": "2862"
    },
    {
      "names": [
        "Integer Set_setups(File_Box box, Integer data)"
      ],
      "description": "Set the property of supporting 12D setup folder of the Input_Box box to false if data is 0; to trueotherwise. A return value of zero indicates the function call was successful.",
      "id": "2865"
    },
    {
      "names": [
        "Integer Get_setups(File_Box box, Integer &data)"
      ],
      "description": "If the property of browsing to 12D setup folder of the Input_Box box is true then set the value ofdata to 1; otherwise set the value of data to 0. A return value of zero indicates the function call was successful.",
      "id": "2864"
    },
    {
      "names": [
        "Function_Box Create_function_box(Text title_text, Message_Box message, Integer mode, Integer type)"
      ],
      "description": "Create an input Widget of type Function_Box for inputting and validating Functions.  See5. 61. 10. 13 Function_Box. The Function_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayFunction_Box validation messages. The value of mode is listed in the Appendix A - Function mode.  See Function Mode. The value of type is listed in the Appendix A - Function type.  See Function Type. The function return value is the created Function_Box.",
      "id": "1183"
    },
    {
      "names": [
        "Integer Validate(Function_Box box, Integer mode, Function &result)"
      ],
      "description": "Validate the contents of Function_Box box and return the Function result. The value of mode is listed in the Appendix A - Function mode.  See Function ModeThe function returns the value of:NO_NAME if the Widget Function_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1184"
    },
    {
      "names": [
        "Integer Get_data(Function_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Function_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1185"
    },
    {
      "names": [
        "Integer Set_data(Function_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Function_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1186"
    },
    {
      "names": [
        "Integer Get_type(Function_Box box, Integer &type)"
      ],
      "description": "Get the function Integer type from the Function_Box box and return it in type. A function return value of zero indicates the type was returned successfully.",
      "id": "1334"
    },
    {
      "names": [
        "Integer Set_type(Function_Box box, Integer type)"
      ],
      "description": "Set the function Integer type for the Function_Box box to type. The type of type must be Integer. A function return value of zero indicates the type was successfully set.",
      "id": "1333"
    },
    {
      "names": [
        "Integer Get_type(Function_Box box, Text &type)"
      ],
      "description": "Get the function Text type from the Function_Box box and return it in type. A function return value of zero indicates the type was returned successfully.",
      "id": "1336"
    },
    {
      "names": [
        "Integer Set_type(Function_Box box, Text type)"
      ],
      "description": "Set the function Text type for the Function_Box box to type. A function return value of zero indicates the type was successfully set.",
      "id": "1335"
    },
    {
      "names": [
        "HyperLink_Box Create_hyperlink_box(Text hyperlink, Message_Box message)"
      ],
      "description": "Create an input Widget of type HyperLink_Box.  See 5. 61. 10. 14 HyperLink_Box. The Hyperlink_Box is created with the Text in hyperlink.  This text should be a hyperlink. When the user clicks on the HyperLink then the HyperLink will be activated,The Message_Box message is normally the message box for the panel and is used to displayHyperlink_Box validation messages. The function return value is the created Hyperlink_Box.",
      "id": "1887"
    },
    {
      "names": [
        "Integer Validate(HyperLink_Box box, Text &result)"
      ],
      "description": "Validate the contents of HyperLink_Box box and return the name of the hyperlink in Text result. The function returns the value of:NO_NAME if the Widget HyperLink_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1888"
    },
    {
      "names": [
        "Integer Set_data(HyperLink_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Hyperlink_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1889"
    },
    {
      "names": [
        "Integer Get_data(HyperLink_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Hyperlink_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1890"
    },
    {
      "names": [
        "Input_Box Create_input_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Input_Box.  See 5. 61. 10. 15 Input_Box. The Input_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayInput_Box validation messages. The function return value is the created Input_Box.",
      "id": "910"
    },
    {
      "names": [
        "Integer Validate(Input_Box box, Text &result)"
      ],
      "description": "Validate the contents of Input_Box box and return the Text result. This call is almost not required as the box either has text or it does not but it is required to know ifthe Input_Box was optional and nothing was typed in. The function returns the value of:NO_NAME if the Widget Input_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "911"
    },
    {
      "names": [
        "Integer Get_data(Input_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Input_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "913"
    },
    {
      "names": [
        "Integer Set_data(Input_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Input_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "912"
    },
    {
      "names": [
        "Integer Set_multi_line(Input_Box box, Integer no_lines)"
      ],
      "description": "Set the number of lines for Input_Box box to Integer no_lines. A return value of zero indicates the function call was successful.",
      "id": "2859"
    },
    {
      "names": [
        "Integer Get_multi_line(Input_Box box, Integer &no_lines)"
      ],
      "description": "Get the number of lines no_lines for Input_Box box. A return value of zero indicates the function call was successful.",
      "id": "2860"
    },
    {
      "names": [
        "Integer_Box Create_integer_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Integer_Box.  See 5. 61. 10. 16 Integer_Box. The Integer_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayInteger_Box validation messages. The function return value is the created Integer_Box.",
      "id": "914"
    },
    {
      "names": [
        "Integer Validate(Integer_Box box, Integer &result)"
      ],
      "description": "Validate result (of type Integer) in the Integer_Box box. Validate the contents of Integer_Box box and return the Integer result. The function returns the value of:NO_NAME if the Widget Integer_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "915"
    },
    {
      "names": [
        "Integer Get_data(Integer_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Input_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "917"
    },
    {
      "names": [
        "Integer Set_data(Integer_Box box, Integer integer_data)"
      ],
      "description": "Set the data of type Integer for the Integer_Box box to integer_data. A function return value of zero indicates the data was successfully set.",
      "id": "916"
    },
    {
      "names": [
        "Integer Set_data(Integer_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Integer_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1517"
    },
    {
      "names": [
        "Justify_Box Create_justify_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Justify_Box.  See 5. 61. 10. 17 Justify_Box. The Justify_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayJustify_Box validation messages. The function return value is the created Justify_Box.",
      "id": "918"
    },
    {
      "names": [
        "Integer Validate(Justify_Box box, Integer &result)"
      ],
      "description": "Validate the contents of Justify_Box box and return the Integer result. The function returns the value of:NO_NAME if the Widget Justify_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "919"
    },
    {
      "names": [
        "Integer Get_data(Justify_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Justify_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "921"
    },
    {
      "names": [
        "Integer Set_data(Justify_Box box, Integer integer_data)"
      ],
      "description": "Set the data of type Integer for the Justify_Box box to integer_data. integer_data represents the text justification and can have the values 1 to 9. A function return value of zero indicates the data was successfully set.",
      "id": "920"
    },
    {
      "names": [
        "Integer Set_data(Justify_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Justify_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1518"
    },
    {
      "names": [
        "Linestyle_Box Create_linestyle_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Linestyle_Box.  See 5. 61. 10. 18 Linestyle_Box. The Linestyle_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayLinestyle_Box validation messages. The value of mode is listed in the Appendix A - Linestyle mode.  See Linestyle Mode. The function return value is the created Linestyle_Box.",
      "id": "922"
    },
    {
      "names": [
        "Integer Validate(Linestyle_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Linestyle_Box box and return the name of the linestyle in Text result. The value of mode is listed in the Appendix A - Linestyle mode.  See Linestyle ModeThe function returns the value of:NO_NAME if the Widget Linestyle_Box is optional and the box is left emptyLINESTYLE_EXISTS or NO_LINESTYLE. TRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "923"
    },
    {
      "names": [
        "Integer Get_data(Linestyle_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Linestyle_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "925"
    },
    {
      "names": [
        "Integer Set_data(Linestyle_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Linestyle_Box box to text_data. Page 988Panels and Widgets\fChapterA function return value of zero indicates the data was successfully set.",
      "id": "924"
    },
    {
      "names": [
        "List_Box Create_list_box(Text title_text, Message_Box message, Integer nlines)"
      ],
      "description": "Create an input Widget of type List_Box.  See 5. 61. 10. 19 List_Box. The List_Box is created with the title title_text. The number of lines nline will be created in the List_Box. The Message_Box message is normally the message box for the panel and is used to displayList_Box validation messages. The function return value is the created List_Box.",
      "id": "1278"
    },
    {
      "names": [
        "Integer Get_number_of_items(List_Box box, Integer &count)"
      ],
      "description": "For the List_Box box, get the number of items in the list and return the number in count. A function return value of zero indicates that count is successfully returned.",
      "id": "1546"
    },
    {
      "names": [
        "Integer Set_sort(List_Box box, Integer mode)"
      ],
      "description": "Set the sort mode for the List_Box box depending on the Integer mode. If mode is 0 then the sort is ascending,If mode is 1 then the sort is descending. A function return value of zero indicates the sort was successfully set.",
      "id": "1279"
    },
    {
      "names": [
        "Integer Get_sort(List_Box box, Integer &mode)"
      ],
      "description": "Get the sort mode from the List_Box box and return it in mode. If mode is 0 then the sort is ascending,If mode is 1 then the sort is descending. A function return value of zero indicates the mode was returned successfully.",
      "id": "1280"
    },
    {
      "names": [
        "Integer Set_auto_cut_paste(List_Box box, Integer mode)"
      ],
      "description": "Disable the auto cut paste property of the List_Box box if the Integer mode is zero, enable itotherwise. A return value of zero indicates the function call was successful.",
      "id": "1296"
    },
    {
      "names": [
        "Integer Get_auto_cut_paste(List_Box box, Integer &mode)"
      ],
      "description": "If the auto cut paste property of the List_Box box is enable set the Integer mode to 1, otherwiseset mode to 0. A function return value of zero indicates the mode was returned successfully.",
      "id": "1297"
    },
    {
      "names": [
        "Integer Set_selections(List_Box box, Integer mode)"
      ],
      "description": "Disable the multiple item selection property of the List_Box box if the Integer mode is zero,enable it otherwise. A return value of zero indicates the function call was successful.",
      "id": "1281"
    },
    {
      "names": [
        "Integer Get_selections(List_Box box, Integer &mode)"
      ],
      "description": "If the multiple item selection property of the List_Box box is enable set the Integer mode to 1,otherwise set mode to 0. A function return value of zero indicates the mode was returned successfully.",
      "id": "1282"
    },
    {
      "names": [
        "Integer Set_caret(List_Box box, Integer pos, Integer scroll)"
      ],
      "description": "Set the caret on the item with index pos of the List_Box box.  If the Integer scroll is non-zero,scroll to the item. A return value of zero indicates the function call was successful.",
      "id": "1283"
    },
    {
      "names": [
        "Integer Get_caret(List_Box box, Integer &pos)"
      ],
      "description": "Get the index of the item with the caret of the List_Box box and return it to pos. A function return value of zero indicates the index was returned successfully.",
      "id": "1284"
    },
    {
      "names": [
        "Integer Delete_item(List_Box box, Integer pos)"
      ],
      "description": "Delete the item with index pos of the List_Box box. A return value of zero indicates the function call was successful.",
      "id": "1287"
    },
    {
      "names": [
        "Integer Insert_item(List_Box box, Integer pos, Text text)"
      ],
      "description": "Insert a new the item with the value text at index pos to the List_Box box. A return value of zero indicates the function call was successful.",
      "id": "1286"
    },
    {
      "names": [
        "Integer Add_item(List_Box box, Text text)"
      ],
      "description": "Insert a new the item with the value text to the end of the List_Box box. A return value of zero indicates the function call was successful.",
      "id": "1285"
    },
    {
      "names": [
        "Integer Get_item(List_Box box, Integer pos, Text &text)"
      ],
      "description": "Assign the value of the item with index pos of the List_Box box to text. A return value of zero indicates the function call was successful.",
      "id": "1288"
    },
    {
      "names": [
        "Integer Set_selection(List_Box box, Integer pos)"
      ],
      "description": "Set the current selection of the List_Box box to the item with index pos. If the List_Box box allows multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1289"
    },
    {
      "names": [
        "Integer Get_selection(List_Box box, Integer &pos)"
      ],
      "description": "Get the index of current selected index of the List_Box box and assign to Integer pos. If the List_Box box allows multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1290"
    },
    {
      "names": [
        "Integer Get_selection_count(List_Box box, Integer &count)"
      ],
      "description": "Get the number of selected items of the List_Box box and assign to Integer count. If the List_Box box does not allow multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1291"
    },
    {
      "names": [
        "Integer Set_selection_list(List_Box box, Integer maxc, Integer list[], Integer do_select)"
      ],
      "description": "For the items of the List_Box box of indices from the first maxc number in the list:If do_select is zero, unselect those item. Panels and WidgetsPage 993\f12d Model Programming Language ManualIf do_select is non-zero, select those item. If the List_Box box does not allow multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1292"
    },
    {
      "names": [
        "Integer Get_selection_list(List_Box box, Integer maxc, Integer list[])"
      ],
      "description": "Get all the selected items of the List_Box box and assign the first maxc indices to the list:If the List_Box box does not allow multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1293"
    },
    {
      "names": [
        "Map_File_Box Create_map_file_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Map_File_Box.  See 5. 61. 10. 20 Map_File_Box. The Map_File_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayMap_File_Box validation messages. The value of mode is listed in the Appendix A - File mode.  See File ModeThe function return value is the created Map_File_Box.",
      "id": "926"
    },
    {
      "names": [
        "Integer Validate(Map_File_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Map_File_Box box and return the Text result. The value of mode is listed in the Appendix A - File mode.  See File ModeThe function returns the value of:NO_NAME if the Widget Map_File_Box is optional and the box is left emptyNO_FILE, FILE_EXISTS or NO_FILE_ACCESSTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "927"
    },
    {
      "names": [
        "Integer Get_data(Map_File_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Map_File_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "929"
    },
    {
      "names": [
        "Integer Set_data(Map_File_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Map_File_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "928"
    },
    {
      "names": [
        "Model_Box Create_model_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Model_Box for inputting and validating Models. The Model_Box is created with the title title_text (see Model_Box ). The Message_Box message is normally the message box for the panel and is used to displayModel_Box validation messages. If <enter> is typed into the Model_Box automatic validation is performed by the Model_Box accordingto mode.  What the validation is, what messages are written to Message_Box, and what actionsautomatically occur, depend on the value of mode. For example,CHECK_MODEL_MUST_EXIST7 // if the model exists, the message says \"exists\". \uf020// if it doesn\u2019t exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see Model Mode ). If LB is clicked on the icon at the right hand end of the Model_Box, a list of all existing models is placedin a pop-up.  If a model is selected from the pop-up (using LB), the model name is placed in theinformation area of the Model_Box and validation performed according to mode. MB for \"Same As\" also applies.  That is, If MB is clicked in the information area and then a string froma model on a view is selected, then the name of the model containing the selected string is written tothe information area and validation performed according to mode. The function return value is the created Model_Box. Special Note:#include \"set_ups. h\" must be in the macro code to define CHECK_MODEL_MUST_EXIST etc.",
      "id": "848"
    },
    {
      "names": [
        "Integer Validate(Model_Box box, Integer mode, Model &result)"
      ],
      "description": "Validate the contents of the Model_Box box and return the Model result. Page 998Panels and Widgets\fChapterThe value of mode will determine what validation occurs, what messages are written to theMessage_Box, what actions are taken and what the function return value is. The values for mode and the actions are listed in Appendix A (see Model Mode). The function return value depends on mode and are given in Appendix A (see Model Mode). A function return value of zero indicates that there is a drastic error. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is not zero even when you think it shouldbe.  The actual value of the function return code must be checked to see what is going on.  Forexample, when mode = CHECK_MODEL_MUST_EXIST will return NO_MODEL if the modelname is not blank and no model of that name exist (NO_MODEL does not equal zero).",
      "id": "880"
    },
    {
      "names": [
        "Integer Get_data(Model_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Model_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "885"
    },
    {
      "names": [
        "Integer Set_data(Model_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Model_Box box as the Text text_data. A function return value of zero indicates the data was successfully set.",
      "id": "884"
    },
    {
      "names": [
        "Name_Box Create_name_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Name_Box.  See 5. 61. 10. 22 Name_Box. The Name_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayName_Box validation messages. The function return value is the created Name_Box.",
      "id": "930"
    },
    {
      "names": [
        "Integer Validate(Name_Box box, Text &result)"
      ],
      "description": "Validate the contents of Name_Box box and return the Text result. The function returns the value of:NO_NAME if the Widget Name_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (0) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "931"
    },
    {
      "names": [
        "Integer Get_data(Name_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Name_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "933"
    },
    {
      "names": [
        "Integer Set_data(Name_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Name_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "932"
    },
    {
      "names": [
        "Named_Tick_Box Create_named_tick_box(Text title_text, Integer state, Text response)"
      ],
      "description": "Create an input Widget of type Named_Tick_Box.  See 5. 61. 10. 23 Named_Tick_Box. The Named_Tick_Box is created with the Text title_text. The Integer state specifies the ticked/unticked state of the box:state = 0set the box as untickedPanels and WidgetsPage 1003\f12d Model Programming Language Manualstate = 1set the box as tickedThe Text response returns the msg when calling the Wait_on_widgets function. The function return value is the created Named_Tick_Box.",
      "id": "849"
    },
    {
      "names": [
        "Integer Validate(Named_Tick_Box box, Integer &result)"
      ],
      "description": "Validate the contents of Named_Tick_Box box and return the Integer result. result = 0result = 1if the tick box is untickedif the tick box is tickedA function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "974"
    },
    {
      "names": [
        "Integer Set_data(Named_Tick_Box box, Integer state)"
      ],
      "description": "Set the state of the Named_Tick_Box totickeduntickedif state = 1if state = 0A function return value of zero indicates the data was successfully set.",
      "id": "2239"
    },
    {
      "names": [
        "Integer Get_data(Named_Tick_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Named_Tick_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "976"
    },
    {
      "names": [
        "Integer Set_data(Named_Tick_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Named_Tick_Box box to text_data. A function return value of zero indicates the data was successfully set. Page 1004Panels and Widgets\fChapter",
      "id": "975"
    },
    {
      "names": [
        "New_Select_Box Create_new_select_box(Text title_text, Text select_title, Integer mode, Message_Box message)"
      ],
      "description": "Create an input Widget of type New_Select_Box.  See New_Select_Box . The New_Select_Box is created with the title title_text. The Select title displayed in the screen message area is select_title. The value of mode is listed in the Appendix A - Select mode.  See Select Mode . The Message_Box message is normally the message box for the panel and is used to displayNew_Select_Box validation messages. The function return value is the created New_Select_Box.",
      "id": "2240"
    },
    {
      "names": [
        "Integer Validate(New_Select_Box select, Element &string)"
      ],
      "description": "Validate the contents of New_Select_Box select and return the selected Element in string. The function returns the value of:NO_NAME if the Widget New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return valuesPanels and WidgetsPage 1007\f12d Model Programming Language Manual",
      "id": "2241"
    },
    {
      "names": [
        "Integer Validate(New_Select_Box select, Element &string, Integer silent)"
      ],
      "description": "Validate the contents of New_Select_Box select and return the selected Element in string. If silent = 0, and there is an error, a message is written and the cursor goes back to the box. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:NO_NAME if the Widget New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2242"
    },
    {
      "names": [
        "Integer Set_data(New_Select_Box select, Element string)"
      ],
      "description": "Set the data of for the New_Select_Box select to string. A function return value of zero indicates the data was successfully set.",
      "id": "2243"
    },
    {
      "names": [
        "Integer Set_data(New_Select_Box select, Text model_string)"
      ],
      "description": "Set the Element of the New_Select_Box box by giving the model name and string name as aText model_string in the form \"model_name model_id string_name string_id\" with tabseparating. A function return value of zero indicates the data was successfully set.",
      "id": "2244"
    },
    {
      "names": [
        "Integer Get_data(New_Select_Box select, Text &model_string)"
      ],
      "description": "Page 1008Panels and Widgets\fChapterGet the model and string name of the Element in the New_Select_Box box and return it in Textmodel_string. Note: the model and string name is in the form \"model_name model_id string_name string_id\"with tab separating so only one Text is required. A function return value of zero indicates the data was successfully returned.",
      "id": "2245"
    },
    {
      "names": [
        "Integer Select_start(New_Select_Box select)"
      ],
      "description": "Starts the string selection for the New_Select_Box select.  This is the same as if the button onthe New_Select_Box had been clicked. A function return value of zero indicates the start was successful.",
      "id": "3783"
    },
    {
      "names": [
        "Integer Select_end(New_Select_Box select)"
      ],
      "description": "Cancels the string selection that is running for the New_Select_Box select.  This is the same as ifCancel had been selected from the Pick Ops menu. A function return value of zero indicates the end was successful.",
      "id": "3784"
    },
    {
      "names": [
        "Integer Set_select_type(New_Select_Box select, Text type)"
      ],
      "description": "Set the string selection type type for the New_Select_Box select.  For example \u201cAlignment\u201d, \u201c3d\u201d. A function return value of zero indicates the type was successfully set.",
      "id": "3776"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(New_Select_Box select, Integer snap_control)"
      ],
      "description": "Set the snap control for the New_Select_Box select to snap_control. snap_controlcontrol valueIgnore_SnapUser_Snap=0=1Panels and WidgetsPage 1009\f12d Model Programming Language ManualProgram_Snap=2A function return value of zero indicates the snap control was successfully set.",
      "id": "3777"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(New_Select_Box select, Integer snap_mode, Integer snap_control, Text snap_text)"
      ],
      "description": "Set the snap mode snap_mode and snap control snap_control for the New_Select_Boxselect. Where snap_mode is:Failed_Snap = -1No_Snap=0Point_Snap=1Line_Snap=2Grid_Snap=3Intersection_Snap = 4Cursor_Snap=5Name_Snap=6Tin_Snap=7Model_Snap=8Height_Snap=9Segment_Snap= 11Text_Snap= 12Fast_Snap= 13Fast_Accept= 14and snap_control isIgnore_Snap=0User_Snap=1Program_Snap = 2The snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\u201c\u201d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "3778"
    },
    {
      "names": [
        "Integer Set_select_direction(New_Select_Box select, Integer dir)"
      ],
      "description": "Set the selection direction dir for the New_Select_Box select. Dir ValuePick direction1-1the direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully set. Page 1010Panels and Widgets\fChapter",
      "id": "3779"
    },
    {
      "names": [
        "Integer Get_select_direction(New_Select_Box select, Integer &dir)"
      ],
      "description": "Get the selection direction dir from the string selected for the New_Select_Box select. The returned dir type must be Integer. If select without direction, the returned dir is 1, otherwise, the returned dir is:Dir ValuePick direction1-1the direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully returned.",
      "id": "3780"
    },
    {
      "names": [
        "Integer Set_select_coordinate(New_Select_Box select, Real x, Real y, Real z, Real ch, Real ht)"
      ],
      "description": "Set the coordinates, chainage and height of the selected snap point of the string for theNew_Select_Box select. The input values of x, y, z, ch, and ht are of type Real. A function return value of zero indicates the values were successfully set.",
      "id": "3781"
    },
    {
      "names": [
        "Integer Get_select_coordinate(New_Select_Box select, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Get the coordinates, chainage and height of the selected snap point of the string for theNew_Select_Box select. The return values of x, y, z, ch, and ht are of type Real. A function return value of zero indicates the values were successfully returned.",
      "id": "3782"
    },
    {
      "names": [
        "New_XYZ_Box Create_new_xyz_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type New_XYZ_Box.  See 5. 61. 10. 25 New_XYZ_Box. The New_XYZ_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayNew_XYZ_Box validation messages. The function return value is the created New_XYZ_Box. Panels and WidgetsPage 1013\f12d Model Programming Language Manual",
      "id": "2252"
    },
    {
      "names": [
        "Integer Validate(New_XYZ_Box box, Real &x, Real &y, Real &z)"
      ],
      "description": "Validate the contents of the New_XYZ_Box box and check that it decodes to three Reals. The three Reals are returned in x, y, and z. The function returns the value of:NO_NAME if the Widget New_XYZ_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and x, y and z are valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2253"
    },
    {
      "names": [
        "Integer Get_data(New_XYZ_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the New_XYZ_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2254"
    },
    {
      "names": [
        "Integer Set_data(New_XYZ_Box box, Real x, Real y, Real z)"
      ],
      "description": "Set the x y z data (all of type Real) for the New_XYZ_Box box to the values x, y and z. A function return value of zero indicates the data was successfully set.",
      "id": "2255"
    },
    {
      "names": [
        "Integer Set_data(New_XYZ_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the New_XYZ_Box box to text_data. A function return value of zero indicates the data was successfully set. Page 1014Panels and Widgets\fChapter",
      "id": "2256"
    },
    {
      "names": [
        "Plotter_Box Create_plotter_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Plotter_Box.  See 5. 61. 10. 26 Plotter_Box. The Plotter_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayPlotter_Box validation messages. The function return value is the created Plotter_Box.",
      "id": "934"
    },
    {
      "names": [
        "Integer Validate(Plotter_Box box, Text &result)"
      ],
      "description": "Validate the contents of Plotter_Box box and return the Text result. The function returns the value of:NO_NAME if the Widget Plotter_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (0) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "935"
    },
    {
      "names": [
        "Integer Get_data(Plotter_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Plotter_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "937"
    },
    {
      "names": [
        "Integer Set_data(Plotter_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Plotter_Box box to text_data. A function return value of zero indicates the data was successfully set. Page 1016Panels and Widgets\fChapter",
      "id": "936"
    },
    {
      "names": [
        "Integer Validate(Plotter_Box box, Text &plotter_mode, Text &plotter_names, Text &plotter_type)"
      ],
      "description": "<no description>",
      "id": "2465"
    },
    {
      "names": [
        "Integer Set_data(Plotter_Box box, Text plotter_mode, Text plotter_names, Text plotter_type)"
      ],
      "description": "<no description>",
      "id": "2466"
    },
    {
      "names": [
        "Integer Get_data(Plotter_Box box, Text &plotter_mode, Text &plotter_names, Text &plotter_type)"
      ],
      "description": "<no description>",
      "id": "2467"
    },
    {
      "names": [
        "Polygon_Box Create_polygon_box(Text title_text, Text select_title, Integer mode, Message_Box message)"
      ],
      "description": "Create an input Widget of type Polygon_Box.  See 5. 61. 10. 27 Polygon_Box. The Polygon_Box is created with the title title_text. The text in the screen message area is defined by select_title, if select_title is blank then thedefault text \"select polygon\" will be used. The parameter mode is not yet used for now. The Message_Box message is normally the message box for the panel and is used to displayPolygon_Box validation messages. The function return value is the created Polygon_Box.",
      "id": "2246"
    },
    {
      "names": [
        "Integer Validate(Polygon_Box select, Element &string)"
      ],
      "description": "Validate the contents of Polygon_Box select and return the selected Element in string. If there is an error, a message is written and the cursor goes back to the Polygon_Box. The function returns the value of:NO_NAME if the Widget Polygon_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2247"
    },
    {
      "names": [
        "Integer Validate(Polygon_Box select, Element &string, Integer silent)"
      ],
      "description": "Validate the contents of Polygon_Box select and return the selected Element in string. If silent = 0, and there is an error, a message is written and the cursor goes back to thePolygon_Box. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:NO_NAME if the Widget Polygon_Box is optional and the box is left emptyPage 1018Panels and Widgets\fChapterTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2248"
    },
    {
      "names": [
        "Integer Set_data(Polygon_Box select, Element string)"
      ],
      "description": "Set the data of type Element for the Polygon_Box select to string. A function return value of zero indicates the data was successfully set.",
      "id": "2249"
    },
    {
      "names": [
        "Integer Set_data(Polygon_Box select, Text string_name)"
      ],
      "description": "Set the data of type Text for the Polygon_Box select to string_name. A function return value of zero indicates the data was successfully set.",
      "id": "2250"
    },
    {
      "names": [
        "Integer Get_data(Polygon_Box select, Text &string)"
      ],
      "description": "Get the data of type Text from the Polygon_Box select and return it in string. A function return value of zero indicates the data was successfully returned.",
      "id": "2251"
    },
    {
      "names": [
        "Integer Set_allow_holes(Polygon_Box select, Integer allow)"
      ],
      "description": "Panels and WidgetsPage 1019\f12d Model Programming Language ManualSet the property of allowing polygon with holes for Polygon_Box select with the value of allow. A function return value of zero indicates the property was successfully changes.",
      "id": "3801"
    },
    {
      "names": [
        "Integer Get_allow_holes(Polygon_Box select, Integer &allow)"
      ],
      "description": "Get the property of allowing polygon with holes for Polygon_Box select and return it in allow. A function return value of zero indicates the property was successfully changes.",
      "id": "3802"
    },
    {
      "names": [
        "Real_Box Create_real_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Real_Box.  See 5. 61. 10. 28 Real_Box. The Real_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayReal_Box validation messages. The function return value is the created Real_Box.",
      "id": "902"
    },
    {
      "names": [
        "Integer Validate(Real_Box box, Real &result)"
      ],
      "description": "Validate the contents of Real_Box box and return the Real result. The function returns the value of:NO_NAME if the Widget Real_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "903"
    },
    {
      "names": [
        "Integer Get_data(Real_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Real_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "905"
    },
    {
      "names": [
        "Integer Set_data(Real_Box box, Real real_data)"
      ],
      "description": "Set the data of type Real for the Real_Box box to real_data. A function return value of zero indicates the data was successfully set. Page 1022Panels and Widgets\fChapter",
      "id": "904"
    },
    {
      "names": [
        "Integer Set_data(Real_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Real_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1516"
    },
    {
      "names": [
        "Report_Box Create_report_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Report_Box.  See 5. 61. 10. 29 Report_Box. The Report_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayReport_Box validation messages. The value of mode is listed in the Appendix A - File mode. The function return value is the created Report_Box.",
      "id": "938"
    },
    {
      "names": [
        "Integer Validate(Report_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Report_Box box and return the Text result. The value of mode is listed in the Appendix A - File mode.  See File ModeThe function returns the value of:NO_NAME if the Widget Report_Box is optional and the box is left emptyNO_FILE, FILE_EXISTS or NO_FILE_ACCESSTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "939"
    },
    {
      "names": [
        "Integer Get_data(Report_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Report_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "941"
    },
    {
      "names": [
        "Integer Set_data(Report_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Report_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "940"
    },
    {
      "names": [
        "Screen_Text Create_screen_text(Text text)"
      ],
      "description": "Create a Screen_Text with the Text text.  See 5. 61. 10. 30 Screen_Text. The function return value is the created Screen_Text.",
      "id": "1369"
    },
    {
      "names": [
        "Integer Set_data(Screen_Text widget, Text text_data)"
      ],
      "description": "Set the data of type Text for the Screen_Text widget to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1371"
    },
    {
      "names": [
        "Integer Get_data(Screen_Text widget, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Screen_Text widget and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1370"
    },
    {
      "names": [
        "Select_Box Create_select_box(Text title_text, Text select_title, Integer mode, Message_Box message)"
      ],
      "description": "Create an input Widget of type Select_Box. The Select_Box is created with the title title_text. The Select title displayed in the screen message area is select_title. The value of mode is listed in the Appendix A - Select mode.  See Select Mode . The Message_Box message is normally the message box for the panel and is used to display stringselect validation messages. The function return value is the created Select_Box.",
      "id": "882"
    },
    {
      "names": [
        "Integer Validate(Select_Box select, Element &string)"
      ],
      "description": "Validate the Element string in the Select_Box select. The function returns the value of:NO_NAME if the Widget Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "981"
    },
    {
      "names": [
        "Integer Validate(Select_Box select, Element &string, Integer silent)"
      ],
      "description": "Validate the Element string in the Select_Box select. If silent = 0, and there is an error, a message is written and the cursor goes back to the box. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of SELECT_STRING indicates the string is selected successfully. Panels and WidgetsPage 1029\f12d Model Programming Language Manual",
      "id": "1376"
    },
    {
      "names": [
        "Integer Set_data(Select_Box select, Text model_string)"
      ],
      "description": "Set the Element in the Select_Box select by giving the model name and string name as a Textmodel_string in the form \"model_name->string_name\". A function return value of zero indicates the data was successfully set.",
      "id": "982"
    },
    {
      "names": [
        "Integer Set_data(Select_Box select, Element string)"
      ],
      "description": "Set the Element for the Select_Box select to string. A function return value of zero indicates the data was successfully set.",
      "id": "1174"
    },
    {
      "names": [
        "Integer Get_data(Select_Box select, Text &string)"
      ],
      "description": "Get the model and string name of the Element in Select_Box select and return it in the Textmodel_string,Note: the model and string name is in the form \"model_name->string_name\" so only one Text isrequired. A function return value of zero indicates the data was successfully returned.",
      "id": "983"
    },
    {
      "names": [
        "Integer Select_start(Select_Box select)"
      ],
      "description": "Starts the string selection for the Select_Box select.  This is the same as if the button on theSelect_Box had been clicked. A function return value of zero indicates the start was successful.",
      "id": "1169"
    },
    {
      "names": [
        "Integer Select_end(Select_Box select)"
      ],
      "description": "Cancels the string selection that is running for the Select_Box select.  This is the same as ifCancel had been selected from the Pick Ops menu. A function return value of zero indicates the end was successful.",
      "id": "1170"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Box select, Text type)"
      ],
      "description": "Set the string selection type type for the Select_Box select.  For example \u201cAlignment\u201d, \u201c3d\u201d. A function return value of zero indicates the type was successfully set.",
      "id": "1048"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Box select, Integer snap_control)"
      ],
      "description": "Set the snap control for the Select_Box select to snap_control. snap_controlcontrol valueIgnore_SnapUser_SnapProgram_Snap=0=1=2A function return value of zero indicates the snap control was successfully set.",
      "id": "1049"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Box select, Integer snap_mode, Integer snap_control, Text snap_text)"
      ],
      "description": "Set the snap mode snap_mode and snap control snap_control for the Select_Box select. Where snap_mode is:Failed_Snap = -1No_Snap=0Point_Snap=1Line_Snap=2Grid_Snap=3Intersection_Snap = 4Cursor_Snap=5Name_Snap=6Panels and WidgetsPage 1031\f12d Model Programming Language ManualTin_SnapModel_SnapHeight_SnapSegment_SnapText_SnapFast_SnapFast_Accept=7=8=9= 11= 12= 13= 14and snap_control isIgnore_Snap=0User_Snap=1Program_Snap = 2The snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\u201c\u201d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "1045"
    },
    {
      "names": [
        "Integer Set_select_direction(Select_Box select, Integer dir)"
      ],
      "description": "Set the selection direction dir for the Select_Box select. Dir ValuePick direction1-1the direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully set.",
      "id": "1447"
    },
    {
      "names": [
        "Integer Get_select_direction(Select_Box select, Integer &dir)"
      ],
      "description": "Get the selection direction dir from the string selected for the Select_Box select. The returned dir type must be Integer. If select without direction, the returned dir is 1, otherwise, the returned dir is:Dir ValuePick direction1-1the direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully returned.",
      "id": "1051"
    },
    {
      "names": [
        "Integer Set_select_coordinate(Select_Box select, Real x, Real y, Real z, Real ch, Real ht)"
      ],
      "description": "Set the coordinates, chainage and height of the selected snap point of the string for theSelect_Box select. The input values of x, y, z, ch, and ht are of type Real. A function return value of zero indicates the values were successfully set.",
      "id": "1448"
    },
    {
      "names": [
        "Integer Get_select_coordinate(Select_Box select, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Get the coordinates, chainage and height of the selected snap point of the string for theSelect_Box select. The return values of x, y, z, ch, and ht are of type Real. A function return value of zero indicates the values were successfully returned.",
      "id": "1052"
    },
    {
      "names": [
        "Select_Boxes Create_select_boxes(Integer no_boxes, Text title_text[], Text select_title[], Integer mode[], Message_Box message)"
      ],
      "description": "Create an input Widget of type Select_Boxes which is actually a collection of 0 or more boxesthat each acts like a Select_Box.  See 5. 61. 10. 32 Select_Boxes. no_boxes indicates the number of boxes in the boxes array. The Select_Boxes are created with the titles given in the array title_text[]. The Screen select titles displayed in the screen message area are given in the arrayselect_title[]. The value of mode[] is listed in the Appendix A - Select mode. The Message_Box message is used to display the select information. The function return value is the created Select_Boxes.",
      "id": "883"
    },
    {
      "names": [
        "Integer Validate(Select_Boxes select, Integer n, Element &string)"
      ],
      "description": "Validate the nth Element string in the Select_Boxes select. The function returns the value of:NO_NAME if the n\u2019th box of the New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "984"
    },
    {
      "names": [
        "Integer Validate(Select_Boxes select, Integer n, Element &string, Integer silent)"
      ],
      "description": "Validate the nth Element string in the Select_Boxes select. If silent = 0, and there is an error, a message is written and the cursor goes back to the box. Panels and WidgetsPage 1035\f12d Model Programming Language ManualIf silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:NO_NAME if the n\u2019th box of the New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1377"
    },
    {
      "names": [
        "Integer Set_data(Select_Boxes select, Integer n, Text model_string)"
      ],
      "description": "Set the Element of the n\u2019th box in the Select_Boxes select by giving the model name and stringname as a Text model_string in the form \"model_name->string_name\". A function return value of zero indicates the data was successfully set.",
      "id": "985"
    },
    {
      "names": [
        "Integer Set_data(Select_Boxes select, Integer n, Element string)"
      ],
      "description": "Set the data of type Element for the n\u2019th box in the Select_Boxes select to string. A function return value of zero indicates the data was successfully set.",
      "id": "1175"
    },
    {
      "names": [
        "Integer Get_data(Select_Boxes select, Integer n, Text &model_string)"
      ],
      "description": "Get the model and string name of the Element in the n\u2019th box of the Select_Boxes select.  andreturn it in the Text model_string,Note: the model and string name is in the form \"model_name->string_name\" so only one Text isrequired. A function return value of zero indicates the data was successfully returned.",
      "id": "986"
    },
    {
      "names": [
        "Integer Select_start(Select_Boxes select, Integer n)"
      ],
      "description": "Starts the string selection for the n\u2019th box of the Select_Boxes select.  This is the same as if thebutton on the n\u2019th box of Select_Boxes had been clicked. A function return value of zero indicates the start was successful.",
      "id": "1171"
    },
    {
      "names": [
        "Integer Select_end(Select_Boxes select, Integer n)"
      ],
      "description": "Cancels the string selection that is running for the n\u2019th box of the Select_Boxes n\u2019th box of theSelect_Boxes select.  This is the same as if Cancel had been selected from the Pick Ops menu. A function return value of zero indicates the end was successful.",
      "id": "1172"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Boxes select, Integer n, Text type)"
      ],
      "description": "Set the string selection for the n\u2019th box of the Select_Boxes select to type.  For example\u201cAlignment\u201d, \u201c3d\u201d. A function return value of zero indicates the type was successfully set.",
      "id": "1053"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Boxes select, Integer n, Integer control)"
      ],
      "description": "Set the snap control for n\u2019th box of the Select_Boxes select to control. snap controlIgnore_SnapUser_SnapProgram_Snapcontrol value02A function return value of zero indicates the snap control was successfully set.",
      "id": "1054"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Boxes select, Integer n, Integer snap_mode, Integer snap_control, Text Panels and Widgets Page 1037 12d Model Programming Language Manual snap_text)"
      ],
      "description": "Set the snap mode mode and snap control snap_control for the nth box of the Select_Boxesselect. When snap mode is:Name_SnapTin_SnapModel_Snap678the snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\u201c\u201d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "1055"
    },
    {
      "names": [
        "Integer Set_select_direction(Select_Boxes select, Integer n, Integer dir)"
      ],
      "description": "Set the selection direction dir of the string selected for the n\u2019th box of the Select_Boxes select. The input dir type must be Integer. Dir Value1-1Pick directionthe direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully set.",
      "id": "1449"
    },
    {
      "names": [
        "Integer Get_select_direction(Select_Boxes select, Integer n, Integer &dir)"
      ],
      "description": "Get the selection direction dir of the string selected for the n\u2019th box of the Select_Boxes select. The returned dir type must be Integer. If select without direction, the returned dir is 1, otherwise, the returned dir is:Dir Value1-1Pick directionthe direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully returned.",
      "id": "1056"
    },
    {
      "names": [
        "Integer Set_select_coordinate(Select_Boxes select, Integer n, Real x, Real y, Real z, Real ch, Real ht)"
      ],
      "description": "Get the coordinate, chainage and height of the snap point of the string selected for the n\u2019th boxof the Select_Boxes select. The input value of x, y, z, ch, and ht are of type of Real. A function return value of zero indicates the coordinate was successfully set.",
      "id": "1450"
    },
    {
      "names": [
        "Integer Get_select_coordinate(Select_Boxes select, Integer n, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Get the coordinate, chainage and height of the snap point of the string selected for the n\u2019th boxof the Select_Boxes select. The return value of x, y, z, ch, and ht are of type of Real. A function return value of zero indicates the coordinate was successfully returned.",
      "id": "1057"
    },
    {
      "names": [
        "Sheet_Size_Box Create_sheet_size_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Sheet_Size_Box.  See 5. 61. 10. 33 Sheet_Size_Box. The Sheet_Size_Box is created with the title title_text. The Message_Box message is used to display sheet size information. The function return value is the created Sheet_Size_Box.",
      "id": "946"
    },
    {
      "names": [
        "Integer Validate(Sheet_Size_Box box, Real &w, Real &h, Text &sheet)"
      ],
      "description": "Validate the contents of Sheet_Size_Box box and return the width of the sheet as w, the heightof the sheet as h and the sheet size as Text sheet or blank if it is not a standard size. The function returns the value of:NO_NAME if the Widget Sheet_Size_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and w, h, sheet are valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "947"
    },
    {
      "names": [
        "Integer Get_data(Sheet_Size_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Sheet_Size_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "949"
    },
    {
      "names": [
        "Integer Set_data(Sheet_Size_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Sheet_Size_Box box to text_data. A function return value of zero indicates the data was successfully set. Page 1042Panels and Widgets\fChapter",
      "id": "948"
    },
    {
      "names": [
        "Slider_Box Create_slider_box(Text name, Integer width, Integer height, Integer min_value, Integer max_value, Integer tick_interval, Integer horizontal)"
      ],
      "description": "Create an input Widget of type Slider_Box.  See 5. 61. 10. 34 Slider_Box. The Slider_Box can be horizontal or vertical. Panels and WidgetsPage 1045\f12d Model Programming Language ManualIf horizontal = 1 then the Slider_Box is horizontal. If horizontal = 0 then the Slider_Box is vertical. The range of values returned by the Slider_Box are specified by a minimum value (min_val)which is when the slider is at the left of a horizontal Slider_Box, or the top for a verticalSlider_Box, and a maximum value (max_range) which is reached when the slider is at the rightof a horizontal Slider_Box, or at the bottom of a vertical Slider_Box. min_value must be less than max_val. Tick marks are drawn at the interval given by tick_interval on the bottom of a horizontal slider, ofto the right of a vertical slider. The slider box is created with a width width and height height where the width and height aregiven in screen units (pixels). The function return value is the created Slider_Box. Note: the height for a horizontal Slider_Box or the width for a vertical Slider_Box should be atleast 30 or there will be no room to display the slider and tick marks.",
      "id": "2706"
    },
    {
      "names": [
        "Integer Set_slider_position(Slider_Box box, Integer value)"
      ],
      "description": "Move the slider of Slider_Box box to the position given by value units of the Slider_Box. A function return value of zero indicates the set was successful.",
      "id": "2707"
    },
    {
      "names": [
        "Integer Get_slider_position(Slider_Box box, Integer &value)"
      ],
      "description": "For the Slider_Box box, get the position of the slider in units of the Slider_Box and return thenumber of units in value. A function return value of zero indicates the get was successful.",
      "id": "2708"
    },
    {
      "names": [
        "Source_Box Create_source_box(Text title_text, Message_Box box, Integer flags)"
      ],
      "description": "Create an input Widget of type Source_Box which is used to define how to select data.  See5. 61. 10. 35 Source_Box. The Source_Box is created with the title \"Data \" followed by title_text. What Data Source Choices are displayed and hence available to select, is controlled by flags.  iIf flags = 0, then all the choices are displayed. ModelViewStringRectangleTrapezoidPolygonLassoFilterModelsFavouritesAllFence insideFence crossFence outsideFence stringFence pointsFence allSource_Box_Model =Source_Box_View =Source_Box_String =Source_Box_Rectangle =Source_Box_Trapezoid =Source_Box_Polygon =Source_Box_Lasso =Source_Box_Filter =Source_Box_Models =Source_Box_Favorites =Source_Box_All =Source_Box_Fence_Inside =Source_Box_Fence_Cross =Source_Box_Fence_Outside =Source_Box_Fence_String =Source_Box_Fence_Points =Source_Box_Fence_All =0x001 = 10x002 = 20x004 = 40x008 = 80x010 = 160x0200x0400x0800x1000x2000xfff0x010000x020000x040000x080000x100000xff000Source_Box_All | Source_Box_Fence_Inside | \uf020Source_Box_Fence_Outside | Source_Box_Fence_Cross |Source_Box_Fence_StringYou can have just some of them by combining the ones you want with |. For exampleSource_Box_Model | Source_Box_ViewSource_Box_Standard =The Message_Box message is used to display information. The function return value is the created Source_Box.",
      "id": "1675"
    },
    {
      "names": [
        "Source_Box Create_source_box(Text text, Message_Box box, Integer flags, Integer start_flag)"
      ],
      "description": "Same as the other Create_source_box function but with an extra start_flag to indicate thechoice of data source that the box starts with. The function return value is the created Source_Box.",
      "id": "2626"
    },
    {
      "names": [
        "Integer Validate(Source_Box box, Dynamic_Element &elements)"
      ],
      "description": "Validate the contents of Source_Box box and return the Dynamic_Element de_results. The function returns the value of:NO_NAME if the Widget Source_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and elements is valid. -2 if there is something wrong with the choices.  For example the panel field is blank. FALSE (zero) if there is a drastic error. Having no Elements returned in de_results is NOT an error. Always check the number of Elements in de_results and make your decisions based on that. ierr = Get_number_of_items(de_results,no_elts);So a function return value of zero indicates that there is a drastic error. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is non zero even when you think it shouldbe.  For example, when nothing is entered into the box, the return code is -2, not 0.",
      "id": "1676"
    },
    {
      "names": [
        "Integer Set_data(Source_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Source_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2156"
    },
    {
      "names": [
        "Integer Get_data(Source_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Source_Edit_Box box and return it in text_data. text_data describes what has been selected in the Source_Box.  Because of all the choices it isvery complicated looking. A function return value of zero indicates the data was successfully returned.",
      "id": "2157"
    },
    {
      "names": [
        "Integer Read_favorite(Source_Box box, Text filename)"
      ],
      "description": "For the Source_Box box, read in and set the Source_Box selection from the file namedfilename. Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to besaved, and passed around between different Source_Box\u2019s. A function return value of zero indicates filename was read and the Source_Box wassuccessfully set.",
      "id": "2158"
    },
    {
      "names": [
        "Integer Write_favorite(Source_Box box, Text filename)"
      ],
      "description": "For the Source_Box box, write out the Source_Box selection information to the file namedfilename. Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to besaved, and passed around between different Source_Box\u2019s. A function return value of zero indicates the file was successfully written.",
      "id": "2159"
    },
    {
      "names": [
        "Symbol_Box Create_symbol_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Symbol_Box.  See 5. 61. 10. 36 Symbol_Box. The Symbol_Box is created with the title title_text. The Message_Box message is used to display information. The value of mode is listed in the Appendix A - Linestyle mode.  See Linestyle Mode. The function return value is the created Symbol_Box.",
      "id": "2170"
    },
    {
      "names": [
        "Integer Validate(Symbol_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Symbol_Box box and return the name of the symbol in Text result. The value of mode is listed in the Appendix A - Symbol mode.  See Symbol ModeThe function returns the value of:NO_NAME if the Widget Symbol_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2171"
    },
    {
      "names": [
        "Integer Get_data(Symbol_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Symbol_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Panels and WidgetsPage 1053\f12d Model Programming Language Manual",
      "id": "2172"
    },
    {
      "names": [
        "Integer Set_data(Symbol_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Symbol_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2173"
    },
    {
      "names": [
        "Target_Box Create_target_box(Text title_text, Message_Box box, Integer flags)"
      ],
      "description": "Create an input Widget of type Target_Box.  See 5. 61. 10. 37 Target_Box. The Target_Box is created with the title title_text. The Message_Box message is used to display information. The choices of targets are defined by flags.  See Target Box Flags. The function return value is the created Target_Box.",
      "id": "1677"
    },
    {
      "names": [
        "Target_Box Create_target_box(Text title, Message_Box message, Integer flags, Integer default_flag)"
      ],
      "description": "Create an input Widget of type Target_Box with default flag default_flag.  See 5. 61. 10. 37Target_Box. The Target_Box is created with the title title_text. The Message_Box message is used to display information. The choices of targets are defined by flags.  See Target Box Flags. The function return value is the created Target_Box.",
      "id": "3101"
    },
    {
      "names": [
        "Integer Validate(Target_Box box)"
      ],
      "description": "Validate the Target_Box box and return its choice as return value.  See Target Box Flags. A function return value of negative number indicates the call was not successful.",
      "id": "1678"
    },
    {
      "names": [
        "Integer Validate(Target_Box box, Integer &mode, Text &text_data)"
      ],
      "description": "Validate the Target_Box box and return its choice in mode.  See Target Box Flags. A function return value of zero indicates the call was successful.",
      "id": "2653"
    },
    {
      "names": [
        "Template_Box Create_template_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Template_Box.  See 5. 61. 10. 38 Template_Box. The Template_Box is created with the title title_text. The Message_Box message is used to display template information. The value of mode is listed in the Appendix A - Template mode. The function return value is the created Template_Box.",
      "id": "942"
    },
    {
      "names": [
        "Integer Validate(Template_Box box, Integer mode, Text &result)"
      ],
      "description": "Validate the contents of Template_Box box and return the Text result. The value of mode is listed in the Appendix A - Template mode.  See Template ModeThe value result must be type of Text. The function returns the value of:NO_NAME if the Widget Template_Box is optional and the box is left emptyNO_TEMPLATE, TEMPLATE_EXISTS, DISK_TEMPLATE_EXISTS or NEW_TEMPLATETRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "943"
    },
    {
      "names": [
        "Integer Get_data(Template_Box box, Text &text_data)"
      ],
      "description": "A function return value of zero indicates the data was successfully returned. Get the data of type Text from the Template_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Page 1058Panels and Widgets\fChapter",
      "id": "945"
    },
    {
      "names": [
        "Integer Set_data(Template_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Template_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "944"
    },
    {
      "names": [
        "Text_Style_Box Create_text_style_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input of type Text_Style_Box.  See 5. 61. 10. 39 Text_Style_Box. The Text_Style_Box is created with the title title_text. The Message_Box message is used to display the text style information. The function return value is the created Text_Style_Box.",
      "id": "950"
    },
    {
      "names": [
        "Integer Validate(Text_Style_Box box, Text &result)"
      ],
      "description": "Validate the contents of Text_Style_Box box and return name of the textstyle as the Text result. The function returns the value of:NO_NAME if the Widget Text_Style_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "951"
    },
    {
      "names": [
        "Integer Get_data(Text_Style_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Text_Style_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "953"
    },
    {
      "names": [
        "Integer Set_data(Text_Style_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Text_Style_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "952"
    },
    {
      "names": [
        "Text_Units_Box Create_text_units_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Text_Units_Box.  See 5. 61. 10. 40 Text_Units_Box. The Text_Units_Box is created with the title title_text. The Message_Box message is used to display the text units information. The function return value is the created Text_Units_Box.",
      "id": "954"
    },
    {
      "names": [
        "Integer Validate(Text_Units_Box box, Integer &result)"
      ],
      "description": "Validate the contents of Text_Units_Box box and return the Integer result. The function returns the value of:NO_NAME if the Widget Text_Units_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "955"
    },
    {
      "names": [
        "Integer Get_data(Text_Units_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Text_Units_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "957"
    },
    {
      "names": [
        "Integer Set_data(Text_Units_Box box, Integer integer_data)"
      ],
      "description": "Set the data of type Integer for the Text_Units_Box box to integer_data. A function return value of zero indicates the data was successfully set.",
      "id": "956"
    },
    {
      "names": [
        "Integer Set_data(Text_Units_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Text_Units_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1519"
    },
    {
      "names": [
        "Textstyle_Data_Box Create_textstyle_data_box(Text text, Message_Box box, Integer flags)"
      ],
      "description": "Create an input Widget of type Textstyle_Data_Box.  See 5. 61. 10. 41 Textstyle_Data_Box. The Textstyle_Data_Box is created with the title title_text. The Message_Box message is used to display the information. The Integer flags indicates enable fields in the textstyle data box. The function return value is the created Textstyle_Data_Box.",
      "id": "1671"
    },
    {
      "names": [
        "Textstyle_Data_Box Create_textstyle_data_box(Text text, Message_Box box, Integer flags, Integer optionals)"
      ],
      "description": "Create a new Textstyle_Data_Box with given Text text and Message_Box box. The new textstyle data box is returned as the function call result. The Integer flags indicates enable fields in the textstyle data box. The Integer optionals indicates optional fields in the textstyle data box.",
      "id": "2866"
    },
    {
      "names": [
        "Integer Validate(Textstyle_Data_Box box, Textstyle_Data &data)"
      ],
      "description": "Validate the contents of Textstyle_Data_Box box and return the Textstyle_Data data. The function returns the value of:NO_NAME if the Widget Textstyle_Data_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and data is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1672"
    },
    {
      "names": [
        "Integer Set_data(Textstyle_Data_Box box, Textstyle_Data data)"
      ],
      "description": "Set the data of type Textstyle_Data for the Textstyle_Data_Box box to data. A function return value of zero indicates the data was successfully set.",
      "id": "1673"
    },
    {
      "names": [
        "Integer Set_data(Textstyle_Data_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Texstyle_Data_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "2161"
    },
    {
      "names": [
        "Integer Get_data(Textstyle_Data_Box box, Textstyle_Data &data)"
      ],
      "description": "Get the data of type Textstyle_Data from the Textstyle_Data_Box box and return it in data. A function return value of zero indicates the data was successfully returned.",
      "id": "1674"
    },
    {
      "names": [
        "Integer Get_data(Textstyle_Data_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Textstyle_Data_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2160"
    },
    {
      "names": [
        "Text_Edit_Box Create_text_edit_box(Text title_text, Message_Box box, Integer no_lines)"
      ],
      "description": "Create an input Widget of type Text_Edit_Box.  See 5. 61. 10. 42 Text_Edit_Box. The Text_Edit_Box is created with the title title_text. The Message_Box box is used to display information. The number of lines allowed is no_lines. The function return value is the created Text_Edit_Box.",
      "id": "1372"
    },
    {
      "names": [
        "Integer Set_data(Text_Edit_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Text_Edit_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1374"
    },
    {
      "names": [
        "Integer Set_data(Text_Edit_Box widget, Dynamic_Text dt_data)"
      ],
      "description": "Set the data of type Dynamic_Text for the Text_Edit_Box widget to dt_data. A function return value of zero indicates the data was successfully set.",
      "id": "1617"
    },
    {
      "names": [
        "Integer Get_data(Text_Edit_Box widget, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Text_Edit_Box widget and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1373"
    },
    {
      "names": [
        "Integer Get_data(Text_Edit_Box widget, Dynamic_Text &dt_data)"
      ],
      "description": "Get the data of type Dynamic_Text from the Text_Edit_Box widget and return it in dt_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1616"
    },
    {
      "names": [
        "Integer Set_word_wrap(Text_Edit_Box box, Integer mode)"
      ],
      "description": "Disable the word wrap for the Text_Edit_Box box if and mode is zero, enable the word wrapotherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1596"
    },
    {
      "names": [
        "Integer Get_word_wrap(Text_Edit_Box box, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:0 if the word wrap is disable for the Text_Edit_Box box1 otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1597"
    },
    {
      "names": [
        "Integer Set_read_only(Text_Edit_Box widget, Integer mode)"
      ],
      "description": "Set the Text_Edit_Box box to read-only if mode is non-zero, disable read-only otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1598"
    },
    {
      "names": [
        "Integer Get_read_only(Text_Edit_Box widget, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:1 if the Text_Edit_Box box is read-only. 0 otherwise. A function return value of zero indicates that the function call was successful. Page 1070Panels and Widgets\fChapter",
      "id": "1599"
    },
    {
      "names": [
        "Integer Set_vertical_scroll_bar(Text_Edit_Box widget, Integer mode)"
      ],
      "description": "Disable the vertical scroll bar for the Text_Edit_Box box if and mode is zero, enable the verticalscroll bar otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1600"
    },
    {
      "names": [
        "Integer Get_vertical_scroll_bar(Text_Edit_Box widget, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:1 if the vertical scroll bar is enable for the Text_Edit_Box box0 otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1601"
    },
    {
      "names": [
        "Integer Set_horizontal_scroll_bar(Text_Edit_Box widget, Integer mode)"
      ],
      "description": "Disable the horizontal scroll bar for the Text_Edit_Box box if and mode is zero, enable thevertical scroll bar otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1602"
    },
    {
      "names": [
        "Integer Get_horizontal_scroll_bar(Text_Edit_Box widget, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:1 if the horizontal scroll bar is enable for the Text_Edit_Box box0 otherwise. A function return value of zero indicates that the function call was successful.",
      "id": "1603"
    },
    {
      "names": [
        "Texture_Box Create_texture_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Texture_Box.  See 5. 61. 10. 43 Texture_Box. The Texture_Box is created with the title title_text. The Message_Box message is used to display information. The function return value is the created Texture_Box.",
      "id": "1875"
    },
    {
      "names": [
        "Integer Validate(Texture_Box box, Text &result)"
      ],
      "description": "Validate the contents of Texture_Box box and return the name of the texture in Text result. The function returns the value of:NO_NAME if the Widget Texture_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1876"
    },
    {
      "names": [
        "Integer Set_data(Texture_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Texture_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1877"
    },
    {
      "names": [
        "Integer Get_data(Texture_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Texture_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1878"
    },
    {
      "names": [
        "Tick_Box Create_tick_box(Message_Box message)"
      ],
      "description": "Create an input Widget of type Tick_Box.  See 5. 61. 10. 44 Tick_Box. The Message_Box message is used to display the tick information. The function return value is the created Tick_Box.",
      "id": "958"
    },
    {
      "names": [
        "Integer Validate(Tick_Box box, Integer &result)"
      ],
      "description": "Validate result (of type Integer) in the Tick_Box box. Validate the contents of Tick_Box box and return the Integer result. result = 0result = 1if the tick box is untickedif the tick box is tickedA function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "959"
    },
    {
      "names": [
        "Integer Get_data(Tick_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Tick_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "961"
    },
    {
      "names": [
        "Integer Set_data(Tick_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Tick_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "960"
    },
    {
      "names": [
        "Tin_Box Create_tin_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Tin_Box for inputting and validating Tins. The Tin_Box is created with the title title_text (see 5. 61. 10. 45 Tin_Box). The Message_Box message is normally the message box for the panel and is used to displayModel_Box validation messages. If <enter> is typed into the Tin_Box or a tin selected from the tin pop-up list, automatic validationis performed by the Tin_Box according to mode.  What the validation is, what messages arewritten to Message_Box, and what actions automatically occur, depend on the value of mode. For example,CHECK_TIN_MUST_EXIST// if the tins exists, the message says \"exists\"\uf020// if it doesn\u2019t exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see Tin Mode). The function return value is the created Tin_Box.",
      "id": "962"
    },
    {
      "names": [
        "Integer Validate(Tin_Box box, Integer mode, Tin &result)"
      ],
      "description": "Validate the contents of Tin_Box box and return the Tin result. The value of mode will determine what validation occurs, what messages are written to theMessage_Box, what actions are taken and what the function return value is. The values for mode and the actions are listed in Appendix A (see Tin Mode). The function return values depends on mode and are given in Appendix A (see Tin Mode). A function return value of zero indicates that there is a drastic error. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is not zero even when you think it shouldbe.  The actual value of the function return code must be checked to see what is going on.  Forexample, when mode = CHECK_TIN_MUST_EXIST will return NO_TIN if the tin name is notblank and no tin of that name exist (NO_TIN does not equal zero).",
      "id": "963"
    },
    {
      "names": [
        "Integer Get_data(Tin_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Tin_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "965"
    },
    {
      "names": [
        "Integer Set_data(Tin_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Tin_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "964"
    },
    {
      "names": [
        "Integer Set_supertin(Tin_Box box, Integer mode)"
      ],
      "description": "For the Tin_box box, set whether the pop up for the Tin_ box shows tins and super tins, or onlytins. If mode = 0, only tins are displayed in the pop-up. If mode = 1, only tins and super tins are displayed in the pop-up. A function return value of zero indicates the data was successfully set.",
      "id": "1311"
    },
    {
      "names": [
        "Integer Set_tin_type(Tin_Box box, Integer type)"
      ],
      "description": "Set the type of acceptable tin for the Tin_Box box to type. The valid types of tin are: 1 normal tin, 2 super tin, 3 grid tin. A return value of zero indicates the function call was successful.",
      "id": "2894"
    },
    {
      "names": [
        "Integer Set_tin_type(Tin_Box box, Integer type, Integer type2)"
      ],
      "description": "Set the type of acceptable tin for the Tin_Box box to type, type2. The valid types of tin are: 1 normal tin, 2 super tin, 3 grid tin. A return value of zero indicates the function call was successful.",
      "id": "2895"
    },
    {
      "names": [
        "Integer Set_tin_type(Tin_Box box, Integer type, Integer type2, Integer type3)"
      ],
      "description": "Set the type of acceptable tin for the Tin_Box box to type, type2, type3. The valid types of tin are: 1 normal tin, 2 super tin, 3 grid tin. A return value of zero indicates the function call was successful.",
      "id": "2896"
    },
    {
      "names": [
        "Integer Set_all_tin_types(Tin_Box box)"
      ],
      "description": "Set the type of acceptable tin for the Tin_Box box to all types. A return value of zero indicates the function call was successful.",
      "id": "2897"
    },
    {
      "names": [
        "Integer Set_tin_mode(Tin_Box box, Integer mode)"
      ],
      "description": "Set the mode the Tin_Box box to mode. The valid modes for tin are: 1 section, 2 exact. A return value of zero indicates the function call was successful.",
      "id": "2898"
    },
    {
      "names": [
        "Integer Set_tin_mode(Tin_Box box, Integer mode, Integer mode2)"
      ],
      "description": "Set the mode the Tin_Box box to mode, mode2. The valid modes for tin are: 1 section, 2 exact. Page 1082Panels and Widgets\fChapterA return value of zero indicates the function call was successful.",
      "id": "2899"
    },
    {
      "names": [
        "Integer Set_all_tin_modes(Tin_Box box)"
      ],
      "description": "Set the mode the Tin_Box box to all modes. A return value of zero indicates the function call was successful.",
      "id": "2900"
    },
    {
      "names": [
        "Integer Set_tin_access(Tin_Box box, Integer access)"
      ],
      "description": "Set the access type of the Tin_Box box to access. The valid tin access types are: 1 read access, 2 write access. A return value of zero indicates the function call was successful.",
      "id": "2901"
    },
    {
      "names": [
        "Integer Set_tin_access(Tin_Box box, Integer access, Integer access2)"
      ],
      "description": "Set the access type of the Tin_Box box to access, access2. The valid tin access types are: 1 read access, 2 write access. A return value of zero indicates the function call was successful.",
      "id": "2902"
    },
    {
      "names": [
        "View_Box Create_view_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type View_Box for inputting and validating Views. The View_Box is created with the title title_text (see 5. 61. 10. 46 View_Box). The Message_Box message is normally the message box of the panel and is used to display theView_Box validation messages. If an <enter> is typed in the View_Box or a view selected from the view pop-up list, automaticvalidation is performed by the View_Box according to mode - what the validation is, whatmessages are written to Message_Box, and what actions automatically occur, depend on thevalue of mode. For example,CHECK_TIN_MUST_EXIST// if the model exists, the message says \"exists\" and\uf020// if it doesn\u2019t exist, the messages says \"ERROR\"The value of mode and their actions are listed in Appendix A (see View Mode). The function return value is the created View_Box.",
      "id": "966"
    },
    {
      "names": [
        "Integer Validate(View_Box box, Integer mode, View &result)"
      ],
      "description": "Validate the contents of View_Box box and return the View result. The value of mode will determine what validation occurs, what messages are written to theMessage_Box, what actions are taken and what the function return value is. The values for mode and the actions are listed in Appendix A (see View Mode). The function return value depends on mode and are given in Appendix A (see View Mode). A function return value of zero indicates that there is a drastic error. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is not zero even when you think it shouldbe.  The actual value of the function return code must be checked to see what is going on.  Forexample, when mode = CHECK_VIEW_MUST_EXIST will return NO_VIEW if the view name isnot blank and no view of that name exist (NO_VIEW does not equal zero).",
      "id": "967"
    },
    {
      "names": [
        "Integer Get_data(View_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the View_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "969"
    },
    {
      "names": [
        "Integer Set_data(View_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the View_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "968"
    },
    {
      "names": [
        "Integer Set_view_type(View_Box box, Integer type)"
      ],
      "description": "Set acceptable view type for View_box box with Integer type. A return value of 0 indicates the function call was successful. List of values for view type1 Plan,2 Perspective,3 Section,4 Hidden,A return value of zero indicates the function call was successful.",
      "id": "2942"
    },
    {
      "names": [
        "Integer Set_view_type(View_Box box, Integer type, Integer type2)"
      ],
      "description": "Set acceptable view types for View_box box with Integer type, type2. A return value of 0 indicates the function call was successful. List of values for view type1 Plan,2 Perspective,3 Section,4 Hidden,A return value of zero indicates the function call was successful.",
      "id": "2943"
    },
    {
      "names": [
        "Integer Set_view_type(View_Box box, Integer type, Integer type2, Integer type3)"
      ],
      "description": "Set acceptable view types for View_box box with Integer type, type2, type3. A return value of 0 indicates the function call was successful. List of values for view type1 Plan,2 Perspective,3 Section,4 Hidden,A return value of zero indicates the function call was successful.",
      "id": "2944"
    },
    {
      "names": [
        "Integer Set_all_view_types(View_Box box)"
      ],
      "description": "Set acceptable view types for View_box box with all view types. A return value of zero indicates the function call was successful.",
      "id": "2945"
    },
    {
      "names": [
        "Integer Set_view_engine(View_Box box, Integer mode)"
      ],
      "description": "Set view engine mode for View_Box box with Integer mode. A return value of zero indicates the function call was successful. List of value for view engine mode1 GDI2 OpenGL3 OpenGL GPU",
      "id": "2946"
    },
    {
      "names": [
        "XYZ_Box Create_xyz_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type XYZ_Box.  See 5. 61. 10. 47 XYZ_Box. The XYZ_Box is created with the title title_text. The Message_Box message is used to display the XYZ information. The function return value is the created XYZ_Box.",
      "id": "970"
    },
    {
      "names": [
        "Integer Validate(XYZ_Box box, Real &x, Real &y, Real &z)"
      ],
      "description": "Validate the contents of the XYZ_Box box and check it decodes to three Reals. The three Reals are returned in x, y, and z. The function returns the value of:NO_NAME if the Widget XYZ_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and x, y and z are valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "971"
    },
    {
      "names": [
        "Integer Get_data(XYZ_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the XYZ_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "973"
    },
    {
      "names": [
        "Integer Set_data(XYZ_Box box, Real x, Real y, Real z)"
      ],
      "description": "Set the x y z data (all of type Real) for the XYZ_Box box to the values x, y and z. A function return value of zero indicates the data was successfully set.",
      "id": "972"
    },
    {
      "names": [
        "Integer Set_data(XYZ_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the XYZ_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "1520"
    },
    {
      "names": [
        "Colour_Message_Box Create_colour_message_box(Text message_text)"
      ],
      "description": "Create a box of type Colour_Message_Box for writing out messages.  See 5. 61. 11. 1Colour_Message_Box. The Colour_Message_Box is created with the text message_text displayed in it. The background colour of the display area is set using Set_level (Colour_Message_Box, level),or can be set with the message using Set_data(Colour_Message_Box box,Text text_data,Integerlevel)). The function return value is the created Colour_Message_Box.",
      "id": "2629"
    },
    {
      "names": [
        "Integer Set_data(Colour_Message_Box box, Text text_data, Integer level)"
      ],
      "description": "Page 1092Panels and Widgets\fChapterSet the data of type Text for the Colour_Message_Box box as the Text text_data. If the Colour_Message_Box box is on a panel then the message text_data will be displayed inthe information area of box with the background colour of the box set by level. A function return value of zero indicates the data was successfully set.",
      "id": "2632"
    },
    {
      "names": [
        "Integer Set_data(Colour_Message_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Colour_Message_Box box as the Text text_data. If the Colour_Message_Box box is on a panel then the message text_data will be displayed inthe information area of box with the background colour previously defined by the Set_level call. A function return value of zero indicates the data was successfully set.",
      "id": "2631"
    },
    {
      "names": [
        "Integer Set_level(Colour_Message_Box box, Integer level)"
      ],
      "description": "Setting level defines the background colour to use when text messages are displayed inthe information area of box.  This level will be over ridden if theSet_data(Colour_Message_Box box,Text text_data,Integer level) call is used. For level = 1, the colour is normal. For level = 2, the colour is yellow (for Warning)For level = 3, the colour is red (for Error)For level = 4, the colour is green (for Good)If no Set_level call is made then the default level is 1. A function return value of zero indicates the level was successfully set.",
      "id": "2630"
    },
    {
      "names": [
        "Message_Box Create_message_box(Text message_text)"
      ],
      "description": "Create a box of type Message_Box for writing out messages.  See 5. 61. 11. 2 Message_Box. The Message_Box is created with the text message_text displayed in it. The function return value is the created Message_Box.",
      "id": "847"
    },
    {
      "names": [
        "Integer Get_data(Message_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Message_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "1037"
    },
    {
      "names": [
        "Integer Set_data(Message_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Message_Box box as the Text text_data. If the Message_Box box is on a panel then the message text_data will be displayed in thePage 1094Panels and Widgets\fChapterinformation area of box. A function return value of zero indicates the data was successfully set.",
      "id": "1038"
    },
    {
      "names": [
        "Log_Box Create_log_box(Text name, Integer box_width, Integer box_height)"
      ],
      "description": "Create an input Widget of type Log_Box with the message area defined by the parametersbox_width, box_height which are in screen units (pixels). See 5. 61. 12 Log_Box and Log_Lines. A Log_Box behaves like the standard 12d Model Output Window but may be added to a Panelor Vertical / Horizontal group. Log_Lines are the method of passing messages to the Log_Box. The function return value is the created Log_Box.",
      "id": "2671"
    },
    {
      "names": [
        "Log_Line Create_text_log_line(Text message, Integer log_level)"
      ],
      "description": "Create a Text Log_Line with the message message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. icons for log_level\u2019sWARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2663"
    },
    {
      "names": [
        "Log_Line Create_highlight_string_log_line(Text message, Integer log_level, Uid model_id, Uid string_id)"
      ],
      "description": "Create a Highlight String Log_Line giving a string by its model Uid model_id and string Uidstring_id, a text message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. If LB is clicked on the log line, the string will be highlighted. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. highlight string log line with log level 2Clicking LB on the Highlight String log line highlights the string in each view the string is on,and autopans to the string. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2664"
    },
    {
      "names": [
        "Log_Line Create_highlight_string_log_line(Text message, Integer log_level, Uid model_id, Uid string_id, Real x, Real y, Real z)"
      ],
      "description": "Create a Highlight String Log_Line giving a string by its model Uid model_id and string Uidstring_id, a coordinate (x,y,z) on the string, a text message and a log level log_level. Page 1098Panels and Widgets\fChapterThe text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. If LB is clicked on the log line, the coordinate (x,y,z) on the string, and the string, will behighlighted. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. highlight string (with xyz) log line and log level 2Clicking LB on the highlight string (with xyz) log line highlights the string at the given position(x,y,z) in each view the string is on, and autopans to the string. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2665"
    },
    {
      "names": [
        "Log_Line Create_highlight_point_log_line(Text message, Integer log_level, Real x, Real y, Real z)"
      ],
      "description": "Create a Log_Line giving a coordinate (x,y,z). If LB is clicked on the log line, the coordinate (x,y,z) will be highlighted. LJG? on which views?It also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for WarningPanels and WidgetsPage 1099\f12d Model Programming Language Manual3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2666"
    },
    {
      "names": [
        "Log_Line Create_edit_string_log_line(Text message, Integer log_level, Uid model_id, Uid string_id)"
      ],
      "description": "Create an Edit Log_Line giving a string by its model Uid model_id and string Uid string_id, atext message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. If LB is clicked on the log line, the string will be highlighted. If LB is double clicked on the log line, the string is edited. If RB is clicked on the log line then an Options menu is displayed with the choices:Edit the stringDelete the stringShow the string propertiesNot applicableIt also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. Page 1100Panels and Widgets\fChapteredit string log line with log level 1Clicking LB on the edit string log line highlights the string in each view the string is on, andautopans to the string. Double clicking LB on the edit string log line highlights and edits the string.  That is, ithighlights the string and also brings the string up in its editorClicking RB on the edit string log line brings up the Options for the stringWARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2667"
    },
    {
      "names": [
        "Log_Line Create_macro_log_line(Text message, Integer log_level, Text macro, Text select_cmd_line)"
      ],
      "description": "This call creates a log line that will allow the user to run a macro when the log line is doubleclicked.  The macro is specified by the parameter macro and any optional arguments to bepassed to it are specified by cmd_line. It also displays the text message message and has a log level log_level. Available log levels are0 for none1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2668"
    },
    {
      "names": [
        "Log_Line Create_macro_log_line(Text message, Integer log_level, Text macro, Text select_cmd_line, Dynamic_Text menu_names, Dynamic_Text menu_command_lines)"
      ],
      "description": "This call creates a log line that will allow the user to run a macro when the log line is doubleclicked.  The macro is specified by the parameter macro and any optional arguments to bepassed to it are specified by cmd_line. This log line also provides options in a context menu when the user right clicks it.  There are twoparameters required; a list of all the names to be displayed in the menu, stored in aDynamic_Text object called menu_names and the list of arguments to be passed down to themacro when the menu item is selected, stored in menu_command_lines. It also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. Page 1102Panels and Widgets\fChapterThe function return code is the created Log_Line.",
      "id": "2669"
    },
    {
      "names": [
        "Integer Add_log_line(Log_Box box, Log_Line line)"
      ],
      "description": "Add the Log_Line line to the existing Log_Box box. WARNINGTo be visible, a Log_Line is added to a Log_Box using the call Add_log_line(Log_Box box,Log_Lineline) BUT this call can only be made after the Log_Box is displayed in a panel using theShow_panel call. Note that each Log_Line can be added at most one time; the add destination can be one of thethree types: Output window; a Log_Box; or a parent Log_Line group.  If the line is already added,then the function will return -1. A function return value of zero indicates the Log_Line was successfully added.",
      "id": "2672"
    },
    {
      "names": [
        "Integer Clear(Log_Box box)"
      ],
      "description": "Clear any text and log lines from a Log_Box box. A function return value of zero indicates the Log_Box was successfully cleared.",
      "id": "2673"
    },
    {
      "names": [
        "Integer Print_log_line(Log_Line line, Integer is_error)"
      ],
      "description": "Print the Log_Line line to the 12d Model Output window. If is_error = 1, the Output window will treat the Log_line as an error message and the Outputwindow will flash and/or pop up). Note that each Log_Line can be added at most one time; the add destination can be one of thethree types: Output window; a Log_Box; or a parent Log_Line group.  If the line is already added,then the function will return -1. A function return value of zero indicates the Log_Line was successfully printed.",
      "id": "2670"
    },
    {
      "names": [
        "Log_Line Create_group_log_line(Text message, Integer log_level)"
      ],
      "description": "Create a group Log_Line with the message message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panelusing the Show_panel call. The function return code is the created group Log_Line.",
      "id": "3757"
    },
    {
      "names": [
        "Integer Get_type(Log_Line line, Integer &type)"
      ],
      "description": "Get the type of a given Log_Line line and return it in Integer type. The value of type can be ???As in v14 c2g the value is always 0. A function return value of zero indicates the type was successfully returned.",
      "id": "3758"
    },
    {
      "names": [
        "Integer Get_type(Log_Line line, Text &type)"
      ],
      "description": "Get the type of a given Log_Line line and return it in Text type. The value of type can be ???As in v14 c2g the value is always empty string. A function return value of zero indicates the type was successfully returned.",
      "id": "3759"
    },
    {
      "names": [
        "Integer Get_id(Log_Line line, Integer &id)"
      ],
      "description": "Get the Id of a given Log_Line line and return it in Integer id. A function return value of zero indicates the id was successfully returned.",
      "id": "3760"
    },
    {
      "names": [
        "Integer Get_parent_id(Log_Line line, Integer &parent)"
      ],
      "description": "Get the Id of the parent of a given Log_Line line and return it in Integer parent. A function return value of zero indicates the id was successfully returned.",
      "id": "3761"
    },
    {
      "names": [
        "Integer Get_parent(Log_Line line, Log_Line &parent)"
      ],
      "description": "Get the parent of a given Log_Line line and return it in Log_Line parent. A function return value of zero indicates the parent was successfully returned.",
      "id": "3762"
    },
    {
      "names": [
        "Integer Append_log_line(Log_Line line, Log_Line parent)"
      ],
      "description": "Append a given Log_Line line to a parent Log_Line group parent. If the parent is not a group, the function return -3. Note that each Log_Line can be added at most one time; the add destination can be one of thethree types: Output window; a Log_Box; or a parent Log_Line group.  If the line is already added,then the function will return -4. A function return value of zero indicates the append was successful.",
      "id": "3763"
    },
    {
      "names": [
        "Button Create_button(Text title_text, Text reply)"
      ],
      "description": "Create a Widget of type Button. The Button is created with title_text a the text on the Button. The Text reply is the command that is sent by the Button back to the macro via Wait_on_widgetswhen the Button is clicked on.  See Wait_on_widgets(Integer &id,Text &cmd,Text &msg). The function return value is the created Button.",
      "id": "850"
    },
    {
      "names": [
        "Button Create_button(Text title_text, Text reply, Text bitmap_name)"
      ],
      "description": "Create a Widget of type Button. The Button is created with image using file named bitmap_name and title_text a the text on theButton. The Text reply is the command that is sent by the Button back to the macro via Wait_on_widgetswhen the Button is clicked on.  See Wait_on_widgets(Integer &id,Text &cmd,Text &msg). The function return value is the created Button.",
      "id": "7672"
    },
    {
      "names": [
        "Integer Set_raised_button(Button button, Integer mode)"
      ],
      "description": "Not yet implementedSet the button raised or sank depending on the mode value. mode-303valueRaiseFlatSinkA function return value of zero indicates the button was successfully raised.",
      "id": "1058"
    },
    {
      "names": [
        "Button Create_child_button(Text title_text)"
      ],
      "description": "Not implemented.",
      "id": "851"
    },
    {
      "names": [
        "Button Create_finish_button(Text title_text, Text reply)"
      ],
      "description": "Creates a Finish Button with title_text the text on the Button. The Text reply is the command that is sent by the Button back to the macro via Wait_on_widgetswhen the Button is clicked on.  See Wait_on_widgets(Integer &id,Text &cmd,Text &msg). This is a special button and there should only be one per panel.  The title_text is normally \"Finish\"At the end of the processing in the macro, Set_finish_button (see Set_finish_button(Widgetpanel,Integer move_cursor)) should be called to put the cursor on the Finish button. Set_finish_button needs to be called so that chains know that the macro has terminatedcorrectly. The function return value is the created Button.",
      "id": "1367"
    },
    {
      "names": [
        "Integer Set_finish_button(Widget panel, Integer move_cursor)"
      ],
      "description": "If move_cursor = 1 then the cursor is moved onto the finish button. Panels and WidgetsPage 1109\f12d Model Programming Language Manual",
      "id": "1368"
    },
    {
      "names": [
        "Select_Button Create_select_button(Text title_text, Integer mode, Message_Box box)"
      ],
      "description": "Create a button of type Select_Button. This is a special Button that when clicked, allows the user to select a string. The button is created with the label text title_text. The Message_Box box is selected to display the select information. The value of mode is:modevalueSELECT_STRING5509Panels and WidgetsPage 1111\f12d Model Programming Language ManualSELECT_STRINGS5510not implemented!Refer to the list in the Appendix A. The function return value is the created Select_Button. Note The Select_Button is now rarely used and has been replaced by the New_Select_Box orthe Select_Box.  See 5. 61. 10. 24 New_Select_Box and 5. 61. 10. 31 Select_Box",
      "id": "881"
    },
    {
      "names": [
        "Integer Validate(Select_Button select, Element &string)"
      ],
      "description": "Validate the Element string that is selected via the Select_Button select. The function returns the value of:TRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "978"
    },
    {
      "names": [
        "Integer Validate(Select_Button select, Element &string, Integer silent)"
      ],
      "description": "Validate the contents of Select_Button select and return the selected Element in string. If silent = 0, and there is an error, a message is written and the cursor goes back to the button. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:TRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1375"
    },
    {
      "names": [
        "Integer Set_data(Select_Button select, Element string)"
      ],
      "description": "Sets the Element for the Select_Button select to string. A function return value of zero indicates the data was successfully set.",
      "id": "1173"
    },
    {
      "names": [
        "Integer Set_data(Select_Button select, Text string)"
      ],
      "description": "Set the model and string name as a Text string in the form \"model_name->string_name\"A function return value of zero indicates the data was successfully set.",
      "id": "979"
    },
    {
      "names": [
        "Integer Get_data(Select_Button select, Text &string)"
      ],
      "description": "Get the model and string name for the selected string in the form \"model_name->string_name\". Return the Text in string. The returned string type must be Text. A function return value of zero indicates the data was successfully returned.",
      "id": "980"
    },
    {
      "names": [
        "Integer Select_start(Select_Button select)"
      ],
      "description": "Starts the string selection for the Select_Button select.  This is the same as if the button had beenclicked. A function return value of zero indicates the start was successful.",
      "id": "1167"
    },
    {
      "names": [
        "Integer Select_end(Select_Button select)"
      ],
      "description": "Cancels the string selection that is running for the Select_Button select.  This is the same as ifCancel had been selected from the Pick Ops menu. A function return value of zero indicates the end was successful.",
      "id": "1168"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Button select, Text type)"
      ],
      "description": "Set the type of the string that can be selected to type for Select_Botton select.  For example\u201cAlignment\u201d, \u201c3d\u201d. A function return value of zero indicates the type was successfully set.",
      "id": "1043"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Button select, Integer snap_control)"
      ],
      "description": "Set the snap control snap_control for the Select_Button select. modevalueIgnore_Snap0User_Snap1Program_Snap2A function return value of zero indicates the type was successfully set.",
      "id": "1044"
    },
    {
      "names": [
        "Integer Get_select_direction(Select_Button select, Integer &dir)"
      ],
      "description": "Get the select_direction dir from the selected string. The returned dir type must be Integer. If select without direction, the returned dir is 1, otherwise, the returned dir:Value1-1Pick directionthe direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully returned.",
      "id": "1046"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Button select, Integer mode, Integer control, Text text)",
        "Integer Get_select_coordinate(Select_Button select, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Page 1114Panels and Widgets\fChapterSet the snap mode mode and snap control controlfor the Select_Button select. When snap mode is:Name_SnapTin_SnapModel_Snap678the snap_text must be string name; tin name, model name accordingly, otherwise, leave thesnap_text blank \u201c\u201d. A function return value of zero indicates the type was successfully set. Get_select_coordinate(Select_Button select,Real &x,Real &y,Real &z,Real&ch,Real &ht)Get the coordinate of the selected snap point. The return value of x, y, z, ch and ht must be type of Real. A function return value of zero indicates the coordinate was successfully returned.",
      "id": "1047"
    },
    {
      "names": [
        "Button Create_help_button(Panel panel, Text title_txt)"
      ],
      "description": "Create a button with the title title_text and return it as the function return value. To set up the file for extra help, see How to Set Up Extra Help.",
      "id": "2633"
    },
    {
      "names": [
        "GridCtrl_Box Create_gridctrl_box(Text name, Integer num_rows, Integer num_columns, Widget column_widgets[], Integer show_nav, Message_Box messages, Integer width, Integer height)"
      ],
      "description": "This call creates a new GridCtrl_Box object which can be added to Panels. name is the name of the GridCtrl_Box and the number of rows that the grid initially has isnum_rows and the number of columns is num_columns (rows can also be added or deletedafter the GridCtrl_Box has been displayed). column_widgets[] is an array of Widgets in column order, and each Widget is of the type for thatcolumn.  For an example see 5. 61. 14 GridCtrl_Box. If show_nav is 1 then there are navigation boxes on the side of the GridCtrl_Box. If show_nav is 0 then there are no navigation boxes. The width of the grid cell is width and the height of the grid cell is height, The units for width andheight are screen units (pixels). Important note: All Boxes, even through they have names like Real_Box and Input_Box,derived from Widgets and can be used in many options that take a Widget.  For exampleShow_widget.  However for the array of widgets column_widgets[ ] defining the GridCtrl_Boxcolumns, the array values need to be Widget and so the other types derived from Widget have tobe cast to a Widget before they can be used to fill the column_widgets[] array.  The cast is easilydone by simply having the following cast function defined and in your macro code. Widget cast(Widget w){return w;}See 5. 61. 14 GridCtrl_Boxfor an example of using cast when defining values forcolumn_widgets[]. GridCtrl_Box with two row and three columns with column types Real_Box, Input_Box, Tick_BoxThe titles of the Widgets are the headings for the columnsshow_nav = 1so navigation boxesGrid navigationboxesshow_nav = 0so navigation boxesIf the rows and columns are too large to fit inside the area defined by width and height, scroll barsare automatically created so that all cells can be reached. Panels and WidgetsPage 1119\f12d Model Programming Language ManualA vertical scroll bar is automatically addedwhen the rows are wider than thegiven heightA horizontal scroll bar is automatically added whenthe columns are wider than the given widthThe created GridCtrl_Box is returned as the function return value.",
      "id": "2393"
    },
    {
      "names": [
        "GridCtrl_Box Create_gridctrl_box(Text name, Integer num_rows, Integer num_columns, Widget column_widgets[], Integer column_readonly[], Integer show_nav, Message_Box messages, Integer width, Integer height)"
      ],
      "description": "This call creates a new GridCtrl_Box object which can be added to Panels. This is the same as the previous GridCtrl_Box function except that there is also the arraycolumn_readonly[] wherecolumn_readonly[] is an Integer array of size num_columns where a value of 1 means that thecell is read only, and 0 means that the cell can be edited. To set only the middle columnto be read only Integer column_readonly[3];column_readonly[1] = 0;column_readonly[2] = 1;column_readonly[3] = 0;Second column is read onlySee Create_gridctrl_box(Text name,Integer num_rows,Integer num_columns,Widgetcolumn_widgets[],Integer show_nav,Message_Box messages,Integer width,Integer height) formore documentation for this function. Page 1120Panels and Widgets\fChapterThe created GridCtrl_Box is returned as the function return value.",
      "id": "2654"
    },
    {
      "names": [
        "Integer Load_widgets_from_row(GridCtrl_Box grid, Integer row_num)"
      ],
      "description": "Let column_widgets[] be the array that was used to define the GridCtrl_Box columns in theCreate_gridcltrl_box call.  See Create_gridctrl_box(Text name,Integer num_rows,Integernum_columns,Widget column_widgets[],Integer show_nav,Message_Box messages,Integerwidth,Integer height). Load_widgets_from_row loads the values in row row_num of the GridCtrl_Box grid intocolumn_widgets[]. Load_widgets_from_row allows you to validate grid values for a row, or to get the values to usefor other purposes. To change grid values, you first call Load_widgets_from_row to place the existing values for arow into column_widgets[], change the values that you wish to change in column_widgets[],and then call Load_row_from_widgets to load the new values from column_widgets[] back intothe row.  See Load_row_from_widgets(GridCtrl_Box grid,Integer row_num). Note - this call can only be made after the Show_widget call is made to display the panelcontaining the GridCtrl_Box. A function return value of zero indicates the load was successful.",
      "id": "2394"
    },
    {
      "names": [
        "Integer Load_row_from_widgets(GridCtrl_Box grid, Integer row_num)"
      ],
      "description": "Let column_widgets[] be the array that was used to define the GridCtrl_Box columns in theCreate_gridcltrl_box call.  See Create_gridctrl_box(Text name,Integer num_rows,Integernum_columns,Widget column_widgets[],Integer show_nav,Message_Box messages,Integerwidth,Integer height). Load_row_from_widgets loads the values of column_widgets[] into row row_num of theGridCtrl_Box grid. Note - this call can only be made after the Show_widget call is made to display the panelcontaining the GridCtrl_Box. A function return value of zero indicates the load was successful.",
      "id": "2395"
    },
    {
      "names": [
        "Integer Insert_row(GridCtrl_Box grid)"
      ],
      "description": "This call inserts a blank row at the bottom of the GridCtrl_Box grid. Note - this call can only be made after the Show_widget call is made to display the panelcontaining the GridCtrl_Box. A function return value of a positive number indicates the insertion was successful; and thenumber should equal the number of rows after the insertion.",
      "id": "2396"
    },
    {
      "names": [
        "Integer Insert_row(GridCtrl_Box grid, Integer row_num, Integer is_before)"
      ],
      "description": "This call inserts a blank row into the GridCtrl_Box grid. If is_before = 1, a blank row is inserted before row_num, so that the blank row becomes thenew row_num\u2019th row.  The old rows from row row_num onwards are all pushed down one row. If is_before = 0, a blank row is after row row_num, so that the blank row becomes a new(num_row+1)\u2019th row.  The old rows from row (num_row+1) onwards are pushed down one row. t row number row_num of the GridCtrl_Box grid. If you wish it to be inserted before the specified row, set is_before to 1, otherwise the row will beinserted after. Note: a GridCtrl_Box(grid) call should be done after the Insert_row(GridCtrl_Box grid,Integerrow_num,Integer is_before) call.  See Format_grid(GridCtrl_Box grid). A function return value of a positive number indicates the insertion was successful; and thenumber should equal the number of rows after the insertion.",
      "id": "2397"
    },
    {
      "names": [
        "Integer Delete_row(GridCtrl_Box grid, Integer row_num)"
      ],
      "description": "Delete the row row_num from the GridCtrl_Box grid. A function return value of zero indicates the row was successfully deleted.",
      "id": "2408"
    },
    {
      "names": [
        "Integer Delete_all_rows(GridCtrl_Box grid)"
      ],
      "description": "Delete all the rows of the GridCtrl_Box grid. A function return value of zero indicates the rows were successfully deleted.",
      "id": "2409"
    },
    {
      "names": [
        "Integer Get_row_count(GridCtrl_Box grid)"
      ],
      "description": "This call returns the number of rows currently in a GridCtrl_Box grid as the function return value.",
      "id": "2398"
    },
    {
      "names": [
        "Integer Format_grid(GridCtrl_Box grid)"
      ],
      "description": "This call formats the GridCtrl_Box grid. This means it makes sure all columns and rows are large enough to fit any entered data. A function return value of zero indicates the format was successful.",
      "id": "2399"
    },
    {
      "names": [
        "Integer Set_cell(GridCtrl_Box grid, Integer row_num, Integer col_num, Text value)"
      ],
      "description": "For the cell with row number row_num and column number col_num of the GridCtrl_Box grid,set the text value of the cell to text. It is recommended that you use the Load_row_from_widgets call, as this call will not provideany validation of data. This call will return 0 if successful. A function return value of zero indicates the set was successful.",
      "id": "2400"
    },
    {
      "names": [
        "Integer Get_cell(GridCtrl_Box grid, Integer row_num, Integer col_num, Text &value)"
      ],
      "description": "Get the text value of the cell at row number row_num and column number col_num of theGridCtrl_Box grid, and returns the text in value. It is recommended that you use the Load_widgets_from_row call instead, as this call will notprovide any validation of data. A function return value of zero indicates the get was successful.",
      "id": "2401"
    },
    {
      "names": [
        "Integer Set_column_width(GridCtrl_Box grid, Integer col, Integer width)"
      ],
      "description": "For the GridCtrl_Box grid, set the width of column number col to width.  The units of width arescreen units (pixels). The column can be made invisible by setting its width to 0. A function return value of zero indicates the width was successfully set.",
      "id": "2402"
    },
    {
      "names": [
        "Integer Set_modified(GridCtrl_Box grid, Integer modified)"
      ],
      "description": "This call sets the modified state of the GridCtrl_Box grid. If modified = 0 then the modified state is set to off. If modified = 1 then the modified state is set to on. A function return value of zero indicates the modified state was successfully set.",
      "id": "2403"
    },
    {
      "names": [
        "Integer Set_warn_on_modified(GridCtrl_Box grid, Integer warn_on_modified)"
      ],
      "description": "This call sets the warn on modified state of the GridCtrl_Box grid. If warn_on_modified = 1 then if the panel containing grid is being closed and grid is in a modifiedstate, then the user is prompted to confirm that grid is to be closed. If warn_on_modified = 0 then there is no warning when the panel containing grid is being closedeven if the panel has been modified. Note: a GridCtrl_Box is in a in a modified state if data in the GridCtrl_Box has been changed andthe modified state has not been set off by a Set_modified(grid,0) call.  SeeSet_modified(GridCtrl_Box grid,Integer modified)The default for a GridCtrl_Box is that a warning is given when attempting to close it. A function return value of zero indicates the warn on modified state was successfully set.",
      "id": "2404"
    },
    {
      "names": [
        "Integer Get_selected_cells(GridCtrl_Box grid, Integer &start_row, Integer &start_col, Integer &end_row, Integer &end_col)"
      ],
      "description": "For the GridCtrl_Box grid, return the minimum and maximum row and column numbers for thecurrent selected cells (the range of the selected cells). The minimum and maximums are returned in start_row, start_col and end_row and end_col. Note that not all the cells in the range need to be selected. start_row = 2start_col= 1end_row = 4end_col = 4The function return value is zero if there are selected cells and the range is returned successfully. The function return value is non-zero is there are no selected rows.",
      "id": "2410"
    },
    {
      "names": [
        "Integer Set_fixed_row_count(GridCtrl_Box grid, Integer num_fixed_rows)"
      ],
      "description": "Sets the number of fixed rows in the GridCtrl_Box grid. Fixed rows can not be deleted or moved and rows can not be inserted between two other fixedrows. A function return value of zero indicates the set was successful.",
      "id": "2655"
    },
    {
      "names": [
        "Integer Get_fixed_row_count(GridCtrl_Box grid)"
      ],
      "description": "Gets the number of fixed rows in the GridCtrl_Box grid. Fixed rows can not be deleted or moved and rows can not be inserted between two other fixedrows. The number of fixed rows is returned as the function return value.",
      "id": "2656"
    },
    {
      "names": [
        "Integer Set_cell_read_only(GridCtrl_Box grid, Integer row, Integer col, Integer read_only)"
      ],
      "description": "For the GridCtrl_Box grid, set the cell specified by row row and column col as read only. Note that colouring may be removed when grid is formatted and the format_grid messageshould be trapped to reapply these settings. A function return value of zero indicates the set was successful.",
      "id": "2657"
    },
    {
      "names": [
        "Integer Get_cell_read_only(GridCtrl_Box grid, Integer row, Integer col)"
      ],
      "description": "For the GridCtrl_Box grid, check if the cell specified by row row and column column is readonly. The function return value is:1 if the cell is read onlyzero if the cell is not read only.",
      "id": "2658"
    },
    {
      "names": [
        "Integer Set_cell_colour(GridCtrl_Box grid, Integer row, Integer col, Integer colour)"
      ],
      "description": "Do not use this call/For the GridCtrl_Box grid, set the cell value specified by row row and column col using thecolour colour. A function return value of zero indicates the call was successful.",
      "id": "6892"
    },
    {
      "names": [
        "Integer Set_cell_text_colour(GridCtrl_Box grid, Integer row, Integer col, Integer colour)"
      ],
      "description": "For the GridCtrl_Box grid, set the text colour of the cell specified by row row and column col tocolourA function return value of zero indicates the call was successful.",
      "id": "6893"
    },
    {
      "names": [
        "Integer Set_cell_back_colour(GridCtrl_Box grid, Integer row, Integer col, Integer colour)"
      ],
      "description": "For the GridCtrl_Box grid, set the back colour of the cell specified by row row and column col tocolour. A function return value of zero indicates the call was successful.",
      "id": "6894"
    },
    {
      "names": [
        "Tree_Box Create_tree_box(Text name, Text root_item_text, Integer tree_width, Integer tree_height)"
      ],
      "description": "This call creates a Tree_Box with the name name and with width tree_width and heighttree_height.  The units for width and height are screen units (pixels). An empty node/page at the root of the tree is created with the title root_item_text.  This is calledthe root page. Panels and WidgetsPage 1129\f12d Model Programming Language ManualAn example of a section of the code required to create a Tree_Box with its root page is:Tree_Box tree_box = Create_tree_box(\"Tree\", \"Tree Root\", 200, 200);The created Tree_Box is returned as the function return value.",
      "id": "2571"
    },
    {
      "names": [
        "Tree_Page Get_root_page(Tree_Box tree_box)"
      ],
      "description": "Get the root page of the Tree_Box tree_box and return it as the function return value. All Tree_Box\u2019s automatically have a root page.",
      "id": "2572"
    },
    {
      "names": [
        "Tree_Page Create_tree_page(Tree_Page parent_page, Text name, Integer show_border, Integer use_name_for_border)"
      ],
      "description": "This call creates a new Tree_Page with the name name, as a child of the Tree_Pageparent_page. When the right hand side of the created page exists and there is none or more than one Group(either Horizontal_Group\u2019s and/or Vertical_Group\u2019s), then the right hand side can have anoptional border and be given the name of the Tree_Page as a title for the border. If show_border = 1, a border is drawn around the right had side of the created Tree_Page. If show_border = 0, no border is drawn around the right had side of the created Tree_Page. If use_name_for_border = 1, name is used as the title when the border is drawn around the righthad side of the created Tree_Page. Page 1130Panels and Widgets\fChapterIf use_name_for_border = 0, there is no title when the border is drawn around the right had sideof the created Tree_Page. Title for borderBorder aroundright hand sideof \"Page1\"Right hand side ofTree_Page \"Page 1\"The right hand side comes up when youclick on \"Page 1\" in the Tree on the leftA parent page must exist before a child page can be created.  The parent page may be the rootpage that is automatically created for a Tree_Box and the Get_root_page call is used to get theroot page of a Tree_Box.  See Get_root_page(Tree_Box tree_box)A Tree_Page can contain any number of children pages. An example of a section of the code required to create a Tree_Box with its root page, and then onechild page of the root page is:Tree_Box tree_box = Create_tree_box(\"Tree\", \"Tree Root\", 200, 200);// get the root page to add a child page called \"Page 1\" toTree_Page root_page = Get_root_page(tree_box);Tree_Page page_1 = Create_tree_page(root_page, \"Page 1\", 1, 1);The created Tree_Box is returned as the function return value. Panels and WidgetsPage 1131\f12d Model Programming Language Manual",
      "id": "2577"
    },
    {
      "names": [
        "Integer Append(Widget widget, Tree_Page page)"
      ],
      "description": "Append the Widget widget to the Tree_Page page. All Widgets appended to a Tree_Page page are displayed on the right hand side of the Tree_Boxwhen the user clicks on page on the left hand side of the Tree_Box. A function return value of zero indicates the Widget was successfully appended. An example of a section of the code required to create a Tree_Box with its root page, one childpage of the root page, and some boxes to show on the right had side of the child page is:Panel panel = Create_panel(\"Tree Box test\");Tree_Box tree_box = Create_tree_box(\"Tree\", \"Tree Root\", 200, 200);// get the root page to add a child page toTree_Page root_page = Get_root_page(tree_box);Tree_Page page_1 = Create_tree_page(root_page, \"Page 1\", 1, 1);Message_Box message_box = Create_message_box(\"\");Input_Box ib_1 = Create_input_box(\"Input box\", message_box);Real_Box db_1 = Create_real_box(\"Double box\", message_box);Append(ib_1,page_1);Append(db_1,page_1);Append(message_box,page_1);Append(tree_box, panel);Show_widget(panel);",
      "id": "2583"
    },
    {
      "names": [
        "Integer Get_number_of_pages(Tree_Page page)"
      ],
      "description": "For the Tree_Page page, return the number of child pages belonging to page as the functionreturn value.",
      "id": "2578"
    },
    {
      "names": [
        "Integer Get_page(Tree_Page parent, Integer page_index, Tree_Page &child_page)"
      ],
      "description": "For the Tree_Page parent, find the n\u2019th child page of parent and return the page as child_page. A function return value of zero indicates a child page was successfully returned.",
      "id": "2579"
    },
    {
      "names": [
        "Integer Has_widget(Tree_Page page, Widget w)"
      ],
      "description": "This call checks if the Tree_Page page contains the Widget w. A non-zero function return value indicates that w is in page. Warning this is the opposite of most 12dPL function return values",
      "id": "2581"
    },
    {
      "names": [
        "Text Get_page_name(Tree_Page page)"
      ],
      "description": "For the Tree_Page page, return the Text name of page as the function return value.",
      "id": "2582"
    },
    {
      "names": [
        "Integer Set_page(Tree_Box tree_box, Widget w)"
      ],
      "description": "Set the current displayed page of the Tree_Box tree to the Tree_Page that contains the Widgetw. This is particularly useful for validation, when validation fails. A function return value of zero indicates the page was successfully displayed.",
      "id": "2573"
    },
    {
      "names": [
        "Integer Set_page(Tree_Box tree_box, Tree_Page page)"
      ],
      "description": "Set the current displayed page of the Tree_Box tree to the Tree_Page page. A function return value of zero indicates the page was successfully displayed.",
      "id": "2574"
    },
    {
      "names": [
        "Integer Set_page(Tree_box tree_box, Text name)"
      ],
      "description": "Set the current displayed page of the Tree_Box tree to the Tree_Page with name name. A function return value of zero indicates the page was successfully displayed.",
      "id": "2575"
    },
    {
      "names": [
        "Integer Get_current_page(Tree_Box tree_box, Tree_Page &current_page)"
      ],
      "description": "Get the Tree_Page that is currently selected and return it in current_page. A function return value of zero indicates the page was successfully returned.",
      "id": "2576"
    },
    {
      "names": [
        "Integer Quick_sort(Integer count, Integer index[], Integer val_array[])"
      ],
      "description": "Sort the Integer array val_array[count] of size count, and return the sort order for val_array[] inthe Index array index[].  For more information see 5. 62. 1 Quick Sort. The array index[] must be of at least size count. A function return value of zero indicates that the sort was successful.",
      "id": "2745"
    },
    {
      "names": [
        "Integer Quick_sort(Integer count, Integer index[], Real val_array[])"
      ],
      "description": "Sort the Real array val_array[count] of size count, and return the sort order for val_array[] inthe Index array index[].  For more information see 5. 62. 1 Quick Sort. The array index[] must be of at least size count. A function return value of zero indicates that the sort was successful.",
      "id": "2746"
    },
    {
      "names": [
        "Integer Quick_sort(Integer count, Integer index[], Text val_array[])"
      ],
      "description": "Sort the Text array val_array[count] of size count, and return the sort order for val_array[] inthe Index array index[].  For more information see 5. 62. 1 Quick Sort. The array index[] must be of at least size count. A function return value of zero indicates that the sort was successful.",
      "id": "2747"
    },
    {
      "names": [
        "Integer Match_name(Text name, Text reg_exp)"
      ],
      "description": "Checks to see if the Text name matches a regular expression given by Text reg_exp. The regular expression uses*for a wild cards?for a wild characterA function return value of non-zero indicates that there was a match. A zero function return value indicates that there is no match or there was an error.",
      "id": "188"
    },
    {
      "names": [
        "Integer Match_name(Dynamic_Element de, Text reg_exp, Dynamic_Element &matched)"
      ],
      "description": "Returns all the Elements from the Dynamic_Element de whose names match the regularexpression Text reg_exp. The matching elements are returned by appended them to the Dynamic_Element matched. A function return value of zero indicates there were no errors in the matching calculations.",
      "id": "189"
    },
    {
      "names": [
        "Integer Is_null(Real value)"
      ],
      "description": "Checks to see if the Real value is null or not. A non-zero function return value indicates the value is null. A zero function return value indicates the value is not null. Warning - this is the opposite of most 12dPL function return values",
      "id": "469"
    },
    {
      "names": [
        "void Null(Real &value)"
      ],
      "description": "This function sets the Real value to the 12d Model null-value. There is no function return value.",
      "id": "470"
    },
    {
      "names": [
        "Integer Null_ht(Dynamic_Element elements, Real height)"
      ],
      "description": "This function examines the z-values of each point for all non-Alignment strings in theDynamic_Element elements, and if the z-value of the point equals height, the z-value is reset tothe null value. A returned value of zero indicates there were no errors in the null operation.",
      "id": "407"
    },
    {
      "names": [
        "Integer Null_ht_range(Dynamic_Element elements, Real ht_min, Real ht_max)"
      ],
      "description": "This function examines the z-values of each point for all non-Alignment strings in theDynamic_Element elements, and if the z-value of the point is between ht_min and ht_max, thezvalue is reset to the null value. A returned value of zero indicates there were no errors in the null operation.",
      "id": "408"
    },
    {
      "names": [
        "Integer Reset_null_ht(Dynamic_Element elements, Real height)"
      ],
      "description": "This function resets all the null z-values of all points of non-Alignment strings in theDynamic_Element elements, to the value height. A returned value of zero indicates there were no errors in the reset operation.",
      "id": "409"
    },
    {
      "names": [
        "Integer Contour(Tin tin, Real cmin, Real cmax, Real cinc, Real cont_ref, Integer cont_col, Dynamic_Element &cont_de, Real bold_inc, Integer bold_col, Dynamic_Element &bold_de)"
      ],
      "description": "Contour the triangulation tin between the minimum and maximum z values cmin and cmax. The contour increment is cinc, and cref is a z value that the contours will pass through. ccol is the colour of the normal contours and they are added to the Dynamic_Element cont_de. bold_inc and bold_col are the increment and colour of the bold contours respectively.  Ifbold_inc is zero then no bold contour are produced. Any bold contours are added to the Dynamic_Element bold_de. A function return value of zero indicates the contouring was successful.",
      "id": "143"
    },
    {
      "names": [
        "Integer Tin_tin_depth_contours(Tin original, Tin new, Integer cut_colour, Integer zero_colour, Integer fill_colour, Real interval, Real start_level, Real end_level, Integer mode, Dynamic_Element &de)"
      ],
      "description": "Calculate depth contours (isopachs) between the triangulations original and new. The contour increment is interval, and the range is from start_level to end_level. cut_colour, zero_colour and fill_colour are the colours of the cut, zero and fill contoursrespectively. If the value of mode is02d strings are produced with depth as the z-value13d strings are produced with the depth contours projected onto the Tin original. 23d strings are produced with the depth contours projected onto the Tin new. The new strings are added to the Dynamic_Element de. A function return value of zero indicates the contouring was successful.",
      "id": "394"
    },
    {
      "names": [
        "Integer Tin_tin_intersect(Tin original, Tin new, Integer colour, Dynamic_Element &de)"
      ],
      "description": "Calculate the intersection (daylight lines) between the triangulations original and new. The intersection lines have colour colour and are added to the Dynamic_Element de. NoteThis is the same as the zero depth contours projected onto either Tin original or new (mode 1 or2) that are produced by the function Tin_tin_depth_contours. A function return value of zero indicates the intersection was successful.",
      "id": "479"
    },
    {
      "names": [
        "Integer Tin_tin_intersect(Tin original, Tin new, Integer colour, Dynamic_Element &de, Integer mode)"
      ],
      "description": "Calculate the intersection (daylight lines) between the triangulations original and new. The intersection lines have colour colour and are added to the Dynamic_Element de. If mode is0the intersection line with z = 0 (2d string) is produced1the full 3d intersection is created. A function return value of zero indicates the intersection was successful.",
      "id": "393"
    },
    {
      "names": [
        "Integer Drape(Tin tin, Model model, Dynamic_Element &draped_elts)",
        "Integer Drape(Tin tin, Dynamic_Element de, Dynamic_Element &draped_elts)",
        "Integer Drape(Tin tin, Dynamic_Element de, Dynamic_Element &draped_elts, Integer create_supers)"
      ],
      "description": "Drape all the Elements in the Model model onto the Tin tin. The draped Elements are returned in the Dynamic_Element draped_elts. A function return value of zero indicates the drape was successful. Drape(Tin tin,Dynamic_Element de, Dynamic_Element &draped_elts)Drape all the Elements in the Dynamic_Element de onto the Tin tin. The draped Elements are returned in the Dynamic_Element draped_elts. A function return value of zero indicates the drape was successful. Drape(Tin tin,Dynamic_Element de, Dynamic_Element &draped_elts, Integercreate_supers)Drape all the Elements in the Dynamic_Element de onto the Tin tin. The draped Elements are returned in the Dynamic_Element draped_elts. The resulting elements in draped_elts will be super string only if create_supers is non zero. A function return value of zero indicates the drape was successful.",
      "id": "3790"
    },
    {
      "names": [
        "Integer Face_drape(Tin tin, Model model, Dynamic_Element &face_draped_elts)",
        "Integer Face_drape(Tin tin, Dynamic_Element de, Dynamic_Element &face_draped_strings)"
      ],
      "description": "Face drape all the Elements in the Model model onto the Tin tin. The draped Elements are returned in the Dynamic_Element face_draped_elts. A function return value of zero indicates the face drape was successful. Page 1142General\fChapterFace_drape(Tin tin,Dynamic_Element de,Dynamic_Element&face_draped_strings)Face drape all the Elements in the Dynamic_Element de onto the Tin tin. The face draped Elements are returned in the Dynamic_Element face_draped_elts. A function return value of zero indicates the face drape was successful.",
      "id": "145"
    },
    {
      "names": [
        "Integer Get_drainage_intensity(Text rainfall_filename, Integer rainfall_method, Real frequency, Real duration, Real &intensity)"
      ],
      "description": "The Rainfall Intensity information is part of a 12d Model Rainfall File (that ends in \". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The Get_drainage_intensity call returns the intensity for a given rainfall method, frequency stormduration. The image below are the rainfall Intensity Methods from the \"AUS ACT Canberra. 12dhydro\" fileloaded into the Rainfall File Editor. 12d hydrofile namedurationsintensitiesIFD Table Intensity Method in the Rainfall FilePage 1144General\fChapter12d hydrofile nameARR 1987 Intensity Method in the Rainfall File12d hydrofile nameARR 1977 Intensity Method in the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the Intensity from. rainfall_method is one of:\"IFD Table\"\"ARR 1987\"\"ARR 1977\"frequency is the frequency (ARI) in yearsduration is the duration in minutesGeneralPage 1145\f12d Model Programming Language Manualintensity is returned and is the intensity calculated from the table given by the rainfall_method,frequency and the duration. A function return value of zero indicates that the intensity was successfully returned. A non zero function return indicates that there was an error getting the intensity. The value of the non-zero function value indicates the type of error:-999-99-9-8-4-3-2-1Error Codes= no Drainage Analysis license= error reading file= no valid data found for specified method= frequency outside valid range= unsupported rainfall method= error building ARR1977 storm data= error building ARR1987 storm data= error building IFD storm data",
      "id": "2209"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_patterns_enabled(Text file, Real min_freq, Real max_freq, Dynamic_Integer &storms, Integer &ret_num)"
      ],
      "description": "The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in\". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The rainfall Temporal Patterns transform the constant average rainfall to a time varied rainfall. The Get_rainfall_temporal_patterns_enabled call returns a Dynamic_Integer list of stormnumbers for all the enabled storm patterns in a Rainfall File.  These storm numbers are used toretrieve the full storm data via the call\uf020\uf020Get_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integermax_num,Integer &ret_num)The image below table is the is of the rainfall Temporal Patterns from the \"AUS ACTCanberra. 12dhydro\" file loaded into the Rainfall File Editor. 12d hydrofile nameflag to sayrun stormZonefiltertotal lengthof stormAverage RecurrenceInterval (ARI)from toStorm numberStorm nameor Storm IDTemporal Patterns in the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the temporal pattern values from. GeneralPage 1147\f12d Model Programming Language Manualmin_freq the From ARI value must match this argument. max_freq the To ARI value must match this argument. storms is a Dynamic_Integer list of storm numbers where the Run storm is selected.  Thesenumbers are used in the following call to retrieve the full storm data. \uf020\uf020Get_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integermax_num,Integer &ret_num)ret_num returns the actual number of storms returnedA function return value of zero indicates the data was successfully returned.",
      "id": "3187"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_pattern(Text rainfall_filename, Integer storm_num, Integer &run, Text &zone_filter, Real &duration, Real &from_ari, Real &to_ari, Real &interval, Real pattern[], Integer max_num, Integer &ret_num)"
      ],
      "description": "The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in\". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The rainfall Temporal Patterns transform the constant average rainfall to a time varied rainfall. The Get_rainfall_temporal_pattern call returns the information for one storm from the rainfallTemporal Patterns in a Rainfall File. The image below table is the is of the rainfall Temporal Patterns from the \"AUS ACTCanberra. 12dhydro\" file loaded into the Rainfall File Editor. 12d hydrofile nameflag to sayrun stormZonefiltertotal lengthof stormAverage RecurrenceInterval (ARI)from toStorm numberStorm nameor Storm IDTemporal Patterns in the Rainfall FileGeneralPage 1149\f12d Model Programming Language Manualintervalfile nametemporal pattern valuesTemporal Pattern Table from the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the temporal pattern values from. storm_num is the number of the storm in the file.  With the addition of the frequent, intermediateand rare temporal patterns all the storms are combined into one list in the order they appear inthe editor.  The storm number in the index on this list. The rest of the arguments of the call return values from the storm_num\u2019th line of the TemporalPattern table. run returns 1 if \"Run Storm\" is ticked0 if \"Run Storm\" is not tickedzone_filter returns the value from \"Zone Filter\"duration returns the total length of the stormfrom_ari returns the \"from ARI\" (Average Recurrence Interval, also known as the Frequency orReturn Period)to_ari returns the \"to ARI\" (Average Recurrence Interval, also known as the Frequency or ReturnPeriod)interval returns the time interval for each of the values in the temporal patterns table (which givethe percentage of the total storm that occurs in that period)pattern[ ] is an array to return the values of the temporal patternmax_num is the maximum size of the array pattern[]ret_num returns the actual number of values returned in patternA function return value of zero indicates the data was successfully returned.",
      "id": "2405"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_pattern(Text rainfall_filename, Text storm_name, Integer &run, Text &zone_filter, Real &duration, Real &from_ari, Real &to_ari, Real &interval, Real pattern[], Integer max_num, Integer &ret_num)"
      ],
      "description": "The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in\". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files others can be created by users. The rainfall Temporal Patterns give the mathematical description of one or more storms. The Get_rainfall_temporal_pattern call returns the information for one storm from the rainfallTemporal Patterns in a Rainfall File. The image of the rainfall Temporal Patterns from the \"AUS ACT Canberra. 12dhydro\" file loadedinto the Rainfall File Editor is given in Get_rainfall_temporal_pattern(Textrainfall_filename,Integer storm_num,Integer &run,Text &zone_filter,Real &duration,Real&from_ari,Real &to_ari,Real &interval,Real pattern[],Integer max_num,Integer &ret_num). The difference between the two calls is that in the other call, the required storm in the TemporalPatterns is given by a line number whereas in this function the storm is found by giving a stormID (storm name). storm_name is the name (Storm ID) of the required storm in the file.  The Storm ID is will give theline in the Temporal Patterns to return the data from. All the return values are the same as for the documentation inGet_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integermax_num,Integer &ret_num). A function return value of zero indicates the data was successfully returned.",
      "id": "2406"
    },
    {
      "names": [
        "Integer Drainage_join_strings(Element string_us, Element string_ds, Integer mode, Element &joined_string)"
      ],
      "description": "Join a upstream drainage string string_us with a downstream drainage string string_ds and setthe result in a new drainage string joined_string. If mode is 0, then the joint starts with the downstream; if mode is 1, then the joint starts with theupstream. Return code-1 = ERROR: invalid drainage stringGeneralPage 1151\f12d Model Programming Language Manual-2 = ERROR: cannot join string to itself-3 = ERROR: string has no MHs-4 = ERROR: no sewer license-5 = ERROR: opposing flow directions-6 = ERROR: try reversing pick order-7 = ERROR: cannot reset nodes (drop point failed)-11 = ERROR: string 1 not a drainage string-12 = ERROR: string 2 not a drainage string-13 = ERROR: mode is not 0 or 1A function return value of zero indicates the call was successfully returned.",
      "id": "5424"
    },
    {
      "names": [
        "Integer Volume(Tin tin_1, Real ht, Element poly, Real ang, Real sep, Text report_name, Integer report_mode, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Calculate the volume from a tin tin_1 to a height ht inside the polygon poly using the end areamethod.  The sections used for the end area calculations are taken at the angle ang with aseparation of sep. A report file is created called report_name which contains cut, fill and balance information. If report_mode is equal to01only the total cut, fill and balance is giventhe cut and fill value for every section is given. If the file report_name is blank (\"\"), no report is created. The variables cut, fill and balance return the total cut, fill and balance. A function return value of zero indicates the volume calculation was successful.",
      "id": "147"
    },
    {
      "names": [
        "Integer Volume(Tin tin_1, Tin tin_2, Element poly, Real ang, Real sep, Text report_name, Integer report_mode, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Calculate the volume from tin tin_1 to tin tin_2 inside the polygon poly using the end areamethod.  The sections used for the end area calculations are taken at the angle ang with aseparation of sep. A report file is created called report_name which contains cut, fill and balance information. If report_mode is equal to01only the total cut, fill and balance is giventhe cut and fill value for every section is given. If the file report_name is blank (\"\"), no report is created. The variables cut, fill and balance return the total cut, fill and balance. A function return value of zero indicates the volume calculation was successful.",
      "id": "148"
    },
    {
      "names": [
        "Integer Volume_exact(Tin tin_1, Real ht, Element poly, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Calculate the volume from a tin tin_1 to a height ht inside the polygon poly using the exactmethod. The variables cut, fill and balance return the total cut, fill and balance. A function return value of zero indicates the volume calculation was successful.",
      "id": "149"
    },
    {
      "names": [
        "Integer Volume_exact(Tin tin_1, Tin tin_2, Element poly, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Calculate the volume between tin tin_1 and tin tin_2 inside the polygon poly using the exactmethod. The variables cut, fill and balance return the total cut, fill and balance. A function return value of zero indicates the volume calculation was successful.",
      "id": "150"
    },
    {
      "names": [
        "Integer Interface(Tin tin, Element string, Real cut_slope, Real fill_slope, Real sep, Real search_dist, Integer side, Element &interface_string)"
      ],
      "description": "Perform an interface to the tin tin along the Element string. Use cut and fill slopes of value cut_slope and fill_slope and a distance between sections ofsep.  The units for slopes is 1:x. Search to a maximum distance search_dist to find an intersection with the tin. If side is negative, the interface is made to the left hand side of the string. If side is positive, the interface is made to the right hand side of the string. The resulting string is returned as the Element interface_string. A function return value of zero indicates the interface was successful.",
      "id": "151"
    },
    {
      "names": [
        "Integer Interface(Tin tin, Element string, Real cut_slope, Real fill_slope, Real sep, Real search_dist, Integer side, Element &interface_string, Dynamic_Element &tadpoles)"
      ],
      "description": "Perform the interface as given in the previous function with the addition that slope lines arecreated and returned in the Dynamic_Element tadpoles. A function return value of zero indicates the interface was successful.",
      "id": "152"
    },
    {
      "names": [
        "Integer Template_exists(Text template_name)"
      ],
      "description": "Checks to see if a template with the name template_name exists in the project. A non-zero function return value indicates the template does exist. A zero function return value indicates that no template of that name exists. Warning - this is the opposite of most 12dPL function return values",
      "id": "201"
    },
    {
      "names": [
        "Integer Get_project_templates(Dynamic_Text &template_names)"
      ],
      "description": "Get the names of all the templates in the project. The dynamic array of template names is returned in the Dynamic_Text template_names. A function return value of zero indicates success.",
      "id": "233"
    },
    {
      "names": [
        "Integer Template_rename(Text original_name, Text new_name)"
      ],
      "description": "Change the name of the Template original_name to the new name new_name. A function return value of zero indicates the rename was successful.",
      "id": "424"
    },
    {
      "names": [
        "Integer Delete_all_templates()"
      ],
      "description": "Delete all templates from the project. A function return value of zero indicates the rename was successful.",
      "id": "3915"
    },
    {
      "names": [
        "Integer Apply(Real xpos, Real ypos, Real zpos, Real ang, Tin tin, Text template, Element &xsect)"
      ],
      "description": "Applies the templates template at the point (xpos,ypos,zpos) going out at the plan angle, ang. The Tin tin is used as the surface for any interface calculations and the calculated section isreturned as the Element xsect. A function return value of zero indicates the apply was successful.",
      "id": "399"
    },
    {
      "names": [
        "Integer Apply(Element string, Real start_ch, Real end_ch, Real sep, Tin tin, Text left_template, Text right_template, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Applies the templates left_template and right_template to the Element string going from startchainage start_ch to end chainage end_ch with distance sep between each section.  The Tin tinis used as the surface for any interface calculations. The variables cut, fill and balance return the total cut, fill and balance for the apply. A function return value of zero indicates the apply was successful.",
      "id": "195"
    },
    {
      "names": [
        "Integer Apply(Element string, Real start_ch, Real end_ch, Real sep, Tin tin, Text left_template, Text right_template, Real &cut, Real &fill, Real &balance, Text report)"
      ],
      "description": "Applies templates as for the previous function with the addition of a report being created with thename report. A function return value of zero indicates the apply was successful.",
      "id": "196"
    },
    {
      "names": [
        "Integer Apply(Element string, Real start_ch, Real end_ch, Real sep, Tin tin, Text left_template, Text right_template, Real &cut, Real &fill, Real &balance, Text report, Integer do_strings, Dynamic_Element &strings, Integer do_sections, Dynamic_Element &sections, Integer section_colour, Integer do_polygons, Dynamic_Element &polygons, Integer do_differences, Dynamic_Element &diffs, Integer difference_colour)"
      ],
      "description": "Applies templates as for the previous function with the additions:If do_strings is non-zero, the strings are returned in strings. If do_sections is non-zero, design sections of colour section_colour are returned in sections. If do_polygons is non-zero, polygons are returned in polygons. If do_differences is non-zero, difference sections of colour difference_colour are returned indiffs. A function return value of zero indicates the apply was successful.",
      "id": "197"
    },
    {
      "names": [
        "Integer Apply_many(Element string, Real separation, Tin tin, Text many_template_file, Real &cut, Real &fill, Real &balance)"
      ],
      "description": "Applies the templates as specified in the file many_template_file to the Element string withdistance sep between each section.  The Tin tin is used as the surface for any interfacecalculations. The variables cut, fill and balance return the total cut, fill and balance for the apply. A function return value of zero indicates success.",
      "id": "198"
    },
    {
      "names": [
        "Integer Apply_many(Element string, Real separation, Tin tin, Text many_template_file, Real &cut_volume, Real &fill_volume, Real &balance_volume, Text report)"
      ],
      "description": "Applies templates as for the previous function with the addition of a report being created with thename report. A function return value of zero indicates success.",
      "id": "199"
    },
    {
      "names": [
        "Integer Apply_many(Element string, Real separation, Tin tin, Text many_template_file, Real &cut, Real &fill, Real &balance, Text report, Integer do_strings, Dynamic_Element &strings, Integer do_sections, Dynamic_Element &sections, Integer section_colour, Integer do_polygons, Dynamic_Element &polygons, Integer do_difference, Dynamic_Element &diffs, Integer difference_colour)"
      ],
      "description": "Applies templates as for the previous function with the additions:If do_strings is non-zero, the strings are returned in strings. If do_sections is non-zero, design sections of colour section_colour are returned in sections. If do_polygons is non-zero, polygons are returned in polygons. If do_differences is non-zero, difference sections of colour difference_colour are returned indiffs. A function return value of zero indicates the apply was successful.",
      "id": "200"
    },
    {
      "names": [
        "Integer String_reverse(Element in, Element &out)"
      ],
      "description": "This functions creates a reversed copy of the string Element in and the reversed string isreturned in out.  That is, the chainage of string out starts at the end of the original string in andgoes to the beginning of the original string in. If successful, the new reversed string is returned in Element out. A function return value of zero indicates the reverse was successful.",
      "id": "1134"
    },
    {
      "names": [
        "Integer Extend_string(Element elt, Real before, Real after, Element &newelt)"
      ],
      "description": "Extend the start and end of the string in Element elt. The start of the string is extended by Real before. The end of the string is extended by Real after. If successful, the new element is returned in Element newelt. Note that even when either before or after is zero, the two new points still being added to thenew element newelt (as duplicated of the old start/end). A function return value of zero indicates the chainage was returned successfully.",
      "id": "664"
    },
    {
      "names": [
        "Integer Clip_string(Element string, Real chainage1, Real chainage2, Element &left_string, Element &mid_string, Element &right_string)"
      ],
      "description": "Clip a string about 2 chainages for the Element string.  This will result in 3 new strings beingcreated. The part that exists before Real chainage1 is returned in Element left_string. The part that exists after Real chainage2 is returned in Element right_string. The part that exists between Real chainage1 and Real chainage2 is returned in Elementmid_string. A function return value of zero indicates the clip was successful. NoteIf the string is closed, right_string is not used. If chainage1 is on or before the start of the string, left_string is not used. GeneralPage 1161\f12d Model Programming Language ManualIf chainage2 is on or after the end of the string, right_string is not used. If chainage1 is greater than chainage2, they are first swapped.",
      "id": "542"
    },
    {
      "names": [
        "Integer Clip_string(Element string, Integer direction, Real chainage1, Real chainage2, Element &left_string, Element &mid_string, Element &right_string)"
      ],
      "description": "Clip a string about 2 chainages for the string Element string.  This will result in 3 new stringsbeing created.  The clipped parts are returned relative to Integer direction.  If direction isnegative, string is first reversed before being clipped. The part that exists before Real chainage1 is returned in Element left_string. The part that exists after Real chainage2 is returned in Element right_string. The part that exists between Real chainage1 and Real chainage2 is returned in Elementmid_string. A function return value of zero indicates the clip was successful. NoteIf the string is closed, right_string is not used. If chainage1 is on or before the start of the string, left_string is not used. If chainage2 is on or after the end of the string, right_string is not used. If chainage1 is greater than chainage2, they are first swapped.",
      "id": "549"
    },
    {
      "names": [
        "Integer Polygons_clip(Integer npts_clip, Real xclip[], Real yclip[], Integer npts_in, Real xarray_in[], Real yarray_in [], Real zarray_in [], Integer &npts_out, Real xarray_out[], Real yarray_out[], Real yarray_out[])"
      ],
      "description": "",
      "id": "1440"
    },
    {
      "names": [
        "Integer Split_string(Element string, Real chainage, Element &string1, Element &string2)"
      ],
      "description": "Split a string about a chainage for ELement stringThis will result in 2 new strings being created. The part that exists before Real chainage is returned in Element string1. Page 1162General\fChapterThe part that exists after Real chainage is returned in Element string2. A function return value of zero indicates the split was successful.",
      "id": "543"
    },
    {
      "names": [
        "Integer Join_strings(Element string1, Real x1, Real y1, Real z1, Element string2, Real x2, Real y2, Real z2, Element &joined_string)"
      ],
      "description": "Join the 2 strings Element string1 and Element string2 together to form 1 new string.  The end ofstring1 closest to x1,y1,z1 is joined to the end of string2 closest to x2,y2,z2. The joined string is returned in Element joined_string. A function return value of zero indicates the interface was successful. NoteIf the ends joined are no coincident, then a line between the ends is inserted. The joined string is always of a type that preserves as much as possible about the originalstrings. If you join 2 strings of the same type, the joined string is of the same type.",
      "id": "544"
    },
    {
      "names": [
        "Integer Rectangle_clip(Real x1, Real y1, Real x2, Real y2, Integer npts_in, Real xarray_in [], Real yarray_in [], Integer &npts_out, Real xarray_out[], Real yarray_out[])"
      ],
      "description": "<no description>",
      "id": "1438"
    },
    {
      "names": [
        "Integer Super_offset(Element super, Real offset, Integer mode, Element &super_offset)"
      ],
      "description": "Offset the super Element super by Real offset; assign the result to super Elementsuper_offset. A return value of zero indicates the function call was successful. The valid values for mode are:0: joins ends of resulting segments by lines1: intersects resulting segments2: fillets any pair of resulting segments with change of direction3: dual clippingGeneralPage 1163\f12d Model Programming Language Manual4: clips any crossing part",
      "id": "2861"
    },
    {
      "names": [
        "Integer Place_mesh(Real x, Real y, Real z, Integer source_type, Text source_name, Vector3 offset, Vector3 rotate, Vector3 scale, Element &mesh_string)"
      ],
      "description": "This call places a mesh on the vertex of a new super string, at the co-ordinate specified byparameters x, y, z. The source_type determines where the mesh will be loaded from: \uf020source_type = 0 for the Mesh Library\uf020, 1 for from a fileThe source_name specifies the name of the mesh in the library or file, as defined by thesource_type parameter. You can also set any additional offset, rotation or scale parameters in the offset, rotate or scalevectors.  If you are not intending to set additional parameters, you must set them to at leastdefault values:offset(0. 0, 0. 0, 0. 0)\uf020rotate(0. 0, 0. 0, 0. 0)\uf020scale(1. 0, 1. 0, 1. 0);The created super string will be stored in the element mesh_string. This function returns 0 if it succeeds and non zero if it fails.",
      "id": "2803"
    },
    {
      "names": [
        "Integer Place_mesh(Real x, Real y, Real z, Text mesh_name, Vector3 offset, Vector3 rotate, Vector3 scale, Tin anchor_tin, Element &mesh_string)"
      ],
      "description": "This call places a mesh from the mesh library on the vertex of a new super string, at the coordinate specified by parameters x, y, z and anchors it to the tin anchor_tin. The Text mesh_name specifies the name of the mesh in the library. You can also set any additional offset, rotation or scale parameters in the offset, rotate or scalevectors.  If you are not intending to set additional parameters, you must set them to at leastdefault values:offset(0. 0, 0. 0, 0. 0)\uf020rotate(0. 0, 0. 0, 0. 0)\uf020scale(1. 0, 1. 0, 1. 0);The created super string will be stored in the Element mesh_string. This function returns 0 if it succeeds and non zero if it fails.",
      "id": "2804"
    },
    {
      "names": [
        "Integer Get_image_size(Text filename, Integer &width, Integer &height)"
      ],
      "description": "Read the image from the file named filename; return its size as number of pixels in width andheight. A return value of zero indicates the function call was successful.",
      "id": "2634"
    },
    {
      "names": [
        "Integer Boundary_polygon(Dynamic_Element list, Real seed_x, Real seed_y, Real distance, Element &result)"
      ],
      "description": "Boundary_polygon works on the plan projection of all the strings in list withing the radiusdistance of the seed point (seed_x, seed_y), and if possible, creates a closed polygon from theparts of the strings surrounding the seed point. A straight line must be able to be drawn from the seed point to the lines/arcs that could be usedin the surrounding strings. seed point is insidethe polygon to be createdCreated polygonCreating a Polygon by Seed Point Inside the PolygonA return value of zero indicates the function call was successful.",
      "id": "1796"
    },
    {
      "names": [
        "void Print_stack_trace()"
      ],
      "description": "Print the stack trace for the running macro to the output window.  The stack trace is a list of theline number followed by the line contents of the macro code.",
      "id": "2720"
    },
    {
      "names": [
        "Integer Get_stack_trace(Dynamic_Integer &stack)"
      ],
      "description": "Assign the list of line numbers of the running macro stack trace to Dynamic_Integer stack. A return value of zero indicates the function call was successful.",
      "id": "2721"
    },
    {
      "names": [
        "void Print_stack_trace(Text msg)"
      ],
      "description": "Print the Text msg to the output window. Then print the stack trace for the running macro to the output window.  The stack trace is a list ofthe line number followed by the line contents of the macro code.",
      "id": "2744"
    },
    {
      "names": [
        "Integer Enable_3d(Element super_alignment)"
      ],
      "description": "Enable 3D chainage calculation for a valid super alignment super_alignment. A return value of 2 indicates the input element is not valid. A return value of 3 indicates the input element is not a super alignment. A return value of 5 indicates the vertical part of the input super alignment is not valid. A return value of 6 indicates the horizontal part of the input super alignment is not valid. A return value of 7 indicates the input super alignment has no vertical part. A return value of zero indicates the function call was successful.",
      "id": "3011"
    },
    {
      "names": [
        "Integer Get_start_chainage_3d(Element super_alignment, Real &ch_3d)"
      ],
      "description": "Get start 3D chainage ch_3d of a super alignment super_alignment. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3012"
    },
    {
      "names": [
        "Integer Get_end_chainage_3d(Element super_alignment, Real &ch_3d)"
      ],
      "description": "Get end 3D chainage ch_3d of a super alignment super_alignment. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3013"
    },
    {
      "names": [
        "Integer Get_3d_length(Element super_alignment, Real &length_3d)"
      ],
      "description": "Get 3D length length_3d of a super alignment super_alignment. Note: the Enable_3d needed to be call for the super alignment before making this call. Page 1170Utilities\fChapterA return value of zero indicates the function call was successful.",
      "id": "3014"
    },
    {
      "names": [
        "Integer Chainage_2d_to_3d(Element super_alignment, Real ch_2d, Real &length_3d)"
      ],
      "description": "Calculate 3D length length_3d of a super alignment super_alignment from 2D chainagech_2d. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3015"
    },
    {
      "names": [
        "Integer Chainage_3d_to_2d(Element super_alignment, Real length_3d, Real &ch_2d)"
      ],
      "description": "Calculate 2D chainage ch_2d of a super alignment super_alignment from 3D lengthlength_3d. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3016"
    },
    {
      "names": [
        "Integer Get_position_ex_3d(Element super_alignment, Real length_3d, Real offset, Real dz, Real &x, Real &y, Real &z, Real &dir, Real &radius, Real &grade)"
      ],
      "description": "WARNING - this is NOT an ex version of get position call; and also the return value for &dir isthe opposite (zero minus the correct number) of the normal direction. Get xyz-coordinate x y z, direction dir, radius radius, grade grade of a point based on a superalignment super_alignment, 3D length length_3d, offset offset, change in z dz. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3017"
    },
    {
      "names": [
        "Integer Get_position_3d(Element string, Real ch_3d, Real offset, Real dz, Real &x, Real &y, Real &z, Real &dir, Real &radius, Real &grade)"
      ],
      "description": "Get xyz-coordinate x y z, direction dir, radius radius, grade grade of a point based on a superalignment string, 3D chainage ch_3d, offset offset, change in z dz. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3381"
    },
    {
      "names": [
        "Integer Drop_point_3d(Element super_alignment, Real xd, Real yd, Real zd, Real &x, Real &y, Real &z, Real &l, Real &o, Real &dir, Real &radius, Real &grade)"
      ],
      "description": "Get xyz-coordinate x y z, 3d length l, offset o, direction dir, radius radius, grade grade of thedropped point from xyz-coordinate xd yd zd to a super alignment super_alignment. Note: the Enable_3d needed to be call for the super alignment before making this call. A return value of zero indicates the function call was successful.",
      "id": "3018"
    },
    {
      "names": [
        "Integer Tunnel_profile_3d(Element ref_str, Text tunnel_def, Dynamic_Real point_x, Dynamic_Real point_y, Dynamic_Real point_z, Dynamic_Text &e_tun_ele_name, Dynamic_Integer &e_tun_ele_idx, Dynamic_Real &e_tun_ele_dist, Dynamic_Real &e_tun_ele_per, Dynamic_Real &e_tun_ele_dir, Dynamic_Real &e_tun_ele_prev_dir, Dynamic_Real &e_tun_ele_next_dir, Dynamic_Real &e_tun_ele_radius, Dynamic_Real &e_tun_ele_os, Dynamic_Real &e_tun_prf_ch, Dynamic_Real &e_ex, Dynamic_Real &e_ey, Dynamic_Real &e_ez, Dynamic_Integer &pd_status_3d, Dynamic_Integer &pd_status_2d, Dynamic_Real &pd_dist_3d, Dynamic_Real &pd_dist_2d, Dynamic_Real &pd_sqr_vt_ch, Dynamic_Real &pd_plm_vt_ch, Dynamic_Real &pd_sqr_hz_ch, Dynamic_Real &pd_plm_hz_ch, Dynamic_Real &pd_ref_ch, Dynamic_Real &pd_sqr_zd, Dynamic_Real &pd_sqr_di, Dynamic_Real &pd_plm_zd, Dynamic_Real &pd_ref_zd, Dynamic_Real &pd_plm_os, Dynamic_Real &pd_sqr_os, Dynamic_Real &pd_ref_os, Dynamic_Real &pd_cl_grd, Text &message)"
      ],
      "description": "Some warning and error message would be set to the Text message. A return value of zero indicates the function call was successful.",
      "id": "3531"
    },
    {
      "names": [
        "Integer Tunnel_profile_3d(Element ref_str, Text tunnel_def, Dynamic_Real point_x, Dynamic_Real point_y, Dynamic_Real point_z, Dynamic_Text &e_tun_ele_name, Dynamic_Integer &e_tun_ele_idx, Dynamic_Real &e_tun_ele_dist, Dynamic_Real &e_tun_ele_per, Dynamic_Real &e_tun_ele_radius, Dynamic_Real &e_tun_ele_os, Dynamic_Real &e_tun_prf_ch, Dynamic_Real &e_ex, Dynamic_Real &e_ey, Dynamic_Real &e_ez, Dynamic_Integer &pd_status_3d, Dynamic_Integer &pd_status_2d, Dynamic_Real &pd_ref_ch, Text &message)"
      ],
      "description": "Some warning and error message would be set to the Text message. A return value of zero indicates the function call was successful.",
      "id": "3532"
    },
    {
      "names": [
        "Integer Tunnel_profile_3d(Element ref_str, Text tunnel_def, Element trimesh, Real inner_extent, Real outer_extent, Dynamic_Real point_x, Dynamic_Real point_y, Dynamic_Real point_z, Dynamic_Text &e_tun_ele_name, Dynamic_Integer &e_tun_ele_idx, Dynamic_Real &e_tun_ele_dist, Dynamic_Real &e_tun_ele_per, Dynamic_Real &e_tun_ele_dir, Dynamic_Real &e_tun_ele_prev_dir, Dynamic_Real &e_tun_ele_next_dir, Dynamic_Real &e_tun_ele_radius, Dynamic_Real &e_tun_ele_os, Dynamic_Real &e_tun_prf_ch, Dynamic_Real &e_ex, Dynamic_Real &e_ey, Dynamic_Real &e_ez, Dynamic_Integer &pd_status_3d, Dynamic_Integer &pd_status_2d, Dynamic_Real &pd_dist_3d, Dynamic_Real &pd_dist_2d, Dynamic_Real &pd_sqr_vt_ch, Dynamic_Real &pd_plm_vt_ch, Dynamic_Real &pd_sqr_hz_ch, Dynamic_Real &pd_plm_hz_ch, Dynamic_Real &pd_ref_ch, Dynamic_Real &pd_sqr_zd, Dynamic_Real &pd_sqr_di, Dynamic_Real &pd_plm_zd, Dynamic_Real &pd_ref_zd, Dynamic_Real &pd_plm_os, Dynamic_Real &pd_sqr_os, Dynamic_Real Utilities Page 1179 12d Model Programming Language Manual &pd_ref_os, Dynamic_Real &pd_cl_grd, Dynamic_Real &trimesh_offset, Text &message)"
      ],
      "description": "Some warning and error message would be set to the Text message. A return value of zero indicates the function call was successful.",
      "id": "3533"
    },
    {
      "names": [
        "Integer Tunnel_profile_3d(Element ref_str, Text tunnel_def, Element trimesh, Real inner_extent, Real outer_extent, Dynamic_Real point_x, Dynamic_Real point_y, Dynamic_Real point_z, Dynamic_Text &e_tun_ele_name, Dynamic_Integer &e_tun_ele_idx, Dynamic_Real &e_tun_ele_dist, Dynamic_Real &e_tun_ele_per, Dynamic_Real &e_tun_ele_radius, Dynamic_Real &e_tun_ele_os, Dynamic_Real &e_tun_prf_ch, Dynamic_Real &e_ex, Dynamic_Real &e_ey, Dynamic_Real &e_ez, Dynamic_Integer &pd_status_3d, Dynamic_Integer &pd_status_2d, Dynamic_Real &pd_ref_ch, Dynamic_Real &trimesh_offset, Text &message)"
      ],
      "description": "Some warning and error message would be set to the Text message. A return value of zero indicates the function call was successful.",
      "id": "3534"
    },
    {
      "names": [
        "Integer Cut_fill_trimeshes_between_tins(Tin ground_tin, Tin design_tin, Model cut_model, Text cut_name, Integer cut_colour, Model fill_model, Text fill_name, Integer fill_colour, Element fence, Model fence_model, Text &return_msg)"
      ],
      "description": "Find the cut and fill trimesh between two given tin ground_tin and design_tin accroding togiven arguments. Some warning and error message would be set to the Text return_msg. A return value of zero indicates the function call was successful.",
      "id": "5447"
    },
    {
      "names": [
        "Integer Affine(Dynamic_Element elements, Real rotate_x, Real rotate_y, Real scale_x, Real scale_y, Real dx, Real dy)"
      ],
      "description": "Apply to all the elements in the Dynamic_Element elements, the Affine transformation withparameters:X axis rotation rotate_x (in radians)Y axis rotation rotate_y (in radians)X scale factorscale_xY scale factorscale_yTranslation(dx,dy)Note that if the scales or the rotates are different between x and y, the true transformation of arcs(or cirles) would be no longer arcs.  12D would try to approximate the arcs result in some cases,otherwise the radius of segments would be lost. A function return value of zero indicates the transformation was successful.",
      "id": "414"
    },
    {
      "names": [
        "Integer Helmert_2d_Transform(Real r, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Integer call_inverse, Element &ele)"
      ],
      "description": "Apply to element ele the Helmert 2d transformation with parameters:rotationr (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "7627"
    },
    {
      "names": [
        "Integer Helmert_2d_Transform(Real r, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Integer call_inverse, Dynamic_Element &ele)"
      ],
      "description": "UtilitiesPage 1181\f12d Model Programming Language ManualApply to all the elements in the Dynamic_Element ele the Helmert 2d transformation withparameters:rotationr (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "7628"
    },
    {
      "names": [
        "Integer Helmert_2d_Transform(Real r, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Integer call_inverse, Real &x, Real &y, Real &z)"
      ],
      "description": "Apply to the point with xyz-coordinate (x,y,z), the Helmert 2d transformation withparametersrotationr (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "7629"
    },
    {
      "names": [
        "Integer Helmert_2d_Transform(Real r, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Integer call_inverse, Real &x, Real &y, Real &z)"
      ],
      "description": "Apply to the list of points with xyz-coordinates in three lists x,y,z , the Helmert 2d transformationwith parameters:rotationr (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "7630"
    },
    {
      "names": [
        "Integer Helmert_3d_Transform(Real rx, Real ry, Real rz, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Real oz, Integer call_inverse, Element &ele)"
      ],
      "description": "Apply to element ele the Helmert 3d transformation with parameters:X axis rotation rx (in radians)Y axis rotation ry (in radians)Z axis rotation rz (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy,oz)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "3485"
    },
    {
      "names": [
        "Integer Helmert_3d_Transform(Real rx, Real ry, Real rz, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Real oz, Integer call_inverse, Dynamic_Element &elements)"
      ],
      "description": "Apply to all the elements in the Dynamic_Element elements, the Helmert 3d transformation withparameters:X axis rotation rx (in radians)Y axis rotation ry (in radians)Z axis rotation rz (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy,oz)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "3486"
    },
    {
      "names": [
        "Integer Helmert_3d_Transform(Real rx, Real ry, Real rz, Real scale, Real tx, Real ty, Real tz, Real ox, Real Utilities Page 1183 12d Model Programming Language Manual oy, Real oz, Integer call_inverse, Real &x, Real &y, Real &z)"
      ],
      "description": "Apply to the 3D point with xyz-coordinate (x,y,z), the Helmert 3d transformation with parameters:X axis rotation rx (in radians)Y axis rotation ry (in radians)Z axis rotation rz (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy,oz)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "3487"
    },
    {
      "names": [
        "Integer Helmert_3d_Transform(Real rx, Real ry, Real rz, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Real oz, Integer call_inverse, Dynamic_Real &x, Dynamic_Real &y, Dynamic_Real &z)"
      ],
      "description": "Apply to the list 3D points with xyz-coordinates in three lists x,y,z , the Helmert 3d transformationwith parameters:X axis rotation rx (in radians)Y axis rotation ry (in radians)Z axis rotation rz (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy,oz)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "3488"
    },
    {
      "names": [
        "Integer Get_carto_projection_datum_data(Text datum_name, Text carto_file_name, Text &datum_data)"
      ],
      "description": "Looking up the datum_data of a projection of given datum_name using a given carto filecarto_file_name. If carto_file_name is the string \"carto. 4d\" or the empty string \"\", then it will be the same file usingin all builtin 12D panels. Page 1184Utilities\fChapterA function return value of zero indicates the transformation was successful.",
      "id": "3724"
    },
    {
      "names": [
        "Integer Convert_long_lat(Text datum_data, Integer longlat_angle_mode, Integer from_long_lat, Element &ele)"
      ],
      "description": "Convert the x and y values of an Element ele between Easting-Northing and Longtitude-Latitudeusing:The datum_data being used.  Note: this is the actual data not the name. The direction of the conversion: from_long_lat from long-lat to Easting-Northing: zero beingfalse; one being true. The angle mode of the longtitude, latitude longlat_angle_mode :zero being radians; one beingdecimal degrees; two being DMS degrees minutes seconds. A function return value of zero indicates the transformation was successful.",
      "id": "3725"
    },
    {
      "names": [
        "Integer Convert_long_lat(Text datum_data, Integer longlat_angle_mode, Integer from_long_lat, Dynamic_Element &ele_list)"
      ],
      "description": "Convert the x and y values of all Element from a given list ele_list between Easting-Northing andLongtitude-Latitude using:The datum_data being used.  Note: this is the actual data not the name. The direction of the conversion: from_long_lat from long-lat to Easting-Northing: zero beingfalse; one being true. The angle mode of the longtitude, latitude longlat_angle_mode :zero being radians; one beingdecimal degrees; two being DMS degrees minutes seconds. A function return value of zero indicates the transformation was successful.",
      "id": "3726"
    },
    {
      "names": [
        "Integer Convert_long_lat(Text datum_data, Integer longlat_angle_mode, Integer from_long_lat, Real &x, Real &y)"
      ],
      "description": "Convert the value of two Real x,y between Easting-Northing and Longtitude-Latitude using:The datum_data being used.  Note: this is the actual data not the name. UtilitiesPage 1185\f12d Model Programming Language ManualThe direction of the conversion: from_long_lat from long-lat to Easting-Northing: zero beingfalse; one being true. The angle mode of the longtitude, latitude longlat_angle_mode :zero being radians; one beingdecimal degrees; two being DMS degrees minutes seconds. A function return value of zero indicates the transformation was successful.",
      "id": "3727"
    },
    {
      "names": [
        "Integer Convert_long_lat(Text datum_data, Integer longlat_angle_mode, Integer from_long_lat, Dynamic_Real &x, Dynamic_Real &y)"
      ],
      "description": "Convert the values of in the two lists (of the same sizes) Dynamic_Real x,y between EastingNorthing and Longtitude-Latitude using:The datum_data being used.  Note: this is the actual data not the name. The direction of the conversion: from_long_lat from long-lat to Easting-Northing: zero beingfalse; one being true. The angle mode of the longtitude, latitude longlat_angle_mode :zero being radians; one beingdecimal degrees; two being DMS degrees minutes seconds. A function return value of zero indicates the transformation was successful.",
      "id": "3728"
    },
    {
      "names": [
        "Integer Get_disk_file_name(View view, Text &disk_name)"
      ],
      "description": "Get disk file name of given view and set it to Text disk_nameA function return value of zero indicates the call was successfully.",
      "id": "7617"
    },
    {
      "names": [
        "Integer Calculate_helmert_2d_transform_parameters(Dynamic_Real xc, Dynamic_Real yc, Dynamic_Real xo, Dynamic_Real yo, Integer fixed_scale, Real input_scale, Real &r, Real &scale, Real &tx, Real &ty, Real &ox, Real &oy, Text &error_msg)"
      ],
      "description": "From the list of control points given by list of x,y coordinates xc yc and the list of observationpoints given by list of x,y coordinate xo yo calculate the parameters for the equivalent helmert 2dtransform. If fixed_scale is none zero then the transformation is used fixed scale. Some warning and error message would be set to the Text error_msg. A function return value of zero indicates the call was successful.",
      "id": "7618"
    },
    {
      "names": [
        "Integer Run_chain(Text chain)"
      ],
      "description": "Run the chain in the file named chain. A function return value of zero indicates the chain was successfully run.",
      "id": "2096"
    },
    {
      "names": [
        "Integer Convert(Dynamic_Element in_de, Integer mode, Integer pass_others, Dynamic_Element &out_de)"
      ],
      "description": "Convert the strings in Dynamic_Element in_de using Integer mode and when mode equals1convert 2d to 3d2convert 3d to 2d if the 3d string has constant z3convert 4d to 3d (the text is dropped at each point)The converted strings are returned by appending them to the Dynamic_Element out_de. If Integer pass_others is non zero, any strings in in_de that cannot be converted will be copiedto out_de. A function return value of zero indicates the conversion was successful.",
      "id": "139"
    },
    {
      "names": [
        "Integer Convert(Element elt, Text type, Element &newelt)"
      ],
      "description": "Tries to convert the Element elt to the Element type given by Text type. If successful, the new element is returned in Element newelt. A function return value of zero indicates the conversion was successful.",
      "id": "655"
    },
    {
      "names": [
        "Integer Cut_strings(Dynamic_Element seed, Dynamic_Element strings, Dynamic_Element &result)"
      ],
      "description": "Cut all the strings from the list Dynamic_Element seed with the strings from the listDynamic_Element strings and add to Dynamic_Element result. The strings created are 4d strings which have at each vertex the string cut. Cuts are only considered valid if they have heights.  Any cut at a point wherethe string height is null, will not be included. A function return value of zero indicates the cut calculations was successful.",
      "id": "541"
    },
    {
      "names": [
        "Integer Cut_strings(Dynamic_Element seed, Dynamic_Element strings, Dynamic_Element &result, Integer create_supers)"
      ],
      "description": "Cut all the strings from the list Dynamic_Element seed with the strings from the listDynamic_Element strings and add to Dynamic_Element result. If create_supers is zero, the strings created are 4d strings which have at each vertex the stringcut. If create_supers is non zero, the strings created are super strings which have at each vertex thestring cut. Cuts are only considered valid if they have heights.  Any cut at a point wherethe string height is null, will not be included. A function return value of zero indicates the cut calculations was successful.",
      "id": "3788"
    },
    {
      "names": [
        "Integer Cut_strings_with_nulls(Dynamic_Element seed, Dynamic_Element strings, Dynamic_Element &result)"
      ],
      "description": "Cut all the strings from the list Dynamic_Element seed with the strings from the listDynamic_Element strings and add to Dynamic_Element result. The strings created are 4d strings which have at each vertex the string cut. A function return value of zero indicates the cut calculations was successful. Page 1190Utilities\fChapter",
      "id": "548"
    },
    {
      "names": [
        "Integer Cut_strings_with_nulls(Dynamic_Element seed, Dynamic_Element strings, Dynamic_Element &result, Integer create_supers)"
      ],
      "description": "Cut all the strings from the list Dynamic_Element seed with the strings from the listDynamic_Element strings and add to Dynamic_Element result. If create_supers is zero, the strings created are 4d strings which have at each vertex the stringcut. If create_supers is non zero, the strings created are super strings which have at each vertex thestring cut. A function return value of zero indicates the cut calculations was successful.",
      "id": "3789"
    },
    {
      "names": [
        "Integer Factor(Dynamic_Element elements, Real xf, Real yf, Real zf)"
      ],
      "description": "Multiply all the co-ordinates of all the elements in the Dynamic_Element elements by the factors(xf,yf,zf). Note that if the xf and yf are different, then the true transformation of arcs (or cirles) would be nolonger arcs.  12D would try to approximate the arcs result in some cases, otherwise the radius ofsegments would be lost. A function return value of zero indicates the factor was successful.",
      "id": "411"
    },
    {
      "names": [
        "Integer Fence(Dynamic_Element data_to_fence, Integer mode, Element user_poly, Dynamic_Element &ret_inside, Dynamic_Element &ret_outside)",
        "Integer Fence(Dynamic_Element data_to_fence, Integer mode, Dynamic_Element polygon_list, Dynamic_Element &ret_inside, Dynamic_Element &ret_outside)"
      ],
      "description": "This function fences all the Elements in the Dynamic_Element data_to_list against the usersupplied polygon Element user_poly. The fence mode is given by Integer mode and when mode equals012get the inside of the polygonget the outside of the polygonget the inside and the outside of the polygonIf the inside is required, the data is returned by appending it to the Dynamic_Element ret_inside. If the outside is required, the data is returned by appending it to the Dynamic_Elementret_outsideA returned value of zero indicates there were no errors in the fence operation. Fence(Dynamic_Element data_to_fence,Integer mode,Dynamic_Elementpolygon_list,Dynamic_Element &ret_inside,Dynamic_Element &ret_outside)This function fences all the Elements in the Dynamic_Element data_to_list against one or moreuser supplied polygons given in the Dynamic_Element polygon_list. The fence mode is given by Integer mode and when mode equals012get the inside of each of the polygonsget the outside of all the polygonsget the inside and the outside of the polygonsIf the inside is required, the data is returned by appending it to the Dynamic_Element ret_inside. If the outside is required, the data is returned by appending it to the Dynamic_Elementret_outsideA returned value of zero indicates there were no errors in the fence operation Head to Tail",
      "id": "137"
    },
    {
      "names": [
        "Integer Check_polygon_fence(Element polygon, Integer &good_polygon, Integer &good_fence)"
      ],
      "description": "This function check the input polygon and set. Integer good_polygon to 1 if the input is a simple polygon; 0 otherwise. UtilitiesPage 1193\f12d Model Programming Language ManualInteger good_polygon to 1 if the input polygon can be used as the fence; 0 otherwise. A returned value of zero indicates there were no errors in the checking operation.",
      "id": "3543"
    },
    {
      "names": [
        "Integer Check_polygon(Element polygon_in, Integer &good_polygon, Element &polygon_out)"
      ],
      "description": "This function check the input polygon_in and set. Integer good_polygon to 1 if the input is a simple polygon; 0 otherwise. When the input is not a good polygon, there will be an attempt to fix some problems and returnthe fixed polygon as polygon_out. A returned value of zero indicates there were no errors in the checking operation.",
      "id": "3544"
    },
    {
      "names": [
        "Integer Filter(Dynamic_Element in_de, Integer mode, Integer pass_others, Real tolerance, Dynamic_Element &out_de)"
      ],
      "description": "Filter removes points from 2d and/or 3d strings that do not deviate by more than the distancetolerance from the straight lines joining successive string points. Hence the function Filter filters the data from in_de where mode means:0only 2d strings are filtered. 12d and 3d strings are filtered. The filtered data is placed in the Dynamic_Element out_de. If pass_others is non-zero, elements that can't be processed using the mode will be copied toout_de. A function return value of zero indicates the filter was successful.",
      "id": "140"
    },
    {
      "names": [
        "Integer Head_to_tail(Dynamic_Element in_list, Dynamic_Element &out_list)"
      ],
      "description": "Perform head to tail processing on the data in Dynamic_Element in_list. The resulting elements are returned by appending them to the Dynamic_Element out_list. A function return value of zero indicates there were no errors in the head to tail process.",
      "id": "138"
    },
    {
      "names": [
        "Integer Helmert(Dynamic_Element elements, Real rotate, Real scale, Real dx, Real dy)"
      ],
      "description": "Apply to all the elements in the Dynamic_Element elements, the Helmert transformation withparameters:Rotationrotate (in radians)Scale factorscaleTranslation(dx,dy)A function return value of zero indicates the transformation was successful.",
      "id": "413"
    },
    {
      "names": [
        "Integer Medial_axis_polygon(Element polygon, Real &cx, Real &cy, Real &radius)"
      ],
      "description": "Get xy-coordinate cx cy of the medial axis point and the radius of biggest circle of an ElementpolygonA return value of zero indicates the function call was successful.",
      "id": "3031"
    },
    {
      "names": [
        "Integer Medial_axis_polygon(Element polygon, Real &cx, Real &cy, Real &radius, Real radius_tolerance)"
      ],
      "description": "Get xy-coordinate cx cy of the medial axis point and the radius of biggest circle of an Elementpolygon. In some cases, such as when the polygon is almost a long rectangle, the biggest circle is at oneend of the (almost) rectangle.  For many purposes (such as labelling), the desired centre is themiddle of the rectangle.  A radius_tolerance (a positive number less than 0. 2) is used to adjustthe centre in such cases.  E. g.  the medial axis centre will be moved toward the middle of thepolygon when the radius of the largest circle being reduced by less than the given tolerance.  Thevalue of radius_tolerance in the other call for medial_axis_polygon is 0. 05 (5 percent). A return value of zero indicates the function call was successful.",
      "id": "3462"
    },
    {
      "names": [
        "Integer Get_polygon_centroid(Element polygon, Real &cx, Real &cy)"
      ],
      "description": "Get xy-coordinate cx cy of the centroid of an Element polygon. A return value of zero indicates the function call was successful.",
      "id": "3479"
    },
    {
      "names": [
        "Integer Rotate(Dynamic_Element elements, Real xorg, Real yorg, Real ang)"
      ],
      "description": "Rotate all the elements in the Dynamic_Element elements about the centre point (xorg,yorg)through the angle ang. A function return value of zero indicates the rotate was successful.",
      "id": "410"
    },
    {
      "names": [
        "Integer Share_status(Model model, Integer &is_share_out, Integer &is_share_in)"
      ],
      "description": "Check share status of the Model modelShare out status is_share_out: 0 not share out, 1 share outShare out status is_share_in: 0 not share in, 1 share inA return value of zero indicates the function call was successful.",
      "id": "3051"
    },
    {
      "names": [
        "Integer Share_status(Tin tin, Integer &is_share_out, Integer &is_share_in)"
      ],
      "description": "Check share status of the Tin tinShare out status is_share_out: 0 not share out, 1 share outShare out status is_share_in: 0 not share in, 1 share inA return value of zero indicates the function call was successful.",
      "id": "3052"
    },
    {
      "names": [
        "Integer Share_status(Model model, Integer &is_share_out, Integer &is_share_in, Text &share_in_location)"
      ],
      "description": "Check share status of the Model modelShare out status is_share_out: 0 not share out, 1 share outShare out status is_share_in: 0 not share in, 1 share inLocation for share return in share_in_locationA return value of zero indicates the function call was successful.",
      "id": "3064"
    },
    {
      "names": [
        "Integer Share_status(Tin tin, Integer &is_share_out, Integer &is_share_in, Text &share_in_location)"
      ],
      "description": "Page 1200Utilities\fChapterCheck share status of the Tin tinShare out status is_share_out: 0 not share out, 1 share outShare out status is_share_in: 0 not share in, 1 share inLocation for share return in share_in_locationA return value of zero indicates the function call was successful.",
      "id": "3065"
    },
    {
      "names": [
        "Integer Swap_xy(Dynamic_Element elements)"
      ],
      "description": "Swap the x and y co-ordinates for all the elements in the Dynamic_Element elements. A function return value of zero indicates the swap was successful.",
      "id": "412"
    },
    {
      "names": [
        "Integer Translate(Dynamic_Element elements, Real dx, Real dy, Real dz)"
      ],
      "description": "Translate translates all the elements in the Dynamic_Element elements by the amount(dx,dy,dz). A function return value of zero indicates the translate was successful.",
      "id": "400"
    },
    {
      "names": [
        "Integer Set_inquire_style(Text inquire_style)"
      ],
      "description": "Set the current inquire style of the project to the one with name inquire_style. A function return value of zero indicates the style was set successfully.",
      "id": "3838"
    },
    {
      "names": [
        "Integer Get_current_inquire_style(Text &current_style)"
      ],
      "description": "Get the current inquire style of the project and assign the name to Text current_style. A function return value of zero indicates the call was successfully.",
      "id": "3931"
    },
    {
      "names": [
        "Integer Inquire_style_exists(Text style)"
      ],
      "description": "Check if the inquire style with given name style exists. A function return value of zero indicates the style does not exist. A function return value of one indicates the style exists.",
      "id": "3932"
    },
    {
      "names": [
        "Integer License_module_valid(Text module, Integer &valid)"
      ],
      "description": "Check if the user has valid license to use given 12d moduleA function return value of zero indicates the call was successfully.",
      "id": "3933"
    },
    {
      "names": [
        "Integer Project_settings_profile_exists(Text profile_name)"
      ],
      "description": "Check if the project settings profile with given name profile_name exists. Page 1204Utilities\fChapterA function return value of zero indicates the style does not exist. A function return value of one indicates the style exists.",
      "id": "3934"
    },
    {
      "names": [
        "Integer Delete_all_functions(Integer delete_strings_and_models)"
      ],
      "description": "Delete all functions in the project.  if delete_strings_and_models is non zero then all strings andmodels created by functions also being deleted. Note: the call cannot be undone. A function return value of zero indicates the call was successfully.",
      "id": "3937"
    },
    {
      "names": [
        "Integer Delete_function_strings_and_models(Text function_name)"
      ],
      "description": "Delete all strings and models created by a function with given name function_nameNote: the call cannot be undone. A function return value of zero indicates the call was successfully.",
      "id": "3938"
    },
    {
      "names": [
        "Integer Get_icon_size(Integer &size)"
      ],
      "description": "Get the current pixel size of the standard icon in the project and set it to Integer sizeA function return value of zero indicates the call was successfully.",
      "id": "7593"
    },
    {
      "names": [
        "Integer Get_active_theme_name(Text &name)"
      ],
      "description": "Get name of the active theme and set it to Text nameA function return value of zero indicates the call was successfully.",
      "id": "7594"
    },
    {
      "names": [
        "Integer Get_active_theme_image_directory(Text &image_directory)"
      ],
      "description": "Get image directory of the active theme and set it to Text image_directoryA function return value of zero indicates the call was successfully.",
      "id": "7595"
    },
    {
      "names": [
        "Integer Get_disk_file_name(Model model, Text &disk_name)"
      ],
      "description": "Get disk file name of given model and set it to Text disk_nameA function return value of zero indicates the call was successfully.",
      "id": "7613"
    },
    {
      "names": [
        "Integer Get_disk_file_name(Tin tin, Text &disk_name)"
      ],
      "description": "Get disk file name of given tin and set it to Text disk_nameA function return value of zero indicates the call was successfully.",
      "id": "7614"
    },
    {
      "names": [
        "Integer Get_disk_file_name(Tin tin, Text &disk_name)"
      ],
      "description": "Get disk file name of given tin and set it to Text disk_nameA function return value of zero indicates the call was successfully.",
      "id": "7615"
    },
    {
      "names": [
        "Integer Get_disk_file_name(Function f, Text &disk_name)"
      ],
      "description": "Get disk file name of given Function f and set it to Text disk_nameA function return value of zero indicates the call was successfully.",
      "id": "7616"
    },
    {
      "names": [
        "Integer Check_object_tree_enable(Integer &enable)"
      ],
      "description": "Integer enble should be 1A function return value of zero indicates the call was successfully.",
      "id": "7619"
    },
    {
      "names": [
        "Integer Get_license_client(Text &client)"
      ],
      "description": "Get the client information from 12D license and set that to Text clientA function return value of zero indicates the call was successful.",
      "id": "7620"
    },
    {
      "names": [
        "Integer Explode_text(Dynamic_Element input_data, Integer preserve_height, Dynamic_Element &output_texts)"
      ],
      "description": "Explode text component of text strings and 4d strings into arc and lines.  The z value of the textwill be set to the results if preserve_height is 1. A function return value of zero indicates the call was successfully.",
      "id": "7626"
    },
    {
      "names": [
        "Integer Explode_text_border(Element text, Real pixel_to_mm, Real plot_scale, Element &border)"
      ],
      "description": "Explode the border of given text string text into a super string Element border.  If the type of textis device; pixel_to_mm will be used for the size of the result border.  If the type of text is paper;plot_scale will be used for the size of the result border. A function return value of zero indicates the call was successfully.",
      "id": "7636"
    },
    {
      "names": [
        "Integer Explode_vertex_text_border(Element text, Integer vertex, Real pixel_to_mm, Real plot_scale, Element &border)"
      ],
      "description": "Explode the border of given vertex text of a super string text into a super string Element border. If the type of text is device; pixel_to_mm will be used for the size of the result border.  If the typeof text is paper; plot_scale will be used for the size of the result border. A function return value of zero indicates the call was successfully.",
      "id": "7637"
    },
    {
      "names": [
        "Integer Explode_segment_text_border(Element text, Integer segment, Real pixel_to_mm, Real plot_scale, Element &border)"
      ],
      "description": "Explode the border of given segment text of a super string text into a super string Elementborder.  If the type of text is device; pixel_to_mm will be used for the size of the result border.  Ifthe type of text is paper; plot_scale will be used for the size of the result border. A function return value of zero indicates the call was successfully.",
      "id": "7638"
    },
    {
      "names": [
        "Integer Write_DAE_file(Dynamic_Element data_to_write, Point origin, Real null_z_value, Integer ss_justify_mode, Text output_file_name)"
      ],
      "description": "Write a new DAE file at the location output_file_name from a list of 3D data data_to_write. A function return value of zero indicates the call was successfully.",
      "id": "7658"
    },
    {
      "names": [
        "Integer Is_dumping_widgets()"
      ],
      "description": "For internal use only, no doco.",
      "id": "7703"
    },
    {
      "names": [
        "Integer Get_SDR_field_file_type(Function function, Integer &field_file_type)"
      ],
      "description": "Get the field_file_type of given SDR function: 0 means flat, 1 means tree. A function return value of zero indicates the call was successfully.",
      "id": "7742"
    },
    {
      "names": [
        "Integer Convert_SDR_flat_to_tree(Function function, Integer opcodes_as_children)"
      ],
      "description": "If the field file type of given SDR function is flat, attempt to change that into tree type. If opcodes_as_children is non zero, then moving the opcodes of the measurement as children. A function return value of zero indicates the call was successfully.",
      "id": "7743"
    },
    {
      "names": [
        "Integer Create_macro_function(Text function_name, Macro_Function &func)"
      ],
      "description": "Create a user defined 12d Model Function with the name function_name and return thecreated Function as func. If a Function with the name function_name already exists, the function fails and a non-zerofunction return value is returned. A function return value of zero indicates the Function was successfully created.",
      "id": "1135"
    },
    {
      "names": [
        "Integer Function_recalc(Function func)"
      ],
      "description": "Recalc (i. e.  re-run) the Function func. A function return value of zero indicates the recalc was successful.",
      "id": "1138"
    },
    {
      "names": [
        "Integer Function_exists(Text function_name)"
      ],
      "description": "Checks to see if a 12d or user 12d Function with the name function_name exists. A non-zero function return value indicates a Function does exist. A zero function return value indicates that no Function of name function_name exists. Warning - this is the opposite of most 12dPL function return values.",
      "id": "1141"
    },
    {
      "names": [
        "Integer Function_rename(Text original_name, Text new_name)"
      ],
      "description": "Change the name of the Function original_name to the new name new_name. A function return value of zero indicates the rename was successful.",
      "id": "425"
    },
    {
      "names": [
        "Integer Get_name(Function func, Text &name)"
      ],
      "description": "Get the name of the Function func and return it in name. A function return value of zero indicates the Function name was successfully returned.",
      "id": "1455"
    },
    {
      "names": [
        "Integer Get_type(Function func, Integer &func_type)"
      ],
      "description": "Get the type of the Function func and return it in func_type. The value of func_type is listed in the Appendix A - Function type.  See Function Type. A function return value of zero indicates the Function name was successfully returned.",
      "id": "3530"
    },
    {
      "names": [
        "Function Get_function(Text function_name)"
      ],
      "description": "Get the Function with the name function_name and return it as the function return value. If the function does not exist, a null function will be returned. The existence of a function with the name function_name can first be checked by the callFunction_exists(function_name).",
      "id": "1140"
    },
    {
      "names": [
        "Integer Get_macro_function(Text function_name, Macro_Function &func)"
      ],
      "description": "Get the Macro Function with the name function_name and return it as func. If the Function named function_name does not exist, or it does exist but is not a MacroFunction, then the function fails and a non-zero function return value is returned. A function return value of zero indicates the Macro Function was successfully returned.",
      "id": "1142"
    },
    {
      "names": [
        "Integer Get_all_functions(Dynamic_Text &functions)"
      ],
      "description": "Get all names of the 12d and user defined Function currently in the project.  The Function namesare returned in the Dynamic_Text functions. A function return value of zero indicates the Function names are returned successfully.",
      "id": "1139"
    },
    {
      "names": [
        "Integer Function_delete(Text function_name)"
      ],
      "description": "Delete the Function with the name function_name. Note that the data in the function is not deleted. If a Function with the name function_name does not exist, the function fails and a non-zerofunction return value is returned. A function return value of zero indicates the Function was successfully deleted.",
      "id": "1137"
    },
    {
      "names": [
        "Integer Get_time_created(Function func, Integer &time)"
      ],
      "description": "Get the time that the Function func was created and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2117"
    },
    {
      "names": [
        "Integer Get_time_updated(Function func, Integer &time)"
      ],
      "description": "Get the time that the Function func was last updated and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2118"
    },
    {
      "names": [
        "Integer Set_time_updated(Function func, Integer time)"
      ],
      "description": "Set the update time for the Function func to time. Page 121812d Model Macro_Functions\fChapterThe time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully set.",
      "id": "2119"
    },
    {
      "names": [
        "Integer Add_dependancy_file(Macro_Function func, Text name, Text file)"
      ],
      "description": "Record in the Macro Function func, that the disk file named file is dependant on func and on arecalc of func, needs to be checked for changes from the last time that func was recalced. The dependency is added with the unique name name. If a dependency called name already exists, a non-zero function return value is returned and nodependency is added. A function return value of zero indicates the dependency was successfully set.",
      "id": "1143"
    },
    {
      "names": [
        "Integer Add_dependancy_model(Macro_Function func, Text name, Model model)"
      ],
      "description": "Record in the Macro Function func, that the Model model is dependant on func and on a recalcof func, needs to be checked for changes from the last time that func was recalced. If a dependency called name already exists, a non-zero function return value is returned and nodependency is added. A function return value of zero indicates the dependency was successfully set.",
      "id": "1144"
    },
    {
      "names": [
        "Integer Add_dependancy_tin(Macro_Function func, Text name, Tin tin)"
      ],
      "description": "Record in the Macro Function func, that the Tin tin is dependant on func and on a recalc offunc, needs to be checked for changes from the last time that func was recalced. If a dependency called name already exists, a non-zero function return value is returned and nodependency is added. A function return value of zero indicates the dependency was successfully set.",
      "id": "1145"
    },
    {
      "names": [
        "Integer Add_dependancy_template(Macro_Function func, Text name, Text template)"
      ],
      "description": "Record in the Macro Function func, that the template name template is dependant on func andon a recalc of func, needs to be checked for changes from the last time that func was recalced. If a dependency called name already exists, a non-zero function return value is returned and nodependency is added. A function return value of zero indicates the dependency was successfully set.",
      "id": "1146"
    },
    {
      "names": [
        "Integer Add_dependancy_element(Macro_Function func, Text name, Element elt)"
      ],
      "description": "Record in the Macro Function func, that the Element elt is dependant on func and on a recalc offunc, needs to be checked for changes from the last time that func was recalced. If a dependency called name already exists, a non-zero function return value is returned and nodependency is added. A function return value of zero indicates the dependency was successfully set.",
      "id": "1147"
    },
    {
      "names": [
        "Integer Get_number_of_dependancies(Macro_Function func, Integer &count)"
      ],
      "description": "For the Macro_Function func, return the number of dependencies that exist for func and returnthe number in count. A function return value of zero indicates the count was successfully returned.",
      "id": "1148"
    },
    {
      "names": [
        "Integer Get_dependancy_name(Macro_Function func, Integer i, Text &name)"
      ],
      "description": "For the Macro_Function func, return the name of the i\u2019th dependencies in name. A function return value of zero indicates the name was successfully returned.",
      "id": "1149"
    },
    {
      "names": [
        "Integer Get_dependancy_type(Macro_Function func, Integer i, Text &type)"
      ],
      "description": "Page 122012d Model Macro_Functions\fChapterFor the Macro_Function func, return the type of the i\u2019th dependencies as the Text type. The valid types are:unknownFileElementModelTemplateTinIntegerRealTextA function return value of zero indicates the type was successfully returned.",
      "id": "1150"
    },
    {
      "names": [
        "Integer Get_dependancy_file(Macro_Function func, Integer i, Text &file)"
      ],
      "description": "For the Macro_Function func, if the i\u2019th dependency is a file then return the name of the file inname. If the i\u2019th dependency is not a file then a non-zero function return value is returned. A function return value of zero indicates the file name was successfully returned.",
      "id": "1151"
    },
    {
      "names": [
        "Integer Get_dependancy_model(Macro_Function func, Integer i, Model &model)"
      ],
      "description": "For the Macro_Function func, if the i\u2019th dependency is a Model then return the Model in model. If the i\u2019th dependency is not a Model then a non-zero function return value is returned. A function return value of zero indicates the Model was successfully returned.",
      "id": "1152"
    },
    {
      "names": [
        "Integer Get_dependancy_tin(Macro_Function func, Integer i, Tin &tin)"
      ],
      "description": "For the Macro_Function func, if the i\u2019th dependency is a Tin then return the Tin in tin. If the i\u2019th dependency is not a Tin then a non-zero function return value is returned. A function return value of zero indicates the Tin was successfully returned.",
      "id": "1153"
    },
    {
      "names": [
        "Integer Get_dependancy_template(Macro_Function func, Integer i, Text &template)"
      ],
      "description": "For the Macro_Function func, if the i\u2019th dependency is a Template then return the templatename in template. If the i\u2019th dependency is not a Template then a non-zero function return value is returned. A function return value of zero indicates the Tin was successfully returned.",
      "id": "1154"
    },
    {
      "names": [
        "Integer Get_dependancy_element(Macro_Function func, Integer i, Element &element)"
      ],
      "description": "For the Macro_Function func, if the i\u2019th dependency is an Element then return the Element in elt. If the i\u2019th dependency is not an Element then a non-zero function return value is returned. A function return value of zero indicates the Element was successfully returned.",
      "id": "1155"
    },
    {
      "names": [
        "Integer Get_dependancy_data(Macro_Function func, Integer i, Text &text)"
      ],
      "description": "For the Macro_Function func, a text description of the i\u2019th dependency is returned in text. For an Element, the text description is: model_name->element_name is return in text. For a File/Model/Template/Tin, the text description is the name of the File/Model/Template/Tin. For an Integer, the text description is the Integer converted to Text. For a Real, the text description is the Real converted to Text.  LJG? how many decimalsFor a Text, the text description is just the text. A function return value of zero indicates the Macro_Function description was successfullyreturned.",
      "id": "1156"
    },
    {
      "names": [
        "Integer Get_dependancy_type(Macro_Function func, Text name, Text &type)"
      ],
      "description": "For the Macro_Function func, return the type of the dependency with the name name as theText type. The valid types are:unknownPage 122212d Model Macro_Functions\fChapterFileElementModelTemplateTinIntegerRealText// not implemented or accessible from macros// not implemented or accessible from macros// not implemented or accessible from macrosIf a dependency called name does not exist then a non-zero function return value is returned. A function return value of zero indicates the type was successfully returned.",
      "id": "1157"
    },
    {
      "names": [
        "Integer Get_dependancy_file(Macro_Function func, Text name, Text &file)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is a File, return the filename as file. If no dependency called name exists, or it does exist and it is not a file, then a non-zero functionreturn value is returned; and also file remains unchanged. A function return value of zero indicates the file name was successfully returned.",
      "id": "1158"
    },
    {
      "names": [
        "Integer Get_dependancy_model(Macro_Function func, Text name, Model &model)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is a Model, return theModel as model. If no dependency called name exists, or it does exist and it is not a Model, then a non-zerofunction return value is returned; and also model remains unchanged. A function return value of zero indicates the Model was successfully returned.",
      "id": "1159"
    },
    {
      "names": [
        "Integer Get_dependancy_tin(Macro_Function func, Text name, Tin &tin)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is a Tin, return the Tin astin. If no dependency called name exists, or it does exist and it is not a Tin, then a non-zero functionreturn value is returned; and also tin remains unchanged. A function return value of zero indicates the Tin was successfully returned.",
      "id": "1160"
    },
    {
      "names": [
        "Integer Get_dependancy_template(Macro_Function func, Text name, Text &template)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is a Template, return theTemplate name as template. If no dependency called name exists, or it does exist and it is not a Template, then a non-zerofunction return value is returned; and also template remains unchanged. A function return value of zero indicates the template name was successfully returned.",
      "id": "1161"
    },
    {
      "names": [
        "Integer Get_dependancy_element(Macro_Function func, Text name, Element &element)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is an Element, return theElement as elt. If no dependency called name exists, or it does exist and it is not an Element, then a non-zerofunction return value is returned; and also elt remains unchanged. A function return value of zero indicates the Element was successfully returned.",
      "id": "1162"
    },
    {
      "names": [
        "Integer Get_dependancy_data(Macro_Function func, Text name, Text &text)"
      ],
      "description": "For the Macro_Function func, get the dependency called name and if it is a Text, return the Textas text. If no dependency called name exists, or it does exist and it is not a Text, then a non-zerofunction return value is returned; and also text remains unchanged. A function return value of zero indicates the Text was successfully returned.",
      "id": "1163"
    },
    {
      "names": [
        "Integer Delete_dependancy(Macro_Function func, Text name)"
      ],
      "description": "For the Macro_Function func, if the dependency called name exist then it is deleted from the listof dependencies for func. Warning: if a dependency is deleted then the dependency number of all dependencies after thedeleted one will be reduced by one. Page 122412d Model Macro_Functions\fChapterIf no dependency called name exists then a non-zero function return value is returned. A function return value of zero indicates the dependency was successfully deleted.",
      "id": "1164"
    },
    {
      "names": [
        "Integer Delete_all_dependancies(Macro_Function func)"
      ],
      "description": "For the Macro_Function func, delete all the dependencies. A function return value of zero indicates all the dependency were successfully deleted.",
      "id": "1165"
    },
    {
      "names": [
        "Integer Get_id(Function func, Uid &id)"
      ],
      "description": "For the Function/Macro_Function func, get its unique Uid in the Project and return it in id. A function return value of zero indicates the Uid was successfully returned.",
      "id": "1909"
    },
    {
      "names": [
        "Integer Get_id(Function func, Integer &id)"
      ],
      "description": "For the Function/Macro_Function func, get its unique id in the Project and return it in id. A function return value of zero indicates the id was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_id(Function func,Uid &id) instead.",
      "id": "1177"
    },
    {
      "names": [
        "Integer Get_function_id(Element elt, Uid &id)"
      ],
      "description": "For an Element elt, check if it has a function Uid and if it has, return it in id. If the element doesn\u2019t have a function Uid, id will be set as null. A function return value of zero indicates the Uid was successfully returned.",
      "id": "1910"
    },
    {
      "names": [
        "Integer Get_function_id(Element elt, Integer &id)"
      ],
      "description": "For an Element elt, check if it has a function id and if it has, return it in id. If elt doesn\u2019t have a function id, id will be set to 0 and the return value is also zeroA function return value of zero indicates the id was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_function_id(Element elt,Uid &id) instead.",
      "id": "1178"
    },
    {
      "names": [
        "Integer Set_function_id(Element elt, Uid id)"
      ],
      "description": "For an Element elt, set its function Uid to id. A function return value of zero indicates the function Uid was successfully set.",
      "id": "1911"
    },
    {
      "names": [
        "Integer Set_function_id(Element elt, Integer id)"
      ],
      "description": "For an Element elt, set its function id to id. A function return value of zero indicates the function id was successfully set. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Set_function_id(Element elt,Uid id) instead.",
      "id": "1179"
    },
    {
      "names": [
        "Function Get_function(Uid function_id)"
      ],
      "description": "Find the Function/Macro_Function with the Uid function_id. The Function is returned as the function return value. If there is no Function/Macro_Function with the Uid function_id, then a null Function/Macro_Function is returned as the function return value.",
      "id": "1916"
    },
    {
      "names": [
        "Function Get_function(Integer function_id)"
      ],
      "description": "Find the Function/Macro_Function with the Id function_id. The Function is returned as the function return value. If there is no Function/Macro_Function with the Id function_id, then a null Function/Macro_Function is returned as the function return value. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_function(Uid function_id) instead.",
      "id": "1188"
    },
    {
      "names": [
        "Integer Function_exists(Uid function_id)"
      ],
      "description": "Checks to see if a Function/Macro_Function with Uid function_id exists. A non-zero function return value indicates that a Function does exist. A zero function return value indicates that no Function exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1915"
    },
    {
      "names": [
        "Integer Function_attribute_exists(Macro_Function fcn, Text att_name)",
        "Integer Function_attribute_exists(Function fcn, Text att_name)"
      ],
      "description": "Checks to see if an attribute with the name att_name exists for the Macro_Function/Functionfcn. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1109"
    },
    {
      "names": [
        "Integer Function_attribute_exists(Function fcn, Text name, Integer &no)",
        "Integer Function_attribute_exists(Macro_Function fcn, Text name, Integer &no)"
      ],
      "description": "12d Model Macro_FunctionsPage 1227\f12d Model Programming Language ManualChecks to see if an attribute with the name att_name exists for the Macro_Function/Functionfcn. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1110"
    },
    {
      "names": [
        "Integer Function_attribute_delete(Macro_Function fcn, Text att_name)",
        "Integer Function_attribute_delete(Function fcn, Text att_name)"
      ],
      "description": "Delete the attribute with the name att_name from the Macro_Function/Function fcn. A function return value of zero indicates the attribute was deleted.",
      "id": "1111"
    },
    {
      "names": [
        "Integer Function_attribute_delete(Macro_Function fcn, Integer att_no)",
        "Integer Function_attribute_delete(Function fcn, Integer att_no)"
      ],
      "description": "Delete the attribute with the number att_no from the Macro_Function/Function fcn. A function return value of zero indicates the attribute was deleted.",
      "id": "1112"
    },
    {
      "names": [
        "Integer Function_attribute_delete_all(Function fcn)",
        "Integer Function_attribute_delete_all(Macro_Function fcn)"
      ],
      "description": "Delete all the attributes from the Macro_Function/Function fcn. A function return value of zero indicates all the attribute were deleted.",
      "id": "1113"
    },
    {
      "names": [
        "Integer Function_attribute_dump(Function fcn)",
        "Integer Function_attribute_dump(Macro_Function fcn)"
      ],
      "description": "Write out information about the Macro_Function/Function attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "1114"
    },
    {
      "names": [
        "Integer Function_attribute_debug(Macro_Function fcn)",
        "Integer Function_attribute_debug(Function fcn)"
      ],
      "description": "Write out even more information about the Macro_Function/Function attributes to the OutputWindow. A function return value of zero indicates the function was successful.",
      "id": "1115"
    },
    {
      "names": [
        "Integer Get_function_number_of_attributes(Function fcn, Integer &no_atts)",
        "Integer Get_function_number_of_attributes(Macro_Function fcn, Integer &no_atts)"
      ],
      "description": "Get the number of top level attributes in the Macro_Function/Function fcn and return it inno_atts. A function return value of zero indicates the number is successfully returned",
      "id": "1116"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Text &att)",
        "Integer Get_function_attribute(Function fcn, Text att_name, Text &txt)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute called att_name and return the attribute12d Model Macro_FunctionsPage 1229\f12d Model Programming Language Manualvalue in txt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1117"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Integer &int)",
        "Integer Get_function_attribute(Function fcn, Text att_name, Integer &int)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute called att_name and return the attributevalue in int.  The attribute must be of type Integer. If the attribute is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1118"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Text att_name, Real &real)",
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Real &real)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute called att_name and return the attributevalue in real.  The attribute must be of type Real. If the attribute is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1119"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Integer att_no, Text &txt)",
        "Integer Get_function_attribute(Macro_Function fcn, Integer att_no, Text &txt)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute with attribute number att_no and returnthe attribute value in txt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1120"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Integer att_no, Integer &int)",
        "Integer Get_function_attribute(Macro_Function fcn, Integer att_no, Integer &int)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute with attribute number att_no and returnthe attribute value in int.  The attribute must be of type Integer. If the attribute is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1121"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Integer att_no, Real real)",
        "Integer Get_function_attribute(Macro_Function fcn, Integer att_no, Real real)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute with attribute number att_no and returnthe attribute value in real.  The attribute must be of type Real. If the attribute is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1122"
    },
    {
      "names": [
        "Integer Get_function_attribute_name(Macro_Function fcn, Integer att_no, Text &txt)",
        "Integer Get_function_attribute_name(Function fcn, Integer att_no, Text &txt)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute with attribute number att_no and returnthe attribute value in txt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1123"
    },
    {
      "names": [
        "Integer Get_function_attribute_type(Macro_Function fcn, Text att_name, Integer &att_type)",
        "Integer Get_function_attribute_type(Function fcn, Text att_name, Integer &att_type)"
      ],
      "description": "For the Macro_Function/Function fcn, get the type of the attribute called att_name and returnthe attribute type in att_type. A function return value of zero indicates the attribute type is successfully returned.",
      "id": "1124"
    },
    {
      "names": [
        "Integer Get_function_attribute_type(Function fcn, Integer att_no, Integer &att_type)",
        "Integer Get_function_attribute_type(Macro_Function fcn, Integer att_no, Integer &att_type)"
      ],
      "description": "For the Macro_Function/Function fcn, get the type of the attribute with attribute number att_noand return the attribute type in att_type. A function return value of zero indicates the attribute type is successfully returned.",
      "id": "1125"
    },
    {
      "names": [
        "Integer Get_function_attribute_length(Function fcn, Text att_name, Integer &att_len)",
        "Integer Get_function_attribute_length(Macro_Function fcn, Text att_name, Integer &att_len)"
      ],
      "description": "For the Macro_Function/Function fcn, get the length in bytes of the attribute of name att_name. The number of bytes is returned in att_len. This is mainly for use with attributes of types Text and Binary (blobs)A function return value of zero indicates the attribute length is successfully returned.",
      "id": "1126"
    },
    {
      "names": [
        "Integer Get_function_attribute_length(Function fcn, Integer att_no, Integer &att_len)",
        "Integer Get_function_attribute_length(Macro_Function fcn, Integer att_no, Integer &att_len)"
      ],
      "description": "For the Macro_Function/Function fcn, get the length in bytes of the attribute with attributenumber att_no.  The number of bytes is returned in att_len. This is mainly for use with attributes of types Text and Binary (blobs)A function return value of zero indicates the attribute length is successfully returned.",
      "id": "1127"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Text txt)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Text txt)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute called att_name does not exist then create it as type Text and give it the valuetxt. if the attribute called att_name does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1128"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Integer int)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Integer int)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute called att_name does not exist then create it as type Integer and give it the valueint. \uf020if the attribute called att_name does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1129"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Real real)",
        "Integer Set_function_attribute(Function fcn, Text att_name, Real real)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute called att_name does not exist then create it as type Real and give it the valuereal. \uf020if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1130"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Text txt)",
        "Integer Set_function_attribute(Function fcn, Integer att_no, Text txt)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute with attribute number att_no does not exist then create it as type Text and give itthe value txt. \uf020if the attribute with attribute number att_no does exist and it is type Text, then set its value totxt. If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero returnvalue is returned. Page 123412d Model Macro_Functions\fChapterA function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1131"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Integer att_no, Integer int)",
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Integer int)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute with attribute number att_no does not exist then create it as type Integer andgive it the value int. \uf020if the attribute with attribute number att_no does exist and it is type Integer, then set its value toint. If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1132"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Real real)",
        "Integer Set_function_attribute(Function fcn, Integer att_no, Real real)"
      ],
      "description": "For the Macro_Function/Function fcn,\uf020if the attribute with attribute number att_no does not exist then create it as type Real and giveit the value real. \uf020if the attribute with attribute number att_no does exist and it is type Real, then set its value toreal. If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1133"
    },
    {
      "names": [
        "Integer Get_function_attributes(Function fcn, Attributes &att)",
        "Integer Get_function_attributes(Macro_Function fcn, Attributes &att)"
      ],
      "description": "For the Function/Macro_Function fcn, return the Attributes for the Function/Macro_Function asatt. If fcn has no Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "1992"
    },
    {
      "names": [
        "Integer Set_function_attributes(Function fcn, Attributes att)",
        "Integer Set_function_attributes(Macro_Function fcn, Attributes att)"
      ],
      "description": "For the Function/Macro_Function fcn, set the Attributes for the Function/Macro_Function fcn toatt. A function return value of zero indicates the attribute is successfully set.",
      "id": "1993"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Text att_name, Uid &uid)",
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Uid &uid)"
      ],
      "description": "From the Function/Macro_Function fcn, get the attribute called att_name and return the attributevalue in uid.  The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1994"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Attributes &att)",
        "Integer Get_function_attribute(Function fcn, Text att_name, Attributes &att)"
      ],
      "description": "From the Function/Macro_Function fcn, get the attribute called att_name and return the attributevalue in att.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1995"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn, Integer att_no, Uid &uid)",
        "Integer Get_function_attribute(Function fcn, Integer att_no, Uid &uid)"
      ],
      "description": "From the Function/Macro_Function fcn, get the attribute with number att_no and return theattribute value in uid.  The attribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1996"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn, Integer att_no, Attributes &att)",
        "Integer Get_function_attribute(Macro_Function fcn, Integer att_no, Attributes &att)"
      ],
      "description": "From the Function/Macro_Function fcn, get the attribute with number att_no and return theattribute value in att.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "1997"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Uid uid)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Uid uid)"
      ],
      "description": "For the Function/Macro_Function fcn,\uf020if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1998"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Attributes att)",
        "Integer Set_function_attribute(Function fcn, Text att_name, Attributes att)"
      ],
      "description": "For the Function/Macro_Function fcn,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1999"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Uid uid)",
        "Integer Set_function_attribute(Function fcn, Integer att_no, Uid uid)"
      ],
      "description": "For the Function/Macro_Function fcn, if the attribute number att_no exists and it is of type Uid,then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2000"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Integer att_no, Attributes att)",
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Attributes att)"
      ],
      "description": "For the Function/Macro_Function fcn, if the attribute number att_no exists and it is of typeAttributes, then its value is set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "2001"
    },
    {
      "names": [
        "Integer Get_function_data_start_model_id(Function f, Uid &uid)"
      ],
      "description": "Get the smallest model id from a give function f and set the value to Uid uid,A function return value of zero indicates the Uid value is successfully set. .",
      "id": "7712"
    },
    {
      "names": [
        "Integer Get_function_data_end_model_id(Function f, Uid &uid)"
      ],
      "description": "Get the biggest model id from a give function f and set the value to Uid uid,A function return value of zero indicates the Uid value is successfully set. .",
      "id": "7713"
    },
    {
      "names": [
        "Integer Get_function_data_start_element_id(Function f, Uid &uid)"
      ],
      "description": "Get the smallest element id from a give function f and set the value to Uid uid,A function return value of zero indicates the Uid value is successfully set. .",
      "id": "7714"
    },
    {
      "names": [
        "Integer Get_function_data_end_element_id(Function f, Uid &uid)"
      ],
      "description": "Get the biggest element id from a give function f and set the value to Uid uid,A function return value of zero indicates the Uid value is successfully set. .",
      "id": "7715"
    },
    {
      "names": [
        "Integer Get_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Dynamic_Element &elements)"
      ],
      "description": "Get all the elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) and set those to Dynamic_Elementelements, If skip_tins is non zero, then tins are not included in the list of result. A function return value of zero indicates the elements list is successfully set. .",
      "id": "2794"
    },
    {
      "names": [
        "Integer Get_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Integer loaded_models, Dynamic_Element &elements)"
      ],
      "description": "Get all the elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) and set those to Dynamic_Elementelements, If skip_tins is non zero, then tins are not included in the list of result.  The search willload previously unloaded model into the project if loaded_models is non zero. A function return value of zero indicates the elements list is successfully set. .",
      "id": "2795"
    },
    {
      "names": [
        "Integer Get_models(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Dynamic_Text &models)"
      ],
      "description": "Get all the models created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) and set their names to Dynamic_Textmodels, If skip_tins is non zero, then tins are not included in the list of result. A function return value of zero indicates the names list is successfully set.",
      "id": "2796"
    },
    {
      "names": [
        "Integer Get_models(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Integer loaded_models, Dynamic_Text &models)"
      ],
      "description": "Get all the models created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) and set their names to Dynamic_Textmodels, If skip_tins is non zero, then tins are not included in the list of result.  The search willload previously unloaded model into the project if loaded_models is non zero. A function return value of zero indicates the names list is successfully set.",
      "id": "2797"
    },
    {
      "names": [
        "Integer Check_elements_for_clean(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins)"
      ],
      "description": "Check if all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) are ready for clean.  If skip_tins is non zero,then tins are not included in the list to check. A function return value of zero all elements are ready for clean.",
      "id": "2798"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins)"
      ],
      "description": "Clean all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id).  If skip_tins is non zero, then tins are notincluded in the list to clean. A function return value of zero all elements are cleaned successfully.",
      "id": "2799"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Dynamic_Element &elements)"
      ],
      "description": "Clean all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id).  If skip_tins is non zero, then tins are notincluded in the list to clean.  The list of old elements also is returned in Dynamic_Elementelements. Page 124212d Model Macro_Functions\fChapterA function return value of zero all elements are cleaned successfully.",
      "id": "2800"
    },
    {
      "names": [
        "Integer Draw_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins)"
      ],
      "description": "Redraw all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id).  If skip_tins is non zero, then tins are notincluded in the list to draw. A function return value of zero all elements are drawn successfully.",
      "id": "2801"
    },
    {
      "names": [
        "Integer Draw_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_model_id, Integer skip_tins, Integer colour)"
      ],
      "description": "Redraw all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id) using an override Colour colour.  If skip_tinsis non zero, then tins are not included in the list to draw. A function return value of zero all elements are drawn successfully.",
      "id": "2802"
    },
    {
      "names": [
        "Integer Get_elements(Uid function_id, Integer skip_tins, Dynamic_Element &elements)"
      ],
      "description": "Get all the elements created by given function_id and set those to Dynamic_Element elements,If skip_tins is non zero, then tins are not included in the list of result. A function return value of zero indicates the elements list is successfully set.",
      "id": "7716"
    },
    {
      "names": [
        "Integer Get_elements(Uid function_id, Integer skip_tins, Integer loaded_models, Dynamic_Element &elements)"
      ],
      "description": "12d Model Macro_FunctionsPage 1243\f12d Model Programming Language ManualGet all the elements created by given function_id and set those to Dynamic_Element elements,If skip_tins is non zero, then tins are not included in the list of result.  The search will loadpreviously unloaded model into the project if loaded_models is non zero. A function return value of zero indicates the elements list is successfully set. .",
      "id": "7717"
    },
    {
      "names": [
        "Integer Get_models(Uid function_id, Integer skip_tins, Dynamic_Text &models)"
      ],
      "description": "Get all the models created by given function_id and set their names to Dynamic_Text models,If skip_tins is non zero, then tins are not included in the list of result. A function return value of zero indicates the names list is successfully set.",
      "id": "7718"
    },
    {
      "names": [
        "Integer Get_models(Uid function_id, Integer skip_tins, Integer loaded_models, Dynamic_Text &models)"
      ],
      "description": "Get all the models created by given function_id and set their names to Dynamic_Text models,If skip_tins is non zero, then tins are not included in the list of result.  The search will loadpreviously unloaded model into the project if loaded_models is non zero. A function return value of zero indicates the names list is successfully set.",
      "id": "7719"
    },
    {
      "names": [
        "Integer Check_elements_for_clean(Uid function_id, Integer skip_tins)"
      ],
      "description": "Check if all elements created by given function_id are ready for clean.  If skip_tins is non zero,then tins are not included in the list to check. A function return value of zero all elements are ready for clean.",
      "id": "7720"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Integer skip_tins)"
      ],
      "description": "Clean all elements created by given function_id.  If skip_tins is non zero, then tins are notincluded in the list to clean. A function return value of zero all elements are cleaned successfully. Page 124412d Model Macro_Functions\fChapter",
      "id": "7721"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Integer skip_tins, Dynamic_Element &elements)"
      ],
      "description": "Clean all elements created by given function_id.  If skip_tins is non zero, then tins are notincluded in the list to clean.  The list of old elements also is returned in Dynamic_Elementelements. A function return value of zero all elements are cleaned successfully.",
      "id": "7722"
    },
    {
      "names": [
        "Integer Draw_elements(Uid function_id, Integer skip_tins)"
      ],
      "description": "Redraw all elements created by given function_id.  If skip_tins is non zero, then tins are notincluded in the list to draw. A function return value of zero all elements are drawn successfully.",
      "id": "7723"
    },
    {
      "names": [
        "Integer Draw_elements(Uid function_id, Integer skip_tins, Integer colour)"
      ],
      "description": "Redraw all elements created by given function_id using an override Colour colour.  If skip_tinsis non zero, then tins are not included in the list to draw. A function return value of zero all elements are drawn successfully.",
      "id": "7724"
    },
    {
      "names": [
        "Function_Property_Collection Create_function_property_collection()"
      ],
      "description": "Create a Function_Property_Collection. Function_Property_Collection\u2019s are used to transfer information about a function such as theApply Many function instead of needing a large number of function calls which would need to beupdated every time a new parameter was added to the Apply Many,The function return value is the created Function_Property_Collection.",
      "id": "2726"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Integer int_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Integer property called nameto int_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Integer property. A function return value of zero indicates the value is successfully set.",
      "id": "2727"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Real real_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Real property called name toreal_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Real property. A function return value of zero indicates the value is successfully set.",
      "id": "2728"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Text txt_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Text property called name toPage 124612d Model Macro_Functions\fChaptertxt_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Text property. A function return value of zero indicates the value is successfully set.",
      "id": "2729"
    },
    {
      "names": [
        "Integer Set_property_colour(Function_Property_Collection collection, Text name, Text colour_name)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Colour property called nameto the colour given by colour_name. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Text property. A function return value of zero indicates the value is successfully set.",
      "id": "2730"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Element element)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Element property calledname to element. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Element property. A function return value of zero indicates the value is successfully set.",
      "id": "2731"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Tin tin)"
      ],
      "description": "In the Function Property Collection collection, set the tin of the Tin property called name to tin. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Tin property. A function return value of zero indicates the value is successfully set. 12d Model Macro_FunctionsPage 1247\f12d Model Programming Language Manual",
      "id": "2732"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Model model)"
      ],
      "description": "In the Function Property Collection collection, set the model of the Model property called nameto model. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn\u2019t exist or it is not Model property. A function return value of zero indicates the value is successfully set.",
      "id": "2733"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Integer &int_val)"
      ],
      "description": "From the Function Property Collection collection, get the value of the Integer property calledname and return it in int_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Integer. A function return value of zero indicates the value was successfully returned.",
      "id": "2737"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Real &real_val)"
      ],
      "description": "From the Function Property Collection collection, get the value of the Real property called nameand return it in real_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Real. A function return value of zero indicates the value was successfully returned.",
      "id": "2738"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Text &txt_val)"
      ],
      "description": "From the Function Property Collection collection, get the value of the Text property called nameand return it in txt_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Text. A function return value of zero indicates the value was successfully returned.",
      "id": "2739"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Tin &tin)"
      ],
      "description": "From the Function Property Collection collection, get the Tin from the Tin property called nameand return it in tin. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Tin. A function return value of zero indicates the value was successfully returned.",
      "id": "2740"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Element &element)"
      ],
      "description": "From the Function Property Collection collection, get the Element from the Element propertycalled name and return it in element. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Element. A function return value of zero indicates the value was successfully returned.",
      "id": "2741"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Model &model)"
      ],
      "description": "12d Model Macro_FunctionsPage 1249\f12d Model Programming Language ManualFrom the Function Property Collection collection, get the Model from the Tin property calledname and return it in model. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Model. A function return value of zero indicates the value was successfully returned.",
      "id": "2742"
    },
    {
      "names": [
        "Integer Get_property_colour(Function_Property_Collection collection, Text name, Text &colour_name)"
      ],
      "description": "From the Function Property Collection collection, get the Colour from the Colour property calledname and return the name of the colour in colour_name. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Colour. A function return value of zero indicates the value was successfully returned.",
      "id": "2743"
    },
    {
      "names": [
        "Integer Create_apply_many_function(Text function_name, Function_Property_Collection properties, Apply_Many_Function &function, Text &msg)"
      ],
      "description": "Create an Apply Many function with the function name function_name using the values suppliedin the Function_Property_Collection properties. For more information on which properties are available, please see Apply Many FunctionProperties. Any errors such as missing properties, or properties of an incorrect type, will be reported in theText msg. A non zero function return value indicates that there was a problem creating the Apply Manyfunction. A function return value of zero indicates the Apply Many was successfully created.",
      "id": "2734"
    },
    {
      "names": [
        "Integer Set_apply_many_function_properties(Apply_Many_Function function, Page 1250 12d Model Macro_Functions Chapter Function_Property_Collection properties, Text &msg)"
      ],
      "description": "For the Apply_Many_Function function, set the values of function to be those in theFunction_Property_Collection properties. For more information on which properties are available, please see Apply Many FunctionProperties. Any errors such as missing properties, or properties of an incorrect type, will be reported in theText msg. A non zero function return value indicates that there was a problem creating the Apply Manyfunction. A function return value of zero indicates the Apply Many was successfully created.",
      "id": "2735"
    },
    {
      "names": [
        "Integer Get_apply_many_function_properties(Apply_Many_Function function, Function_Property_Collection &properties)"
      ],
      "description": "Load the values of the Function_Property_Collection properties from the Apply Many Functionfunction. For more information on which properties are available, please see Apply Many FunctionProperties. A function return value of zero indicates the get was successful.",
      "id": "2736"
    },
    {
      "names": [
        "Integer Get_apply_many_function(Text name, Apply_Many_Function &function)"
      ],
      "description": "Get and existing 12d Model Apply Many Function with the name name and create anApply_Many_Function with the values from the existing 12d Model Apply Many Function. A non zero function return value indicates that there was no 12d Model Apply Many Functionwith the name name, or thee was a problem creating the Apply_Many_Function. A function return value of zero indicates the creation of the Apply_Many_Function wassuccessful.",
      "id": "2748"
    },
    {
      "names": [
        "Integer Validate_apply_many_function(Apply_Many_Function function, Integer &error_count)"
      ],
      "description": "Validate given Apply_Many_Function function and set the number of errors in Integererror_count. A function return value of zero indicates the call was successful.",
      "id": "3929"
    },
    {
      "names": [
        "Integer Create_parameter_file(Plot_Parameter_File ppf, Text ppf_type)"
      ],
      "description": "The tin to be used by the apply manyThe mtf used by the apply manyThe separation between sectionsThe optional start chainage for the applymanyRealThe optional end chainage for the applymanyTextThe optional left prefix for template namesTextThe optional right prefix for template namesElementThe centreline / reference string to run theapply many downElementThe optional hinge stringTextThe optional report fileModel/Text The road strings model to be created by theapply manyModel/Text The road sections model to be created by theapply manyTextThe name of the colour for the road surfacestrings and sectionsModel/Text The optional model or name of a model forboxing strings for layer N (1 to 8)Model/ Text The optional model or name of a model forboxing sections for layer N (1 to 8)TextThe optional name of the colour for thestrings created for boxing layer N (1 to 8)Model/Text The optional model or name of a model fordifference sectionsTextThe name of the colour for differencesectionsModel/Text The optional model or name of a model forapply many polygonsModel/Text The optional model or name of a model forthe road boundary12d Model Macro_Functions\fChaptercreate_arcsIntegerchord_arc_tolerancevolume_correctionRealIntegerpartial_interfacesIntegersections_as_4dIntegercopy_hingeIntegeruse_strippingshow_stripping_volumesIntegerIntegercalculate_natural_surface_to_design_volumescalculate_road_to_subgrade_volumecalculate_inter_boxing_layer_volumesmap_filecreate_road_tinroad_tinroad_tin_colourroad_tin_modelIntegerTextIntegerTin/TextTextModel/Textcreate_depth_range_polygonsIntegerdepth_range_fileTextdepth_range_polygons_modelModel/Textroad_tin_number_extra_modelsIntegerroad_tin_extra_model_NModel/Textcalculate_sight_distanceIntegersight_distance_minsight_distance_maxsight_distance_eye_heightsight_distance_eye_offsetRealRealRealRealWhat type of arcs to create\uf0200 - no arcs1 - alignments\uf0202 - polylines\uf0203 - super stringsThe chord arc tolerance valueWhether or not to perform volume correction(0 or 1)Whether or not to create partial interfaces (0or 1)Whether or not to create sections as 4dstrings (0 or 1)Whether or not to copy the hinge string (0 or1)Whether or not to use stripping (0 or 1)Whether or not to show detailed strippingvolumes (0 or 1)Whether or not to calculate natural surface todesign volumes (0 or 1)Whether or not to calculate road to subgradevolumes (0 or 1)Whether or not to calculate inter boxinglayer volumes (0 or 1)The optional name of a map file to createWhether or not to create a tin (0 or 1)The tin or the name of the tin to createThe name of the colour for the created tinThe model or the name of the model tocreate the tin inWhether or not to create depth rangepolygons (0 or 1)The name of the depth range file to use whencreating depth range polygonsThe model or name of the model to createdepth range polygons inThe optional number of extra models for theroad tinThe model or name of the Nth model to beused as an extra model for the road tinWhether or not to calculate sight distances (0or 1)The minimum sight distanceThe maximum sight distanceThe eye height for the sight distance calcsThe eye offset for the sight distance calcssight_distance_target_heightsight_distance_target_offsetsight_distance_calc_intervalRealRealRealThe target height for the sight distance calcsThe target offset for the sight distance calcsThe calc interval for the sight distance calcsIntegerInteger12d Model Macro_FunctionsPage 1253\f12d Model Programming Language Manualsight_distance_trial_intervalsight_distance_reportRealTextcreate_separation_barrier_linesIntegerbarrier_distancemin_barrier_road_lengthmin_barrier_line_lengthmin_barrier_betweenfilter_cross_sectionsRealRealRealRealIntegerfilter_sections_modelModel/Textfilter_sections_colourTextfilter_sections_intervalfilter_sections_toleranceRealRealfilter_sections_include_startIntegerfilter_sections_include_endIntegerfilter_sections_include_equalitiesfilter_sections_include_h_tangentfilter_sections_include_v_tangentfilter_sections_include_crest_sagfilter_sections_spc_fileIntegergenerate_long_section_plotIntegerlong_section_ppflong_section_plotter_typeTextTextlong_section_plot_stemlong_section_plot_cleanTextIntegergenerate_cross_section_plotIntegercross_section_ppfcross_section_plotter_typeTextTextcross_section_plot_stemcross_section_plot_cleanTextIntegercreate_tadpolesIntegerPage 1254IntegerIntegerIntegerTextThe trial interval for the sight distance calcsThe optional report for the sight distancecalcWhether or not to create separation andbarrier lines (0 or 1)The barrier distanceThe min barrier road lengthThe min barrier line lengthThe min distance between barriersWhether or not to filter cross sections (0 or1)The model or name of model for filteredcross sectionsThe name of the colour for filtered crosssectionsThe interval at which to filter cross sectionsThe culling tolerance for filtering crosssectionsWhether or not to include the start section (0or 1)Whether or not to include the end section (0or 1)Whether or not to include equalities (0 or 1)Whether or not to include horizontal tangentsections (0 or 1)Whether or not to include vertical tangentsections (0 or 1)Whether or not to include crest/sag sections(0 or 1)The optional special chainages file forfiltering cross sectionsWhether or not to generate a long sectionplot (0 or 1)The name of the ppf for the long section plotThe name of the plotter to plot a long sectionwithThe stem for the long section plotWhether or not to clean the long section plotmodel first (0 or 1)Whether or not to generate a cross sectionplot (0 or 1)The name of the ppf for the cross section plotThe name of the plotter to plot a crosssection withThe stem for the cross section plotWhether or not to clean the cross section plotmodel first (0 or 1)Whether or not to create tadpoles (0 or 1)12d Model Macro_Functions\fChaptertadpole_modeltadpole_intervaltadpole_search_widthtadpole_search_sideModel/TextRealRealIntegertadpole_counttadpole_N_string_1_nameIntegerTexttadpole_N_string_2_nameTexttadpole_N_start_chRealtadpole_N_end_chRealtadpole_N_symbol_1_nameTexttadpole_N_symbol_1_colourTexttadpole_N_symbol_1_sizeRealtadpole_N_symbol_1_rotationRealtadpole_N_symbol_1_offset_xRealtadpole_N_symbol_1_offset_yRealtadpole_N_symbol_1_percentRealtadpole_N_symbol_2_nameTexttadpole_N_symbol_2_colourTexttadpole_N_symbol_2_sizeRealtadpole_N_symbol_2_rotationRealtadpole_N_symbol_2_offset_xRealtadpole_N_symbol_2_offset_yRealtadpole_N_symbol_2_percentRealThe model or name of model for tadpolesThe interval at which to create tadpolesThe search width for creating tadpolesThe side on which to create tadpoles \uf0200 - Left and Right1 - Left\uf0202 - RightThe number of tadpole types to be createdThe name of string 1 for the Nth tadpoleentryThe name of string 2 for the Nth tadpoleentryThe start chainage for the Nth tadpole entry(optional)The end chainage for the Nth tadpole entry(optional)The name of the first tadpole symbol for theNth tadpole entryThe name of the colour of the first tadpolesymbol for the Nth tadpole entryThe size of the first tadpole symbol for theNth tadpole entry (optional)The rotation of the first tadpole symbol forthe Nth tadpole entry (optional)The x offset of the first tadpole symbol forthe Nth tadpole entry (optional)The y ofset of the first tadpole symbol for theNth tadpole entry (optional)The percentage modifier for the first symbolfor the Nth tadpole entry (optional)The name of the second tadpole symbol forthe Nth tadpole entryThe name of the colour of the second tadpolesymbol for the Nth tadpole entryThe size of the second tadpole symbol forthe Nth tadpole entry (optional)The rotation of the second tadpole symbolfor the Nth tadpole entry (optional)The x offset of the second tadpole symbolfor the Nth tadpole entry (optional)The y offset of the second tadpole symbolfor the Nth tadpole entry (optional)The percentage modifier for the secondsymbol for the Nth tadpole entry (optional)12d Model Macro_FunctionsPage 1255\f12d Model Programming Language Manual5. 65 Plot Parameters12d Model plot parameters control the look of the different plots that 12d Model can generate. The Plot_Parameter_File is a 12d Model Variable that can contain plot parameters and the plotparameter values for a given plot type. Plot_Parameter_File TypesThe valid Plot_Parameter_File types are:section_x_plotsection_long_plotmelb_water_sewer_long_plotpipeline_long_plotdrainage_long_plotdrainage_plan_plotplot_frame_plotrainfall_methodsdesign_parametersEach type of plot has its own set of valid plot parameters. When a Plot_Parameter_File, say ppf, is first defined, it starts as an empty structure until it hasits type defined using the Create_XX_parameter calls.  The ppf then knows what plot parametersare valid for that type of plot. The Plot_Parameter_File ppf is then loaded with particular plot parameters and their values bymaking Set_Parameter calls and/or reading in data from a plot parameter file stored already disk(Read_Parameter_File). When all the required plot parameters have been set, the Plot_Parameter_File ppf can be usedto create a plot (Plot_parameter_file). The Plot_Parameter_File ppf can also be written out as a disk file so that it can be used in thefuture (Write_parameter_file). Note: note all the available parameters for a particular plot type need to be set for aPlot_Parameter_File.  For most plot parameters, there is a default value used for plotting and thatis used if the parameter is not given a value by a Set_Parameter call. Create_parameter_file(Plot_Parameter_File ppf,Text ppf_type)Set the Plot_Parameter_File ppf to be of type ppf_type and clear out any information alreadycontained in ppf.  For the valid types, see Plot_Parameter_File Types. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2447"
    },
    {
      "names": [
        "Integer Create_section_long_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type section_long_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2448"
    },
    {
      "names": [
        "Integer Create_section_x_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type section_x_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2449"
    },
    {
      "names": [
        "Integer Create_melb_water_sewer_long_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type melb_water_sewer_long_plot, and clear out anyinformation already contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2450"
    },
    {
      "names": [
        "Integer Create_pipeline_long_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type pipeline_long_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2451"
    },
    {
      "names": [
        "Integer Create_drainage_long_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Plot ParametersPage 1257\f12d Model Programming Language ManualSet the Plot_Parameter_File ppf to be of type drainage_long_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2452"
    },
    {
      "names": [
        "Integer Create_drainage_plan_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type drainage_plan_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2453"
    },
    {
      "names": [
        "Integer Create_plot_frame_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type plot_frame_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2454"
    },
    {
      "names": [
        "Integer Create_rainfall_methods_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type rainfall_methods, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2455"
    },
    {
      "names": [
        "Integer Create_design_parameters_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type design_parameters, and clear out any informationPage 1258Plot Parameters\fChapteralready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2456"
    },
    {
      "names": [
        "Integer Create_perspective_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type perspective_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "3375"
    },
    {
      "names": [
        "Integer Create_section_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type section_plot, and clear out any information alreadycontained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "3376"
    },
    {
      "names": [
        "Integer Create_water_node_diagram_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type water_node_diagram_plot, and clear out anyinformation already contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "3377"
    },
    {
      "names": [
        "Integer Read_parameter_file(Plot_Parameter_File ppf, Text filename, Integer expand_includes)"
      ],
      "description": "Reads from disk a binary plot parameter file of file name filename and load the data into thePlot ParametersPage 1259\f12d Model Programming Language ManualPlot_Parameter_File ppf.  The type of the Plot_Parameter_File is determined by the file extensionof filename. If expand_includes is no-zero then any Includes listed in filename will be read in. Any information that is already in ppf is cleared before loading the data from filename. A function return value of zero indicates the file was successfully read and loaded into ppf.",
      "id": "2457"
    },
    {
      "names": [
        "Integer Write_parameter_file(Plot_Parameter_File ppf, Text filename)"
      ],
      "description": "Write out to a file on disk, the information in the Plot_Parameter_File ppf. The name of the disk file is filename, plus the appropriate extension given by the type of ppf (seePlot_Parameter_File Types)A function return value of zero indicates the file was successfully written.",
      "id": "2458"
    },
    {
      "names": [
        "Integer Set_parameter(Plot_Parameter_File ppf, Text parameter_name, Element parameter_value)"
      ],
      "description": "Sets the value of the plot parameter parameter_name in the Plot_Parameter_File ppf to be theElement parameter_value. For example, setting the plot parameter string_to_plot to be a selected string.  Aside - in the plotparameter file written to the disk, an element is stored with three things - the string name, thestring id and the model id of the model containing the element. If the plot parameter does not require an Element, then a non-zero return function return value isreturned. A function return value of zero indicates the parameter value is successfully set.",
      "id": "2641"
    },
    {
      "names": [
        "Integer Get_parameter(Plot_Parameter_File ppf, Text parameter_name, Element &parameter_value)"
      ],
      "description": "Get the value for the plot parameter parameter_name in the Plot_Parameter_File ppf and returnit as the Element parameter_value. If the value for the plot parameter is not of type Element, then a non-zero return function returnvalue is returned. A function return value of zero indicates the parameter value is successfully found.",
      "id": "2642"
    },
    {
      "names": [
        "Integer Set_parameter(Plot_Parameter_File ppf, Text parameter_name, Text parameter_value)"
      ],
      "description": "Sets the value of the plot parameter parameter_name in the Plot_Parameter_File ppf to be theText parameter_value. For example, setting the plot parameter box_titles_x to have the value 24. 5Note - even though a plot parameter file may be used as a real number or an integer, it is storedin the Plot_Parameter_File as a Text. A function return value of zero indicates the parameter value is successfully set.",
      "id": "2459"
    },
    {
      "names": [
        "Integer Get_parameter(Plot_Parameter_File ppf, Text parameter_name, Text &parameter_value)"
      ],
      "description": "so get back as text and you need to decode it. Get the value for the plot parameter parameter_name in the Plot_Parameter_File ppf and returnit as the Text parameter_value. Note - if the parameter value is to be used as say an Integer, then the returned Textparameter_value will need to be decoded. If the value for the plot parameter is not of type Text, then a non-zero return function return valueis returned. A function return value of zero indicates the parameter value is successfully found.",
      "id": "2460"
    },
    {
      "names": [
        "Integer Parameter_exists(Plot_Parameter_File ppf, Text parameter_name)"
      ],
      "description": "Check to see if a plot parameter of name parameter_name exists in the Plot_Parameter_File ppf. returns no-zero if existsA non-zero function return value indicates that an plot parameter exists. Warning this is the opposite of most 12dPL function return values.",
      "id": "2461"
    },
    {
      "names": [
        "Integer Remove_parameter(Plot_Parameter_File ppf, Text parameter_name)"
      ],
      "description": "Remove the plot parameter of name parameter_name and its value from thePlot_Parameter_File ppf. Note - the Plot_Parameter_File ppf does not necessarily contain values for all the possible plotparameters that are available for a given Plot_Parameter_File.  Many parameters can havedefault values which are used if the plot parameter is not set. A function return value of zero indicates the parameter was successfully removed.",
      "id": "2462"
    },
    {
      "names": [
        "Integer Plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Plot the Plot_Parameter_File ppf. Note - ppf needs to contain all the appropriate information on where the plot is plotted to. A function return value of zero indicates the plot was successfully created",
      "id": "2463"
    },
    {
      "names": [
        "Integer Plot_parameter_file(Text file)"
      ],
      "description": "Plot the plot parameter file in the binary plot parameter disk file name. Note - the file needs to contain all the appropriate information on where the plot is plotted to. A function return value of zero indicates the plot was successfully created.",
      "id": "2464"
    },
    {
      "names": [
        "Integer Plot_ppf_file(Text name)"
      ],
      "description": "Plot the plot parameter file in the ascii plot parameter disk file name. Note - the file needs to contain all the appropriate information on where the plot is plotted to. A function return value of zero indicates the plot was successfully created.",
      "id": "652"
    },
    {
      "names": [
        "Undo Add_undo_add(Text name, Element elt)"
      ],
      "description": "Create an Undo from the Element elt and give it the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo as the function return value. This is telling the 12d Model Undo system that a new element has been created in 12d Model. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.",
      "id": "1563"
    },
    {
      "names": [
        "Undo Add_undo_add(Text name, Dynamic_Element de)"
      ],
      "description": "Create an Undo from the Dynamic_Element de and give it the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo as the function return value. This is telling the Undo system that a list of new element (stored in the Dynamic_Element de)has been created in 12d Model. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.",
      "id": "1564"
    },
    {
      "names": [
        "Undo Add_undo_change(Text name, Element original, Element changed)"
      ],
      "description": "Create an Undo from a copy of the original Element original and the modified Elementchanged, and give it the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo called name as the function return value. Page 1264Undos\fChapterThe Element original should not exist in a Model.  The Element changed does exist in a Model. This is telling the Undo system that an Element original has been modified to create the Elementchanged.  If the Model for original is ever needed then the parent structure of original can beused to get it. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List. Example code// make a safe copy of the element before updating the contentElement_duplicate(changed, original);// set model of original to null modelNull(null_model);Set_model(original, null_model)// code for updating the content of changedundo_item = Add_undo_change(\"my reason for changing\", original, changed);",
      "id": "1565"
    },
    {
      "names": [
        "Undo Add_undo_delete(Text name, Element original, Integer make_copy)"
      ],
      "description": "If make_copy is non zero, create a copy of the Element original and transfer the Uid fromoriginal to the copy. If make_copy is zero, then a reference to original is use.  Warning - make_copy = 0 shouldnever be used because if original is then deleted in 12d Model, the Undo list could becorrupted. The Undo is given the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo called name as the function return value. This is telling the Undo system that an Element original has been deleted. Note: name is the text that appears when the Undo is displayed in the 12d Model Uno List.",
      "id": "1566"
    },
    {
      "names": [
        "Undo Add_undo_range(Text name, Integer id1, Integer id2)"
      ],
      "description": "Create an Undo that consists of the id range form 1d1 to id2. The Undo is given the name name. The Undo is automatically added to the 12d Model Undo system. UndosPage 1265\f12d Model Programming Language ManualReturn the created Undo called name as the function return value. This is telling the Undo system that all the Elements in the id range from Id1 to Id2 have beencreated. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List. Important note - Id\u2019s are no longer used in 12d Model and have been replaced by Uids.  Thismacro has been deprecated (i. e.  won\u2019t exist) unless the macro is compiled with a special flag. This function has been replaced by Undo Add_undo_range(Text name,Uid id1,Uid id2).",
      "id": "1567"
    },
    {
      "names": [
        "Undo Add_undo_range(Text name, Uid id1, Uid id2)"
      ],
      "description": "Create an Undo that consists of the Uid range form id1 to id2. The Undo is given the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo called name as the function return value. This is telling the Undo system that all the Elements in the Uid id range from Id1 to Id2 have beencreated. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List.",
      "id": "1919"
    },
    {
      "names": [
        "Integer Get_number_of_items(Undo_List &undo_list, Integer &count)"
      ],
      "description": "Get the number of items in the Undo_List undo_list and return the number in count. A function return value of zero indicates the number was successfully returned.",
      "id": "1557"
    },
    {
      "names": [
        "Integer Get_item(Undo_List &undo_list, Integer n, Undo &undo)"
      ],
      "description": "Get the n\u2019th item from the Undo_List undo_list and return the item (which is an Undo) as undo. A function return value of zero indicates the Undo was successfully returned.",
      "id": "1558"
    },
    {
      "names": [
        "Integer Set_item(Undo_List &undo_list, Integer n, Undo undo)"
      ],
      "description": "Set the n\u2019th item in the Undo_List undo_list to be the Undo undo. A function return value of zero indicates the Undo was successfully set.",
      "id": "1559"
    },
    {
      "names": [
        "Integer Append(Undo undo, Undo_List &undo_list)"
      ],
      "description": "Append the Undo undo to the Undo_List undo_list. That is, the Undo undo is added to the end of the Undo_List and so the number of items in theUndo_List is increased by one. A function return value of zero indicates the Undo was successfully appended.",
      "id": "1560"
    },
    {
      "names": [
        "Integer Append(Undo_List from_list, Undo_List &to_list)"
      ],
      "description": "Append the Undo_list list to the Undo_List to_list. A function return value of zero indicates the Undo_List was successfully appended.",
      "id": "1561"
    },
    {
      "names": [
        "Integer Null(Undo_List &undo_list)"
      ],
      "description": "Removes and nulls all the Undo\u2019s from the Undo_list undo_list and sets the number of items inundo_list to zero. That is, all the items on the Undo_List are nulled and the number of items in the Undo_List is setback to zero. UndosPage 1267\f12d Model Programming Language ManualA function return value of zero indicates the Undo_List was successfully nulled.",
      "id": "1562"
    },
    {
      "names": [
        "Undo Add_undo_list(Text name, Undo_List list)"
      ],
      "description": "Adds the Undo_List list to the 12d Model Undo system and gives it the name name. At the same time, it automatically removes each of the Undo\u2019s in list from the 12d Model Undosystem.  So all the items in list are removed from the 12d Model Undo system and replaced bythe one item called name.",
      "id": "1568"
    },
    {
      "names": [
        "Connection Create_ODBC_connection()"
      ],
      "description": "Creates an ODBC connection object, which may then by used to connect to a database.",
      "id": "2501"
    },
    {
      "names": [
        "Integer Connect(Connection connection, Text connection_string, Text user, Text password)"
      ],
      "description": "This call attempts to connect to an external data source, with a username and password.  Aconnection string must also be supplied.  This is data source specific and ODBC driver specific. For more information on connection strings, see the vendor of the data source or data sourcedriver. ODBC Macro CallsPage 1269\f12d Model Programming Language ManualThis call returns 0 if successful.",
      "id": "2502"
    },
    {
      "names": [
        "Integer Connect(Connection connection, Text connection_string)"
      ],
      "description": "This call attempts to connect to an external data source.  A connection string must also besupplied.  This is data source specific and ODBC driver specific.  For more information onconnection strings, see the vendor of the data source or data source driver. This call returns 0 if successful.",
      "id": "2503"
    },
    {
      "names": [
        "Integer Close(Connection connection)"
      ],
      "description": "This call determines if there was an error performing an operation against the connection.  Thiscall will return 1 if there was an error.",
      "id": "2504"
    },
    {
      "names": [
        "Integer Has_error(Connection connection)"
      ],
      "description": "This call will check if an error has occurred as the result of an operation.  Has_error shouldalways be called after any operation.  If there is an error, Get_last_error can be used to retrievethe result. This call will return 0 if there is no error, and 1 if there is.",
      "id": "2512"
    },
    {
      "names": [
        "Integer Get_last_error(Connection connection, Text &status, Text &message)"
      ],
      "description": "This call will get the last error, if there is one, and retrieve the status and message of the error. This call will return 0 if successful.",
      "id": "2513"
    },
    {
      "names": [
        "Select_Query Create_select_query()"
      ],
      "description": "Creates and returns a select query object.",
      "id": "2528"
    },
    {
      "names": [
        "Integer Add_table(Select_Query query, Text table_name)"
      ],
      "description": "This call adds a table of a given name to the supplied query.  The query will look at this tablewhen retrieving data. This call returns 0 if successful.",
      "id": "2529"
    },
    {
      "names": [
        "Integer Add_result_column(Select_Query query, Text table, Text column_name)"
      ],
      "description": "ODBC Macro CallsPage 1271\f12d Model Programming Language ManualThis call adds a result column that belongs to a given table to the query.  Note that the table mustalready be added for this to work.  The query will retrieve that column from the supplied tablewhen it runs. The call returns 0 if successful.",
      "id": "2531"
    },
    {
      "names": [
        "Integer Add_result_column(Select_Query query, Text table, Text column_name, Text return_as)"
      ],
      "description": "This call adds a result column that belongs to a given table to the query.  Note that the table mustalready be added for this to work.  The query will retrieve that column from the supplied tablewhen it runs, but in the results it will be called by the name you supply. The call returns 0 if successful.",
      "id": "2530"
    },
    {
      "names": [
        "Integer Add_order_by(Select_Query query, Text table_name, Text column_name, Integer sort_ascending)"
      ],
      "description": "This call will instruct the query to order the results for a column in a table.  Set sort_ascending to1 if you wish the results to be sorted in ascending order. This call returns 0 if successful.",
      "id": "2533"
    },
    {
      "names": [
        "Integer Set_limit(Select_Query query, Integer start, Integer number_to_retrieve)"
      ],
      "description": "This call will set an upper limit on the number of results to read, as well as defining the start indexof the returned results.  This is useful when you have many results that you wish to return indiscrete sets or pages. This call returns 0 if successful.",
      "id": "2534"
    },
    {
      "names": [
        "Integer Add_group_by(Select_Query query, Text table_name, Text column_name)"
      ],
      "description": "Page 1272ODBC Macro Calls\fChapterThis call will group results by a given table and column name.  This is useful if your data providerallows aggregate functions for your queries. This call returns 0 if successful.",
      "id": "2532"
    },
    {
      "names": [
        "Integer Add_condition(Select_Query query, Query_Condition condition)"
      ],
      "description": "This call will add a query condition to a select query.  A query condition will allow you to constrainyour results to defined values.  See the section 5. 67. 8 Query Conditions on how to create anddefined Query Conditions. This call returns 0 if successful.",
      "id": "2535"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Select_Query query)"
      ],
      "description": "This call will execute a created select query for a scalar value.  The return value of the call will bethe result of the query.",
      "id": "2505"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Select_Query query, Database_Result &result)"
      ],
      "description": "This call will execute a created select query and return a set of results in the result argument. See the section on 5. 67. 3 Navigating results with Database_Result for more information on theDatabase_Result object. This call will return 0 if successful.",
      "id": "2506"
    },
    {
      "names": [
        "Integer Move_next(Database_Result result)"
      ],
      "description": "This call moves a database result to the next row.  Depending on your provider, you may need tocall this before reading the first row. This call will return 0 if the Database_Result was able to move to the next row.",
      "id": "2514"
    },
    {
      "names": [
        "Integer Close(Database_Result result)"
      ],
      "description": "This call will close a database result.  This is generally good practise as your data provider maynot allow more than one Database_Result to exist at one time. This call will return 0 if successful.",
      "id": "2515"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Integer column, Text &res)"
      ],
      "description": "This call will retrieve a text value from a Database_Result, at the current index as given bycolumn.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2516"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Integer column, Integer &res)"
      ],
      "description": "This call will retrieve an Integer value from a Database_Result, at the current index as given bycolumn.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2517"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Integer column, Real &res)"
      ],
      "description": "This call will retrieve a Real value from a Database_Result, at the current index as given bycolumn.  The value will be stored in res. This call will return 0 if successful. Page 1274ODBC Macro Calls\fChapter",
      "id": "2518"
    },
    {
      "names": [
        "Integer Get_time_result_column(Database_Result result, Integer column, Integer &time)"
      ],
      "description": "This call will retrieve a timestamp, as an Integer value, from a Database_Result, at the currentindex as given by column.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2519"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Text column, Text &res)"
      ],
      "description": "This call will retrieve a text value from a Database_Result, from the column named by theargument column.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2520"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Database_Result result, Text column, Integer &res)"
      ],
      "description": "This call will retrieve an Integer value from a Database_Result, from the column named by theargument column.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2521"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Text column, Real &res)"
      ],
      "description": "This call will retrieve a Real value from a Database_Result, from the column named by theargument column.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2522"
    },
    {
      "names": [
        "Integer Get_time_result_column(Database_Result result, Text column, Integer &time)"
      ],
      "description": "This call will retrieve a timestamp value, as an Integer, from a Database_Result, from thecolumn named by the argument column.  The value will be stored in res. This call will return 0 if successful.",
      "id": "2523"
    },
    {
      "names": [
        "Insert_Query Create_insert_query(Text table)"
      ],
      "description": "This call creates and returns an insert query object.  The insert will be applied against the valuesupplied in table.",
      "id": "2536"
    },
    {
      "names": [
        "Integer Add_data(Insert_Query query, Text column_name, Integer value)"
      ],
      "description": "This call will add Integer data to be inserted to a created Insert_Query when it is executed.  Thedata will be inserted into the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2537"
    },
    {
      "names": [
        "Integer Add_data(Insert_Query query, Text column_name, Text value)"
      ],
      "description": "This call will add Text data to be inserted to a created Insert_Query when it is executed.  Thedata will be inserted into the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2538"
    },
    {
      "names": [
        "Integer Add_data(Insert_Query query, Text column_name, Real value)"
      ],
      "description": "This call will add Real data to be inserted to a created Insert_Query when it is executed.  Thedata will be inserted into the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2539"
    },
    {
      "names": [
        "Integer Add_time_data(Insert_Query query, Text column_name, Integer time)"
      ],
      "description": "This call will add timestamp data, stored as an Integer value, to be inserted to a createdInsert_Query when it is executed.  The data will be inserted into the column named by thecolumn_name argument. This call returns 0 if successful.",
      "id": "2540"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Insert_Query query)"
      ],
      "description": "This call will execute a created Insert_Query against the data provider to insert some new data. This call will return 0 if successful.",
      "id": "2507"
    },
    {
      "names": [
        "Update_Query Create_update_query(Text table)"
      ],
      "description": "This call creates and returns an Update_Query.  The update query will be applied against theODBC Macro CallsPage 1277\f12d Model Programming Language Manualtable given by the table argument.",
      "id": "2541"
    },
    {
      "names": [
        "Integer Add_data(Update_Query query, Text column_name, Integer value)"
      ],
      "description": "This call will add Integer data for a column update, when the Update_Query is executed.  Thedata will be updated for the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2542"
    },
    {
      "names": [
        "Integer Add_data(Update_Query query, Text column_name, Text value)"
      ],
      "description": "This call will add Text data for a column update, when the Update_Query is executed.  The datawill be updated for the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2543"
    },
    {
      "names": [
        "Integer Add_data(Update_Query query, Text column_name, Real value)"
      ],
      "description": "This call will add Real data for a column update, when the Update_Query is executed.  The datawill be updated for the column named by the column_name argument. This call returns 0 if successful.",
      "id": "2544"
    },
    {
      "names": [
        "Integer Add_time_data(Update_Query query, Text column_name, Integer time)"
      ],
      "description": "This call will add timestamp data, stored as an Integer value, for a column update, when theUpdate_Query is executed.  The data will be updated for the column named by thecolumn_name argument. This call returns 0 if successful.",
      "id": "2545"
    },
    {
      "names": [
        "Integer Add_condition(Update_Query query, Query_Condition condition)"
      ],
      "description": "This call will add a created Query_Condition to an update query.  Using a Query_Conditionenables the operation to be constrained to a number of rows, rather than applying to an entiretable. This call will return 0 if successful.",
      "id": "2546"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Update_Query query)"
      ],
      "description": "This call will execute a created Update_Query against the data provider to update existing data. This call will return 0 if successful.",
      "id": "2508"
    },
    {
      "names": [
        "Delete_Query Create_delete_query(Text table)"
      ],
      "description": "This call will create and return a Delete_Query.  When it is executed, it will delete data from thetable named by the table argument.",
      "id": "2547"
    },
    {
      "names": [
        "Integer Add_condition(Delete_Query query, Query_Condition condition)"
      ],
      "description": "This call will add a Query_Condition to a Delete_Query.  Adding a Query_Condition will allowyou to constrain which rows of data are deleted from the table. This call will return 0 if successful.",
      "id": "2548"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Delete_Query query)"
      ],
      "description": "This call will execute a created Delete_Query against the data provider to delete existing data. This call will return 0 if successful.",
      "id": "2509"
    },
    {
      "names": [
        "Manual_Query Create_manual_query(Text query_text)"
      ],
      "description": "This call will create a new Manual_Query.  The SQL for the query must be supplied in thequery_text argument.",
      "id": "2549"
    },
    {
      "names": [
        "Integer Get_parameters(Manual_Query query, Parameter_Collection parameters)"
      ],
      "description": "This call will retrieve the set of Parameters that a Manual Query uses.  Parameters are notrequired but provide greater security when using user input.  See the section on Parameters formore details. This call will return 0 if successful.",
      "id": "2550"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Manual_Query query)"
      ],
      "description": "This call will execute a created Manual_Query against the data provider to perform a customoperation. This call will return 0 if successful.",
      "id": "2510"
    },
    {
      "names": [
        "Integer Execute(Connection connection, Manual_Query query, Database_Result &result)"
      ],
      "description": "This call will execute a created Manual_Query against the data provider to perform a customoperation.  If the Manual Query returns results, they will be stored in the result argument. This call will return 0 if successful.",
      "id": "2511"
    },
    {
      "names": [
        "Query_Condition Create_value_condition(Text table_name, Text column_name, Integer operator, Text value)"
      ],
      "description": "This call creates and returns a Value Condition Query Condition for a given table, column,operation and Text value.  See the list of operators for available values of operator. When executed, the data provider will check that the value in column colum_name inside tabletable_name matches (as appropriate for the given operator) against the supplied value.",
      "id": "2555"
    },
    {
      "names": [
        "Query_Condition Create_value_condition(Text table_name, Text column_name, Integer operator, Integer value)"
      ],
      "description": "This call creates and returns a Value Condition Query Condition for a given table, column,operation and Integer value.  See the list of operators for available values of operator. When executed, the data provider will check that the value in column colum_name inside tabletable_name matches (as appropriate for the given operator) against the supplied value.",
      "id": "2556"
    },
    {
      "names": [
        "Query_Condition Create_value_condition(Text table_name, Text column_name, Integer operator, Real value)"
      ],
      "description": "This call creates and returns a Value Condition Query Condition for a given table, column,operation and Real value.  See the list of operators for available values of operator. When executed, the data provider will check that the value in column colum_name inside tabletable_name matches (as appropriate for the given operator) against the supplied value.",
      "id": "2557"
    },
    {
      "names": [
        "Query_Condition Create_time_value_condition(Text table_name, Text column_name, Integer operator, Integer value)"
      ],
      "description": "This call creates and returns a Value Condition Query Condition for a given table, column,operation and timestamp value, as defined by an Integer.  See the list of operators for availablevalues of operator. When executed, the data provider will check that the value in column colum_name inside tabletable_name matches (as appropriate for the given operator) against the supplied value.",
      "id": "2558"
    },
    {
      "names": [
        "Query_Condition Create_column_match_condition(Text left_table, Text left_column, Integer operator, Text right_table, Text right_column)"
      ],
      "description": "This call will create and return a Column Match Query Condition to match two columns in twotables against each other, using a supplied operator. When executed, the data provider will check that the left_column in table left_table matches (asappropriate for the given operator) against the right_column in table right_table.",
      "id": "2559"
    },
    {
      "names": [
        "Query_Condition Create_value_in_sub_query_condition(Text table_name, Text column_name, Integer not_in, Select_Query sub_query)"
      ],
      "description": "This call will create and return a Value In Sub Query Query_Condition, to match the value of acolumn against the results of another query. When executed, the data provider will check that the value in column column_name in tabletable_name is or is not inside (as defined by not_in) the results of the Select Query, sub_query.",
      "id": "2560"
    },
    {
      "names": [
        "Query_Condition Create_value_in_list_condition(Text table_name, Text column_name, Integer not_in, Dynamic_Integer values)"
      ],
      "description": "This call will create and return a Value In List Query_Condition, to see if the value of a columnis in a list of integers. When executed, the data provider will check that the value in column column_name in tabletable_name is or is not inside (as defined by not_in) the list defined by values.",
      "id": "2561"
    },
    {
      "names": [
        "Query_Condition Create_value_in_list_condition(Text table_name, Text column_name, Integer not_in, Dynamic_Text values)"
      ],
      "description": "This call will create and return a Value In List Query_Condition, to see if the value of a columnis in a list of Text values. When executed, the data provider will check that the value in column column_name in tabletable_name is or is not inside (as defined by not_in) the list defined by values.",
      "id": "2562"
    },
    {
      "names": [
        "Query_Condition Create_value_in_list_condition(Text table_name, Text column_name, Integer not_in, Dynamic_Real values)"
      ],
      "description": "This call will create and return a Value In List Query_Condition, to see if the value of a columnis in a list of Real values. When executed, the data provider will check that the value in column column_name in tabletable_name is or is not inside (as defined by not_in) the list defined by values.",
      "id": "2563"
    },
    {
      "names": [
        "Manual_Condition Create_manual_condition(Text sql)"
      ],
      "description": "This call will create a Manual Query_Condition.  The operation of the manual condition is totallydefined by the SQL fragment defined in argument sql.",
      "id": "2564"
    },
    {
      "names": [
        "Integer Add_table(Manual_Condition manual, Text table)"
      ],
      "description": "This call will add a table to be used by a Manual Condition.  This is required when usingParameters. This call will return 0 if successful.",
      "id": "2565"
    },
    {
      "names": [
        "Integer Get_parameters(Manual_Condition manual, Parameter_Collection &param)"
      ],
      "description": "This call will add a table to be used by a Manual Condition.  This is required when usingParameters.  See the section on Parameters for more information. This call will return 0 if successful.",
      "id": "2566"
    },
    {
      "names": [
        "Transaction Create_transaction(Connection connection)"
      ],
      "description": "This call creates and returns a transaction object for a given Connection.",
      "id": "2524"
    },
    {
      "names": [
        "Integer Begin_transaction(Transaction transaction)"
      ],
      "description": "This call begins a new transaction.  It will return 0 if successful.",
      "id": "2525"
    },
    {
      "names": [
        "Integer Commit_transaction(Transaction transaction)"
      ],
      "description": "This call will commit the operations performed inside a transaction to the data provider.  The callwill return 0 if successful.",
      "id": "2526"
    },
    {
      "names": [
        "Integer Rollback_transaction(Transaction transaction)"
      ],
      "description": "This call will cancel or rollback the operations performed inside a transaction from the dataprovider.  The call will return 0 if successful.",
      "id": "2527"
    },
    {
      "names": [
        "Integer Add_parameter(Parameter_Collection parameters, Integer value)"
      ],
      "description": "This call will add a new Integer parameter to a Parameter_Collection. This will return 0 if successful.",
      "id": "2551"
    },
    {
      "names": [
        "Integer Add_parameter(Parameter_Collection parameters, Text value)"
      ],
      "description": "This call will add a new Text parameter to a Parameter_Collection. This will return 0 if successful.",
      "id": "2552"
    },
    {
      "names": [
        "Integer Add_parameter(Parameter_Collection parameters, Real value)"
      ],
      "description": "This call will add a new Real parameter to a Parameter_Collection. This will return 0 if successful.",
      "id": "2553"
    },
    {
      "names": [
        "Integer Add_time_parameter(Parameter_Collection parameters, Integer value)"
      ],
      "description": "Page 1286ODBC Macro Calls\fChapterThis call will add a new timestamp parameter, from an Integer value, to aParameter_Collection. This will return 0 if successful.",
      "id": "2554"
    },
    {
      "names": [
        "Integer Synergy_connect(Text server, Text &error)"
      ],
      "description": "Connect 12D Model to the 12D Synergy server of given name server. The Text error would be set to the corresponding message if the connection failed. A function return value of zero indicates the connection was successful.",
      "id": "3102"
    },
    {
      "names": [
        "Integer Synergy_connect(Text server, Text user, Text password, Text &error)"
      ],
      "description": "Connect 12D Model to the 12D Synergy server of given name server; and given credential user(name) and password. The Text error would be set to the corresponding message if the connection failed. A function return value of zero indicates the connection was successful.",
      "id": "3103"
    },
    {
      "names": [
        "Integer Synergy_check_out(Text job, Text path_to_file, Integer perform_download, Text &error)"
      ],
      "description": "Check out Synergy file with given job; and path_to_file.  If the Integer parameterperform_download is 1 then 12D Synergy will download the file if it does not exist in the localfolder. The Text error would be set to the corresponding message if the checkout operation failed. A function return value of zero indicates the checkout operation was successful.",
      "id": "3110"
    },
    {
      "names": [
        "Integer Synergy_cancel_checkout(Text job, Text path_to_file, Text &error)"
      ],
      "description": "Cancel the checkout Synergy file with given job; and path_to_file. The Text error would be set to the corresponding message if the cancel checkout operationfailed. A function return value of zero indicates the cancel checkout operation was successful.",
      "id": "3106"
    },
    {
      "names": [
        "Integer Synergy_get(Text job, Text path_to_file, Text &error)"
      ],
      "description": "Get the latest version of Synergy file with given job; and path_to_file. The Text error would be set to the corresponding message if the get operation failed. A function return value of zero indicates the get operation was successful.",
      "id": "3118"
    },
    {
      "names": [
        "Integer Synergy_get(Text job, Text path_to_file, Integer version, Text &error)"
      ],
      "description": "Get a given version revision number of Synergy file with given job; and path_to_file. The Text error would be set to the corresponding message if the get operation failed. A function return value of zero indicates the get operation was successful.",
      "id": "3119"
    },
    {
      "names": [
        "Integer Synergy_build_attribute_string(Text attrib_name, Text attrib_value, Text &serialized_string, Text &error)"
      ],
      "description": "For many Synergy integration macro call, the parameters Text attribute or Dynamic_Textattribute require a special (XML like) syntax called serialized_string. This is a helper call to form the serialized attribute string from given attrib_name andattrib_value. The Text error would be set to the corresponding message if the call failed. A function return value of zero indicates the call was successful.",
      "id": "3787"
    },
    {
      "names": [
        "Integer Synergy_check_in_entity(Text job, Text path_to_entity, Text description, Dynamic_Text &file_attribs, Dynamic_Text &change_attribs, Text &error)"
      ],
      "description": "Check in Synergy entity with given: job; path_to_entity; description; file attributes file_attribs;and change attributes change_attribs. The Text error would be set to the corresponding message if the call failed. A function return value of zero indicates the call was successful.",
      "id": "3799"
    },
    {
      "names": [
        "Integer Synergy_get_workspace_path(Text job, Text entity_path, Text &path, Text &error)"
      ],
      "description": "Not yet working, waiting for respond from Synergy team. The Text error would be set to the corresponding message if the get operation failed. A function return value of zero indicates the get operation was successful.",
      "id": "3800"
    },
    {
      "names": [
        "Integer Synergy_local_folder(Text synergy_folder_path, Text &local_path, Text &error)"
      ],
      "description": "Given a Synergy folder path synergy_folder_path, return the corresponding local path inlocal_pathThe Text error would be set to the corresponding message if the get operation failed. A function return value of zero indicates the get operation was successful.",
      "id": "5446"
    },
    {
      "names": [
        "Integer Set_pit_details(Model model)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3905"
    },
    {
      "names": [
        "Integer Run_dws_network(Model model)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3906"
    },
    {
      "names": [
        "Integer Regrade_pipes(Model model)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3907"
    },
    {
      "names": [
        "Integer Run_drainage_analysis(Model model)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3908"
    },
    {
      "names": [
        "Integer Run_drainage_analysis_dynamic(Model model)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3909"
    },
    {
      "names": [
        "Integer Get_last_dot(Text file_name)"
      ],
      "description": "Return the index of the last dot of a given file_name.",
      "id": "3939"
    },
    {
      "names": [
        "Text Remove_file_extension(Text file_name)"
      ],
      "description": "Return the name without file extension from a given input file_name.",
      "id": "3940"
    },
    {
      "names": [
        "Integer Set_pit_details(Text model_name)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3941"
    },
    {
      "names": [
        "Integer Regrade_pipes(Text model_name)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3942"
    },
    {
      "names": [
        "Integer Run_drainage_analysis(Text model_name)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3943"
    },
    {
      "names": [
        "Integer Run_drainage_analysis_dynamic(Text model_name)"
      ],
      "description": "Page 1292Internal Macro Calls\fChapterA function return value of zero indicates the get operation was successful.",
      "id": "3944"
    },
    {
      "names": [
        "Integer Run_dws_network(Text model_name)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3945"
    },
    {
      "names": [
        "Integer Run_slf_data(Text slf_data)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3949"
    },
    {
      "names": [
        "Integer Plot_mps(Text mps_file, Integer mode, Text name, Text ranges)"
      ],
      "description": "A function return value of zero indicates the get operation was successful.",
      "id": "3950"
    },
    {
      "names": [
        "Integer Check_unique_attributes(Attributes attr, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of Attributes attr. A function return value of zero indicates the get operation was successful.",
      "id": "5425"
    },
    {
      "names": [
        "Integer Check_unique_attributes_with_type(Attributes attr, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Internal Macro CallsPage 1293\f12d Model Programming Language ManualCheck for unique name for each attribute type at the top level of Attributes attr. A function return value of zero indicates the get operation was successful.",
      "id": "5426"
    },
    {
      "names": [
        "Integer Check_unique_element_attributes(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of element attributes from a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5427"
    },
    {
      "names": [
        "Integer Check_unique_element_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name for each element type at the top level of element attributes from aDynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5428"
    },
    {
      "names": [
        "Integer Check_unique_segment_attributes(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of super string segment attributes from aDynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5429"
    },
    {
      "names": [
        "Integer Check_unique_segment_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Page 1294Internal Macro Calls\fChapterCheck for unique name for each element type at the top level of super string segment attributesfrom a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5430"
    },
    {
      "names": [
        "Integer Check_unique_vertex_attributes(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of super string vertex attributes from a Dynamic_Elementels. A function return value of zero indicates the get operation was successful.",
      "id": "5431"
    },
    {
      "names": [
        "Integer Check_unique_vertex_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name for each element type at the top level of super string vertex attributesfrom a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5432"
    },
    {
      "names": [
        "Integer Check_unique_drainage_pit_attributes(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of drainage string node (pit) attributes from aDynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5433"
    },
    {
      "names": [
        "Integer Check_unique_drainage_pit_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name for each element type at the top level of drainage string node (pit)attributes from a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5434"
    },
    {
      "names": [
        "Integer Check_unique_drainage_pipe_attributes(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name at the top level of drainage string link (pipe) attributes from aDynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5435"
    },
    {
      "names": [
        "Integer Check_unique_drainage_pipe_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Check for unique name for each element type at the top level of drainage string link (pipe)attributes from a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5436"
    },
    {
      "names": [
        "Integer Do_not_use(Text &t1, Text &t2, Text &t3, Text &t4, Text &t5, Real &r1, Real &r2, Integer &i1, Integer &i2, Integer &i3)"
      ],
      "description": "Programmers testing. A function return value of zero indicates the get operation was successful.",
      "id": "5448"
    },
    {
      "names": [
        "Integer Run_slf_data(Text slf_data, Integer pr_count, Dynamic_Text pr_widget_path, Dynamic_Text pr_widget_name, Dynamic_Text pr_param_name, Dynamic_Integer pr_active, Text pvf_file, Integer clean_up, Integer interactive, Text &error)"
      ],
      "description": "A function return value of zero indicates the call operation was successful.",
      "id": "7532"
    },
    {
      "names": [
        "Integer Run_slf_file(Text slf_file, Integer pr_count, Dynamic_Text pr_widget_path, Dynamic_Text pr_widget_name, Dynamic_Text pr_param_name, Dynamic_Integer pr_active, Text pvf_file, Integer clean_up, Integer interactive, Text &error)"
      ],
      "description": "A function return value of zero indicates the call operation was successful.",
      "id": "7533"
    },
    {
      "names": [
        "Integer Run_slf_data(Text slf_data, Integer pr_count, Dynamic_Text pr_widget_path, Dynamic_Text pr_widget_name, Dynamic_Text pr_param_name, Dynamic_Integer pr_active, Integer bt_count, Dynamic_Text bt_names, Text panel_name, Text pvf_file, Integer clean_up, Integer interactive, Text &error)"
      ],
      "description": "A function return value of zero indicates the call operation was successful.",
      "id": "7534"
    },
    {
      "names": [
        "Integer Set_macro_attributes(Attributes att)"
      ],
      "description": "For the macro, set the Attributes to att. A function return value of zero indicates the Attributes was successfully set.",
      "id": "3846"
    },
    {
      "names": [
        "Integer Get_macro_attributes(Attributes &att)"
      ],
      "description": "For the macro, return the Attributes for the macro as att. If the macro has no attribute then a non-zero return value is returned. A function return value of zero indicates the attribute is successfully returned.",
      "id": "3845"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Uid &att)"
      ],
      "description": "For the macro, get the attribute called att_name and return the attribute value in uid.  Theattribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7538"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Attributes &att)"
      ],
      "description": "For the macro, get the attribute called att_name and return the attribute value in att.  Theattribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7539"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Integer att_no, Uid &att)"
      ],
      "description": "For the macro, get the attribute with number att_no and return the attribute value in uid.  Theattribute must be of type Uid. If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "7546"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Integer att_no, Attributes &att)"
      ],
      "description": "For the macro, get the attribute with number att_no and return the attribute value in att.  Theattribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "7547"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Uid uid)"
      ],
      "description": "For the macro,if the attribute called att_name does not exist then create it as type Uid and give it the valueuid. \uf020if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7556"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Attributes att)"
      ],
      "description": "For the macro,\uf020if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att. \uf020if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7557"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Integer att_no, Uid uid)"
      ],
      "description": "For the macro, if the attribute number att_no exists and it is of type Uid, then its value is set touid. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Uid then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "7564"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Integer att_no, Attributes att)"
      ],
      "description": "For the macro, if the attribute number att_no exists and it is of type Attributes, then its value isset to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "7565"
    },
    {
      "names": [
        "Integer Macro_attribute_exists(Text att_name)"
      ],
      "description": "Checks to see if a macro attribute with the name att_name exists in current macro. A non-zero function return value indicates that the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "3847"
    },
    {
      "names": [
        "Integer Macro_attribute_exists(Text name, Integer &no)"
      ],
      "description": "Checks to see if a macro attribute with the name name exists in current macro. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. Page 1300Internal Macro Calls\fChapterA non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "3848"
    },
    {
      "names": [
        "Integer Macro_attribute_delete(Text att_name)"
      ],
      "description": "Delete the macro attribute with the name att_name in current macro. A function return value of zero indicates the attribute was deleted.",
      "id": "3849"
    },
    {
      "names": [
        "Integer Macro_attribute_delete_all(Element elt)"
      ],
      "description": "Delete all the attributes for the macro. Element elt has nothing to do with this call and is ignored. A function return value of zero indicates all the attributes were deleted.",
      "id": "3851"
    },
    {
      "names": [
        "Integer Macro_attribute_dump()"
      ],
      "description": "Write out information about the macro attributes to the Output Window. A function return value of zero indicates the function was successful.",
      "id": "7536"
    },
    {
      "names": [
        "Integer Get_macro_number_of_attributes(Integer &no_atts)"
      ],
      "description": "Get number of attributes Integer no_atts in current macro. A function return value of zero indicates the number is successfully returned.",
      "id": "3852"
    },
    {
      "names": [
        "Integer Get_macro_attribute_name(Integer att_no, Text &name)"
      ],
      "description": "Get macro attribute name Text name with attribute number Integer att_no in current macro. A function return value of zero indicates the name is successfully returned.",
      "id": "7551"
    },
    {
      "names": [
        "Integer Get_macro_attribute_length(Integer att_no, Integer &att_len)"
      ],
      "description": "Get the length of the macro attribute at position att_no. The macro attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. NoteThe length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "7554"
    },
    {
      "names": [
        "Integer Get_macro_attribute_length(Text att_name, Integer &att_len)"
      ],
      "description": "Get the length of the macro attribute with the name att_name for the current macro. The macro attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. NoteThe length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "7555"
    },
    {
      "names": [
        "Integer Get_macro_attribute_type(Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the macro attribute with the name att_name from the current macro. The macro attribute type is returned in Integer att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "7552"
    },
    {
      "names": [
        "Integer Get_macro_attribute_type(Integer att_no, Integer &att_type)"
      ],
      "description": "Get the type of the macro attribute at position att_no for the current macro. The macro attribute type is returned in att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "7553"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Real &att)"
      ],
      "description": "Get macro attribute Real att with attribute name Text att_name in current macro. A function return value of zero indicates the name is successfully returned.",
      "id": "3855"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Real att)"
      ],
      "description": "Set the macro attribute with name att_name to the Real att. The macro attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "3858"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Integer &att)"
      ],
      "description": "Get macro attribute Integer att with attribute name Text att_name in macro macro. A function return value of zero indicates the name is successfully returned. Internal Macro CallsPage 1303\f12d Model Programming Language Manual",
      "id": "3854"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Integer att)"
      ],
      "description": "Set the macro attribute with name att_name to the Integer att. The macro attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "3857"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Text &att)"
      ],
      "description": "Get macro attribute Text att with attribute name Text att_name in current macro. A function return value of zero indicates the name is successfully returned.",
      "id": "3853"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Text att)"
      ],
      "description": "Set the macro attribute with name att_name to the Text att. The macro attribute must be of type TextA function return value of zero indicates the attribute was successfully set.",
      "id": "3856"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Integer att_no, Integer &att)"
      ],
      "description": "Get macro attribute Integer att with attribute number Integer att_no in current macro. A function return value of zero indicates the name is successfully returned.",
      "id": "7544"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Integer att_no, Integer att)"
      ],
      "description": "Page 1304Internal Macro Calls\fChapterSet the macro attribute at position att_no to the Integer att. The macro attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "7562"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Integer att_no, Real &att)"
      ],
      "description": "Get macro attribute Real att with attribute number Integer att_no in current macro. A function return value of zero indicates the name is successfully returned.",
      "id": "7545"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Integer att_no, Real att)"
      ],
      "description": "Set the macro attribute at position att_no to the Real att. The macro attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "7563"
    },
    {
      "names": [
        "Integer Macro_attribute_delete_all()"
      ],
      "description": "Delete all the macro attributes. A function return value of zero indicates all the attribute were successfully deleted.",
      "id": "7535"
    },
    {
      "names": [
        "Integer Create_chain_parameters(Text pvf_file, Chain_Parameters &created)"
      ],
      "description": "Create a new chain parameter created object using given chain parameter file pvf_file. A function return value of zero indicates all the call were successful.",
      "id": "7600"
    },
    {
      "names": [
        "Integer Resolve_parameter(Chain_Parameters ch, Text raw, Text &resolved)"
      ],
      "description": "Resolve the chain parameter raw using Chain_Parameters ch and set the resolved parameter toresolved. A function return value of zero indicates all the call were successful.",
      "id": "7602"
    },
    {
      "names": [
        "Integer Resolve_parameter_strict(Chain_Parameters ch, Text raw, Text &resolved)"
      ],
      "description": "Strictly resolve the chain parameter raw using Chain_Parameters ch and set the resolvedparameter to resolved. A function return value of zero indicates all the call were successful.",
      "id": "7603"
    },
    {
      "names": [
        "Integer Set_integer_value(Chain_Parameters &ch, Text para_name, Integer para_val)"
      ],
      "description": "Set the value of Integer parameter with given name para_name in Chain_Parameters ch to newvalue para_val. A function return value of zero indicates all the call were successful.",
      "id": "7604"
    },
    {
      "names": [
        "Integer Set_real_value(Chain_Parameters &ch, Text para_name, Real para_val)"
      ],
      "description": "Set the value of Real parameter with given name para_name in Chain_Parameters ch to newvalue para_val. A function return value of zero indicates all the call were successful.",
      "id": "7605"
    },
    {
      "names": [
        "Integer Set_text_value(Chain_Parameters &ch, Text para_name, Text para_val)"
      ],
      "description": "Set the value of Text parameter with given name para_name in Chain_Parameters ch to newvalue para_val. A function return value of zero indicates all the call were successful.",
      "id": "7606"
    },
    {
      "names": [
        "Integer Set_tin_value(Chain_Parameters &ch, Text para_name, Integer ref_mode, Text tin_name, Uid tin_id)"
      ],
      "description": "Set the value of Tin parameter with given name para_name in Chain_Parameters ch to newvalue ref_mode tin_name tin_id. A function return value of zero indicates all the call were successful.",
      "id": "7607"
    },
    {
      "names": [
        "Integer Set_model_value(Chain_Parameters &ch, Text para_name, Integer ref_mode, Text model_name, Uid model_id)"
      ],
      "description": "Set the value of Model parameter with given name para_name in Chain_Parameters ch to newvalue ref_mode model_name model_id. A function return value of zero indicates all the call were successful.",
      "id": "7608"
    },
    {
      "names": [
        "Integer Set_string_value(Chain_Parameters &ch, Text para_name, Integer ref_mode, Text string_name, Uid string_id, Text model_name, Uid model_id)"
      ],
      "description": "Set the value of String parameter with given name para_name in Chain_Parameters ch to newvalue ref_mode string_name string_id model_name model_id. A function return value of zero indicates all the call were successful.",
      "id": "7622"
    },
    {
      "names": [
        "Integer Set_function_value(Chain_Parameters &ch, Text para_name, Text para_val)"
      ],
      "description": "Set the value of Function parameter with given name para_name in Chain_Parameters ch tonew value para_val. A function return value of zero indicates all the call were successful.",
      "id": "7609"
    },
    {
      "names": [
        "Integer Set_tick_value(Chain_Parameters &ch, Text para_name, Integer para_val)"
      ],
      "description": "Set the value of Tick parameter with given name para_name in Chain_Parameters ch to newvalue para_val. A function return value of zero indicates all the call were successful.",
      "id": "7610"
    },
    {
      "names": [
        "Integer Set_colour_value(Chain_Parameters &ch, Text para_name, Text para_val)"
      ],
      "description": "Set the value of Colour parameter with given name para_name in Chain_Parameters ch to newvalue para_val. A function return value of zero indicates all the call were successful.",
      "id": "7611"
    },
    {
      "names": [
        "Integer Set_grid_value(Chain_Parameters &ch, Text para_name, Integer ref_mode, Integer mod_mode, Text file_name, Integer num_cols, Integer num_rows, Dynamic_Text data, Dynamic_Text col_names)"
      ],
      "description": "???. A function return value of zero indicates all the call were successful.",
      "id": "7612"
    },
    {
      "names": [
        "Integer Get_type(Chain_Parameters ch, Text para_name, Integer &int_type, Text &text_type)"
      ],
      "description": "Get the type of chain parameter with given name para_name from Chain_Parameters chA function return value of zero indicates the call was successfully.",
      "id": "7621"
    },
    {
      "names": [
        "Real Sin(Real value)"
      ],
      "description": "",
      "id": "1"
    },
    {
      "names": [
        "Real Cos(Real value)"
      ],
      "description": "",
      "id": "2"
    },
    {
      "names": [
        "Real Tan(Real value)"
      ],
      "description": "",
      "id": "3"
    },
    {
      "names": [
        "Real Acos(Real value)"
      ],
      "description": "",
      "id": "4"
    },
    {
      "names": [
        "Real Asin(Real value)"
      ],
      "description": "",
      "id": "5"
    },
    {
      "names": [
        "Real Atan(Real value)"
      ],
      "description": "",
      "id": "6"
    },
    {
      "names": [
        "Real Atan2(Real dy,Real dx)"
      ],
      "description": "",
      "id": "7"
    },
    {
      "names": [
        "Real Sinh(Real value)"
      ],
      "description": "",
      "id": "8"
    },
    {
      "names": [
        "Real Cosh(Real value)"
      ],
      "description": "",
      "id": "9"
    },
    {
      "names": [
        "Real Tanh(Real value)"
      ],
      "description": "",
      "id": "10"
    },
    {
      "names": [
        "Real Exp(Real value)"
      ],
      "description": "",
      "id": "11"
    },
    {
      "names": [
        "Real Log(Real value)"
      ],
      "description": "",
      "id": "12"
    },
    {
      "names": [
        "Real Log10(Real value)"
      ],
      "description": "",
      "id": "13"
    },
    {
      "names": [
        "Real Pow(Real v1,Real v2)"
      ],
      "description": "",
      "id": "14"
    },
    {
      "names": [
        "Real Sqrt(Real value)"
      ],
      "description": "",
      "id": "15"
    },
    {
      "names": [
        "Real Ceil(Real value)"
      ],
      "description": "",
      "id": "16"
    },
    {
      "names": [
        "Real Floor(Real value)"
      ],
      "description": "",
      "id": "17"
    },
    {
      "names": [
        "Real Absolute(Real value)"
      ],
      "description": "",
      "id": "18"
    },
    {
      "names": [
        "Real Ldexp(Real v1,Integer v2)"
      ],
      "description": "",
      "id": "19"
    },
    {
      "names": [
        "Real Mod(Real v1,Real v2)"
      ],
      "description": "",
      "id": "20"
    },
    {
      "names": [
        "Integer Drape(Tin tin,Dynamic_Element model,Dynamic_Element &draped_strings)"
      ],
      "description": "",
      "id": "144"
    },
    {
      "names": [
        "Real Pi()"
      ],
      "description": "",
      "id": "192"
    },
    {
      "names": [
        "Real Half_pi()"
      ],
      "description": "",
      "id": "193"
    },
    {
      "names": [
        "Real Two_pi()"
      ],
      "description": "",
      "id": "194"
    },
    {
      "names": [
        "Integer Radians_to_degrees(Real rad,Real &deg)"
      ],
      "description": "",
      "id": "203"
    },
    {
      "names": [
        "Integer Degrees_to_radians(Real deg,Real &rad)"
      ],
      "description": "",
      "id": "204"
    },
    {
      "names": [
        "Integer Radians_to_hp_degrees(Real rad,Real &hp_deg)"
      ],
      "description": "",
      "id": "205"
    },
    {
      "names": [
        "Integer Hp_degrees_to_radians(Real hp_deg,Real &rad)"
      ],
      "description": "",
      "id": "206"
    },
    {
      "names": [
        "Integer Degrees_to_hp_degrees(Real deg,Real &hp_deg)"
      ],
      "description": "",
      "id": "207"
    },
    {
      "names": [
        "Integer Hp_degrees_to_degrees(Real hp_deg,Real &deg)"
      ],
      "description": "",
      "id": "208"
    },
    {
      "names": [
        "Integer Degrees_to_dms(Real deg,Integer &dd,Integer &mm,Real &ss)"
      ],
      "description": "",
      "id": "209"
    },
    {
      "names": [
        "Integer Dms_to_degrees(Integer dd,Integer mm,Real ss,Real &deg)"
      ],
      "description": "",
      "id": "210"
    },
    {
      "names": [
        "Integer Angle_to_bearing(Real angle,Real &bearing)"
      ],
      "description": "",
      "id": "211"
    },
    {
      "names": [
        "Integer Bearing_to_angle(Real bearing,Real &angle)"
      ],
      "description": "",
      "id": "212"
    },
    {
      "names": [
        "Integer Absolute(Integer)"
      ],
      "description": "",
      "id": "330"
    },
    {
      "names": [
        "Integer __Drainage_000001__()"
      ],
      "description": "",
      "id": "525"
    },
    {
      "names": [
        "Integer __Drainage_000002__()"
      ],
      "description": "",
      "id": "526"
    },
    {
      "names": [
        "Integer __Drainage_000003__()"
      ],
      "description": "",
      "id": "527"
    },
    {
      "names": [
        "Integer __Drainage_000004__()"
      ],
      "description": "",
      "id": "528"
    },
    {
      "names": [
        "Integer __Drainage_000005__()"
      ],
      "description": "",
      "id": "529"
    },
    {
      "names": [
        "Integer Set_super_pipe(Element element,Real diameter)"
      ],
      "description": "",
      "id": "706"
    },
    {
      "names": [
        "Integer Get_super_use_segment_diameter(Element element,Integer &use)"
      ],
      "description": "",
      "id": "715"
    },
    {
      "names": [
        "Integer Map_file_save(Map_File file)"
      ],
      "description": "",
      "id": "867"
    },
    {
      "names": [
        "Integer Get_id(Widget widget)"
      ],
      "description": "",
      "id": "879"
    },
    {
      "names": [
        "Integer Get_data(Angle_Box box,Text &data)"
      ],
      "description": "",
      "id": "889"
    },
    {
      "names": [
        "Integer Set_data(Choice_Box box,Integer nc,Text choices[])"
      ],
      "description": "",
      "id": "977"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_exists(Element elt,Integer pit,Text att_name)"
      ],
      "description": "",
      "id": "987"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_exists(Element elt,Integer pit,Text name,Integer &no)"
      ],
      "description": "",
      "id": "988"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_delete(Element elt,Integer pit,Text att_name)"
      ],
      "description": "",
      "id": "989"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_delete(Element elt,Integer pit,Integer att_no)"
      ],
      "description": "",
      "id": "990"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_delete_all(Element elt,Integer pit)"
      ],
      "description": "",
      "id": "991"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_dump(Element elt,Integer pit)"
      ],
      "description": "",
      "id": "992"
    },
    {
      "names": [
        "Integer Drainage_pit_attribute_debug(Element elt,Integer pit)"
      ],
      "description": "",
      "id": "993"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "996"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Integer &att)"
      ],
      "description": "",
      "id": "999"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_exists(Element elt,Integer pipe,Text att_name)"
      ],
      "description": "",
      "id": "1012"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_exists(Element elt,Integer pipe,Text name,Integer &no)"
      ],
      "description": "",
      "id": "1013"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_delete(Element elt,Integer pipe,Text att_name)"
      ],
      "description": "",
      "id": "1014"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_delete(Element elt,Integer pipe,Integer att_no)"
      ],
      "description": "",
      "id": "1015"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_delete_all(Element elt,Integer pipe)"
      ],
      "description": "",
      "id": "1016"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_dump(Element elt,Integer pipe)"
      ],
      "description": "",
      "id": "1017"
    },
    {
      "names": [
        "Integer Drainage_pipe_attribute_debug(Element elt,Integer pipe)"
      ],
      "description": "",
      "id": "1018"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "1020"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "1021"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "1022"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Text &att)"
      ],
      "description": "",
      "id": "1023"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Integer &att)"
      ],
      "description": "",
      "id": "1024"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Real &att)"
      ],
      "description": "",
      "id": "1025"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_length(Element elt,Integer pipe,Text att_name,Integer &att_len)"
      ],
      "description": "",
      "id": "1029"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_length(Element elt,Integer pipe,Integer att_no,Integer &att_len)"
      ],
      "description": "",
      "id": "1030"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Text att)"
      ],
      "description": "",
      "id": "1031"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "1032"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Text att)"
      ],
      "description": "",
      "id": "1034"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Box select,Integer snap_mode,Integer snap_control,Text snap_text)"
      ],
      "description": "",
      "id": "1050"
    },
    {
      "names": [
        "Integer Super_segment_attribute_delete(Element elt,Integer seg,Text att_name)"
      ],
      "description": "",
      "id": "1064"
    },
    {
      "names": [
        "Integer Super_segment_attribute_delete(Element elt,Integer seg,Integer att_no)"
      ],
      "description": "",
      "id": "1065"
    },
    {
      "names": [
        "Integer Super_segment_attribute_delete_all(Element elt,Integer seg)"
      ],
      "description": "",
      "id": "1066"
    },
    {
      "names": [
        "Integer Super_segment_attribute_dump(Element elt,Integer seg)"
      ],
      "description": "",
      "id": "1067"
    },
    {
      "names": [
        "Integer Super_segment_attribute_debug(Element elt,Integer seg)"
      ],
      "description": "",
      "id": "1068"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "1070"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "1071"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "1072"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Text &att)"
      ],
      "description": "",
      "id": "1073"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Integer &att)"
      ],
      "description": "",
      "id": "1074"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Real &att)"
      ],
      "description": "",
      "id": "1075"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_name(Element elt,Integer seg,Integer att_no,Text &name)"
      ],
      "description": "",
      "id": "1076"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_type(Element elt,Integer seg,Text att_name,Integer &att_type)"
      ],
      "description": "",
      "id": "1077"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_type(Element elt,Integer seg,Integer att_name,Integer &att_type)"
      ],
      "description": "",
      "id": "1078"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Text att)"
      ],
      "description": "",
      "id": "1081"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "1082"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Real att)"
      ],
      "description": "",
      "id": "1083"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Integer att_no,Text att)"
      ],
      "description": "",
      "id": "1084"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Integer att_no,Integer att)"
      ],
      "description": "",
      "id": "1085"
    },
    {
      "names": [
        "Integer Create_apply_many_function(Text function_name,Text mtf_file_name,Text report_file_name,Tin tin,Element reference_string,Element hinge_string,Real separation,Real start_chainage,Real end_chainage,Integer create_arcs,Integer copy_hinge,Integer partial_interfaces,Integer sections_as_4d,Integer use_stripping,Real chord_arc_tol,Text left_prefix,Text right_prefix,Model strings_model,Model sections_model,Integer sections_colour,Model polygons_model,Model diffs_model,Integer diffs_colour,Model boxing_strings_model,Model boxing_sections_model,Apply_Many_Function &func)"
      ],
      "description": "",
      "id": "1107"
    },
    {
      "names": [
        "Integer Create_kerb_return_function(Text function_name,Element centre_line_1,Element centre_line_2,Element kerb_line_1,Element kerb_line_2,Element kerb_return,Integer reset_vg,Kerb_Return_Function &func)"
      ],
      "description": "",
      "id": "1108"
    },
    {
      "names": [
        "Integer Create_apply_function(Text function_name,Text left_template,Text right_template,Text report_file_name,Tin tin,Element reference_string,Element hinge_string,Real separation,Real start_chainage,Real end_chainage,Integer create_arcs,Integer copy_hinge,Integer partial_interfaces,Integer sections_as_4d,Integer use_stripping,Real chord_arc_tol,Text left_prefix,Text right_prefix,Model strings_model,Model sections_model,Integer sections_colour,Model polygons_model,Model diffs_model,Integer diffs_colour,Apply_Function &func)"
      ],
      "description": "",
      "id": "1136"
    },
    {
      "names": [
        "Integer Read_templates(Text filename)"
      ],
      "description": "",
      "id": "1236"
    },
    {
      "names": [
        "Sheet_Panel Create_sheet_panel(Text title)"
      ],
      "description": "",
      "id": "1258"
    },
    {
      "names": [
        "Integer Append(Panel widget,Sheet_Panel panel)"
      ],
      "description": "",
      "id": "1259"
    },
    {
      "names": [
        "Integer Set_page(Sheet_Panel panel,Integer page_no)"
      ],
      "description": "",
      "id": "1260"
    },
    {
      "names": [
        "Integer Get_page(Sheet_Panel panel,Integer &page_no)"
      ],
      "description": "",
      "id": "1261"
    },
    {
      "names": [
        "Integer Set_common(Sheet_Panel panel,Widget common)"
      ],
      "description": "",
      "id": "1262"
    },
    {
      "names": [
        "Integer Set_stacked(Sheet_Panel panel,Integer stack)"
      ],
      "description": "",
      "id": "1263"
    },
    {
      "names": [
        "Integer Set_position(Widget widget,Integer x,Integer y)"
      ],
      "description": "",
      "id": "1332"
    },
    {
      "names": [
        "Integer Set_bk_colour(Draw_Box box,Integer r,Integer g,Integer b)"
      ],
      "description": "",
      "id": "1347"
    },
    {
      "names": [
        "Integer Set_bk_mode(Draw_Box box,Integer mode)"
      ],
      "description": "",
      "id": "1348"
    },
    {
      "names": [
        "Integer Draw_polygon(Draw_Box box,Integer n,Real x[],Real y[])"
      ],
      "description": "",
      "id": "1353"
    },
    {
      "names": [
        "Integer Set_fill_colour(Draw_Box box,Integer r,Integer g,Integer b)"
      ],
      "description": "",
      "id": "1354"
    },
    {
      "names": [
        "Integer Set_rop(Draw_Box box,Integer mode)"
      ],
      "description": "",
      "id": "1356"
    },
    {
      "names": [
        "Integer Draw_BMP(Draw_Box box,Text filename,Real x,Real y)"
      ],
      "description": "",
      "id": "1357"
    },
    {
      "names": [
        "Integer Draw_BMP(Draw_Box box,Text filename,Real x,Real y,Integer rop3)"
      ],
      "description": "",
      "id": "1358"
    },
    {
      "names": [
        "Integer Draw_transparent_BMP(Draw_Box box,Text filename,Real x,Real y)"
      ],
      "description": "",
      "id": "1359"
    },
    {
      "names": [
        "Integer Draw_transparent_BMP(Draw_Box box,Text filename,Real x,Real y,Integer rop3)"
      ],
      "description": "",
      "id": "1360"
    },
    {
      "names": [
        "Integer Project_attribute_debug()"
      ],
      "description": "",
      "id": "1384"
    },
    {
      "names": [
        "Integer Set_select_direction(Select_Button select,Integer dir)"
      ],
      "description": "",
      "id": "1445"
    },
    {
      "names": [
        "Integer Set_select_coordinate(Select_Button select,Real x,Real y,Real z,Real ch,Real ht)"
      ],
      "description": "",
      "id": "1446"
    },
    {
      "names": [
        "Integer Super_add_hole(Element super,Element hole)"
      ],
      "description": "",
      "id": "1460"
    },
    {
      "names": [
        "Overlay_Widget Create_overlay_widget(Integer mode)"
      ],
      "description": "",
      "id": "1503"
    },
    {
      "names": [
        "Integer Set_lower_widget(Overlay_Widget w,Widget lower)"
      ],
      "description": "",
      "id": "1504"
    },
    {
      "names": [
        "Integer Set_upper_widget(Overlay_Widget w,Widget lower)"
      ],
      "description": "",
      "id": "1505"
    },
    {
      "names": [
        "Tab_Box Create_tab_box()"
      ],
      "description": "",
      "id": "1508"
    },
    {
      "names": [
        "Integer Append(Widget widget,Tab_Box pages)"
      ],
      "description": "",
      "id": "1509"
    },
    {
      "names": [
        "Integer Append(Widget widget,Text name,Tab_Box pages)"
      ],
      "description": "",
      "id": "1510"
    },
    {
      "names": [
        "Integer Set_page(Tab_Box pages,Integer page_no)"
      ],
      "description": "",
      "id": "1511"
    },
    {
      "names": [
        "Integer Get_page(Tab_Box pages,Integer &page_no)"
      ],
      "description": "",
      "id": "1512"
    },
    {
      "names": [
        "Integer Set_tab(Tab_Box pages,Integer page_no,Text t)"
      ],
      "description": "",
      "id": "1513"
    },
    {
      "names": [
        "Integer Get_tab(Tab_Box pages,Integer page_no,Text &t)"
      ],
      "description": "",
      "id": "1514"
    },
    {
      "names": [
        "ListCtrl_Box Create_listctrl_box(Text title,Message_Box message,Integer nlines)"
      ],
      "description": "",
      "id": "1523"
    },
    {
      "names": [
        "Bitmap_List_Box Create_bitmap_list_box(Text title,Message_Box message,Integer nlines)"
      ],
      "description": "",
      "id": "1524"
    },
    {
      "names": [
        "Integer Set_sort(Bitmap_List_Box box,Integer mode)"
      ],
      "description": "",
      "id": "1525"
    },
    {
      "names": [
        "Integer Get_sort(Bitmap_List_Box box,Integer &mode)"
      ],
      "description": "",
      "id": "1526"
    },
    {
      "names": [
        "Integer Set_auto_cut_paste(Bitmap_List_Box box,Integer mode)"
      ],
      "description": "",
      "id": "1527"
    },
    {
      "names": [
        "Integer Get_auto_cut_paste(Bitmap_List_Box box,Integer &mode)"
      ],
      "description": "",
      "id": "1528"
    },
    {
      "names": [
        "Integer Set_selections(Bitmap_List_Box box,Integer mode)"
      ],
      "description": "",
      "id": "1529"
    },
    {
      "names": [
        "Integer Get_selections(Bitmap_List_Box box,Integer &mode)"
      ],
      "description": "",
      "id": "1530"
    },
    {
      "names": [
        "Integer Set_caret(Bitmap_List_Box box,Integer pos,Integer scroll)"
      ],
      "description": "",
      "id": "1531"
    },
    {
      "names": [
        "Integer Get_caret(Bitmap_List_Box box,Integer &item)"
      ],
      "description": "",
      "id": "1532"
    },
    {
      "names": [
        "Integer Delete_item(Bitmap_List_Box box,Integer item)"
      ],
      "description": "",
      "id": "1533"
    },
    {
      "names": [
        "Integer Insert_item(Bitmap_List_Box box,Integer item,Text text)"
      ],
      "description": "",
      "id": "1534"
    },
    {
      "names": [
        "Integer Add_item(Bitmap_List_Box box,Text text)"
      ],
      "description": "",
      "id": "1535"
    },
    {
      "names": [
        "Integer Get_item(Bitmap_List_Box box,Integer item,Text &text)"
      ],
      "description": "",
      "id": "1536"
    },
    {
      "names": [
        "Integer Set_selection(Bitmap_List_Box box,Integer item)"
      ],
      "description": "",
      "id": "1537"
    },
    {
      "names": [
        "Integer Get_selection(Bitmap_List_Box box,Integer &item)"
      ],
      "description": "",
      "id": "1538"
    },
    {
      "names": [
        "Integer Get_selection_count(Bitmap_List_Box box,Integer &count)"
      ],
      "description": "",
      "id": "1539"
    },
    {
      "names": [
        "Integer Set_selection_list(Bitmap_List_Box box,Integer maxc,Integer list[],Integer tf)"
      ],
      "description": "",
      "id": "1540"
    },
    {
      "names": [
        "Integer Get_selection_list(Bitmap_List_Box box,Integer maxc,Integer list[])"
      ],
      "description": "",
      "id": "1541"
    },
    {
      "names": [
        "Integer Set_stacked(Tab_Box pages,Integer stack)"
      ],
      "description": "",
      "id": "1542"
    },
    {
      "names": [
        "Integer Get_stacked(Tab_Box pages,Integer &stack)"
      ],
      "description": "",
      "id": "1543"
    },
    {
      "names": [
        "Text Language(Text english,Text foreign)"
      ],
      "description": "",
      "id": "1569"
    },
    {
      "names": [
        "Integer Set_page(Tab_Box pages,Widget widget)"
      ],
      "description": "",
      "id": "1604"
    },
    {
      "names": [
        "Integer Get_page(Tab_Box pages,Widget widget,Integer &page_no)"
      ],
      "description": "",
      "id": "1605"
    },
    {
      "names": [
        "Integer Set_ip_draw_mode(Element element,Integer mode)"
      ],
      "description": "",
      "id": "1610"
    },
    {
      "names": [
        "Integer Get_ip_draw_mode(Element element,Integer &mode)"
      ],
      "description": "",
      "id": "1611"
    },
    {
      "names": [
        "Integer Map_file_add_key(Map_File file,Text key,Text name,Text model,Integer colour,Integer ptln,Text style,Real weight)"
      ],
      "description": "",
      "id": "1612"
    },
    {
      "names": [
        "Integer Map_file_get_key(Map_File file,Integer n,Text &key,Text &name,Text &model,Integer &colour,Integer &ptln,Text &style,Real &weight)"
      ],
      "description": "",
      "id": "1613"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,Text filename,Integer precision,Integer output_model_name)"
      ],
      "description": "",
      "id": "1683"
    },
    {
      "names": [
        "Integer Write_XML(Dynamic_Element lst,Text filename,Integer precision,Integer output_model_name)"
      ],
      "description": "",
      "id": "1684"
    },
    {
      "names": [
        "Integer Write_XML(Model mod,Text filename,Integer precision,Integer output_model_name)"
      ],
      "description": "",
      "id": "1685"
    },
    {
      "names": [
        "Integer Solve_dp2(Integer sections_no_elts,Integer max_index,Real weight,Real max_angle,Real height_inc,Integer centre_line_fixed,Real chainage[],Real height_l[],Real height_c[],Real height_r[],Integer steps,Integer stage_step,Real cost_table[],Integer choice_i[],Integer choice_j[],Real costs[],Text file1_name,Message_Box message_box)"
      ],
      "description": "",
      "id": "1726"
    },
    {
      "names": [
        "Integer Volume(Dynamic_Element list_1,Dynamic_Element list_2,Integer use_pappus,Real &cut,Real &fill,Real &balance)"
      ],
      "description": "",
      "id": "1727"
    },
    {
      "names": [
        "Integer Float_console(Integer tf)"
      ],
      "description": "",
      "id": "1730"
    },
    {
      "names": [
        "Integer Set_console_position(Integer x,Integer y,Integer w,Integer h)"
      ],
      "description": "",
      "id": "1732"
    },
    {
      "names": [
        "Integer Get_console_position(Integer &x,Integer &y,Integer &w,Integer &h)"
      ],
      "description": "",
      "id": "1733"
    },
    {
      "names": [
        "Integer Minimize_console(Integer tf)"
      ],
      "description": "",
      "id": "1734"
    },
    {
      "names": [
        "Integer Is_console_minimized()"
      ],
      "description": "",
      "id": "1735"
    },
    {
      "names": [
        "Integer Get_paving_cost_dp2(Element survey_string,Element prev_survey_string,Integer section_strings_index,Integer prev_section_strings_index,Integer fall_strings,Real height_l,Real height_c,Real height_r,Real prev_height_l,Real prev_height_c,Real prev_height_r,Real chainage,Real prev_chainage,Real min_depth,Real min_crossfall,Real left_xfall[],Real right_xfall[],Integer left_min[],Integer right_min[],Real &area1,Real &area2)"
      ],
      "description": "",
      "id": "1743"
    },
    {
      "names": [
        "Integer Get_SDR_gis_string(Function function,Element &string)"
      ],
      "description": "",
      "id": "1749"
    },
    {
      "names": [
        "Integer Get_SDR_attribute(Function function,Integer vertex,SDR_Attribute &attr)"
      ],
      "description": "",
      "id": "1750"
    },
    {
      "names": [
        "Integer Get_name(SDR_Attribute attr,Text &name)"
      ],
      "description": "",
      "id": "1755"
    },
    {
      "names": [
        "Integer Get_type(SDR_Attribute attr,Text &type)"
      ],
      "description": "",
      "id": "1756"
    },
    {
      "names": [
        "Integer Get_integer_data(SDR_Attribute attr,Integer &data)"
      ],
      "description": "",
      "id": "1757"
    },
    {
      "names": [
        "Integer Get_real_data(SDR_Attribute attr,Real &data)"
      ],
      "description": "",
      "id": "1758"
    },
    {
      "names": [
        "Integer Get_text_data(SDR_Attribute attr,Text &data)"
      ],
      "description": "",
      "id": "1759"
    },
    {
      "names": [
        "Integer Get_source_data(SDR_Attribute attr,Real &ix,Real &iy,Real &iz,Real &ih)"
      ],
      "description": "",
      "id": "1760"
    },
    {
      "names": [
        "Integer Get_measure_data(SDR_Attribute attr,Real &ha,Real &va,Real &sd,Real &th)"
      ],
      "description": "",
      "id": "1761"
    },
    {
      "names": [
        "Integer Get_reduced_data(SDR_Attribute attr,Real &tx,Real &ty,Real &tz)"
      ],
      "description": "",
      "id": "1762"
    },
    {
      "names": [
        "Integer Get_number_of_items(SDR_Attribute attr,Integer &number)"
      ],
      "description": "",
      "id": "1763"
    },
    {
      "names": [
        "Integer Get_item(SDR_Attribute attr,Integer index,SDR_Attribute &sub_attr)"
      ],
      "description": "",
      "id": "1764"
    },
    {
      "names": [
        "Integer SDR_add_element(Function function,Element element)"
      ],
      "description": "",
      "id": "1765"
    },
    {
      "names": [
        "Integer Get_field_type(SDR_Attribute attr,Text &type)"
      ],
      "description": "",
      "id": "1766"
    },
    {
      "names": [
        "Integer Super_vertex_add_plan_image(Element super,Integer vertex,Text url,Real width,Real height,Real angle,Real offset_x,Real offset_y)"
      ],
      "description": "",
      "id": "1772"
    },
    {
      "names": [
        "Integer Super_vertex_add_billboard(Element super,Integer vertex,Text name,Real angle,Integer colour,Real offset_x,Real offset_y,Real offset_z)"
      ],
      "description": "",
      "id": "1773"
    },
    {
      "names": [
        "Integer Super_vertex_add_object(Element super,Integer vertex,Text name,Real size_x,Real size_y,Real size_z,Real angle,Real offset_x,Real offset_y,Real offset_z)"
      ],
      "description": "",
      "id": "1774"
    },
    {
      "names": [
        "Integer Super_vertex_add_billboard(Element super,Integer vertex,Text name,Integer colour,Real factor_x,Real factor_y,Real factor_z,Real rotate_x,Real rotate_y,Real rotate_z,Real offset_x,Real offset_y,Real offset_z)"
      ],
      "description": "",
      "id": "1797"
    },
    {
      "names": [
        "Integer Super_vertex_add_projector(Element super,Integer vertex,Text name,Integer colour,Real source_x,Real source_y,Real source_z,Real source_normal_x,Real source_normal_y,Real source_normal_z,Real target_x,Real target_y,Real target_z,Real target_normal_x,Real target_normal_y,Real target_normal_z,Real field_of_view,Text surface)"
      ],
      "description": "",
      "id": "1798"
    },
    {
      "names": [
        "Parabola Reverse(Parabola parabola)"
      ],
      "description": "",
      "id": "1851"
    },
    {
      "names": [
        "Point Get_ip(Parabola parabola)"
      ],
      "description": "",
      "id": "1853"
    },
    {
      "names": [
        "Real Get_length(Parabola parabola)"
      ],
      "description": "",
      "id": "1854"
    },
    {
      "names": [
        "Point Get_start(Parabola parabola)"
      ],
      "description": "",
      "id": "1855"
    },
    {
      "names": [
        "Point Get_end(Parabola parabola)"
      ],
      "description": "",
      "id": "1856"
    },
    {
      "names": [
        "Integer Set_ip(Parabola &parabola,Point centre)"
      ],
      "description": "",
      "id": "1857"
    },
    {
      "names": [
        "Integer Set_length(Parabola &parabola,Real length)"
      ],
      "description": "",
      "id": "1858"
    },
    {
      "names": [
        "Integer Set_start(Parabola &parabola,Point start)"
      ],
      "description": "",
      "id": "1859"
    },
    {
      "names": [
        "Integer Set_end(Parabola &parabola,Point end)"
      ],
      "description": "",
      "id": "1860"
    },
    {
      "names": [
        "Integer Super_vertex_add_object(Element super,Integer vertex,Text name,Real size_x,Real size_y,Real size_z,Real rotate_x,Real rotate_y,Real rotate_z,Real offset_x,Real offset_y,Real offset_z)"
      ],
      "description": "",
      "id": "1861"
    },
    {
      "names": [
        "Integer Get_super_vertex_billboard(Element super,Integer vertex,Integer image_no,Text &name,Integer &colour,Real &factor_x,Real &factor_y,Real &factor_z,Real &rotate_x,Real &rotate_y,Real &rotate_z,Real &offset_x,Real &offset_y,Real &offset_z)"
      ],
      "description": "",
      "id": "1868"
    },
    {
      "names": [
        "Integer Get_Super_vertex_projector(Element super,Integer vertex,Integer image_no,Text &name,Integer &colour,Real &source_x,Real &source_y,Real &source_z,Real &source_normal_x,Real &source_normal_y,Real &source_normal_z,Real &target_x,Real &target_y,Real &target_z,Real &target_normal_x,Real &target_normal_y,Real &target_normal_z,Real &field_of_view,Text &surface)"
      ],
      "description": "",
      "id": "1869"
    },
    {
      "names": [
        "Integer Get_super_vertex_object(Element super,Integer vertex,Integer image_no,Text &name,Real &size_x,Real &size_y,Real &size_z,Real &rotate_x,Real &rotate_y,Real &rotate_z,Real &offset_x,Real &offset_y,Real &offset_z)"
      ],
      "description": "",
      "id": "1870"
    },
    {
      "names": [
        "Integer Get_super_vertex_billboard(Element super,Integer vertex,Integer image_no,Text &name,Integer &twod,Integer &colour,Real &factor_x,Real &factor_y,Real &factor_z,Real &rotate_x,Real &rotate_y,Real &rotate_z,Real &offset_x,Real &offset_y,Real &offset_z)"
      ],
      "description": "",
      "id": "1893"
    },
    {
      "names": [
        "Integer Get_sdr_strings(Function function,Text code,Text strno,Dynamic_Element &list)"
      ],
      "description": "",
      "id": "1894"
    },
    {
      "names": [
        "Integer Get_sdr_strings(Function function,Text code,Dynamic_Element &list)"
      ],
      "description": "",
      "id": "1895"
    },
    {
      "names": [
        "Integer Find_sdr_string(Function function,Point point,Text code,Text strno,Element &string)"
      ],
      "description": "",
      "id": "1896"
    },
    {
      "names": [
        "Integer Find_sdr_string(Function function,Point point,Text code,Element &string)"
      ],
      "description": "",
      "id": "1897"
    },
    {
      "names": [
        "Integer Get_parabola(Segment segment,Parabola &parabola)"
      ],
      "description": "",
      "id": "1902"
    },
    {
      "names": [
        "Integer Set_parbola(Segment &segment,Parabola parabola)"
      ],
      "description": "",
      "id": "1903"
    },
    {
      "names": [
        "Integer Get_hip_id(Element element,Integer position,Uid &id)"
      ],
      "description": "",
      "id": "1917"
    },
    {
      "names": [
        "Integer Get_vip_id(Element element,Integer position,Uid &id)"
      ],
      "description": "",
      "id": "1918"
    },
    {
      "names": [
        "Integer Get_SDR_attributes(Function function,Integer vertex,Integer &count)"
      ],
      "description": "",
      "id": "1926"
    },
    {
      "names": [
        "Integer Get_SDR_attribute(Function function,Integer vertex,Integer index,SDR_Attribute &attr)"
      ],
      "description": "",
      "id": "1927"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,File file,Integer precision,Integer indent_level)"
      ],
      "description": "",
      "id": "1930"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,File file,Integer precision,Integer indent_level,Text header)"
      ],
      "description": "",
      "id": "1931"
    },
    {
      "names": [
        "Integer Attribute_dump(Attributes attr)"
      ],
      "description": "",
      "id": "1970"
    },
    {
      "names": [
        "Integer Set_SDR_gis_string(Function function,Element string)"
      ],
      "description": "",
      "id": "2067"
    },
    {
      "names": [
        "Integer Get_pipeline_prev_joint_chainage(Element pipeline,Real chain,Real pipe_length,Real &joint_chain)"
      ],
      "description": "",
      "id": "2069"
    },
    {
      "names": [
        "Integer Get_pipeline_next_joint_chainage(Element pipeline,Real chain,Real pipe_length,Real &joint_chain)"
      ],
      "description": "",
      "id": "2070"
    },
    {
      "names": [
        "Integer Draw_image(Draw_Box box,Text filename,Real x,Real y)"
      ],
      "description": "",
      "id": "2106"
    },
    {
      "names": [
        "Integer Draw_image(Draw_Box box,Text filename,Real x,Real y,Integer rop3)"
      ],
      "description": "",
      "id": "2107"
    },
    {
      "names": [
        "Integer Draw_transparent_image(Draw_Box box,Text filename,Real x,Real y)"
      ],
      "description": "",
      "id": "2108"
    },
    {
      "names": [
        "Integer Draw_transparent_image(Draw_Box box,Text filename,Real x,Real y,Integer rop3)"
      ],
      "description": "",
      "id": "2109"
    },
    {
      "names": [
        "Integer Super_alignment_horz_part_append(Element element,Text part)"
      ],
      "description": "",
      "id": "2122"
    },
    {
      "names": [
        "Integer Super_alignment_horz_part_insert(Element element,Integer position,Text part)"
      ],
      "description": "",
      "id": "2123"
    },
    {
      "names": [
        "Integer Super_alignment_horz_part_delete(Element element,Integer position)"
      ],
      "description": "",
      "id": "2124"
    },
    {
      "names": [
        "Integer Get_super_alignment_horz_parts(Element element,Integer &num_parts)"
      ],
      "description": "",
      "id": "2125"
    },
    {
      "names": [
        "Integer Get_super_alignment_horz_part_id(Element element,Integer position,Integer &id)"
      ],
      "description": "",
      "id": "2126"
    },
    {
      "names": [
        "Integer Get_super_alignment_horz_part_type(Element element,Integer position,Text &type)"
      ],
      "description": "",
      "id": "2127"
    },
    {
      "names": [
        "Integer Get_super_alignment_horz_part(Element element,Integer position,Text &part)"
      ],
      "description": "",
      "id": "2128"
    },
    {
      "names": [
        "Integer Calc_super_alignment_horz(Element)"
      ],
      "description": "",
      "id": "2129"
    },
    {
      "names": [
        "Integer Super_alignment_vert_part_append(Element element,Text part)"
      ],
      "description": "",
      "id": "2130"
    },
    {
      "names": [
        "Integer Super_alignment_vert_part_insert(Element element,Integer position,Text part)"
      ],
      "description": "",
      "id": "2131"
    },
    {
      "names": [
        "Integer Super_alignment_vert_part_delete(Element element,Integer position)"
      ],
      "description": "",
      "id": "2132"
    },
    {
      "names": [
        "Integer Get_super_alignment_vert_parts(Element element,Integer &num_parts)"
      ],
      "description": "",
      "id": "2133"
    },
    {
      "names": [
        "Integer Get_super_alignment_vert_part_id(Element element,Integer position,Integer &id)"
      ],
      "description": "",
      "id": "2134"
    },
    {
      "names": [
        "Integer Get_super_alignment_vert_part_type(Element element,Integer position,Text &type)"
      ],
      "description": "",
      "id": "2135"
    },
    {
      "names": [
        "Integer Get_super_alignment_vert_part(Element element,Integer position,Text &part)"
      ],
      "description": "",
      "id": "2136"
    },
    {
      "names": [
        "Integer Calc_super_alignment_vert(Element)"
      ],
      "description": "",
      "id": "2137"
    },
    {
      "names": [
        "Integer Get_level(SDR_Attribute attr,Integer &data)"
      ],
      "description": "",
      "id": "2164"
    },
    {
      "names": [
        "Integer Get_alignment_vertical_position(Element alignment,Real chainage,Real &level,Real &grade,Real &mvalue)"
      ],
      "description": "",
      "id": "2197"
    },
    {
      "names": [
        "Integer Get_super_section_position(Element element,Real chainage,Real &level,Real &grade,Real &mvalue)"
      ],
      "description": "",
      "id": "2202"
    },
    {
      "names": [
        "Graph_Box Create_graph_box(Text title,Integer type,Integer width,Integer height)"
      ],
      "description": "",
      "id": "2208"
    },
    {
      "names": [
        "Integer Set_sub_title(Graph_Box box,Text text)"
      ],
      "description": "",
      "id": "2261"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Integer value)"
      ],
      "description": "",
      "id": "2262"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Text value)"
      ],
      "description": "",
      "id": "2263"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Integer index,Integer value)"
      ],
      "description": "",
      "id": "2264"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Integer index,Text value)"
      ],
      "description": "",
      "id": "2265"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Integer n,Integer v[])"
      ],
      "description": "",
      "id": "2266"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Dynamic_Text v)"
      ],
      "description": "",
      "id": "2267"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Real v)"
      ],
      "description": "",
      "id": "2268"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer series,Integer axis,Integer n,Real v[])"
      ],
      "description": "",
      "id": "2269"
    },
    {
      "names": [
        "Integer Redraw(Graph_Box box)"
      ],
      "description": "",
      "id": "2270"
    },
    {
      "names": [
        "Text Get_program_special_build_name()"
      ],
      "description": "",
      "id": "2296"
    },
    {
      "names": [
        "Integer Tin_Plan_Area_At_Elevation(Tin tin,Element fence,Real elevation,Real &plan_area,Real &volume)"
      ],
      "description": "",
      "id": "2303"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Dynamic_Real v)"
      ],
      "description": "",
      "id": "2304"
    },
    {
      "names": [
        "Integer Set_property(Graph_Box box,Integer property,Integer index,Real value)"
      ],
      "description": "",
      "id": "2390"
    },
    {
      "names": [
        "Integer Draw_element(Draw_Box box,Element elt)"
      ],
      "description": "",
      "id": "2391"
    },
    {
      "names": [
        "Integer Draw_element(Draw_Box box,Element elt,Integer colour)"
      ],
      "description": "",
      "id": "2392"
    },
    {
      "names": [
        "Integer Has_child_page(Tree_Page child,Tree_Page parent)"
      ],
      "description": "",
      "id": "2580"
    },
    {
      "names": [
        "Integer Set_page(Tree_Box tree_box,Integer page_id)"
      ],
      "description": "",
      "id": "2627"
    },
    {
      "names": [
        "Integer Get_page_id(Tree_Page page)"
      ],
      "description": "",
      "id": "2628"
    },
    {
      "names": [
        "Integer Start_timer(Graph_Box box,Integer milliseconds)"
      ],
      "description": "",
      "id": "2674"
    },
    {
      "names": [
        "Integer Stop_timer(Graph_Box box)"
      ],
      "description": "",
      "id": "2675"
    },
    {
      "names": [
        "Integer TDF_Find_panel(Text name,Panel &p)"
      ],
      "description": "",
      "id": "2682"
    },
    {
      "names": [
        "Integer TDF_Press_button(Panel p,Text name)"
      ],
      "description": "",
      "id": "2683"
    },
    {
      "names": [
        "Integer TDF_Set_field(Panel p,Text field,Text value)"
      ],
      "description": "",
      "id": "2684"
    },
    {
      "names": [
        "Integer TDF_Set_field(Panel p,Text field,Real value)"
      ],
      "description": "",
      "id": "2685"
    },
    {
      "names": [
        "Integer TDF_Set_field(Panel p,Text field,Integer value)"
      ],
      "description": "",
      "id": "2686"
    },
    {
      "names": [
        "Integer TDF_Press_control_bar_button(Text name)"
      ],
      "description": "",
      "id": "2687"
    },
    {
      "names": [
        "Integer TDF_Find_menu(Text name,Menu &m)"
      ],
      "description": "",
      "id": "2688"
    },
    {
      "names": [
        "Integer TDF_Press_button(Menu m,Text name)"
      ],
      "description": "",
      "id": "2689"
    },
    {
      "names": [
        "Integer TDF_Run_function_key_command(Text command)"
      ],
      "description": "",
      "id": "2690"
    },
    {
      "names": [
        "Integer TDF_Wait_on_instruments(Text &instrument,Text &event,Text &msg)"
      ],
      "description": "",
      "id": "2691"
    },
    {
      "names": [
        "Integer TDF_Position_TPS(Real x,Real y,Real z,Integer take_measure)"
      ],
      "description": "",
      "id": "2692"
    },
    {
      "names": [
        "Integer TDF_Position_TPS(Real x,Real y,Integer take_measure)"
      ],
      "description": "",
      "id": "2693"
    },
    {
      "names": [
        "Integer TDF_Set_feature_data(Text field,Text value)"
      ],
      "description": "",
      "id": "2694"
    },
    {
      "names": [
        "Integer TDF_Set_feature_data(Text field,Real value)"
      ],
      "description": "",
      "id": "2695"
    },
    {
      "names": [
        "Integer TDF_Set_feature_data(Text field,Integer value)"
      ],
      "description": "",
      "id": "2696"
    },
    {
      "names": [
        "Integer TDF_Close_feature_group()"
      ],
      "description": "",
      "id": "2697"
    },
    {
      "names": [
        "Integer TDF_Open_feature_group(Text group)"
      ],
      "description": "",
      "id": "2698"
    },
    {
      "names": [
        "Integer TDF_Run_Pickup()"
      ],
      "description": "",
      "id": "2699"
    },
    {
      "names": [
        "Integer TDF_Run_Setout()"
      ],
      "description": "",
      "id": "2700"
    },
    {
      "names": [
        "Integer TDF_Set_field(Panel p,Text field,Element value)"
      ],
      "description": "",
      "id": "2701"
    },
    {
      "names": [
        "Integer TDF_Set_field(Panel p,Text field,Element value,Real x,Real y,Real z)"
      ],
      "description": "",
      "id": "2702"
    },
    {
      "names": [
        "Integer TDF_Set_angle_swing(Real swing)"
      ],
      "description": "",
      "id": "2703"
    },
    {
      "names": [
        "Integer TDF_Open_template_control_bar()"
      ],
      "description": "",
      "id": "2704"
    },
    {
      "names": [
        "Integer TDF_Press_template_control_bar_button(Text name)"
      ],
      "description": "",
      "id": "2705"
    },
    {
      "names": [
        "Integer TDF_Get_global_data(Text type_name,Text &value)"
      ],
      "description": "",
      "id": "2709"
    },
    {
      "names": [
        "Integer TDF_Get_global_data(Text type_name,Real &value)"
      ],
      "description": "",
      "id": "2710"
    },
    {
      "names": [
        "Integer TDF_Get_global_data(Text type_name,Integer &value)"
      ],
      "description": "",
      "id": "2711"
    },
    {
      "names": [
        "Integer TDF_Set_global_data(Text type_name,Text value)"
      ],
      "description": "",
      "id": "2712"
    },
    {
      "names": [
        "Integer TDF_Set_global_data(Text type_name,Real value)"
      ],
      "description": "",
      "id": "2713"
    },
    {
      "names": [
        "Integer TDF_Set_global_data(Text type_name,Integer value)"
      ],
      "description": "",
      "id": "2714"
    },
    {
      "names": [
        "Integer TDF_Set_feature_group_confirm_exit(Integer tf)"
      ],
      "description": "",
      "id": "2715"
    },
    {
      "names": [
        "Integer TDF_Get_feature_group_confirm_exit(Integer &tf)"
      ],
      "description": "",
      "id": "2716"
    },
    {
      "names": [
        "Integer TDF_wait_for_timer(Integer milliseconds)"
      ],
      "description": "",
      "id": "2717"
    },
    {
      "names": [
        "Integer TDF_Set_gui_pause_value(Integer milli_seconds)"
      ],
      "description": "",
      "id": "2718"
    },
    {
      "names": [
        "Integer TDF_Get_gui_pause_value(Integer &milli_seconds)"
      ],
      "description": "",
      "id": "2719"
    },
    {
      "names": [
        "Integer Set_expand_includes(XML_Document doc,Integer expand)"
      ],
      "description": "",
      "id": "2779"
    },
    {
      "names": [
        "Integer Set_data_backslash_n(Text_Edit_Box widget,Text data)"
      ],
      "description": "",
      "id": "2807"
    },
    {
      "names": [
        "Integer Get_data_backslash_n(Text_Edit_Box widget,Text &data)"
      ],
      "description": "",
      "id": "2808"
    },
    {
      "names": [
        "Integer GIS_Connect_to_server(Text server_name,Text output_schema_file,Text output_capabilities_file,Text &err)"
      ],
      "description": "",
      "id": "2873"
    },
    {
      "names": [
        "Integer GIS_download_feature(Text server_name,Text feature_name,Text filter,Text map_file,Text attribute_as_z,Integer limit,Integer num_to_head_to_tail,Model m,Text &err)"
      ],
      "description": "",
      "id": "2874"
    },
    {
      "names": [
        "Integer GIS_Set_credentials(Text server_name,Text user,Text password)"
      ],
      "description": "",
      "id": "2875"
    },
    {
      "names": [
        "Integer GIS_upload_feature()"
      ],
      "description": "",
      "id": "2880"
    },
    {
      "names": [
        "Integer Set_drainage_length_mode(Element element,Integer mode)"
      ],
      "description": "",
      "id": "2887"
    },
    {
      "names": [
        "Integer Get_drainage_length_mode(Element element,Integer mode)"
      ],
      "description": "",
      "id": "2888"
    },
    {
      "names": [
        "Integer Get_drainage_network(Model model,Drainage_Network &dn)"
      ],
      "description": "",
      "id": "2986"
    },
    {
      "names": [
        "Integer Get_drainage_network_number_of_pits(Drainage_Network dn,Integer &number)"
      ],
      "description": "",
      "id": "2987"
    },
    {
      "names": [
        "Integer Get_drainage_network_number_of_pits_all(Drainage_Network dn,Integer &number)"
      ],
      "description": "",
      "id": "2988"
    },
    {
      "names": [
        "Integer Get_drainage_network_number_of_outlets(Drainage_Network dn,Integer &number)"
      ],
      "description": "",
      "id": "2989"
    },
    {
      "names": [
        "Integer Get_drainage_network_number_of_bypasses(Drainage_Network dn,Integer &number)"
      ],
      "description": "",
      "id": "2990"
    },
    {
      "names": [
        "Integer Get_drainage_network_number_of_pipes(Drainage_Network dn,Integer &number)"
      ],
      "description": "",
      "id": "2991"
    },
    {
      "names": [
        "Integer Get_drainage_network_pits(Drainage_Network dn,Integer ids[],Integer types[],Integer nmax,Integer &nret)"
      ],
      "description": "",
      "id": "2992"
    },
    {
      "names": [
        "Integer Get_drainage_network_pits_all(Drainage_Network dn,Integer ids[],Integer types[],Integer nmax,Integer &nret)"
      ],
      "description": "",
      "id": "2993"
    },
    {
      "names": [
        "Integer Get_drainage_network_outlets(Drainage_Network dn,Integer ids[],Integer nmax,Integer &nret)"
      ],
      "description": "",
      "id": "2994"
    },
    {
      "names": [
        "Integer Get_drainage_network_bypasses(Drainage_Network dn,Integer ids[],Integer types[],Integer nmax,Integer &nret)"
      ],
      "description": "",
      "id": "2995"
    },
    {
      "names": [
        "Integer Get_drainage_network_pipes(Drainage_Network dn,Integer ids[],Integer types[],Integer nmax,Integer &nret)"
      ],
      "description": "",
      "id": "2996"
    },
    {
      "names": [
        "Integer Get_drainage_network_pit(Drainage_Network dn,Integer id,Element &element,Integer &pit)"
      ],
      "description": "",
      "id": "2997"
    },
    {
      "names": [
        "Integer Get_drainage_network_pipe(Drainage_Network dn,Integer id,Element &element,Integer &pipe,Integer &us_pit_id,Integer &ds_pit_id)"
      ],
      "description": "",
      "id": "2998"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_sediment_depth(Element element,Integer pit,Real sediment_depth)"
      ],
      "description": "",
      "id": "2999"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_sediment_depth(Element element,Integer pipe,Real &sediment_depth)"
      ],
      "description": "",
      "id": "3000"
    },
    {
      "names": [
        "Integer Get_drainage_network_pit(Drainage_Network dn,Real x,Real y,Integer &id)"
      ],
      "description": "",
      "id": "3001"
    },
    {
      "names": [
        "Integer Drainage_network_is_outlet(Drainage_Network dn,Integer pit_id)"
      ],
      "description": "",
      "id": "3002"
    },
    {
      "names": [
        "Integer Drainage_network_is_basin(Drainage_Network dn,Integer pit_id)"
      ],
      "description": "",
      "id": "3003"
    },
    {
      "names": [
        "Integer Drainage_network_is_basin_link(Drainage_Network dn,Integer pipe_id)"
      ],
      "description": "",
      "id": "3004"
    },
    {
      "names": [
        "Integer Get_drainage_storm_results_list(Text model_name,Integer storm_type,Dynamic_Text &storm_att_path,Dynamic_Text &graphing_name,Dynamic_Text &storm_list,Dynamic_Text &graph_list,Dynamic_Integer &var_pattern)"
      ],
      "description": "",
      "id": "3022"
    },
    {
      "names": [
        "Integer Get_super_alignment_valid_horizontal(Element alignment,Integer &valid)"
      ],
      "description": "",
      "id": "3053"
    },
    {
      "names": [
        "Integer Get_super_alignment_valid_vertical(Element alignment,Integer &valid)"
      ],
      "description": "",
      "id": "3054"
    },
    {
      "names": [
        "Integer Get_super_alignment_valid(Element alignment,Integer &valid)"
      ],
      "description": "",
      "id": "3055"
    },
    {
      "names": [
        "Integer Get_node_attribute(XML_Node node,Integer attribute_index,Text &name,Text &value)"
      ],
      "description": "",
      "id": "3058"
    },
    {
      "names": [
        "Integer Synergy_add_file(Text job,Text folder,Text local_file_path,Integer new_version_if_exists,Integer prompt_for_file_attributes,Text path_to_refs_file,Dynamic_Text &file_attribs,Dynamic_Text &change_attribs,Text &err)"
      ],
      "description": "",
      "id": "3104"
    },
    {
      "names": [
        "Integer Synergy_add_files(Text job,Text folder,Text path_to_files,Text &err)"
      ],
      "description": "",
      "id": "3105"
    },
    {
      "names": [
        "Integer Synergy_check_in(Text job,Text path_to_entity,Dynamic_Text &file_attribs,Dynamic_Text &change_attribs,Text &err)"
      ],
      "description": "",
      "id": "3107"
    },
    {
      "names": [
        "Integer Synergy_check_in(Text job,Text path_to_entity,Text from_local_file,Dynamic_Text &file_attribs,Dynamic_Text &change_attribs,Text &err)"
      ],
      "description": "",
      "id": "3108"
    },
    {
      "names": [
        "Integer Synergy_build_attribute_text(Text attribute_name,Text attribute_value,Dynamic_Text &attribute_list,Text &err)"
      ],
      "description": "",
      "id": "3109"
    },
    {
      "names": [
        "Integer Synergy_create_folder(Text job,Text name,Integer managed,Text &err)"
      ],
      "description": "",
      "id": "3111"
    },
    {
      "names": [
        "Integer Synergy_create_folder(Text job,Text parent_folder,Text name,Integer managed,Text &err)"
      ],
      "description": "",
      "id": "3112"
    },
    {
      "names": [
        "Integer Synergy_create_job(Text parent,Text name,Text description,Text path_to_template_job,Dynamic_Text &attributes,Text &err)"
      ],
      "description": "",
      "id": "3113"
    },
    {
      "names": [
        "Integer Synergy_create_job(Text name,Text description,Text path_to_template_job,Dynamic_Text &attributes,Text &err)"
      ],
      "description": "",
      "id": "3114"
    },
    {
      "names": [
        "Integer Synergy_create_td_project(Text job,Text name,Text description,Integer upload,Text version_name,Dynamic_Text &attributes,Text &err)"
      ],
      "description": "",
      "id": "3115"
    },
    {
      "names": [
        "Integer Synergy_create_td_project(Text job,Text name,Text folder_path,Text description,Integer upload,Text version_name,Dynamic_Text &attributes,Text &err)"
      ],
      "description": "",
      "id": "3116"
    },
    {
      "names": [
        "Integer Synergy_edit_folder(Text job,Text folder_path,Text name,Integer is_managed,Dynamic_Text &attributes,Text &err)"
      ],
      "description": "",
      "id": "3117"
    },
    {
      "names": [
        "Integer Synergy_get_file_info(Text job,Text path,Attributes &attributes,Text &err)"
      ],
      "description": "",
      "id": "3120"
    },
    {
      "names": [
        "Integer Synergy_get_folder_info(Text job,Text path,Attributes &attributes,Text &err)"
      ],
      "description": "",
      "id": "3121"
    },
    {
      "names": [
        "Integer Synergy_get_workspace_path(Text job,Text path,Text &err)"
      ],
      "description": "",
      "id": "3122"
    },
    {
      "names": [
        "Integer Synergy_prompt_for_job(Text &selected,Text &err)"
      ],
      "description": "",
      "id": "3123"
    },
    {
      "names": [
        "Integer Synergy_list(Text job,Integer include_deleted_files,Text &err)"
      ],
      "description": "",
      "id": "3124"
    },
    {
      "names": [
        "Integer Synergy_list(Text job,Text folder,Integer include_deleted_files,Text &err)"
      ],
      "description": "",
      "id": "3125"
    },
    {
      "names": [
        "Integer Synergy_open(Text job,Text path,Integer check_out,Text &err)"
      ],
      "description": "",
      "id": "3126"
    },
    {
      "names": [
        "Integer Synergy_purge_file(Text job,Text path,Integer force)"
      ],
      "description": "",
      "id": "3127"
    },
    {
      "names": [
        "Integer Synergy_purge_folder(Text job,Text path,Integer force)"
      ],
      "description": "",
      "id": "3128"
    },
    {
      "names": [
        "Integer Synergy_purge_job(Text job,Integer force)"
      ],
      "description": "",
      "id": "3129"
    },
    {
      "names": [
        "Integer Synergy_purge_td_project(Text job,Text path,Integer force)"
      ],
      "description": "",
      "id": "3130"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer &value)"
      ],
      "description": "",
      "id": "3154"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Text &value)"
      ],
      "description": "",
      "id": "3155"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer index,Integer &value)"
      ],
      "description": "",
      "id": "3156"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer index,Real &value)"
      ],
      "description": "",
      "id": "3157"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer index,Text &value)"
      ],
      "description": "",
      "id": "3158"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Dynamic_Integer &v)"
      ],
      "description": "",
      "id": "3159"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Dynamic_Text &v)"
      ],
      "description": "",
      "id": "3160"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Dynamic_Real &v)"
      ],
      "description": "",
      "id": "3161"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer starting_cell,Integer cell_count,Dynamic_Integer &v)"
      ],
      "description": "",
      "id": "3162"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer starting_cell,Integer cell_count,Dynamic_Real &v)"
      ],
      "description": "",
      "id": "3163"
    },
    {
      "names": [
        "Integer Get_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Real &v)"
      ],
      "description": "",
      "id": "3164"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Text v)"
      ],
      "description": "",
      "id": "3165"
    },
    {
      "names": [
        "Integer Get_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Text &v)"
      ],
      "description": "",
      "id": "3166"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Integer v)"
      ],
      "description": "",
      "id": "3167"
    },
    {
      "names": [
        "Integer Get_graph_data(Graph_Box box,Integer series,Integer axis,Integer point,Integer &v)"
      ],
      "description": "",
      "id": "3168"
    },
    {
      "names": [
        "Integer Get_graph_data(Graph_Box box,Integer constant,Integer &x,Integer &y)"
      ],
      "description": "",
      "id": "3169"
    },
    {
      "names": [
        "Integer Draw_graph_table(Graph_Box box,Integer index)"
      ],
      "description": "",
      "id": "3170"
    },
    {
      "names": [
        "Integer Convert_pixel_to_graph(Graph_Box box,Integer &nA,Integer &nX,Integer &nY,Real &fX,Real &fY,Integer bRight,Integer bTop,Integer bViceVersa)"
      ],
      "description": "",
      "id": "3171"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer property,Dynamic_Integer value,Integer num_elements)"
      ],
      "description": "",
      "id": "3172"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer property,Dynamic_Real value,Integer num_elements)"
      ],
      "description": "",
      "id": "3173"
    },
    {
      "names": [
        "Integer Get_partial_graph_data(Graph_Box box,Integer property,Integer start_cell,Integer cell_count,Dynamic_Integer &v)"
      ],
      "description": "",
      "id": "3174"
    },
    {
      "names": [
        "Integer Get_partial_graph_data(Graph_Box box,Integer property,Integer start_cell,Integer cell_count,Dynamic_Real &v)"
      ],
      "description": "",
      "id": "3175"
    },
    {
      "names": [
        "Integer Get_partial_graph_data(Graph_Box box,Integer property,Integer start_cell,Integer cell_count,Dynamic_Text &v)"
      ],
      "description": "",
      "id": "3176"
    },
    {
      "names": [
        "Integer Set_partial_graph_data(Graph_Box box,Integer property,Integer starting_cell,Dynamic_Integer v)"
      ],
      "description": "",
      "id": "3177"
    },
    {
      "names": [
        "Integer Set_partial_graph_data(Graph_Box box,Integer property,Integer starting_cell,Dynamic_Real v)"
      ],
      "description": "",
      "id": "3178"
    },
    {
      "names": [
        "Integer Set_partial_graph_data(Graph_Box box,Integer property,Integer starting_cell,Dynamic_Text v)"
      ],
      "description": "",
      "id": "3179"
    },
    {
      "names": [
        "Integer Get_pump_curves(Text file,Text curve_name,Integer curve_type,Dynamic_Real &flow,Dynamic_Real &value,Integer &ret_num)"
      ],
      "description": "",
      "id": "3181"
    },
    {
      "names": [
        "Integer Save_graph_to_bmp(Graph_Box box,Integer width,Integer height,Text filename)"
      ],
      "description": "",
      "id": "3182"
    },
    {
      "names": [
        "Integer Save_graph_to_jpg(Graph_Box box,Integer width,Integer height,Text filename)"
      ],
      "description": "",
      "id": "3183"
    },
    {
      "names": [
        "Integer Save_graph_to_png(Graph_Box box,Integer width,Integer height,Text filename)"
      ],
      "description": "",
      "id": "3184"
    },
    {
      "names": [
        "Integer Save_graph_to_svg(Graph_Box box,Integer width,Integer height,Text filename,Integer compress)"
      ],
      "description": "",
      "id": "3185"
    },
    {
      "names": [
        "Integer Save_graph_to_emf(Graph_Box box,Integer width,Integer height,Text filename,Integer emf_type,Integer emf_dc,Integer emf_bitmap_gradients)"
      ],
      "description": "",
      "id": "3186"
    },
    {
      "names": [
        "Integer Get_frequency_mode(Text file,Integer &fm)"
      ],
      "description": "",
      "id": "3188"
    },
    {
      "names": [
        "Integer Get_variable_temporal_patterns(Text file,Text pattern_name,Integer pattern_type,Integer sort_data,Dynamic_Real &time,Dynamic_Real &duration,Dynamic_Real &value,Integer &ret_num)"
      ],
      "description": "",
      "id": "3189"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_pattern_ensemble(Text file,Integer storm_num,Integer &run,Text &zone_filter,Text &storm_id,Text &dur_id,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integer max_num,Integer &ret_num)"
      ],
      "description": "",
      "id": "3190"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_pattern_ensemble(Text file,Text storm_num,Integer &run,Text &zone_filter,Text &dur_id,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integer max_num,Integer &ret_num)"
      ],
      "description": "",
      "id": "3191"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,Text filename,Integer precision,Integer output_model_name,Integer bool_flags,Real null_value)"
      ],
      "description": "",
      "id": "3197"
    },
    {
      "names": [
        "Integer Write_XML(Dynamic_Element lst,Text filename,Integer precision,Integer output_model_name,Integer bool_flags,Real null_value)"
      ],
      "description": "",
      "id": "3198"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,File file,Integer precision,Integer indent_level,Integer bool_flags,Real null_value)"
      ],
      "description": "",
      "id": "3200"
    },
    {
      "names": [
        "Integer Write_XML(Element elt,File file,Integer precision,Integer indent_level,Text header,Integer bool_flags,Real null_value)"
      ],
      "description": "",
      "id": "3201"
    },
    {
      "names": [
        "Integer Get_text_xyz(Element element,Real &x,Real &y,Real &z)"
      ],
      "description": "",
      "id": "3215"
    },
    {
      "names": [
        "Integer Set_text_xyz(Element element,Real x,Real y,Real z)"
      ],
      "description": "",
      "id": "3216"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3221"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3222"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3223"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3224"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3225"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3226"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3227"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3228"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3229"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3230"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3231"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3232"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3233"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3234"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3235"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3236"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3237"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3238"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3239"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3240"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3241"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3242"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3249"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3265"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3266"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3267"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3268"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3269"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3270"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3271"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3272"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3273"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3274"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3275"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Function fcn,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3276"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3277"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3278"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3279"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Function fcn,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3280"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Macro_Function fcn,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3281"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Macro_Function fcn,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3282"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Function fcn,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3283"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Function fcn,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3284"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Macro_Function fcn,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3285"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Macro_Function fcn,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3286"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3287"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3288"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3289"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3290"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3291"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3292"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3293"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3294"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3295"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3296"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3297"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3298"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3299"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3300"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3301"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3302"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3303"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3304"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3305"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3306"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3307"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3308"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3309"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3310"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3311"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3312"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3313"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3314"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3315"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3316"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3317"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3318"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3319"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3320"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3321"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3322"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3323"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3324"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3325"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3326"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3327"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3328"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3329"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3330"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3331"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3332"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3333"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3334"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3335"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3336"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3337"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3338"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3339"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3340"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3341"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3342"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3343"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3344"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3345"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3346"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3347"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3348"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3349"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3350"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3351"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3352"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3353"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3354"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3355"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3356"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3357"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3358"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3359"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3360"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3361"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3362"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3363"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3364"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3365"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3366"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3367"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3368"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3369"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3370"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3371"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3372"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3373"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3374"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3399"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3400"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3401"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3402"
    },
    {
      "names": [
        "Integer Get_attribute_by_type(Element elt,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3403"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Element elt,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3404"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3405"
    },
    {
      "names": [
        "Integer Get_function_attribute(Function fcn,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3406"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3407"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3408"
    },
    {
      "names": [
        "Integer Get_function_attribute_by_type(Macro_Function fcn,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3409"
    },
    {
      "names": [
        "Integer Set_function_attribute_by_type(Macro_Function fcn,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3410"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3411"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3412"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3413"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt,Integer vert,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3414"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3415"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute_by_type(Element elt,Integer vert,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3416"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3417"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element elt,Integer seg,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3418"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3419"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element elt,Integer seg,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3420"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3421"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute_by_type(Element elt,Integer seg,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3422"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3423"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3424"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3425"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute(Element elt,Integer pit,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3426"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3427"
    },
    {
      "names": [
        "Integer Set_drainage_pit_attribute_by_type(Element elt,Integer pit,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3428"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3429"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3430"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3431"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element elt,Integer pipe,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3432"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3433"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute_by_type(Element elt,Integer pipe,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3434"
    },
    {
      "names": [
        "Integer Get_project_setting_colour(Text name)"
      ],
      "description": "",
      "id": "3550"
    },
    {
      "names": [
        "Integer Get_property(Graph_Box box,Integer property,Integer &left,Integer &top,Integer &right,Integer &bottom,Integer &type,Integer &w1,Integer &w2)"
      ],
      "description": "",
      "id": "3557"
    },
    {
      "names": [
        "Integer Set_graph_data_tooltip(Graph_Box box,Text data)"
      ],
      "description": "",
      "id": "3558"
    },
    {
      "names": [
        "Integer Get_graph_data_tooltip(Graph_Box box,Text &data)"
      ],
      "description": "",
      "id": "3559"
    },
    {
      "names": [
        "Integer Set_allow_warp_cursor(Widget widget,Integer allow)"
      ],
      "description": "",
      "id": "3568"
    },
    {
      "names": [
        "Integer Get_allow_warp_cursor(Widget widget,Integer &allow)"
      ],
      "description": "",
      "id": "3569"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3594"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3595"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3596"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3597"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3598"
    },
    {
      "names": [
        "Integer Get_project_attribute(Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3599"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3600"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3601"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3602"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3603"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3604"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3605"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3606"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3607"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3608"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3609"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3610"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3611"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3612"
    },
    {
      "names": [
        "Integer Get_project_attribute_by_type(Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3613"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Text att)"
      ],
      "description": "",
      "id": "3614"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3615"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Real att)"
      ],
      "description": "",
      "id": "3616"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3617"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3618"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3619"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3620"
    },
    {
      "names": [
        "Integer Set_project_attribute_by_type(Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3621"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3622"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3623"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3624"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Integer att_no,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3625"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Integer att_no,Integer64 &att)"
      ],
      "description": "",
      "id": "3626"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model,Integer att_no,Guid &att)"
      ],
      "description": "",
      "id": "3627"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3628"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3629"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3630"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Integer att_no,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3631"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Integer att_no,Integer64 att)"
      ],
      "description": "",
      "id": "3632"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model,Integer att_no,Guid att)"
      ],
      "description": "",
      "id": "3633"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Text &att)"
      ],
      "description": "",
      "id": "3634"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Integer &att)"
      ],
      "description": "",
      "id": "3635"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Real &att)"
      ],
      "description": "",
      "id": "3636"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Uid &att)"
      ],
      "description": "",
      "id": "3637"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Attributes &att)"
      ],
      "description": "",
      "id": "3638"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Attribute_Blob &att)"
      ],
      "description": "",
      "id": "3639"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Integer64 &att)"
      ],
      "description": "",
      "id": "3640"
    },
    {
      "names": [
        "Integer Get_model_attribute_by_type(Model model,Text att_name,Guid &att)"
      ],
      "description": "",
      "id": "3641"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Text att)"
      ],
      "description": "",
      "id": "3642"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Integer att)"
      ],
      "description": "",
      "id": "3643"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Real att)"
      ],
      "description": "",
      "id": "3644"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Uid att)"
      ],
      "description": "",
      "id": "3645"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Attributes att)"
      ],
      "description": "",
      "id": "3646"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3647"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Integer64 att)"
      ],
      "description": "",
      "id": "3648"
    },
    {
      "names": [
        "Integer Set_model_attribute_by_type(Model model,Text att_name,Guid att)"
      ],
      "description": "",
      "id": "3649"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3650"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3651"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3652"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3653"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3654"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3655"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3656"
    },
    {
      "names": [
        "Integer Insert_attribute_at_position(Element elt,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3657"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3666"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3667"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3668"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3669"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3670"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3671"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3672"
    },
    {
      "names": [
        "Integer Insert_super_vertex_attribute_at_position(Element elt,Integer vert,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3673"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3674"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3675"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3676"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3677"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3678"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3679"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3680"
    },
    {
      "names": [
        "Integer Insert_super_segment_attribute_at_position(Element elt,Integer seg,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3681"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3682"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3683"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3684"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Function fcn,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3685"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3686"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3687"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3688"
    },
    {
      "names": [
        "Integer Insert_function_attribute_at_position(Macro_Function fcn,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3689"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3690"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3691"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3692"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3693"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3694"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3695"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3696"
    },
    {
      "names": [
        "Integer Insert_project_attribute_at_position(Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3697"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3698"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3699"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3700"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3701"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3702"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3703"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3704"
    },
    {
      "names": [
        "Integer Insert_model_attribute_at_position(Model model,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3705"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3706"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3707"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3708"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3709"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3710"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3711"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3712"
    },
    {
      "names": [
        "Integer Insert_drainage_pipe_attribute_at_position(Element elt,Integer pipe,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3713"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Text att)"
      ],
      "description": "",
      "id": "3714"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Integer att)"
      ],
      "description": "",
      "id": "3715"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Real att)"
      ],
      "description": "",
      "id": "3716"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Uid att)"
      ],
      "description": "",
      "id": "3717"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Attributes att)"
      ],
      "description": "",
      "id": "3718"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Attribute_Blob att)"
      ],
      "description": "",
      "id": "3719"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Integer64 att)"
      ],
      "description": "",
      "id": "3720"
    },
    {
      "names": [
        "Integer Insert_drainage_pit_attribute_at_position(Element elt,Integer pit,Text att_name,Integer position,Guid att)"
      ],
      "description": "",
      "id": "3721"
    },
    {
      "names": [
        "Integer Get_project_settings_profiles_count()"
      ],
      "description": "",
      "id": "3734"
    },
    {
      "names": [
        "Integer Get_project_settings_profile_name(Integer profile_index,Text &profile_name)"
      ],
      "description": "",
      "id": "3735"
    },
    {
      "names": [
        "Integer Set_point_cloud_pinned(Element point_cloud,Integer pin)"
      ],
      "description": "",
      "id": "3737"
    },
    {
      "names": [
        "Integer Get_point_cloud_pinned(Element point_cloud,Integer &pin)"
      ],
      "description": "",
      "id": "3738"
    },
    {
      "names": [
        "Integer Get_point_cloud_number_of_points(Element point_cloud,Integer &number_of_points)"
      ],
      "description": "",
      "id": "3739"
    },
    {
      "names": [
        "Integer Get_point_cloud_number_of_points(Element point_cloud,Integer64 &number_of_points)"
      ],
      "description": "",
      "id": "3740"
    },
    {
      "names": [
        "Integer Get_point_cloud_coord(Element point_cloud,Integer point_index,Real &x,Real &y,Real &z)"
      ],
      "description": "",
      "id": "3741"
    },
    {
      "names": [
        "Integer Get_point_cloud_coord(Element point_cloud,Integer64 point_index,Real &x,Real &y,Real &z)"
      ],
      "description": "",
      "id": "3742"
    },
    {
      "names": [
        "Integer Get_point_cloud_coord(Element point_cloud,Integer point_index,Integer count,Dynamic_Real &x,Dynamic_Real &y,Dynamic_Real &z)"
      ],
      "description": "",
      "id": "3743"
    },
    {
      "names": [
        "Integer Get_point_cloud_coord(Element point_cloud,Integer64 point_index,Integer count,Dynamic_Real &x,Dynamic_Real &y,Dynamic_Real &z)"
      ],
      "description": "",
      "id": "3744"
    },
    {
      "names": [
        "Integer Set_point_cloud_not_implimented_1(Element point_cloud)"
      ],
      "description": "",
      "id": "3745"
    },
    {
      "names": [
        "Integer Set_point_cloud_not_implimented_2(Element point_cloud)"
      ],
      "description": "",
      "id": "3746"
    },
    {
      "names": [
        "Integer Set_point_cloud_not_implimented_3(Element point_cloud)"
      ],
      "description": "",
      "id": "3747"
    },
    {
      "names": [
        "Integer Set_point_cloud_not_implimented_4(Element point_cloud)"
      ],
      "description": "",
      "id": "3748"
    },
    {
      "names": [
        "Integer Get_point_cloud_data(Element point_cloud,Integer point_index,Integer &intensity,Integer &return_number,Integer &return_count,Integer &scan_direction,Integer &flight_line_edge,Integer &classification,Integer &scan_rank_angle,Integer &user_data,Integer &point_source_id)"
      ],
      "description": "",
      "id": "3749"
    },
    {
      "names": [
        "Integer Get_point_cloud_data(Element point_cloud,Integer64 point_index,Integer &intensity,Integer &return_number,Integer &return_count,Integer &scan_direction,Integer &flight_line_edge,Integer &classification,Integer &scan_rank_angle,Integer &user_data,Integer &point_source_id)"
      ],
      "description": "",
      "id": "3750"
    },
    {
      "names": [
        "Integer Get_point_cloud_data(Element point_cloud,Integer point_index,Integer count,Dynamic_Integer &intensity,Dynamic_Integer &return_number,Dynamic_Integer &return_count,Dynamic_Integer &scan_direction,Dynamic_Integer &flight_line_edge,Dynamic_Integer &classification,Dynamic_Integer &scan_rank_angle,Dynamic_Integer &user_data,Dynamic_Integer &point_source_id)"
      ],
      "description": "",
      "id": "3751"
    },
    {
      "names": [
        "Integer Get_point_cloud_data(Element point_cloud,Integer64 point_index,Integer count,Dynamic_Integer &intensity,Dynamic_Integer &return_number,Dynamic_Integer &return_count,Dynamic_Integer &scan_direction,Dynamic_Integer &flight_line_edge,Dynamic_Integer &classification,Dynamic_Integer &scan_rank_angle,Dynamic_Integer &user_data,Dynamic_Integer &point_source_id)"
      ],
      "description": "",
      "id": "3752"
    },
    {
      "names": [
        "Integer Set_point_cloud_data(Element point_cloud,Integer point_index,Integer intensity,Integer return_number,Integer return_count,Integer scan_direction,Integer flight_line_edge,Integer classification,Integer scan_rank_angle,Integer user_data,Integer point_source_id)"
      ],
      "description": "",
      "id": "3753"
    },
    {
      "names": [
        "Integer Set_point_cloud_data(Element point_cloud,Integer64 point_index,Integer intensity,Integer return_number,Integer return_count,Integer scan_direction,Integer flight_line_edge,Integer classification,Integer scan_rank_angle,Integer user_data,Integer point_source_id)"
      ],
      "description": "",
      "id": "3754"
    },
    {
      "names": [
        "Integer Set_point_cloud_data(Element point_cloud,Integer point_index,Integer count,Dynamic_Integer intensity,Dynamic_Integer return_number,Dynamic_Integer return_count,Dynamic_Integer scan_direction,Dynamic_Integer flight_line_edge,Dynamic_Integer classification,Dynamic_Integer scan_rank_angle,Dynamic_Integer user_data,Dynamic_Integer point_source_id)"
      ],
      "description": "",
      "id": "3755"
    },
    {
      "names": [
        "Integer Set_point_cloud_data(Element point_cloud,Integer64 point_index,Integer count,Dynamic_Integer intensity,Dynamic_Integer return_number,Dynamic_Integer return_count,Dynamic_Integer scan_direction,Dynamic_Integer flight_line_edge,Dynamic_Integer classification,Dynamic_Integer scan_rank_angle,Dynamic_Integer user_data,Dynamic_Integer point_source_id)"
      ],
      "description": "",
      "id": "3756"
    },
    {
      "names": [
        "Integer Synergy_add_files(Text synergy_job,Text synergy_folder,Text local_folder,Text description,Dynamic_Text file_attribs,Dynamic_Text change_attribs,Text &error)"
      ],
      "description": "",
      "id": "3785"
    },
    {
      "names": [
        "Integer Synergy_add_file(Text synergy_job,Text synergy_folder,Text local_file_path,Integer new_version_if_exists,Text description,Dynamic_Text &file_attribs,Dynamic_Text &change_attribs,Text &err)"
      ],
      "description": "",
      "id": "3786"
    },
    {
      "names": [
        "Integer Reset(Graph_Box box)"
      ],
      "description": "",
      "id": "3792"
    },
    {
      "names": [
        "Integer Reinitialize(Graph_Box box)"
      ],
      "description": "",
      "id": "3793"
    },
    {
      "names": [
        "Integer Reset_image(Graph_Box box,Integer size_x,Integer size_y)"
      ],
      "description": "",
      "id": "3794"
    },
    {
      "names": [
        "Integer Reset_image(Graph_Box box,Integer size_x,Integer size_y,Integer origin_x,Integer origin_y)"
      ],
      "description": "",
      "id": "3795"
    },
    {
      "names": [
        "Integer Drainage_network_pit_sync_properties(Drainage_Network dn,Integer id)"
      ],
      "description": "",
      "id": "3812"
    },
    {
      "names": [
        "void Null(Drainage_Network &dn)"
      ],
      "description": "",
      "id": "3813"
    },
    {
      "names": [
        "Integer Get_drainage_4d_file(Text file)"
      ],
      "description": "",
      "id": "3814"
    },
    {
      "names": [
        "Integer Get_drainage_4d()"
      ],
      "description": "",
      "id": "3815"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer property,Integer cell,Integer val)"
      ],
      "description": "",
      "id": "3824"
    },
    {
      "names": [
        "Integer Set_graph_data(Graph_Box box,Integer property,Integer cell,Text val)"
      ],
      "description": "",
      "id": "3825"
    },
    {
      "names": [
        "Integer Create_macro_as_child(Text macro_name,Integer run_now)"
      ],
      "description": "",
      "id": "3833"
    },
    {
      "names": [
        "Integer Run_chain_as_macro(Text chain)"
      ],
      "description": "",
      "id": "3834"
    },
    {
      "names": [
        "Integer Compare_files(Text file1,Text file2,Text report,Integer report_overwrite,Text &error_msg)"
      ],
      "description": "",
      "id": "3835"
    },
    {
      "names": [
        "Integer Is_windows(Text win_ver,Integer or_newer)"
      ],
      "description": "",
      "id": "3841"
    },
    {
      "names": [
        "Integer Selected_name_exists(Text selected_name)"
      ],
      "description": "",
      "id": "3842"
    },
    {
      "names": [
        "Integer Macro_attribute_delete(Integer att_no)"
      ],
      "description": "",
      "id": "3850"
    }
  ]
}
