{
  "patches": [
    {
      "id": "1960",
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Text att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Text and give it the value att. If the first attribute called att_name does exist and it is type Text, then set its value to att. If the attribute exists and is not of type Text, then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name."
    },
    {
      "names": [
        "Integer Get_command_argument(Integer i, Text &argument)"
      ],
      "description": "Get the i'th token from the command-line. The token is returned by the Text argument. The arguments start from 1. A function return value of zero indicates the i'th argument was successfully returned. For some example code, see 5.4 Command Line-Arguments.",
      "id": "433"
    },
    {
      "names": [
        "Text Text_upper(Text text)"
      ],
      "description": "Create a Text from the Text text that has all the alphabetic characters converted to upper-case. The function return value is the upper case Text.",
      "id": "383"
    },
    {
      "id": "977",
      "note": "this is a duplicate of id = 997: Integer Set_data(Choice_Box box, Integer nc, Text choices[])"
    },
    {
      "id": "879",
      "note": "duplicate of id = 1097"
    },
    {
      "names": [
        "Text Get_subtext(Text text, Integer start, Integer end)"
      ],
      "description": "From the Text text, create a new Text from character position start to character position endinclusive. The function return value is the sub-Text.",
      "id": "379"
    },
    {
      "names": [
        "Integer From_text(Text text, Text &value, Text format)"
      ],
      "description": "Convert the Text text to a Text value using the Text format as a C++ format. The function return value is zero if the conversion is successful. WarningText The user is responsible for ensuring that the format string is sensible.",
      "id": "392"
    },
    {
      "names": [
        "Integer From_text(Text text, Integer delimiter, Integer separator, Dynamic_Text &text)"
      ],
      "description": "Break the Text text into separate words (tokens) and add the individual words to theDynamic_Text dtext. The character used to break up the text into individual words is given by the Integer separator. Any characters between matching the character given by the Integer delimiter (including anycharacters equal to separator) are considered to be one word. For example, if the delimiter is double quotes \" and the separator is a semi-colon ; thenThis;is;\"an;example\"has three words - \"this\", \"is\", and \"an;example\". Note: delimiter and separator are Integers and can be specified by the actual number of acharacter or by giving the actual character between single quotes. For example,separator = 32is the number for a spaceseparator = ' ' is the number for a spaceseparator = 'a'will be the number for the letter aseparator = '\\t'will be the number for a tabThe function return value is the number of words returned in dtext. ",
      "id": "2105"
    },
    {
      "names": [
        "Integer Get_char(Text t, Integer pos, Integer &c)"
      ],
      "description": "Get a character from Text t.  The position of the character is pos. The character is returned in the Integer c. The function return value of zero indicates the character returned successfully.",
      "id": "829"
    },
    {
      "names": [
        "Integer Set_char(Text &t, Integer n, Integer c)"
      ],
      "description": "Set the nth position (where position starts at 1 for the first character) in the Text t to the charactergiven by integer c.  Note that 'c' can be used to specify the number corresponding to the letter c. A function return value of zero indicates the Text character is successfully set.",
      "id": "830"
    },
    {
      "names": [
        "Integer Null(Textstyle_Data textdata, Integer mode)"
      ],
      "description": "Various fields of a Textstyle_Data can be turned of so they won't display (and so can't be set) ina Textstyle_Data pop-up. To turn off the Textstyle_Data fields, the Null(Textstyle_Data textdata,Integer mode) call is madewith mode giving what fields are to be turned off. The values of mode and the Textstyle_Data field that they turn off are:Textstyle_Data_Textstyle= 0x00001,Textstyle_Data_Colour= 0x00002,Textstyle_Data_Type= 0x00004,Textstyle_Data_Size= 0x00008,Textstyle_Data_Offset= 0x00010,Textstyle_Data_Raise= 0x00020,Textstyle_Data_Justify_X= 0x00040,Textstyle_Data_Justify_Y= 0x00080,Textstyle_Data_Angle= 0x00100,Textstyle_Data_Slant= 0x00200,Textstyle_Data_X_Factor= 0x00400,Textstyle_Data_Name= 0x00800,Textstyle_Data_Underline= 0x01000,Textstyle_Data_Strikeout= 0x02000,Textstyle_Data_Italic= 0x04000,Textstyle_Data_Weight= 0x08000,Textstyle_Data_Whiteout= 0x10000,Textstyle_Data_Border= 0x20000,Textstyle_Data_Outline= 0x40000,Textstyle_Data_Border_Style= 0x80000,Textstyle_Data_All= 0xfffff,Note: the fields can be turned off one at a time by calling Null(Textstyle_Data textdata,Integer mode)a number of times, and/or more that one can be turned off at the one time by combining themwith the logical OR operator \"|\". For example,Textstyle_Data_Offset | Textstyle_Data_RaiseTextstyle Data will turn off both the fields Textstyle_Data_Offset and Textstyle_Data_Raise. A function return value of zero indicates the parts of the Textstyle_Data were successfully nulled.",
      "id": "1640"
    },
    {
      "names": [
        "Integer Set_size(Textstyle_Data textdata, Real height)"
      ],
      "description": "For the Textstyle_Data textdata, set the height to be height. Textstyle Data A function return value of zero indicates the height was successfully set.",
      "id": "1655"
    },
    {
      "names": [
        "Integer Get_angle3(Textstyle_Data textdata, Real &angle3)"
      ],
      "description": "From the Textstyle_Data textdata, get the 3D gamma angle and return it in angle3. angle3 is in radians. A function return value of zero indicates the angle was successfully returned.",
      "id": "3567"
    },
    {
      "names": [
        "Integer Get_border_style(Textstyle_Data textdata, Integer &border_style)"
      ],
      "description": "For the Textstyle_Data textdata, return the value border style in border_style. border_style can have the value 1 to 4.  For the meaning of the values for border_style, see 5. 9Textstyle Data. If the field is not set then the function return value is 1. A return value of zero indicates the function call was successful. Textstyle Data ",
      "id": "3139"
    },
    {
      "names": [
        "Integer Get_ttf_strikeout(Textstyle_Data textdata, Integer &strikeout)"
      ],
      "description": "For the Textstyle_Data textdata, get the strikeout state and return it in strikeout. If strikeout = 1, then for a true type font, the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates strikeout was successfully returned.",
      "id": "2617"
    },
    {
      "names": [
        "Real Get_random_number_open()"
      ],
      "description": "Generate the next random number as a number between 0 (included) and 1 (not included), andreturn it as the function return value. Note: this function is only applicable is the random number generator is initially set usingRandom Numbers Set_random_number with method = 1.",
      "id": "1934"
    },
    {
      "names": [
        "Integer Set_vector(Vector3 &vect, Real x, Real y, Real z)"
      ],
      "description": "Vectors and Matrices Set the first component of the three dimensional vector vect to the value x. Set the second component of the three dimensional vector vect to the value y. Set the third component of the three dimensional vector vect to the value z. A function return value of zero indicates the values were successfully set.",
      "id": "2310"
    },
    {
      "names": [
        "Integer Get_vector(Vector3 &vect, Real &x, Real &y, Real &z)"
      ],
      "description": "For the three dimensional vector vect: return the first component of vect in x. return the second component of vect in yreturn the third component of vect in zA function return value of zero indicates the components were successfully returned.",
      "id": "2313"
    },
    {
      "names": [
        "Integer Get_vector(Vector4 &vect, Real &x, Real &y, Real &z, Real &w)"
      ],
      "description": "For the four dimensional vector vect: return the first component of vect in x. return the second component of vect in yreturn the third component of vect in zreturn the fourth component of vect in wA function return value of zero indicates the components were successfully returned.",
      "id": "2314"
    },
    {
      "names": [
        "Integer Get_vector(Vector2 &vect, Integer index, Real &value)"
      ],
      "description": "Vectors and Matrices ",
      "id": "2318"
    },
    {
      "names": [
        "Real Get_vector(Vector4 &vect, Integer index)"
      ],
      "description": "For the four dimensional vector vect, return the component number index as the return value ofthe function. ",
      "id": "2323"
    },
    {
      "names": [
        "Integer Get_vector_length_squared(Vector4 &vect, Real &value)"
      ],
      "description": "For the four dimensional vector vect, return the square of the length of the vector in value. Note: for V(x,y,z,w), length squared = x*x + y*y + z*z + w*wA function return value of zero indicates the length squared was successfully returned.",
      "id": "2332"
    },
    {
      "names": [
        "Integer Get_vector_normalize(Vector2 &vect, Vector2 &normalised)"
      ],
      "description": "For the two dimensional vector vect, return the normalised vector of vect in the Vector2normalised. Note: for a normalised vector, length = 1 and for the vector V(x,y), the normalised vectorN(a,b) is:N(a,b) = (x/length(V),y/length(V))Vectors and Matrices A function return value of zero indicates the normalised vector was successfully returned.",
      "id": "2336"
    },
    {
      "names": [
        "Integer Set_matrix_zero(Matrix3 &matrix)"
      ],
      "description": "For the three by three Matrix3 matrix, set all the values in the matrix to zero. A function return value of zero indicates the matrix was successfully zero'd.",
      "id": "2346"
    },
    {
      "names": [
        "Integer Set_matrix_zero(Matrix4 &matrix)"
      ],
      "description": "For the four by four Matrix4 matrix, set all the values in the matrix to zero. A function return value of zero indicates the matrix was successfully zero'd.",
      "id": "2347"
    },
    {
      "names": [
        "Matrix4 Get_translation_matrix(Vector3 &vect)"
      ],
      "description": "For the three dimension vector vect, the four by four Matrix4 representing the vector as atranslation is returned as the function return value. Vectors and Matrices ",
      "id": "2379"
    },
    {
      "names": [
        "Matrix3 Get_rotation_matrix(Vector2 &centre, Real angle)"
      ],
      "description": "From the Vector2 centre and Real angle, construct the three by three Matrix3 matrix givenbelow and return it as the function return value. If centre is (X,Y), C = cos(angle) and S = sin(angle) and Matrix3 matrix. the matrix(row,column) values are:matrix(1,1) = Cmatrix(1,2) = -Smatrix(1,3) = X*(1 - C) + Y*Smatrix(2,1) = Smatrix(2,2) = Cmatrix(2,3) = Y*(1 - C) - X*Smatrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1angle is in radians and is measured in a counterclockwise direction from the positive x-axis.",
      "id": "2382"
    },
    {
      "names": [
        "Integer Get_scaling_matrix(Vector3 &scale, Matrix4 &matrix)"
      ],
      "description": "From the three dimension vector scale, create the four by four Matrix4 representing the vector asVectors and Matrices a scaling matrix and return it as matrix. That is, for scale(S,T,U), the matrix(row,column) values are:matrix(1,1) = Smatrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = Tmatrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = Umatrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 0matrix(4,4) = 1A function return value of zero indicates the scaling matrix was successfully returned.",
      "id": "2385"
    },
    {
      "names": [
        "Integer Get_perspective_matrix(Real d, Matrix4 &matrix)"
      ],
      "description": "For the distance d, create the four by four Matrix4 and return it as matrix. That is, for Real d, the matrix(row,column) values are:matrix(1,1) = 1matrix(1,2) = 0matrix(1,3) = 0matrix(1,4) = 0matrix(2,1) = 0matrix(2,2) = 1matrix(2,3) = 0matrix(2,4) = 0matrix(3,1) = 0matrix(3,2) = 0matrix(3,3) = 1matrix(3,4) = 0matrix(4,1) = 0matrix(4,2) = 0matrix(4,3) = 1/dmatrix(4,4) = 0A function return value of zero indicates the matrix was successfully returned.",
      "id": "2388"
    },
    {
      "names": [
        "Integer Triangle_slope(Real x1, Real y1, Real z1, Real x2, Real y2, Real z2, Real x3, Real y3, Real z3, Real &slope)"
      ],
      "description": "Calculate the slope of the triangle given by the coordinates (x1,y1,z1), (x2,y2,z2) and (x3,y3,z3),and return the value as slope. The units for slope is an angle in radians measured from the horizontal plane. A function return value of zero indicates the function was successful.",
      "id": "1740"
    },
    {
      "names": [
        "Integer Time(Integer &h, Integer &m, Real &sec)"
      ],
      "description": "Get the current time in hours, minutes & seconds. The hours value is returned in Integer h. System The minutes value is returned in Integer m. The seconds value is returned in Real s. A function return value of zero indicates the time was returned successfully.",
      "id": "663"
    },
    {
      "names": [
        "Text Get_macro_name()"
      ],
      "description": "Get the name of the macro file. The function return value is the macro file name.",
      "id": "1093"
    },
    {
      "names": [
        "Integer Create_macro(Text macro_name, Integer run_now)"
      ],
      "description": "Start the macro from the file named macro_name; if run_now is not zero then also execute themacro. macro_name are comprised of\"macro_options user_macro_name macro_arguments\"where the macro_options (optional) is a list of zero or more key words (all starting with - (minus)character):-no_consoledon't display macro console-close_on_exitremove console when macro terminates-buttonshave buttons for finish, restart and quit on console-allow_defaultsallow default answers for console questions-execute_nowsame as run_nowwhere macro_arguments (optional) are space delimited valuesand user_macro_name is the full path name to the 4do file to be executedFor exampleCreate_macro( \"-no_console -close_on_exit \\\"my macro name. 4do\\\" \\\"arg 1\\\" \\\"arg 2\\\"\" , 1 );A return value of zero indicates the function call was successful.",
      "id": "1627"
    },
    {
      "names": [
        "Integer Get_user_name(Text &name)"
      ],
      "description": "Get user's name, the name currently logged onto the system. System The name is returned in Text name. A function return value of zero indicates the name was returned successfully.",
      "id": "814"
    },
    {
      "names": [
        "Integer Get_module_license(Text module_name)"
      ],
      "description": "Get the status of each module license. If the module_name is:points_limittins_limitremaining_dayswarnedthe function returns number of available units. If the module_name is:oklitedrainagedigitizerhec_rashec_rasIIdranaldwater_supplylandxmlsharing12d_field_setout 12d_field_pickup12d_field_tunneldrainage_dynamictracksolids_modellinggold_surveygoldgistuflow_1d_wbm_dongletuflow_tcftuflow_10ktuflow_100ktuflow_opentuflow_open_gputuflow_roadtuflow_road_gpupoint_cloudtmr_point_cloudpipelinesewersurveytin_analysisvolumesvolumesIItrarrvehicle_pathsight_distancecartographicdxfgeniokeaysgeocomparcvieweducationalloansubscriptionmaintenancedgnalignmentdemonstrationrentaltemporarytrainingThe function returns 1 if the module is licensed, 0 if it is not licensed.",
      "id": "1094"
    },
    {
      "names": [
        "Integer Restore_version_file(Text filename, Integer swap)"
      ],
      "description": "System Restore a file to the most recent backup (highest numbered file). The swap value does the following: for a non 0 value, if the most recent backup files issurvey. 4d. 77, the survey. 4d is renamed to survey. 4d. 77, and survey. 4d. 77 is renamed tosurvey. 4d.  You could view this as a swapping of the contents of the file. If the swap value is 0, survey. 4d is deleted, and survey. 4d. 77 is renamed to survey. 4d",
      "id": "2140"
    },
    {
      "names": [
        "Integer Create_process(Text program_name, Text command_line, Text start_directory, Integer flags, Integer wait, Integer inherit)"
      ],
      "description": "This function basically calls the Microsoft CreateProcess function as defined inhttp://msdn. microsoft. com/en-us/library/ms682425%28v=vs. 85%29. aspx. The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (andalso do not have a // in front of them):BOOL WINAPI CreateProcess(__in_opt__inout_opt// __in_opt// __in_opt__in__in// __in_opt__in_optLPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,System // __in// __out);LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformationwhere program_name is passed as lpApplicationName, command_line is passed asdwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags ispassed as dwCreationFlags and inherit is passed as bInheritHandles. If wait = 1, the macro will wait until the process finishes before continuing. If wait = 0, the macro won't wait until the process finishes before continuing. A function return value of zero indicates the function was successful. Note: Create_process can not be called from the 12d Model Practise version.",
      "id": "1620"
    },
    {
      "names": [
        "Integer Create_process(Text program_name, Text command_line, Text start_directory, Integer flags, Integer inherit, Unknown &handle)"
      ],
      "description": "This function calls the Microsoft CreateProcess function as defined inhttp://msdn. microsoft. com/en-us/library/ms682425%28v=vs. 85%29. aspx. The 12d function gives access to the Microsoft CreateProcess arguments that are in bold (andalso not have a // in front of them):BOOL WINAPI CreateProcess(__in_opt__inout_opt// __in_opt// __in_opt__in__in// __in_opt__in_opt// __in// __out);LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformationwhere program_name is passed as lpApplicationName, command_line is passed asdwCreationFlags lpCommandLine, start_directory is passed as lpCurrentDirectory, flags ispassed as dwCreationFlags and inherit is passed as bInheritHandles. The handle to the created process is returned in Unknown handle. The macro can check if the process is still running by calling Process_exists. A function return value of zero indicates the function was successful. Note: The difference between this function and Create_process(Text program_name,Textcommand_line,Text start_directory,Integer flags,Integer wait,Integer inherit) is that a handle to theprocess is created and returned as handle and this can be checked to see if the process is stillrunning.  So there is no wait flag but there is more flexibility since the macro can check withProcess_exists and decide when, and when not to wait. Note: Create_process can not be called from 12d Model Practise version. ",
      "id": "2635"
    },
    {
      "names": [
        "Uid Get_next_uid()"
      ],
      "description": "Get the next available Uid and return it as the function return value. This is often used in Undo's.",
      "id": "1920"
    },
    {
      "names": [
        "Uid Get_last_uid()"
      ],
      "description": "Ids, Uids and Guids Get the last used Uid (that is the one from the last created Element) and return it as the functionreturn value.",
      "id": "2072"
    },
    {
      "names": [
        "void Null(Uid &uid)"
      ],
      "description": "Set the UID uid to be a null Uid. There is no function return value. Ids, Uids and Guids ",
      "id": "2058"
    },
    {
      "names": [
        "Integer GUID_Gen(Integer format, Integer classic, Integer comment, Text &guid)"
      ],
      "description": "Generate a new GUID and assign the text representation to Text guid. If Integer classic is not zero, then the GUID generation might be less secure, e. g.  it can betraced back to the ethernet address of the user computer. Valid format is Integer from 0 to 7Format 0 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 1 example guid// {EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroIMPLEMENT_OLECREATE(<<class>>, <<external_name>>,0xeee5d2b4, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 2 example guid// {EEE5D2B5-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroDEFINE_GUID(<<name>>,0xeee5d2b5, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Ids, Uids and Guids Format 3 example guid// {EEE5D2B6-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zerostatic const GUID <<name>> ={ 0xeee5d2b6, 0xdcce, 0x11d3, { 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0 } };Format 4 example guid{EEE5D2B7-DCCE-11D3-B4C4-D237E35336F0}Format 5 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 6 example guid__declspec(uuid(\"EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0\"))Format 7 the guid contains six 32 Bit integers from the components of the GUID structure in base64A function return value of zero indicates the guid text was successfully generated.",
      "id": "2305"
    },
    {
      "names": [
        "Integer GUID_Gen(Guid guid, Integer format, Integer comment, Text &guid)"
      ],
      "description": "Form the text representation to Text guid_text of a given Guid guid. Valid format is Integer from 0 to 7Format 0 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 1 example guid// {EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroIMPLEMENT_OLECREATE(<<class>>, <<external_name>>,0xeee5d2b4, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 2 example guid// {EEE5D2B5-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zeroDEFINE_GUID(<<name>>,0xeee5d2b5, 0xdcce, 0x11d3, 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0);Format 3 example guid// {EEE5D2B6-DCCE-11D3-B4C4-D237E35336F0} . . .  only there if comment is not zerostatic const GUID <<name>> ={ 0xeee5d2b6, 0xdcce, 0x11d3, { 0xb4, 0xc4, 0xd2, 0x37, 0xe3, 0x53, 0x36, 0xf0 } };Format 4 example guid{EEE5D2B7-DCCE-11D3-B4C4-D237E35336F0}Format 5 example guidEEE5D2B7-DCCE-11D3-B4C4-D237E35336F0Format 6 example guid__declspec(uuid(\"EEE5D2B4-DCCE-11D3-B4C4-D237E35336F0\"))Format 7 the guid contains six 32 Bit integers from the components of the GUID structure in base64A function return value of zero indicates the guid text was successfully set.",
      "id": "3832"
    },
    {
      "names": [
        "void Print(Attribute_Blob value)"
      ],
      "description": "Convert Attribute_Blob value to text and print out the text to the Output Window.",
      "id": "3563"
    },
    {
      "names": [
        "Integer File_open(Text file_name, Text mode, Text ccs_text, File &file)"
      ],
      "description": "Opens a file of name file_name with open type mode.  The file unit is returned as File file. The file can be opened as a Unicode file with a specified encoding or as an ANSI file by using anon-blank value for the ccs_text parameter. The available modes arerr+rbww+wbaa+open for reading.  If the file does not exist then it fails. open for update, that is for reading and writing.  The file must exist. read binaryopens a file for writing.  If the files exists, its current contents are destroyed. opens a file for reading and writing.  If the files exists, its current contents are destroyedwrite binaryopen for writing at the end of file (before the end of file marker).   If the file does not exist then it is created. opens for reading and writing to the end of the file (before the end of file marker).  If the file does not exist then it is created. When a file is open for append (i. e.  a or a+), it is impossible to overwrite information that isalready in the file.  Any writes are automatically added to the end of the file. ccs_text specifies the coded character set to use and can have the values:ccs_text = \"ccs = UTF-8\"Input/Output ccs_text = \"ccs = UTF-16LE\"ccs_text = \"ccs = UNICODE\"or ccs_text = \"\" (leave it blank) if ANSI encoding is required. For exampleFile_open(\"test file\", \"w\",\"ccs=UNICODE\",file_handle);Note: BOM detection only applies to files that are opened in Unicode mode (that is, by passing anon blank ccs parameter). If the file already exists and is opened for reading or appending, the Byte Order Mark (BOM), if itpresent in the file, determines the encoding.  The BOM encoding takes precedence over theencoding that is specified by the ccs flag.  The ccs encoding is only used when no BOM ispresent or the file is a new file. The following table summarises the use of Byte Order Marks (BOM's) for the various ccs flagsgiven to File_open and what happens when there is a BOM in an existing file. Encodings Used When Opening a File Based on non blank ccs Flag and BOMccs flagUNICODEUTF-8UTF-16LENo BOM (or new file)UTF-16LEUTF-8UTF-16LEBOM: UTF-8UTF-8UTF-8UTF-8BOM: UTF-16UTF-16LEUTF-16LEUTF-16LEFiles opened for writing in Unicode mode (non-blank ccs) automatically have a BOM written tothem. When a file that begins with a Byte Order Mark (BOM) is opened, the file pointer is positionedafter the BOM (that is, at the start of the file's actual content). For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file was opened successfully.",
      "id": "2076"
    },
    {
      "names": [
        "Integer File_open(Text file_name, Text mode, File &file)"
      ],
      "description": "Note: this option now only creates UNICODE files.  To open a ANSI file, use File_open(Textfile_name,Text mode,Text ccs_text,File &file) with ccs_text = \"\" instead. Opens a file of name file_name with open type mode.  The file unit is returned as File file. The available modes arerr+rbww+wbaa+append open for writing at the end of file or create for writingopen for update at end of file or create for updateWhen a file is open for append (i. e.  a or a+), it is impossible to overwrite information that isalready in the file. A function return value of zero indicates the file was opened successfully.",
      "id": "335"
    },
    {
      "names": [
        "Integer File_seek(File file, Integer pos)"
      ],
      "description": "Go to the position pos in the File file. Position pos has normally been found by a previous File_tell call. If the file open type was a or a+, then a File_seek cannot be used to position for a write in anypart of the file that existed when the file was opened. Input/Output If you have to File_seek to the beginning of the file, use File_tell to get the initial position andFile_seek to it rather than to position 0. So for a Unicode file, if you have to File_seek to the beginning of the file but after the BOM youneed to first have used a File_tell to get and record the position of the initial start of the file whenit is opened (for a Unicode file, File_open positions after the BOM) and then to File_seek to thatrecorded beginning of the file rather than to File_seek to position 0. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file position was successfully found.",
      "id": "342"
    },
    {
      "names": [
        "Integer File_rewind(File file)"
      ],
      "description": "Rewind the File file to its beginning. WARNING: This function is not to be used with a Unicode file. If the file is a Unicode file then File_rewind will rewind to BEFORE the BOM.  Then writing outany information will overwrite the BOM. So for a Unicode file, to correctly position to the beginning of the file but after the BOM you needto first have used a File_tell when opening the file to get and record position of the initial start ofthe file (for a Unicode file, File_open positions after the BOM) and then to File_seek to thatrecorded beginning of the file rather than to File_seek to position 0. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the file was successfully rewound.",
      "id": "339"
    },
    {
      "names": [
        "Integer File_read(File file, Integer &value)"
      ],
      "description": "Read four bytes from the binary file file and return it as an Integer in value. A function return value of zero indicates the Integer was successfully returned. ",
      "id": "1710"
    },
    {
      "names": [
        "Integer File_read_unicode(File file, Integer length, Text &value)"
      ],
      "description": "Read length bytes from the binary file file and return it as Text in value. Note - this works for UNICODE files. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully returned.",
      "id": "2676"
    },
    {
      "names": [
        "Integer File_write_unicode(File file, Integer length, Text value)"
      ],
      "description": "Write out value as length lots of two byte Unicode characters to the binary file file. If there is less than length characters in Text then the number of characters is brought up tolength by writing out null padding. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully written.",
      "id": "2677"
    },
    {
      "names": [
        "Integer File_read(File file, Integer length, Text &value)"
      ],
      "description": "Read length bytes from the binary file file and return it as Text in value. Note - this only works for ANSI Text. If any of the characters of Text is not ANSI, then a non-zero function return value is returned. WARNING: This function is not to be used for Unicode files.  For Unicode files, useFile_read_unicode(File file,Integer length,Text &value) instead. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully returned.",
      "id": "1712"
    },
    {
      "names": [
        "Integer File_write(File file, Integer length, Text value)"
      ],
      "description": "Write out value as length lots of one byte ANSI characters to the binary file file. If any of the characters of Text is not ANSI, then no data is written out and a non-zero functionreturn value is returned. If there is less than length characters in Text then the number of characters is brought up tolength by writing out null padding. WARNING: This function is not to be used for Unicode files.  For Unicode files, useFile_write_unicode(File file,Integer length,Text value) instead. For more information on ANSI, ASCII, Unicode, UTF's and BOM's, please see Set Ups. hwhichis a copy of the information from the 12d Model Reference manual. A function return value of zero indicates the Text was successfully written.",
      "id": "1715"
    },
    {
      "names": [
        "Integer Read_12d_data(Text filename, Integer use_super, Integer project_att_mode, Integer project_att_dup_mode, Integer model_att_mode, Integer model_att_dup_mode, Integer existing_tin_mode, Dynamic_Element &list)"
      ],
      "description": "Read the data from the 12d Ascii or 12d XML file called filename and load all the createdElements into the Dynamic_Element list.  If the extension of filename is . 12dxml or 12dxmlz,then the reading will try to process the file as of 12d XML format; otherwise the reading will try toprocess the file as of 12d Ascii format. If use_super is non zero then old string types will be read in as super string. For the choice in reading project attributes or model attributes; valid values forproject_att_mode and model_att_mode:0 - read and merge1 - delete all old attributes and read2 - do not read (and keep the existing attributes)When read and merge project/moel attributes, valid values for project_att_dup_mode andmodel_att_dup_mode:0 - ignore new values1 - subfix name2 - duplicate3 - delete the existingWhen read a tin that already exists in the current project; valid values for existing_tin_mode:0 - error1 - delete old tin2 - skip new tin3 - rename old tinA function return value of zero indicates the file was successfully read.",
      "id": "6891"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of the Element elt to the file.  Anycoordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of the Model containing elt to the file beforewriting out elt. If output_model_name = 0 then don't write out the Model name. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1630"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of the Element elt to the file.  Anycoordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of the Model containing elt to the file beforewriting out elt. If output_model_name = 0 then don't write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written. Input/Output ",
      "id": "3192"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in theDynamic_Element list to the file.  Any coordinates and Reals are written out to precision decimalplaces. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element.  The Model name is not repeated if is the same as the previousElement). If output_model_name = 0 then don't write out the Model names. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1631"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in theDynamic_Element list to the file.  Any coordinates and Reals are written out to precision decimalplaces. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element.  The Model name is not repeated if is the same as the previousElement). If output_model_name = 0 then don't write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3193"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Model model, Text filename, Integer precision, Integer output_model_name)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in the Model modelto the file.  Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don't write out the Model name. For output in full tin format see 5. 17. 4. 1 MACRO_CALL_WRITE_FULL_TIN_4D. A function return value of zero indicates the data was successfully written.",
      "id": "1632"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and append the 12d Ascii of all the Elements in the Model modelto the file.  Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don't write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3194"
    },
    {
      "names": [
        "Integer Write_4d_ascii(Element elt, File file, Integer precision, Integer indent_level, Integer bool_flags, Real null_value)"
      ],
      "description": "Write the 12d Ascii of the Element elt to the File file.  Any coordinates and Reals are written outto precision decimal places.  The information written to the file is indented by indent_levelspaces. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Input/Output Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3195"
    },
    {
      "names": [
        "Integer Write_12d_data(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Dynamic_Element list to the file filename using the formatindicated by the file extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element. If output_model_name = 0 then don't write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5439"
    },
    {
      "names": [
        "Integer Write_12d(Dynamic_Element list, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Dynamic_Element list to the file filename using the formatindicated by the file extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing each Element to thefile before writing out the Element. If output_model_name = 0 then don't write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5440"
    },
    {
      "names": [
        "Integer Write_12d_data(Element elt, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write Element elt to the file filename using the format indicated by the file extension. Input/Output If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed as of12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of the Model containing elt to the file beforewriting out the Element. If output_model_name = 0 then don't write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5441"
    },
    {
      "names": [
        "Integer Write_12d_data(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Write all the Elements in the Model model to the file filename using the format indicated by thefile extension. If the extension of filename is . 12dxml or 12dxmlz, then the output file will be processed asof12d XML format - normal and zipped accordingly. If the extension of filename is . 12da or 12daz, then the output file will be processed as of 12dAscii format - normal and zipped accordingly. Any other file extension will be process as 12da. If the file format is not zipped, then new information would be append at the end of existing file. Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then if write the name of model to the file before writing out theElements data. If output_model_name = 0 then don't write out the Model names. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "5442"
    },
    {
      "names": [
        "Integer Create_button(Menu menu, Text button_text, Text button_reply)"
      ],
      "description": "This function adds buttons to the menu with button_text as the text for the button. The button is also supplied with a Text button_reply which is returned to the macro through thefunction Display or Display_relative when the button is selected. Menus The menu buttons will appear in the Menu in the order that they are added to the menu structureby the Create_button function. A function return value of zero indicates that the button was created successfully.",
      "id": "172"
    },
    {
      "names": [
        "Integer Display_relative(Menu menu, Integer &across_rel, Integer &down_rel, Text &reply)"
      ],
      "description": "When called, the Menu menu is displayed on the screen with screen co-ordinates of(across_rel,down_rel) relative to the cursor position. The menu remains displayed until a menu button is selected. When a menu button is selected, the menu is removed from the screen and the appropriatebutton return code returned in the Text variable reply. Whilst displayed, the menu can be moved in 12d Model by using the mouse.  When the selectionis made, the final absolute position of the menu is returned as (across_rel,down_rel). A function return value of zero indicates that a successful menu selection was made. Thus the sequence used to define and display a menu and the relevant functions used are:(a) a Menu variable is created which is used when referring to this particular menu.  The menutitle is defined when the menu variable is created.  Use:Create_menu(Text menu_title)For exampleMenu menu = Create_menu(\"Test\");(b) the menu buttons are added to the menu structure in the order that they will appear in themenu.  The button text and the text that will be returned to the macro if the button is selectedare both supplied.  Use:Create_button(Menu menu,Text button_text,Text reply)For exampleCreate_button(menu,\"First options\",\"Op1\");Create_button(menu,\"Second options\",\"Op2\");Create_button(menu,\"Finish\",\"Fin\");(c) the menu is displayed on the screen.  The menu will continued to be displayed until a menubutton is selected.  When the menu button is selected, the menu is removed from the screenand the appropriate button return code returned to the macro. Use:Display(Menu menu,Integer row_pos,Integer col_pos, Text &reply)Display_relative(Menu menu,Integer row_pos,Integer col_pos, Text &reply)For exampleDisplay(menu,5,10,reply);A more complete example of defining and using a menu is:void main(){// create a menu with title \"Silly Menu\"Menu menu = Create_menu(\"Silly Menu\");/* add menu button with titles \"Read\", \"Write\", \"Draw\"and \"Quit\".  The returns codes for the buttons arethe same as the button titles*/Create_button(menu,\"Read\",\"Read\");Create_button(menu,\"Write\",\"Write\");Create_button(menu,\"Draw\",\"Draw\");Create_button(menu,\"Quit\",\"Quit\");/* display the menu on the screen at the current cursorposition and wait for a button to selected. When a button is selected, print out its return codeIf the return code isn't \"Quit\", redisplay the menu. */Text reply;do {Display(menu,-1,-1,reply);Print(reply); Print(\"\\n\");} while(reply != \"Quit\");}",
      "id": "364"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Text &dt, Integer &no_items)"
      ],
      "description": "Get the number of Texts currently in the Dynamic_Text dt. Dynamic Arrays The number of Texts is returned by Integer no_items. A function return value of zero indicates the number of Texts was successfully returned.",
      "id": "227"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Real &real_list, Integer &no_items)"
      ],
      "description": "Get the number of Reals currently in the Dynamic_Real real_list. The number of Reals is returned in Integer no_items. A function return value of zero indicates the number of Reals was returned successfully.",
      "id": "1791"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Real &real_list, Integer index, Real &value)"
      ],
      "description": "Get the i'th Real from the Dynamic_Real real_list. The Real is returned in value. A function return value of zero indicates the i'th Real was returned successfully.",
      "id": "1792"
    },
    {
      "names": [
        "Integer Get_number_of_items(Dynamic_Integer &integer_list, Integer &count)"
      ],
      "description": "Get the number of Integers currently in the Dynamic_Integer integer_list. The number of Integers is returned in Integer no_items. A function return value of zero indicates the number of Integers was returned successfully.",
      "id": "1781"
    },
    {
      "names": [
        "Integer Get_item(Dynamic_Integer &integer_list, Integer i, Integer &value)"
      ],
      "description": "Get the i'th Integer from the Dynamic_Integer integer_list. The Integer is returned in value. A function return value of zero indicates the i'th Integer was returned successfully.",
      "id": "1782"
    },
    {
      "names": [
        "Point Set_end(Line &line, Point pt)"
      ],
      "description": "Set the end Point of the Line line to be the Point pt. The function return value is also the end Point of line.",
      "id": "254"
    },
    {
      "names": [
        "Real Get_radius(Arc arc)"
      ],
      "description": "Get the radius of the Arc arc. The function return value is the radius of the arc. ",
      "id": "261"
    },
    {
      "names": [
        "Point Set_start(Arc &arc, Point start)"
      ],
      "description": "Arcs Set the start point of the Arc arc to be the Point start.  If the start point is not on the Arc, the pointis dropped perpendicularly onto the Arc to define the actual start point that lies on the Arc. The function return value is the actual start point on the arc.",
      "id": "266"
    },
    {
      "names": [
        "Integer Set_radius(Spiral trans, Real radius)"
      ],
      "description": "Sign of radius. For a leading transition, set the end radius of the transition trans to radius. For a trailing transition, set the start radius of the transition trans to radius. Spirals and Transitions Note - the radius is a signed value.   If radius > 0 the transition curves to the right.  If radius <0, the transition curves to the left. A function return value of zero indicates that the function call was successful.",
      "id": "1808"
    },
    {
      "names": [
        "Real Get_radius(Spiral trans)"
      ],
      "description": "For a leading transition trans, get the radius at the end of the full transition and return it as thefunction return value. For a trailing transition trans, get the radius at the start of the full transition and return it as thefunction return value.",
      "id": "1819"
    },
    {
      "names": [
        "Real Get_shift_x(Spiral trans)"
      ],
      "description": "shift at end point of transition trans (what is x/y which is offset, which is along tangent)Spirals and Transitions ",
      "id": "1833"
    },
    {
      "names": [
        "Integer Get_arc(Segment segment, Arc &arc)"
      ],
      "description": "If the Segment is of type 3, the Arc of the Segment is returned as arc, otherwise it is an error. A function return value of zero indicates the Segment was an Arc Segment and that the Arc wasreturned successfully.",
      "id": "276"
    },
    {
      "names": [
        "Integer Set_curve(Segment &segment, Curve curve)"
      ],
      "description": "Sets the Segment type to 6 and the Curve of the Segment to curve. A function return value of zero indicates the Segment was successfully set.",
      "id": "2839"
    },
    {
      "names": [
        "Integer Get_segments(Element elt, Integer &nsegs)"
      ],
      "description": "Get the number of segments for a string Element elt. The number of segments is returned as nsegsA function return value of zero indicates the data was successfully returned. NoteSegments If a string is open and has n points, then it has n-1 segments. If a string is closed it has the same number of points and segments. If a string is closed and has n points, then it also has n segments. That is, If a string is closed it has the same number of points and segments. For example, a seven point open string has six segments. A seven point closed string has seven segments.",
      "id": "545"
    },
    {
      "names": [
        "Integer Set_leading(Curve curve, Integer leading)"
      ],
      "description": "Curve Set whether curve is a leading Curve (radius decreases along the curve) or trailing curve (radiusincreases along the curve). If leading is non-zero then it is a leading curve. If leading is zero then it is a trailing curve. A return value of zero indicates the function call was successful.",
      "id": "2818"
    },
    {
      "names": [
        "Integer Set_anchor(Curve curve, Point point)"
      ],
      "description": "For the end of the Curve curve where the radius is infinity, set the co-ordinates of that position topoint. For a leading transition, the anchor point is the start of curve. For a trailing transition, the anchor point is the end of curve. A function return value of zero indicates that the function call was successful. Curve ",
      "id": "2822"
    },
    {
      "names": [
        "Real Get_angle(Curve curve, Real l)"
      ],
      "description": "For the Curve curve, get the angle of the tangent of the position at length l from the start of thefull curve, and return it as the function return value. Curve The returned angle is in radians and is measured in a counterclockwise direction from thepositive x-axis.",
      "id": "2834"
    },
    {
      "names": [
        "Real Get_radius(Curve curve)"
      ],
      "description": "For a leading Curve curve, get the radius at the end of the full curve and return it as the functionreturn value. For a trailing Curve curve, get the radius at the start of the full curve and return it as the functionreturn value.",
      "id": "2841"
    },
    {
      "names": [
        "Integer Attribute_delete(Attributes attr, Text att_name)"
      ],
      "description": "Deletes the first attribute with the name att_name from the Attributes attr.  Attribute names arecase sensitive and they support the array syntax. A function return value of zero indicates the attribute was deleted.",
      "id": "1941"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Attributes &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attributes value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1949"
    },
    {
      "names": [
        "Integer Get_attribute(Attributes attr, Text att_name, Attribute_Blob &att)"
      ],
      "description": "From the Attributes attr, get the first attribute called att_name and return the attribute value inatt.  The attribute must be of type Attribute_Blob. If the attribute is not of type Attribute_Blob then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name. User Defined Attributes ",
      "id": "3393"
    },
    {
      "names": [
        "Integer Get_attribute_type(Attributes attr, Text att_name, Integer &att_type)"
      ],
      "description": "Get the type of the attribute with the name att_name from the Attribute attr.  The type is returnedin att_type. For the list of attribute types, go to Data Type Attribute Type. A function return value of zero indicates the attribute type was successfully returned.",
      "id": "1956"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Integer att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Integer and give it the valueatt.  if the attribute called att_name does exist and it is type Integer, then set its value to att. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1961"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Real att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Real and give it the valueatt.  if the first attribute called att_name does exist and it is type Real, then set its value to att. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1962"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Uid att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Uid and give it the valueatt.  if the first attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1963"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Attributes att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the first attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1964"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Integer64 att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type 64 bit Integer and give itthe value att.  if the first attribute called att_name does exist and it is type 64 bit Integer, then set its value toatt. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3247"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Guid att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Guid and give it the valueatt.  if the first attribute called att_name does exist and it is type Guid, then set its value to att. User Defined Attributes If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3248"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Text att_name, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name does not exist then create it as type Attribute_Blob (binary) andgive it the value att.  if the first attribute called att_name does exist and it is type Attribute_Blob (binary), then set itsvalue to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "3395"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Integer att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Integer, then its valueis set to att. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Integer then a non-zero return value isreturned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1966"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Attributes att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Attributes, then itsvalue is set to att. If there is no Attributes with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. User Defined Attributes Note - the Get_attribute_type call can be used to get the type of the attribute called att_no.",
      "id": "1969"
    },
    {
      "names": [
        "Integer Set_attribute(Attributes attr, Integer att_no, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr, if the attribute number att_no exists and it is of type Attribute_Blob(binary), then its value is set to att. If there is no Attributes with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attribute_Blob (binary) then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no. ",
      "id": "3396"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Text att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Text does not exist then create it and give it the valueatt.  if the attributes called att_name with type Text does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3258"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Integer att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Integer does not exist then create it and give it thevalue att.  if the attributes called att_name with type Integer does exist, then assign the value of the firstone to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3259"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Real att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Real does not exist then create it and give it the valueatt.  if the attributes called att_name with type Real does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set. User Defined Attributes ",
      "id": "3260"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Uid att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Uid does not exist then create it and give it the valueatt.  if the attributes called att_name with type Uid does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3261"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Attributes att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Attributes (group) does not exist then create it andgive it the value att.  if the attributes called att_name with type Attributes (group) does exist, then assign the valueof the first one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3262"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Integer64 att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type 64 bit Integer does not exist then create it and give itthe value att.  if the attributes called att_name with type 64 bit Integer does exist, then assign the value of thefirst one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3263"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Guid att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Guid does not exist then create it and give it the valueatt.  if the attributes called att_name with type Guid does exist, then assign the value of the first oneto att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3264"
    },
    {
      "names": [
        "Integer Set_attribute_by_type(Attributes attr, Text att_name, Attribute_Blob att)"
      ],
      "description": "For the Attributes attr, if the attribute called att_name with type Attribute_Blob (binary) does not exist then create itand give it the value att.  if the attributes called att_name with type Attribute_Blob (binary) does exist, then assign thevalue of the first one to att. A function return value of zero indicates the attribute value is successfully set.",
      "id": "3398"
    },
    {
      "names": [
        "Integer File_contains_XML_element(Text file, Integer search_mode, Text search_for, Integer &found)"
      ],
      "description": "Search for the key word search_node in a given XML file and set the output Integer found to 1 ifthe file contain the key word; 0 otherwise. The valid values for Integer search_mode are:0search names only1search attributes only2search values onlyFolders 3search allA function return value of zero indicates the function was successful.",
      "id": "3930"
    },
    {
      "names": [
        "Integer Get_program_build_number()"
      ],
      "description": "The function return value is the 12d Model build number. This is for internal use only and for minidumps.",
      "id": "2295"
    },
    {
      "names": [
        "Integer Set_symbol_controlbar(Integer use_flag, Text symbol_name, Integer colour, Real size, Real offset, Real raise, Real angle)"
      ],
      "description": "Set fields of symbol control bar with symbol name Text symbol_name, Integer colour, Realsize, Real offset, Real raise, Real angleControl bar Integer use_flag is the bit-wise sum of a subset of0x001 Style0x002 Colour0x004 Size0x008 Offset0x010 Raise0x020 AngleA return value of zero indicates the function call was successful.",
      "id": "3149"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Uid uid)"
      ],
      "description": "For the Project, if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1988"
    },
    {
      "names": [
        "Integer Set_project_attribute(Text att_name, Attributes att)"
      ],
      "description": "For the Project, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1989"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Attributes att)"
      ],
      "description": "For Project, if the attribute number att_no exists and it is of type Attributes, then its value is set toatt. If there is no attribute with number att_no then nothing can be done and a non-zero return codeis returned. If the attribute of number att_no exists and is not of type Attributes then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_no. Project ",
      "id": "1991"
    },
    {
      "names": [
        "Integer Get_project_attribute_length(Integer att_no, Integer &att_len)"
      ],
      "description": "Project Get the length of the project attribute at position att_no. The project attribute length is returned in att_len. A function return value of zero indicates the attribute type was successfully returned. NoteThe length is useful for user attributes of type Text and Binary (Blobs).",
      "id": "1396"
    },
    {
      "names": [
        "Integer Get_project_attribute(Text att_name, Real &att)"
      ],
      "description": "Get project attribute Real att with attribute name Text att_name in current project. A function return value of zero indicates the name is successfully returned.",
      "id": "1388"
    },
    {
      "names": [
        "Integer Set_project_attribute(Integer att_no, Real att)"
      ],
      "description": "Set the project attribute at position att_no to the Real att. The project attribute must be of type RealA function return value of zero indicates the attribute was successfully set. ",
      "id": "1402"
    },
    {
      "names": [
        "Integer Get_element(Text model_name, Uid model_id, Text element_name, Uid element_id, Element &elt)"
      ],
      "description": "Internal use only. A function return value of zero indicates the Element was successfully returned.",
      "id": "3936"
    },
    {
      "names": [
        "Integer Model_rename(Text original_name, Text new_name)"
      ],
      "description": "Change the name of the Model original_name to the new name new_name. A function return value of zero indicates the rename was successful.",
      "id": "423"
    },
    {
      "names": [
        "Integer Delete_all_empty_models(Integer check_model_attributes)"
      ],
      "description": "Delete all empty models - in addition with having no attribute when check_model_attributes isnon zero - from the project and the disk.  Note the the operation cannot be undo. A function return value of zero indicates the model was successfully deleted.",
      "id": "7668"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Uid &uid)"
      ],
      "description": "From the Model model, get the attribute called att_name and return the attribute value in uid. The attribute must be of type Uid. Models If the attribute is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2044"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Uid att)"
      ],
      "description": "For the Model model, if the attribute called att_name does not exist then create it as type Uid and give it the valueatt.  if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2048"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Attributes att)"
      ],
      "description": "For the Model model, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2049"
    },
    {
      "names": [
        "Integer Get_model_attribute(Model model, Text att_name, Text &att)"
      ],
      "description": "Get the data for the model attribute with the name att_name for Model model. The model attribute must be of type Text and is returned in Text att. Models A function return value of zero indicates the attribute was successfully returned.",
      "id": "1411"
    },
    {
      "names": [
        "Integer Set_model_attribute(Model model, Text att_name, Real att)"
      ],
      "description": "For the Model model, set the model attribute with name att_name to the Real att. Models The model attribute must be of type RealA function return value of zero indicates the attribute was successfully set.",
      "id": "1424"
    },
    {
      "names": [
        "Integer Null(View view)"
      ],
      "description": "Set the View handle view to null.  This does not affect the 12d Model view that the handle pointedto. A function return value of zero indicates view was successfully nulled.",
      "id": "375"
    },
    {
      "names": [
        "Integer Get_type(View view, Text &type)"
      ],
      "description": "Get the type of the View view as the Text type. The type isPlanif the view is a plan viewSectionsection viewPerspectiveperspective view or Opengl perspective viewHidden_perspective hidden perspective view. Views A function return value of zero indicates that the view type was returned successfully.",
      "id": "358"
    },
    {
      "names": [
        "Integer View_get_size(View view, Integer &width, Integer &height)"
      ],
      "description": "Find the size in screen units (pixels) of the View view. Views The width and height of the view are width and height pixels respectively. A function return value of zero indicates that the view size was successfully returned.",
      "id": "352"
    },
    {
      "names": [
        "Integer View_restore(View v)"
      ],
      "description": "Restore a View vViews A return value of zero indicates the function call was successful.",
      "id": "3036"
    },
    {
      "names": [
        "Integer View_create(Integer type, Text name, Integer left, Integer top, Integer width, Integer height, Integer engine_type)"
      ],
      "description": "Create a new view with given: Integer type; Text name; Real position in screen pixels left left,top top; size in screen pixels width width, height height; Integer engine_typeA return value of zero indicates the function call was successful. List of values for type of view0 Plan,1 Section,2 Perspective,3 Perspective_Hide,List of values for view engine_type0 GDI_Legacy,1 GDI,2 GDI_Threaded,3 OpenGL_Legacy,4 OpenGL,5 OpenGL_Threaded,6 OpenGL_GPU,",
      "id": "3037"
    },
    {
      "names": [
        "Integer View_get_grid_settings(View v, Integer &draw_mode, Integer &text_x_mode, Integer &text_y_mode, Integer &grid_mode, Real &space_x, Real &space_y, Real &level, Integer &colour, Real &text_height, Real &text_plot_height, Integer &text_clour, Integer &cross_mode, Real &cross_size_pixel, Real &cross_size_mm, Text &text_style, Text &text_prefix_x, Text &text_prefix_y)"
      ],
      "description": "Get various settings of the View v. Parameter 2: draw mode0 no grid 1 last on view 2 first on viewParameter 3: text x mode 0 no text 1 bottom2 topParameter 4: text y mode 0 no text 1 left2 rightParameter 5: grid mode-2 mark1 line2 cross3 bottom and top3 left and right3 mark and crossParameter 6: space between vertical linesParameter 7: space between horizontal linesParameter 8: level of grid lines (points)Parameter 9: grid colourParameter 10: grid text heightParameter 11: grid text plot heightParameter 12: grid text colourParameter 13: another draw mode? 0 not use 1 useParameter 14: cross size pixelsViews Parameter 15: cross size mm (plot)Parameter 16: text style for grid textParameter 17: pre-post text for grid text xParameter 18: pre-post text for grid text yA return value of zero indicates the function call was successful.",
      "id": "3046"
    },
    {
      "names": [
        "Integer View_set_attribute(View view, Text model_name, Text attribute_name, Real value, Integer &internal_return)"
      ],
      "description": "Set attribute attribute_name of the View view within model with name model_name with valueReal valueInternal return internal_return is for developer debugging purpose. A return value of zero indicates the function call was successful. ",
      "id": "3070"
    },
    {
      "names": [
        "Integer View_get_attribute(View view, Text attribute_name, Text &value, Integer &internal_return)"
      ],
      "description": "Get Text value of attribute attribute_name of the View viewInternal return internal_return is for developer debugging purpose. Views A return value of zero indicates the function call was successful.",
      "id": "3074"
    },
    {
      "names": [
        "Integer View_set_plot_data_textstyle(View view, Text model_name, Text prefix, Textstyle_Data d, Integer &internal_return)"
      ],
      "description": "Intended for 12D developers use only",
      "id": "3087"
    },
    {
      "names": [
        "Integer View_write_position_file(View view, Text position_name, Integer add_file_extension)"
      ],
      "description": "Write a view position file position_name of a given View v. If add_file_extension is 1 then add the approriate file extension to the file name. A return value of zero indicates the function call was successful. Views ",
      "id": "3386"
    },
    {
      "names": [
        "Integer Get_data(Element elt, Integer i, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the (x,y,z) data for the ith vertex of the string Element elt. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the data was successfully returned. NOTE: The functions to set the data arrays are given in the sections of each string type.  Forexample 5. 38. 2. 1 Super String Create Functions.",
      "id": "653"
    },
    {
      "names": [
        "Integer Get_colour(Element elt, Integer &colour)"
      ],
      "description": "Get the colour of the Element elt. Elements The colour (as a number) is returned as the Integer colour. A function return value of zero indicates the Element colour was successfully returned. NoteThere are 12dPL functions to convert the colour number to a colour name and vice-versa.",
      "id": "46"
    },
    {
      "names": [
        "Integer Set_model(Dynamic_Element de, Model model)"
      ],
      "description": "Sets the Model of all the Elements in the Dynamic_Element de to model. For each Element elt in the Dynamic_Element, de if elt is already in a model, then it is moved tothe Model model.  If elt is not in a model, elt is added to the Model model. A function return value of zero indicates the models were successfully set.",
      "id": "141"
    },
    {
      "names": [
        "Integer Get_type(Element elt, Text &elt_type)"
      ],
      "description": "Elements Get the Element type of the Element elt.  as a Text value. The Element type is returned as the Text elt_type. For the Text types of elements, go to 5. 36. 1 Types of Elements. A function return value of zero indicates the type was returned successfully.",
      "id": "64"
    },
    {
      "names": [
        "Integer Set_weight(Element elt, Real weight)"
      ],
      "description": "Set the weight of the Element elt. The value of the weight is given by the Real weight. A function return value of zero indicates the weight was successfully set.",
      "id": "1609"
    },
    {
      "names": [
        "Integer Get_end_chainage(Element elt, Real &chainage)"
      ],
      "description": "Get the end chainage of the Element elt. The end chainage is returned by the Real chainage. A function return value of zero indicates the chainage was returned successfully. Elements ",
      "id": "654"
    },
    {
      "names": [
        "Integer Get_attribute(Element elt, Text att_name, Attributes &att)"
      ],
      "description": "From the Element elt, get the attribute called att_name from elt and return the attribute value inatt.  The attribute must be of type Attributes. If the attribute is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - this function is more efficient than getting the Attributes from the Element and then gettingthe data from that Attributes. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1975"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Uid uid)"
      ],
      "description": "For the Element elt, if the attribute called att_name does not exist in the element then create it as type Uid and giveit the value uid.  if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1978"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Text att_name, Attributes att)"
      ],
      "description": "For the Element elt, if the attribute called att_name does not exist in the element then create it as type Attributesand give it the value att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1979"
    },
    {
      "names": [
        "Integer Attribute_delete_all(Element elt)"
      ],
      "description": "Elements Delete all the user attributes for Element elt. A function return value of zero indicates all the attributes were deleted.",
      "id": "559"
    },
    {
      "names": [
        "Integer Set_attribute(Element elt, Integer att_no, Integer att)"
      ],
      "description": "Elements For the Element elt, set the user attribute at position att_no to the Integer att. The user attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "576"
    },
    {
      "names": [
        "Integer Get_time_created(Tin tin, Integer &time)"
      ],
      "description": "Get the time that the Tin tin was created and return the time in time. The time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully returned.",
      "id": "2114"
    },
    {
      "names": [
        "Integer Tin_number_of_triangles(Tin tin, Integer &notri)"
      ],
      "description": "Get the number of triangles in the Tin tin. Tin Element This value includes null triangles and also construction triangles. The number of triangles is returned in the Integer notri. A function return value of zero indicates success. If tin is null, the function return value is non-zero.",
      "id": "473"
    },
    {
      "names": [
        "Integer Tin_height(Tin tin, Real x, Real y, Real &height)"
      ],
      "description": "Get the height of the tin at the point (x,y). If (x,y) is outside the tin, then an error has occurred and a non-zero function return value is set. A function return value of zero indicates the height was successfully returned.",
      "id": "215"
    },
    {
      "names": [
        "Integer Tin_get_point(Tin tin, Integer np, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the (x,y,z) coordinate of np'th point of the tin. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the coordinate of the point was successfully returned.",
      "id": "831"
    },
    {
      "names": [
        "Integer Tin_get_triangle_points(Tin tin, Integer nt, Integer &p1, Integer &p2, Integer &p3)"
      ],
      "description": "Get the three points of nt'th triangle of the tin. The first point value is returned in Integer p1. The second point value is returned in Integer p2. The third point value is returned in Integer p3. The normal to a triangle in the tin is considered to be pointing \"upwards\".  That is, the normalpoints in the direction of what is considered the upper side of the tin.  For example for a groundtin, the normal points upward. Looking onto the triangle from down the direction of the normal, the points p1, p2 and p3 are in aclockwise order around the triangle.  This is opposite to the right-hand screw rule. p1normal pointing \"up\"p3p2Note: this is the opposite to the order of points in a triangle in a trimesh.  See 5. 51 TrimeshElement. A function return value of zero indicates the points were successfully returned",
      "id": "832"
    },
    {
      "names": [
        "Integer Tin_get_triangle_neighbours(Tin tin, Integer nt, Integer &n1, Integer &n2, Integer &n3)"
      ],
      "description": "Get the three neighbour triangles of the nt'th triangle of the tin. The first triangle neighbour is returned in Integer n1. The second triangle neighbour is returned in Integer n2. The third triangle neighbour is returned in Integer n3. Tin Element A function return value of zero indicates the triangles were successfully returned.",
      "id": "833"
    },
    {
      "names": [
        "Integer Supertin_number_of_tins(Tin supertin, Integer &ntins)"
      ],
      "description": "Get the number of component tins of a supertin. The number of component tins is returned in the Integer ntins. Tin Element A function return value of zero indicates the input is an actual supertin and the function call wassuccessful.",
      "id": "3217"
    },
    {
      "names": [
        "Integer Tin_null_by_colour(Tin tin, Integer colour, Integer is_colour, Integer is_null)"
      ],
      "description": "Reset or null triangles of the tin tin based on triangle colours:Tin Element colour to be compared to the triangle colours. Note: a triangle in the tin may (1) have no colour - hence using the main tin colour; or may (2)have it own colour which happens to be the same as the main colour of the tin.  Those triangles inthe two cases would look the same in views but the underlying data are different.  The colour tobe match in case (1) is 0, and in case (2) is the main colour of the tin. is_colour 1 indicates only process the triangles with matching colour; 0 indicates only processthe triangles with non-matching colour. is_null 0 indicates that the operation resets null triangles; 1 indicates that the operation set nulltriangles. A function return value of zero indicates the triangle was nulled successfully.",
      "id": "3219"
    },
    {
      "names": [
        "Element Create_super(Integer num_pts, Element seed)"
      ],
      "description": "Create an Element of type Super with room for num_pts vertices and num_pts-1 segments ifthe string is not closed or num_pts segments if the string is closed. Set the colour, name, style, flags etc.  of the new string to be the same as those from the Elementseed.  Note that the seed string must also be a super string. The actual values of the arrays are set after the string is created. The return value is an Element handle to the created super string. Super String Element If the Super string could not be created, then the returned Element will be null.",
      "id": "692"
    },
    {
      "names": [
        "Element Create_super(Integer flag1, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_pts)"
      ],
      "description": "Create an Element of type Super with num_pts vertices. The basic geometry for the super string is supplied by the arrays x (x values), y (y values), z (zvalues), r (radius of segments), b (bulge of segment b = 1 for major arc > 180 degrees, b = 0 forminor arc < 180 degrees). flag1 is used to specify which of the dimensions from 1 to 32 are used/not used. Note that depending on the flag1 value, the z, r, b arrays may or may not be used, but the arraysmust still be supplied.  See 5. 38. 1 Super String Dimensions for the values that flag1 may take. The arrays must be of length num_pts or greater. The function return value is an Element handle to the created super string. If the Super string could not be created, then the returned Element will be null. Note - if dimensions greater than 32 are required, then calls with two flags must be used. For example Integer Create_super(Integer flag1, Integer flag2,Real x[],Real y[],Real z[],Realr[],Integer b[],Integer num_pts).",
      "id": "690"
    },
    {
      "names": [
        "Integer Set_super_vertex_coord(Element super, Integer i, Real x, Real y, Real z)"
      ],
      "description": "Set the coordinate data (x,y,z) for the i'th vertex (the vertex with index number i) of the superElement super wherethe x value to set is in Real x. the y value to set is in Real y. the z value to set is in Real z. If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully set.",
      "id": "732"
    },
    {
      "names": [
        "Integer Get_super_vertex_coord(Element super, Integer i, Real &x, Real &y, Real &z)"
      ],
      "description": "Get the coordinate data (x,y,z) for i'th vertex (the vertex with index number i) of the super Elementsuper. The x coordinate is returned in Real x. The y coordinate is returned in Real y. The z coordinate is returned in Real z. If the Element super is not of type Super, then the function return value is set to a non zero value. A return value of 0 indicates the function call was successful.",
      "id": "733"
    },
    {
      "names": [
        "Integer Set_super_data(Element super, Integer i, Real x, Real y, Real z, Real r, Integer b)"
      ],
      "description": "Set the (x,y,z,r,f) data for the i'th vertex of the super Element super wherethe x value to set is the Real x. the y value to set is the Real y. the z value to set is the Real z. the radius value to set is the Real r. the major/minor arc bulge value to set is the Integer b (0 for minor arc < 180 degrees, non zerofor major arc > 180 degrees). If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully set.",
      "id": "699"
    },
    {
      "names": [
        ""
      ],
      "description": "Get the (x,y,z,r,b data for the i'th vertex of the super string super. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. The radius value is returned in Real r. The major/minor arc bulge value is returned in Integer b. (bulge of segment b = 1 for major arc >180 degrees, b = 0 for minor arc < 180 degrees). If the Element super is not of type Super, then the function return value is set to a non zerovalue. A function return value of zero indicates the data was successfully returned.",
      "id": "696"
    },
    {
      "names": [
        "Integer Get_super_data(Element super, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z,r,f) data for the first max_pts vertices of the super string Element super. The (x,y,z,r,f) values at each string vertex are returned in the Real arrays x[], y[],z[],r[] andInteger array b[] (the arrays are x values, y values, z values, radius of segments, b is bulge todenote if the segment is major or minor arc (bulge of segment b = 1 for major arc > 180 degrees,b = 0 for minor arc < 180 degrees). The maximum number of vertices that can be returned is given by max_pts (usually the size ofthe arrays). The vertex data returned starts at the first vertex and goes up to the minimum of max_pts and thenumber of vertices in the string. The actual number of vertices returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element super is not of type Super, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "694"
    },
    {
      "names": [
        "Integer Get_super_vertex_backward_direction(Element super, Integer vert, Real &ang)"
      ],
      "description": "For the Element super of type Super, get the angle of the tangent at the end of the segmententering vertex number vert.  That is, the segment going from vertex vert-1 to vertex vert.  Returnthe angle in ang. ang is in radians and is measured in a counterclockwise direction from the positive x-axis. backward anglevertex number vertbackward anglevertex number vertvertex number vert-1vertex number vert-1Super String Elementtangent atend of segmentgoing into vertexnumber vert If the super string is closed, the angle will still be valid for the first vertex of the super string and itis the angle of the closing segment between the first vertex and the last vertex. If super string is open, the call fails for the first vertex and a non-zero return code is returned. If the Element super is not of type Super, then a non-zero return code is returnedA function return value of zero indicates the angle was successfully returned.",
      "id": "1502"
    },
    {
      "names": [
        "Integer Get_type_like(Element super, Integer &type)"
      ],
      "description": "In earlier versions of 12d Model, there were a large number of string types but in later versionsof 12d Model, the super string was introduced which with its possible dimensions, could replacemany of the other strings. However, for some applications it was important to know if the super string was like one of theoriginal strings.  For example, some options required a string to be a contours string, the original2d string.  That is, the string has the one z-value (or height) for the entire string.  So a super stringthat has a constant dimension for height, behaves like a 2d string and in that case will return theType Like of 2d. The Type Like's can be referred to by a number (Integer) or by text (Text). See 5. 36. 1 Types of Elements for the values of the Type Like numbers and Type Like text. The Type Like for the super string is returned in type. If the Element string is not a super string, then a non zero function return value is returned. A function return value of zero indicates the Type Like was returned successfully.",
      "id": "2074"
    },
    {
      "names": [
        "Integer Get_type_like(Element elt, Text &type)"
      ],
      "description": "In earlier versions of 12d Model, there were a large number of string types but in later versionsof 12d Model, the super string was introduced which with its possible dimensions, could replacemany of the other strings. However, for some applications it was important to know if the super string was like one of theoriginal strings.  For example, some options required a string to be a contours string, the original2d string.  That is, the string has the one z-value (or height) for the entire string.  So a super stringthat has a constant dimension for height, behaves like a 2d string and in that case will return theType Like of 2d. The Type Like's can be referred to by a number (Integer) or by text (Text). See 5. 36. 1 Types of Elements for the values of the Type Like numbers and Type Like text. The Text Type Like for the super string is returned in type. If the Element string is not a super string, then a non zero function return value is returned. A function return value of zero indicates the Type Like was returned successfully.",
      "id": "2075"
    },
    {
      "names": [
        "Integer Get_super_use_2d_level(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension height dimension Att_ZCoord_Value exists for the super string super. See Height Dimensions for information on Height dimensions or Super String Dimensions forinformation on all dimensions. use is returned as 1 if the dimension exists, or 0 if the dimension doesn't exist. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "701"
    },
    {
      "names": [
        "Integer Get_super_use_3d_level(Element super, Integer &use)"
      ],
      "description": "Query whether the height dimension Att_ZCoord_Array exists for the super string super. See Height Dimensions for information on Height dimensions or Super String Dimensions forinformation on all dimensions. use is returned as 1 if the dimension exists, or 0 if the dimension doesn't exist. If the Element super is not a super string, then a non zero function return value is returned. A return value of 0 indicates the function call was successful.",
      "id": "731"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_tinability_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Tinable_Value exists for the super string super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1585"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_tinability_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Tinable_Array exists for the super string super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1587"
    },
    {
      "names": [
        "Integer Get_super_use_segment_tinability_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Tinable_Value exists for the super string super. If Att_Segment_Tinable_Value is set and Att_Segment_Tinability_Array is not set then thetinability is the same for all segments of super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1593"
    },
    {
      "names": [
        "Integer Set_super_use_segment_tinability_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Tinable_Array isset or removed. If Att_Segment_Tinable_Array is set then there can be a different tinability defined for eachsegment in super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the tinability is different for each segment. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1594"
    },
    {
      "names": [
        "Integer Get_super_use_segment_tinability_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Tinable_Array exists for the super string super. If Att_Segment_Tinable_Array is set then there can be a different tinability defined for eachsegment in super. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1595"
    },
    {
      "names": [
        "Integer Get_super_segment_tinability(Element super, Integer seg, Integer &tinability)"
      ],
      "description": "For the Element super (which must be of type Super), get the tinability value for segmentnumber seg and return it in the Integer tinability. If tinability is 1, the segment is tinable. If tinability is 0, the segment is not tinable. If the Element super is not of type Super, or Att_Segment_Tinable_Array is not set for super,then a non-zero return code is returned. See Tinability Dimensions for information on the Tinability dimensions or 5. 38. 1 Super StringSuper String Element Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "725"
    },
    {
      "names": [
        "Integer Get_super_use_segment_radius(Element super, Integer &use)"
      ],
      "description": "Query whether the segment radius dimension Att_Radius_Array exists for the super string. use is returned as 1 if the dimension Att_Radius_Array exists, or 0 if the dimension doesn't exist. See Segment Radius Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "709"
    },
    {
      "names": [
        "Integer Get_super_use_segment_linestyle(Element super, Integer &use)"
      ],
      "description": "Query whether the segment radius dimension Att_Segment_Linestyle_Array exists for the superstring. use is returned as 1 if the dimension Att_Segment_Linestyle_Array exists, or 0 if the dimensiondoesn't exist. See Segment Linestyle Dimension for information on the Segment Radius dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "3132"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_point_number(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Point_Array exists for the super string. If Att_Point_Array exists, the string can have a Point Id for each vertex. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "739"
    },
    {
      "names": [
        "Integer Set_super_vertex_point_number(Element super, Integer vert, Integer point_number)"
      ],
      "description": "For the Element super which must be of type Super, set the Point Id for vertex number vert tothe have the text value of the integer point_number. If the Element super is not of type Super, or the dimension Att_Point_Array is not set, then anon-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Note - in earlier versions of 12d Model (pre v6), point id's were only integers.  This was extendedto being a text when surveying equipment allowed non-integer point ids. A function return value of zero indicates the point id was successfully set. Super String Element ",
      "id": "740"
    },
    {
      "names": [
        "Integer Get_super_vertex_point_number(Element super, Integer vert, Integer &point_number)"
      ],
      "description": "This function should no longer be used because now Point Id's do not have to beintegers. From the Element super which must be of type Super, get the Point Id for vertex number vertand return it in the Integer point_number. If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,then a non-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Note - in earlier versions of 12d Model (pre v6), Point Id's were only integers.  This was extendedto being a text when surveying equipment allowed non-integer Point Ids. A function return value of zero indicates the point id was successfully returned.",
      "id": "741"
    },
    {
      "names": [
        "Integer Get_super_vertex_point_number(Element super, Integer vert, Text &point_id)"
      ],
      "description": "From the Element super which must be of type Super, get the Point Id for vertex number vertand return it in the Text point_id. If the Element super is not of type Super, or the dimension Att_Point_Array is not set for super,then a non-zero return code is returned. See Point Id Dimension for information on the Point Id dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the point id was successfully returned.",
      "id": "1626"
    },
    {
      "names": [
        "Integer Get_super_use_symbol(Element super, Integer &use)"
      ],
      "description": "Query whether the vertex symbol dimension Att_Symbol_Value exists for the Element super oftype Super. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists.  That is, the super string has one symbol for allvertices. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "798"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_symbol(Element super, Integer &use)"
      ],
      "description": "Query whether the vertex symbol dimension Att_Symbol_Array exists for the super string. See Vertex Symbol Dimensions for information on the Vertex Symbol dimensions or 5. 38. 1Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists.  That is, the super string has a different symbol oneach vertex. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "800"
    },
    {
      "names": [
        "Integer Get_super_vertex_symbol_colour(Element super, Integer vert, Integer &col)"
      ],
      "description": "For the super Element super, return as col the colour number of the symbol on vertex numbervert. If there is only the one Symbol for the entire string then the colour number of that symbol isreturned in col regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "808"
    },
    {
      "names": [
        "Integer Get_super_use_pipe(Element elt, Integer &use)",
        "Integer Get_super_use_diameter(Element elt, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Diameter_Value exists for the super string elt. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension existsuse is returned as 0 if the dimension doesn't exist, or if it is a variable pipe string (i. e.  aAtt_Diameter_Array exists). Note - if it is a constant pipe string (Att_Diameter_Value exists) and a variable pipe string(Att_Diameter_Array exists) then the variable pipe takes precedence. This function has the new name for V10 onwards.  The old call will still work. A return value of 0 indicates the function call was successful.",
      "id": "705"
    },
    {
      "names": [
        "Integer Set_super_use_culvert(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the pipe/culvert dimension Att_Culvert_Value. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if any other pipe/culvert dimensions exist (besides Att_Pipe_Justify), there is no change tothe super string and this calls return a non-zero value. A return value of 0 indicates the function call was successful.",
      "id": "1247"
    },
    {
      "names": [
        "Integer Get_super_use_culvert(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Culvert_Value exists for the super string. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension Att_Culvert_Value exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1246"
    },
    {
      "names": [
        "Integer Get_super_use_segment_culvert(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Culvert_Array exists for the super string. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension Att_Culvert_Array exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1250"
    },
    {
      "names": [
        "Integer Get_super_use_pipe_justify(Element super, Integer &use)"
      ],
      "description": "Query whether the pipe/culvert dimension Att_Pipe_Justify exists for the Element super of typeSuper. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. use is returned as 1 if the dimension existsuse is returned as 0 if the dimension doesn't exist. Note: the same justification flag is used whether the super string is a round pipe or a culvert andthe justification applies for the entire string. A return value of 0 indicates the function call was successful.",
      "id": "1254"
    },
    {
      "names": [
        "Integer Set_super_segment_pipe(Element super, Integer seg, Real diameter, Real thickness, Integer internal_diameter)"
      ],
      "description": "For the super Element super and segment number seg, set the thickness to thickness and theinternal diameter to diameter if internal_diameter = 1 or the external diameter to diameter ifinternal_diameter is non zero. If super is not a variable pipe string then a non zero return value is returned. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful",
      "id": "2649"
    },
    {
      "names": [
        "Integer Get_super_culvert(Element super, Real &width, Real &height, Real &left_thickness, Real &right_thickness, Real &top_thickness, Real &bottom_thickness, Integer &internal_width_height)"
      ],
      "description": "For the Element super of type Super which is a constant width and height string (i. e. the pipe/culvert dimension flag Att_Culvert_Value has been set and Att_Culvert_Array not set), thenif internal_width_height is returned as 1 then the culvert internal width is returned in w andthe internal height returned in h. if internal_width_height is not returned as 1 then the culvert external width is returned in wand the external height returned in h. The left thickness is returned in left_thickness, right thickness in right_thickness, top thicknessin top_thickness and bottom thickness in bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. A return value of 0 indicates the function call was successfulNote - Get_super_use_culvert can be called to make sure it is a constant culvert string. ",
      "id": "2648"
    },
    {
      "names": [
        "Integer Get_super_segment_culvert(Element super, Integer seg, Real &width, Real &height, Real &left_thickness, Real &right_thickness, Real &top_thickness, Real &bottom_thickness, Integer &internal_width_height)"
      ],
      "description": "For the Element super of type Super which has culvert width and heights for each segment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), then for segment numberseg:if internal_width_height is returned as 1 then the culvert internal width is returned in w andthe internal height returned in h. if internal_width_height is not returned as 1 then the culvert external width is returned in wand the external height returned in h. The left thickness is returned in left_thickness, right thickness in right_thickness, top thicknessin top_thickness and bottom thickness in bottom_thickness. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperSuper String Element String Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension is not allocated, this call fails and anon-zero function value is returned. A return value of 0 indicates the function call was successfulNote - Get_super_use_segment_culvert can be called to make sure it is a variable segmentculvert string.",
      "id": "2652"
    },
    {
      "names": [
        "Integer Set_super_segment_culvert(Element super, Integer seg, Real w, Real h)"
      ],
      "description": "For the Element super of type Super which has culvert widths and heights for eachsegment(i. e. the pipe/culvert dimension flag Att_Culvert_Array has been set), set the culvertwidth and height for segment number seg to be w and h respectively. See Pipe/Culvert Dimensions for information on the Pipe/Culvert dimensions or 5. 38. 1 SuperString Dimensionsfor information on all dimensions. If the Element super is not of type Super, or the dimension Att_Culvert_Array is not allocated,Super String Element this call fails and a non-zero function value is returned. A return value of 0 indicates the function call was successful. Note - Get_super_use_segment_culvert can be called to make sure it is variable segmentculvert string.",
      "id": "1253"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_text_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Text_Value exists for the super string super. use is returned as 1 if the dimension Att_Vertex_Text_Value exists. use is returned as 0 if the dimension doesn't exist. If the dimension Att_Vertex_Text_Value exists then the string has the same text for every vertexof the string. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1238"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_text_array(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use (set), or not use (remove), the dimensionAtt_Segment_Text_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Vertex_Text_Array is used, then there is different text at each vertex of the super stringsuper. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "742"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_text_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Text_Array exists (is used) for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. If Att_Vertex_Text_Array is used, then there is different text on each vertex of the of the string. See Vertex Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "743"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_annotation_value(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use, or not use, the dimensionAtt_Vertex_Annotate_Value. If the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array doesn't exist then the string has the one annotation which is used forvertex text on any vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if the dimension Att_Vertex_Annotate_Array exists, this call is ignored. A return value of 0 indicates the function call was successful.",
      "id": "750"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_annotation_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Annotate_Value exists for the super string super. If the dimension Att_Vertex_Annotate_Value exists and the dimensionAtt_Vertex_Annotate_Array doesn't exist then the string has the one annotation which is used forvertex text on any vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "751"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_annotation_array(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use, or not use, the dimensionAtt_Vertex_Annotate_Array. If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation forthe vertex text on each vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. A return value of 0 indicates the function call was successful.",
      "id": "752"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_annotation_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Annotate_Array exists for the super string super. If the dimension Att_Vertex_Annotate_Array exists then the string has a different annotation forthe vertex text on each vertex of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "753"
    },
    {
      "names": [
        "Integer Set_super_vertex_text_offset_height(Element super, Integer vert, Real raise)"
      ],
      "description": "For the super string super, set the raise (offset height) of the vertex text for vertex number vert toraise. See Vertex Text Annotation Definitions for the definition of raise (offset height)If there is only one Vertex Text Annotation for all the Vertex Text then the raise for that oneVertex Text Annotation is set to raise regardless of the value of vert. A return value of 0 indicates the function call was successful.",
      "id": "758"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_size(Element super, Integer vert, Real &sz)"
      ],
      "description": "For the super string super, return the size of the vertex text on vertex number vert as sz. If there is only one Vertex Text Annotation for all the Vertex Text then the size for that one VertexText Annotation will be returned in sz regardless of the value of vert. A return value of 0 indicates the function call was successful. Super String Element ",
      "id": "763"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_ttf_underline(Element super, Integer vert, Integer &underline)"
      ],
      "description": "Super String Element For the Element super of type Super, get the underline state for the vertex text on vertex numbervert and return it as underline. If underline = 1, then for a true type font the text will be underlined. If underline = 0, then text will not be underlined. If there is only one Vertex Text Annotation for all the Vertex Text then the underline state for thatone Vertex Text Annotation will be returned in underline regardless of the value of vert. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Vertex_Text_Array or Att_Vertex_Value set. A function return value of zero indicates underline was successfully returned.",
      "id": "2601"
    },
    {
      "names": [
        "Integer Get_super_vertex_text_border_style(Element superstring, Integer vert, Integer &s)"
      ],
      "description": "For vertex number vert of the Super String Element superstring, get the style for the border ofthe whiteout box around the vertex text.  The value is returned as Integer s. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)If there is only one Vertex Text Annotation for all the Vertex Text then the style that is used forthe border of the whiteout box around the vertex text for that one Vertex Text Annotation will bereturned in s regardless of the value of vert. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3587"
    },
    {
      "names": [
        "Integer Get_super_vertex_textstyle_data(Element elt, Integer vert, Textstyle_Data &d)"
      ],
      "description": "For the Element super of type Super, get the Textstyle_Data for the vertex text on vertexnumber vert and return it as d. Note that the function does not concern that the vertex text exists or not. A non-zero function return value is returned if super is not of type Super. if super does not have the dimension Att_Vertex_Text_Value set the function returns zero, but dremains unchanged. If there is only one Vertex Text Annotation for all the Vertex Text then the Textstyle_Data for thatSuper String Element one Vertex Text Annotation will be returned in d regardless of the value of vert. A function return value of zero indicates the Textstyle_Data was successfully returned.",
      "id": "1664"
    },
    {
      "names": [
        "Integer Get_super_use_segment_text_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Text_Value exists for the super string. use is returned as 1 if the dimension Att_Segment_Text_Value exists. use is returned as 0 if the dimension doesn't exist. If the dimension Att_Segment_Text_Value exists then the string has the same text for everysegment of the string. See Segment Text Dimensions for information on the Segment Text dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1240"
    },
    {
      "names": [
        "Integer Set_super_use_segment_text_array(Element super, Integer use)"
      ],
      "description": "Tell the super string super whether to use (set), or not use (remove), the dimensionAtt_Segment_Text_Array. A value for use of 1 sets the dimension and 0 removes it. If Att_Segment_Text_Array is used, then there is different text on each segment of the of thestring. See Segment Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful. ",
      "id": "1189"
    },
    {
      "names": [
        "Integer Get_super_use_segment_text_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Text_Array exists for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. If Att_Segment_Text_Array is used, then there is different text on each segment of the of thestring. See Segment Text Dimensions for information on the Text dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1190"
    },
    {
      "names": [
        "Integer Set_super_use_segment_annotation_value(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove, the dimension Att_Segment_Annotate_Value. If the dimension Att_Segment_Annotate_Value exists and the dimensionAtt_Segment_Annotate_Array doesn't exist then the string has the one annotation which is usedfor segment text on any segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. Note if the dimension Att_Segment_Annotate_Array exists, this call is ignored. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1193"
    },
    {
      "names": [
        "Integer Get_super_use_segment_annotation_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Annotate_Value exists for the super string. If the dimension Att_Segment_Annotate_Value exists and the dimensionAtt_Segment_Annotate_Array doesn't exist then the string has the one annotation which is usedfor segment text on any segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1194"
    },
    {
      "names": [
        "Integer Set_super_use_segment_annotation_array(Element super, Integer use)"
      ],
      "description": "Tell the super string whether to use or remove the dimension Att_Segment_Annotate_Array. If the dimension Att_Segment_Annotate_Array exists then the string has a different annotationfor the segment text on each segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A value for use of 1 sets the dimension and 0 removes it. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1195"
    },
    {
      "names": [
        "Integer Get_super_use_segment_annotation_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Annotate_Array exists for the super string. If the dimension Att_Segment_Annotate_Array exists then the string has a different annotationfor the segment text on each segment of the string. See Vertex Text Annotation Dimensions for information on the Text Annotation dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1196"
    },
    {
      "names": [
        "Integer Set_super_segment_device_text(Element super)"
      ],
      "description": "For an Element super of type Super, set the text unit for segment text to be pixels (also knownas device text or screen text). See Segment Text Annotation Units for the definition of segment text units. If there is Textstyle_Data for the segment text then this will override theSet_super_segment_device_text call. A return value of 0 indicates the function call was successful.",
      "id": "1232"
    },
    {
      "names": [
        "Integer Get_super_segment_text_offset_width(Element super, Integer seg, Real &off)"
      ],
      "description": "For the super string super, return the offset (offset width) of the segment text on segmentnumber seg in off. See Segment Text Annotation Definitions for the definition of offset. If there is only one Segment Text Annotation for all the Segment Text then the offset for that oneSegment Text Annotation will be returned in off regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1200"
    },
    {
      "names": [
        "Integer Set_super_segment_text_colour(Element super, Integer seg, Integer col)"
      ],
      "description": "For the super string super, set the colour number of the segment text on segment number seg tocol. If there is only one Segment Text Annotation for all the Segment Text then the colour number forthat one Segment Text Annotation is set to col regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. Super String Element A return value of 0 indicates the function call was successful.",
      "id": "1213"
    },
    {
      "names": [
        "Integer Get_super_segment_text_angle3(Element super, Integer seg, Real &ang)"
      ],
      "description": "For the super string super, return the 3D gamma angle of the segment text on segment numberseg in ang.  ang is measured in radians. If there is only one Segment Text Annotation for all the Segment Text then the angle for that oneSegment Text Annotation will be returned in ang regardless of the value of seg. Super String Element A return value of 0 indicates the function call was successful.",
      "id": "3591"
    },
    {
      "names": [
        "Integer Get_super_segment_text_x_factor(Element super, Integer seg, Real &xf)"
      ],
      "description": "For the super string super, return the x factor of the segment text on segment number seg in xf. If there is only one Segment Text Annotation for all the Segment Text then the x factor for thatone Segment Text Annotation will be returned in xf regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A return value of 0 indicates the function call was successful.",
      "id": "1208"
    },
    {
      "names": [
        "Integer Set_super_segment_text_ttf_italic(Element super, Integer seg, Integer italic)"
      ],
      "description": "For the super string super, set the italic state of the segment text on segment number seg toitalic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the italic state for thatone Segment Text Annotation is set to italic regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. Super String Element A function return value of zero indicates italic was successfully set.",
      "id": "2612"
    },
    {
      "names": [
        "Integer Get_super_segment_text_ttf_outline(Element elt, Integer seg, Integer &outline)"
      ],
      "description": "For the super string super, return the outline state of the segment text on segment number segin outline. If outline = 1, then for a true type font the text will be shown only in outline. If outline = 0, then text will not be only shown in outline. For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the outline state forthat one Segment Text Annotation will be returned in outline regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates outline was successfully returned.",
      "id": "2778"
    },
    {
      "names": [
        "Integer Set_super_segment_text_whiteout(Element superstring, Integer seg, Integer c)"
      ],
      "description": "For the super string super, set the colour number of the colour used for the whiteout box aroundthe segment text on segment number seg to c. If no text whiteout is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour number ofthe colour used for the whiteout box around the segment text for that one Segment TextSuper String Element Annotation is set to c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully set.",
      "id": "2757"
    },
    {
      "names": [
        "Integer Get_super_segment_text_border(Element superstring, Integer seg, Integer &c)"
      ],
      "description": "For the super string super, return the colour number that is used as the border of the whiteoutbox around the segment text on segment number seg in c. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. If there is only one Segment Text Annotation for all the Segment Text then the colour numberthat is used for the border around the whiteout box around the segment text for that oneSegment Text Annotation will be returned in c regardless of the value of seg. A non-zero function return value is returned if super is not of type Super. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2768"
    },
    {
      "names": [
        "Integer Get_super_segment_text_border_style(Element superstring, Integer seg, Integer &s)"
      ],
      "description": "For segment number seg of the Super String Element superstring, get the style for the border ofthe whiteout box around the segment text.  The value is returned as Integer s. 12345for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)Super String Element 6789101112for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)If there is only one Segment Text Annotation for all the Segment Text then the style that is usedfor the border of the whiteout box around the segment text for that one Segment Text Annotationwill be returned in s regardless of the value of seg. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3593"
    },
    {
      "names": [
        "Integer Get_super_use_hatch(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Hatch_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and hatching is enabled for the string. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1465"
    },
    {
      "names": [
        "Integer Get_super_hatch_colour(Element super, Integer &col_1, Integer &col_2)"
      ],
      "description": "For the super Element super, return the colour of the first hatch lines as col_1 and the colour ofthe second hatch lines as col_2. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1467"
    },
    {
      "names": [
        "Integer Get_super_hatch_spacing(Element super, Real &dist_1, Real &dist_2)"
      ],
      "description": "Super String Element For the super Element super, return the distance of the first hatch lines as dist_1 and thedistance of the second hatch lines as dist_2.  The units for dist_1 and dist_2 are given by othercalls. If hatching is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1471"
    },
    {
      "names": [
        "Integer Get_super_use_solid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Solid_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and solid fill is enabled for the string. use is returned as 0 if the dimension doesn't exist. A return value of zero indicates the function call was successful.",
      "id": "1479"
    },
    {
      "names": [
        "Integer Get_super_solid_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the colour number of the solid fill and return it in colour. If solid fill is not enabled for super, then a non-zero return code is returned. Super String Element A return value of zero indicates the function call was successful.",
      "id": "1481"
    },
    {
      "names": [
        "Integer Get_super_use_bitmap(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Bitmap_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists and bitmap fill is enabled for the string. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1483"
    },
    {
      "names": [
        "Integer Get_super_bitmap(Element super, Text &filename)"
      ],
      "description": "Super String Element For the super Element super, get the file name of the bitmap fill and return it in filename. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1485"
    },
    {
      "names": [
        "Integer Get_super_bitmap_transparent(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the transparency colour and return it in colour. If bitmap fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1489"
    },
    {
      "names": [
        "Integer Get_super_bitmap_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the units for width and height of the bitmap.  The units arereturned as type and the values are:Super String Element if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1493"
    },
    {
      "names": [
        "Integer Get_super_bitmap_size(Element super, Real &w, Real &h)"
      ],
      "description": "For the super Element super, get the width and height that the bitmap was scaled to.  The widthis returned in w and the height in h.  The units have been set in other bitmap calls. If bitmap is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "1497"
    },
    {
      "names": [
        "Integer Get_super_bitmap_stagger(Element super, Real &stagger)"
      ],
      "description": "For the super Element super, return the stagger between alternate bitmap pattern rows asSuper String Element stagger.  The unit for stagger is given in other bitmap calls. If bitmap pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1747"
    },
    {
      "names": [
        "Integer Get_super_use_pattern(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Pattern_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1693"
    },
    {
      "names": [
        "Integer Get_super_pattern(Element super, Text &name)"
      ],
      "description": "Super String Element For the super Element super, get the fill pattern name and return it in name. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1694"
    },
    {
      "names": [
        "Integer Get_super_pattern_angle(Element super, Real &angle)"
      ],
      "description": "For the super Element super, return the angle of the fill pattern as angle.  The angle is in radianand measured counterclockwise from the x-axis. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "1696"
    },
    {
      "names": [
        "Integer Get_super_pattern_type(Element super, Integer &type)"
      ],
      "description": "For the super Element super, get the units for the pattern fill size, spacing and stagger.  The unitsare returned as type and the values are:if type = 0 then device unitsif type = 1 then world unitsif type = 2 then paper unitsIf pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful. ",
      "id": "3447"
    },
    {
      "names": [
        "Integer Get_super_pattern_stagger(Element super, Real &stagger)"
      ],
      "description": "Super String Element For the super Element super, return the stagger between alternate bitmap pattern rows asstagger.  The unit for stagger is given in other pattern fill calls. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3451"
    },
    {
      "names": [
        "Integer Get_super_pattern_solid_colour(Element super, Integer &colour)"
      ],
      "description": "For the super Element super, get the solid colour number of the fill pattern and return it incolour. If fill pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "3455"
    },
    {
      "names": [
        "Integer Get_super_use_acad_pattern(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Autocad_Pattern_Value exists for the super string super. See Solid/Bitmap/Hatch/ Fill/Pattern/ACAD Pattern Dimensions for information on thisdimension or 5. 38. 1 Super String Dimensionsfor information on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "2142"
    },
    {
      "names": [
        "Integer Get_super_acad_pattern_angle(Element super, Real &angle)"
      ],
      "description": "For the super Element super, return the angle of the Autocad pattern as angle.  The angle is inSuper String Element radian and measured counterclockwise from the x-axis. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful.",
      "id": "2148"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_world(Element super)"
      ],
      "description": "For the super Element super, set the unit for the Autocad pattern to be world unit. If Autocad pattern is not enabled for super, then a non-zero return code is returned. A return value of zero indicates the function call was successful. ",
      "id": "2152"
    },
    {
      "names": [
        "Integer Set_super_acad_pattern_view_angle(Element super, Integer is_relative)"
      ],
      "description": "Super String Element For the super Element super, set the field controls whether the Angle is relative to the x axis or tothe plotting x axis. if is_relative is 1 and we are plotting, Angle is measured relative to the x axis of the plot rotation. If is_relative is 0, Angle is always absolute to the world x axis. If acad pattern fill is not enabled for super, then a non-zero return code is returned. A return value of 0 indicates the function call was successful.",
      "id": "3460"
    },
    {
      "names": [
        "Integer Get_super_use_hole(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Hole_Value exists for the super string super. See Hole Dimension for information on hole dimensions or 5. 38. 1 Super String Dimensionsforinformation on all dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1457"
    },
    {
      "names": [
        "Integer Get_super_use_segment_colour(Element super, Integer &use)"
      ],
      "description": "Query whether the colour dimension Att_Colour_Array exists for the super string. use is returned as 1 if the dimension Att_Colour_Array exists, or 0 if the dimension doesn't exist. See Colour Dimension for information on Colour dimensions or 5. 38. 1 Super StringDimensionsfor information on all dimensions. A return value of 0 indicates the function call was successful.",
      "id": "727"
    },
    {
      "names": [
        "Integer Get_super_use_segment_geometry(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Geom_Array exists for the super string super. If Att_Geom_Array exists, the string can have Segments (which can be straights, arcs ortransitions) between the vertices of the super string. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists.  That is, the segments of the super string are notjust straights but of type Segments (which can be straights, arcs or transitions). use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1839"
    },
    {
      "names": [
        "Integer Set_super_segment_spiral(Element elt, Integer seg, Spiral trans)"
      ],
      "description": "For the Element super of type Super, set the segment number seg to be the transition trans. A non-zero function return value is returned if super is not of type Super, or if super does nothave the dimension Att_Geom_Array set. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the transition was successfully set.",
      "id": "1840"
    },
    {
      "names": [
        "Integer Get_super_segment_spiral(Element elt, Integer seg, Real &l1, Real &r1, Real &a1, Real &l2, Real &r2, Real &a2, Integer &leading, Integer &type)"
      ],
      "description": "For the Element super of type Super, get the Spiral for the segment number seg and return itscomponents. A non-zero function return value is returned if super is not of type Super, or if super does notSuper String Element have the dimension Att_Geom_Array set, or if the segment is not a Spiral. See Segment Geometry Dimension for information on the Segment Geometry dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. A function return value of zero indicates the Spiral was successfully returned.",
      "id": "1843"
    },
    {
      "names": [
        "Integer Get_super_use_extrude(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Extrude_Value exists for the super string super. If Att_Extrude_Value is set then an extrusion is allowed on the super string. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1680"
    },
    {
      "names": [
        "Integer Super_append_string_extrude(Element super, Element shape)"
      ],
      "description": "For the Element super of type Super which has the dimension Att_Extrude_Value set, add theElement shape to the list of Elements that are extruded along super.  Note: shape must also beof type Super. A non-zero function return value is returned if super or shape is not of type Super, or if theDimension Att_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A function return value of zero indicates the shape was successfully added to the list.",
      "id": "2643"
    },
    {
      "names": [
        "Integer Get_super_extrudes(Element super, Integer &num_extrudes)"
      ],
      "description": "For the Element super of type Super and has the dimension Att_Extrude_Value set, get thenumber of Element that are in the list of extrudes for super and return it in num_extrudes. A non-zero function return value is returned if super is not of type Super, or if the DimensionSuper String Element Att_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1921"
    },
    {
      "names": [
        "Integer Super_delete_all_extrudes(Element super)"
      ],
      "description": "Delete all extrudes. For the Element super of type Super, delete all the extrudes from the list of extrusions for super. A non-zero function return value is returned if super is not of type Super, or if the DimensionAtt_Extrude_Value is not set. See Extrude Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "1925"
    },
    {
      "names": [
        "Integer Get_super_use_interval(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Interval_Value exists for the super string super. If Att_Interval_Value is set then there is a Real interval_distance and a Real chord_arc_distancestored for the super string. See Interval Dimensions for information on the Extrude dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1705"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_attribute(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Attribute_Array exists for the super string. If Att_Vertex_Attribute_Array exists then there can be a type Attributes for each vertex. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "771"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Text att_name, Uid uid)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2008"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element elt, Integer vert, Text att_name, Attributes att)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2009"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute(Element super, Integer vert, Text att_name, Text &txt)"
      ],
      "description": "For the Element super, get the attribute called att_name for the vertex number vert and returnthe attribute value in txt.  The attribute must be of type Text. If the Element is not of type Super or the attribute is not of type Text then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "780"
    },
    {
      "names": [
        "Integer Get_super_vertex_attribute_length(Element super, Integer vert, Text att_name, Integer &att_len)"
      ],
      "description": "For vertex number vert of the Element super, get the length (in bytes) of the attribute with thename att_name.  The attribute length is returned in att_len. A function return value of zero indicates the attribute length was successfully returned. Note - the length is useful for user attributes of type Text and Binary.",
      "id": "789"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Text txt)"
      ],
      "description": "Super String Element For the Element super and on the vertex number vert, if the attribute called att_name does not exist then create it as type Text and give it the valuetxt.  if the attribute called att_name does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "791"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Integer int)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute called att_name does not exist then create it as type Integer and give it the valueint.  if the attribute called att_name does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "792"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Text att_name, Real real)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute called att_name does not exist then create it as type Real and give it the valuereal.  if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "793"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Text txt)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute with number att_no does not exist then create it as type Text and give it thevalue txt.  if the attribute with number att_no does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "794"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Integer int)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute with number att_no does not exist then create it as type Integer and give it thevalue int.  if the attribute with number att_no does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "795"
    },
    {
      "names": [
        "Integer Set_super_vertex_attribute(Element super, Integer vert, Integer att_no, Real real)"
      ],
      "description": "For the Element super and on the vertex number vert, if the attribute with number att_no does not exist then create it as type Real and give it thevalue real.  if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "796"
    },
    {
      "names": [
        "Integer Get_super_use_segment_attribute(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Attribute_Array exists for the super string. If the dimension Att_Segment_Attribute_Array exists then there can be an Attributes on eachsegment. See User Defined Vertex Attributes Dimensions for information on the Attributes dimensions or5. 38. 1 Super String Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1061"
    },
    {
      "names": [
        "Integer Get_super_segment_attribute(Element super, Integer seg, Integer att_no, Uid &uid)"
      ],
      "description": "For the Element super, get the attribute with number att_no for the segment number seg andSuper String Element return the attribute value in uid.  The attribute must be of type Uid. If the Element is not of type Super or the attribute is not of type Uid then a non-zero return valueis returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributenumber att_no.",
      "id": "2016"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Text att_name, Uid uid)"
      ],
      "description": "For the Element super and on the segment number seg, if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2018"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Text att_name, Attributes att)"
      ],
      "description": "For the Element super and on the segment number seg, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2019"
    },
    {
      "names": [
        "Integer Super_segment_attribute_exists(Element elt, Integer seg, Text att_name)"
      ],
      "description": "Checks to see if for segment number seg, an attribute of name att_name exists. A non-zero function return value indicates the attribute exists. A zero function return value indicates the attribute does not exist. Super String Element Warning - this is the opposite to most 12dPL function return values",
      "id": "1062"
    },
    {
      "names": [
        "Integer Set_super_segment_attribute(Element super, Integer seg, Integer att_no, Real real)"
      ],
      "description": "For the Element super and on the segment number seg, if the attribute with number att_no does not exist then create it as type Real and give it thevalue real.  if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute number att_no.",
      "id": "1086"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_uid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_UID_Array exists (is used) for the super string super. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. If Att_Vertex_UID_Array is used, then there is an Integer (referred to as a uid) stored at eachvertex of the super string. This is used by 12d Solutions to store special backtracking numbers on each vertex (for examplefor survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Vertex UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions.",
      "id": "1573"
    },
    {
      "names": [
        "Integer Get_super_use_segment_uid(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_UID_Array exists (is used) for the super stringsuper. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. If Att_Segment_UID_Array is used, then there is an Integer stored at each segment of the superstring. This is used by 12d Solutions to store special backtracking numbers on each segment (forexample for survey data reduction or with the underlying super string in a super alignment). See UID Dimensions for information on the Segment UID dimension or 5. 38. 1 Super StringDimensions for information on all the dimensions.",
      "id": "1577"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_image_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Image_Value exists for the super string super. If the dimension Att_Vertex_Image_Value is set then there can be one image attached to eachvertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1768"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_image_array(Element super, Integer use)"
      ],
      "description": "For the super string Element super, define whether the dimension Att_Vertex_Image_Array isused, or removed, for the super string super. If the dimension Att_Vertex_Image_Array is set then there can be more than one image attachedto each vertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. If use is 1, the dimension is set.  That is, each super string vertex can have a number of imagesattached to it. If use is 0, the dimension is removed.  If the super string vertex had images then the images willSuper String Element be removed. A return value of 0 indicates the function call was successful.",
      "id": "1769"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_image_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Image_Array exists for the super string super. If the dimension Att_Vertex_Image_Array is set then there can be more than one image attachedto each vertex. See Vertex Image Dimensions for information on the Vertex Image dimensions or 5. 38. 1 SuperString Dimensions for information on all the dimensions. use is returned as 1 if the dimension exists.  That is, each super string vertex can have a numberof images attached to it. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1770"
    },
    {
      "names": [
        "Integer Get_super_use_visibility(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Visible_Array exists for the super string. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "719"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_visibility_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Visible_Value exists for the super string super.  IfAtt_Vertex_Visible_Value is set then there is one visibility value for all vertices in super. If Att_Vertex_Visible_Value is set and Att_Vertex_Visible_Array is not set, then there is only onevisibility value for all vertices in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1581"
    },
    {
      "names": [
        "Integer Set_super_use_vertex_visibility_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Vertex_Visible_Array isused or removed. If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex insuper. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. Super String Element If use is 1, the dimension is set and the visibility is different for each vertex. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1582"
    },
    {
      "names": [
        "Integer Get_super_use_vertex_visibility_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Vertex_Visible_Array exists for the super string super. If Att_Vertex_Visible_Array is set then there can be a different visibility defined for each vertex insuper. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1583"
    },
    {
      "names": [
        "Integer Get_super_vertex_visibility(Element super, Integer vert, Integer &visibility)"
      ],
      "description": "For the Element super (which must be of type Super), get the visibility value for vertex numbervert and return it in the Integer visibility. If visibility is 1, the vertex is visible. If visibility is 0, the vertex is invisible. If the Element super is not of type Super, or Att_Vertex_Visible_Array is not set for super, thena non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "735"
    },
    {
      "names": [
        "Integer Get_super_use_segment_visibility_value(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Visible_Value exists for the super string super. If Att_Segment_Visible_Value is set and Att_Segment_Visible_Array is not set, then the visibilityis the same for all segments in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1589"
    },
    {
      "names": [
        "Integer Set_super_use_segment_visibility_array(Element super, Integer use)"
      ],
      "description": "For Element super of type Super, define whether the dimension Att_Segment_Visible_Array isused or removed. If Att_Segment_Visible_Array is set then there can be a different visibility defined for eachsegment in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. If use is 1, the dimension is set and the visibility is different for each segment. If use is 0, the dimension is removed. A return value of 0 indicates the function call was successful.",
      "id": "1590"
    },
    {
      "names": [
        "Integer Get_super_use_segment_visibility_array(Element super, Integer &use)"
      ],
      "description": "Query whether the dimension Att_Segment_Visible_Array exists for the super string super. If Att_Segment_Visible_Array is set then there can be a different visibility defined for eachsegment in super. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringDimensions for information on all the dimensions. use is returned as 1 if the dimension exists. use is returned as 0 if the dimension doesn't exist. A return value of 0 indicates the function call was successful.",
      "id": "1591"
    },
    {
      "names": [
        "Integer Get_super_segment_visibility(Element super, Integer seg, Integer &visibility)"
      ],
      "description": "For the Element super (which must be of type Super), get the visibility value for segmentnumber seg and return it in the Integer visibility. If visibility is 1, the segment is visible. If visibility is 0, the segment is invisible. If the Element super is not of type Super, or Att_Segment_Visible_Array is not set for super,then a non-zero return code is returned. See Visibility Dimensions for information on the Visibility dimensions or 5. 38. 1 Super StringSuper String Element Dimensions for information on all the dimensions. A return value of 0 indicates the function call was successful.",
      "id": "721"
    },
    {
      "names": [
        "Integer Is_super_alignment_solved(Element super_alignment)"
      ],
      "description": "Check if the geometry of the Element super_alignment solves. The Element super_alignment must be of type Super_Alignment. A no-zero function return value indicates that the geometry will solve. A zero function return value indicates the geometry for the will not solve, or thatsuper_alignment is not of type Super_Alignment. Warning this is the opposite of most 12dPL function return values.",
      "id": "2680"
    },
    {
      "names": [
        "Integer Super_alignment_equality_part_insert(Element alignment, Integer position, Text part)"
      ],
      "description": "For a super alignment alignment, insert a new equality part at the given position with the givenname part. Super Alignment String Element A return value of zero indicates the function call was successful.",
      "id": "2186"
    },
    {
      "names": [
        "Integer Get_super_alignment_number_of_equalities(Element alignment, Integer &count)"
      ],
      "description": "Super Alignment String Element For a super alignment alignment, get the count of number of solved chainage equalities (K-postand internal equalities). A return value of zero indicates the function call was successful.",
      "id": "2195"
    },
    {
      "names": [
        "Element Create_arc(Real xc, Real yc, Real zc, Real xs, Real ys, Real zs, Real xe, Real ye, Real ze, Integer dir)"
      ],
      "description": "Create an Element of type Arc with centre (xc,yc,zc), start point (xs,ys,zs) and end point(xe,ye,ze). The absolute radius is calculated as the distance between the centre and start point of the arc. If dir is positive, the radius is taken to be positive. If dir is negative, the radius is taken to be negative. The function return value gives the actual Element created. If the arc string could not be created, then the returned Element will be null.",
      "id": "314"
    },
    {
      "names": [
        "Integer Set_circle_data(Element elt, Real xc, Real yc, Real zc, Real rad)"
      ],
      "description": "Circle String Element Set the data for the Circle string given by Element elt. The centre of the circle is set to (xc,yc,zc), the height to zc and the radius to rad. A function return value of zero indicates success.",
      "id": "311"
    },
    {
      "names": [
        "Element Create_text(Text text, Real x, Real y, Real size, Integer colour, Real ang)"
      ],
      "description": "Creates an Element of type Text. The Element is at position (x,y), has Text text of size size, colour colour and angle ang.  Theother data is defaulted. The function return value gives the actual Element created. Text String Element If the text string could not be created, then the returned Element will be null.",
      "id": "175"
    },
    {
      "names": [
        "Integer Get_text_justify(Element elt, Integer &justify)"
      ],
      "description": "Get the justification used for the text Element elt. The justification is returned as Integer justify. For the values of justify and their meaning, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned.",
      "id": "457"
    },
    {
      "names": [
        "Integer Get_text_angle2(Element elt, Real &ang2)"
      ],
      "description": "Get the 3D beta angle (in radians) about the text (x,y) point of the text Element elt and return theText String Element angle as ang2. A function return value of zero indicates the data was successfully returned.",
      "id": "3576"
    },
    {
      "names": [
        "Integer Get_text_offset(Element elt, Real &offset)"
      ],
      "description": "Get the offset distance of the text Element elt. The offset is returned as Real offset. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully returned. ",
      "id": "459"
    },
    {
      "names": [
        "Integer Get_text_ttf_italic(Element elt, Integer &italic)"
      ],
      "description": "For the Element elt of type Text, get the italic state and return it in italic. If italic = 1, then for a true type font the text will be italic. If italic = 0, then text will not be italic. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type Text. A function return value of zero indicates italic was successfully returned.",
      "id": "2594"
    },
    {
      "names": [
        "Integer Set_text_border(Element text, Integer colour)"
      ],
      "description": "For the Text Element text, set the colour number of the colour used for the border of the whiteoutbox around the text, to be colour. If no whiteout border is required, then set the colour number to NO_COLOUR. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "2762"
    },
    {
      "names": [
        "Integer Get_text_border_style(Element text, Integer &style)"
      ],
      "description": "For the Text Element text, get the border style that is used for the border of the whiteout boxText String Element around the text.  The border style is returned as Integer style. 123456789101112for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "3578"
    },
    {
      "names": [
        "Element Create_drainage(Real x[], Real y[], Real z[], Real r[], Integer b[], Integer num_verts, Integer num_pits)"
      ],
      "description": "Create an Element of type drainage. The Element has num_verts vertices with (x,y,z) values for the vertices given in the Real arraysx[], y[] and z[], and the radii of the arcs for the segments between the vertices given by the Realradius array r[] and the Integer bulge array b[] (Bulge arrayb=1 for major arc >180 degrees, b =1 for minor arc < 180 degrees). The drainage string also contains Integer num_pits pits. The function return value gives the actual Element created. If the drainage string could not be created, then the returned Element will be null.",
      "id": "489"
    },
    {
      "names": [
        "Integer Get_drainage_data(Element drain, Real x[], Real y[], Real z[], Real r[], Integer b[], Integer max_verts, Integer &num_verts, Integer start_vert)"
      ],
      "description": "For a drainage Element drain, get the (x,y,z,r,b) data for max_verts points starting at vertexnumber start_vert. This routine allows the user to return the data from a drainage string in user specified chunks. This is necessary if the number of vertices in the string is greater than the size of the arraysavailable to contain the information. The maximum number of vertices that can be returned is given by max_verts (usually the size ofthe arrays).  For this function, the vertex data returned starts at vertex number start_vert ratherthan vertex one. The (x,y,z,r,b) values at each string vertex are returned in the Real arrays x[], y[], z[], r[] and b[]. The actual number of vertices returned is given by Integer num_vertsnum_verts <= max_vertsIf the Element drain is not of type Drainage, then num_verts is set to zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_vert of one gives the same result as for the function Get_drainage_data(Elementdrain,Real x[],Real y[],Real z[],Real r[],Integer b[],Integer max_verts,Integer &num_verts).",
      "id": "2098"
    },
    {
      "names": [
        "Integer Set_drainage_fs_tin(Element drain, Tin tin)"
      ],
      "description": "For the drainage string drain, set the finished surface Tin to be tin. A function return value of zero indicates the tin was successfully set.",
      "id": "1273"
    },
    {
      "names": [
        "Integer Get_drainage_sewer(Element drainage, Integer &type)"
      ],
      "description": "Get the drainage sewer type of the drainage string Element drainage to the Integer type. Drainage String Element A return value of zero indicates the function call was successful. The list of values for drainage sewer type0 Drainage1 Sewer2 Water Supply3 All",
      "id": "2955"
    },
    {
      "names": [
        "Integer Get_drainage_pits(Element drain, Integer &npits)"
      ],
      "description": "For the Element drain, which must of type Drainage, get the number of pits for the string andreturn it in npits.  The number of pipes in npits - 1. The i'th pipe goes from the i'th pit to the (i+1)'th pit. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "530"
    },
    {
      "names": [
        "Integer Get_drainage_pit_area(Element drain, Integer p, Integer elev, Real &sump_area, Dynamic_Real   &depth-elev, Dynamic_Real &area, Integer &ret_num)"
      ],
      "description": "Get the plan area for the pth pit of the string Element drain at the sump [1] for all pits and \\, top ofchamber[2] and bottom of riser[3] for extended pits. Integer Get_drainage_pit_area(Element element,Integer pit,Integer elev,Real&sump_area,Dynamic_Real &de,Dynamic_Real &area,Integer &ret_num)elev set to a value other than zero will return elev data Dynamic_Real &depth-elevsump_area returns the same value as area[1].  This is for easy access when ret_num = 1. depth-elev return a Dynamic_Real with either depth or elevation values as specified in Integerelev above. area returns area values at the level specified in depth-elevret_num return the number of values in the Dynamic_Reals above.  For extended nodes the areachanges with elevation and the ret_num will be greater than 1If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3796"
    },
    {
      "names": [
        "Integer Get_drainage_pit_width(Element drain, Integer p, Real &width)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the width of the pth pit in width. See Drainage Pit Definitions. Drainage String Element If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "2877"
    },
    {
      "names": [
        "Integer Set_drainage_use_connection_points(Element drain, Integer use_connection_points)"
      ],
      "description": "For the Element drain, which must be of type Drainage, set whether pit connection points areused or not. If use_connection_points = 0, pit connection points are not used. If use_connection_points = 1, pit connection points are used. If connection points are to be used and there are no custom connection points defined for the pitin the drainage. 4d file, then every pipe goes to the centre of the closest rectangular side, or ontothe circle for circular pits. If connection points are to be used and there are custom connection points defined for the pit inthe drainage. 4d file, then the pipes go to the closest connection point. See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the use_connection_points flag was successfully set.",
      "id": "2790"
    },
    {
      "names": [
        "Integer Get_drainage_pit_connection(Element drainage, Integer mh_index, Integer &mh_con_type, Element &con_string, Integer &con_mh_index, Integer &con_type)"
      ],
      "description": "Get the pit connection information for the drainage string Element drainage at manhole indexmh_index. A return value of zero indicates the function call was successful. Drainage String Element ",
      "id": "2889"
    },
    {
      "names": [
        "Integer Get_drainage_pit_connection_points(Element drain, Integer pit, Real &lx, Real &ly, Real &rx, Real &ry)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the pit connection points for pitnumber pit. The coordinates of the pit connection point for the pipe that comes into the pit from the left arereturned as (lx,ly). The coordinates of the pit connection point for the pipe that goes out of the pit to the right arereturned as (rx,ry). See Drainage Definitionsfor connection points. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the connection points were successfully returned.",
      "id": "2847"
    },
    {
      "names": [
        "Integer Get_drainage_pit_angle(Element drain, Integer p, Real &ang)"
      ],
      "description": "For the Element drain, which must of type Drainage, get the angle between pipes of drainentering and leaving the pth pit, and return the angle as ang. Note: this is not the angle of the drainage pit itself which is returned by the callGet_drainage_pit_symbol_angle(Element drain,Integer pit,Real &angle). If drain is not an Element of type Drainage then a non zero function return code is returned. Drainage String Element A function return value of zero indicates the data was successfully returned.",
      "id": "517"
    },
    {
      "names": [
        "Integer Get_drainage_pit_chainages(Element drain, Integer pit, Real &ch_lcp, Real &ch_centre, Real &ch_rcp)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for pit number pit, return thechainages of the pit connection points and the chainage of the centre of the pit. The chainage of the pit connection point for the pipe that comes into the pit from the left isreturned as ch_lcp. The chainage of the pit connection point for the pipe that goes out of the pit to the right isreturned as ch_rcp. The chainage of the centre of the pit is returned as ch_centre. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the chainages were successfully returned.",
      "id": "2848"
    },
    {
      "names": [
        "Integer Set_drainage_pit_float(Element drain, Integer pit, Integer pit_float)"
      ],
      "description": "Drainage String Element For the Element drain, which must be of type Drainage, and pit number pit, set the flag for thefloating pit level to pit_float. If pit_float = 1, the top of the pit automatically takes its level (height) from the finished surface tinfor the drainage string drain. If pit_float = 0, the top of the pit level is fixed. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the pit_float value was successfully set.",
      "id": "1277"
    },
    {
      "names": [
        "Integer Get_drainage_pit_hgl(Element drain, Integer p, Real &hgl)"
      ],
      "description": "For the Element drain, which must be of type Drainage, get the hgl level for centre of the pth pitand return it in hgl. If hgl is null then the hgl for the surface is not drawn. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned. ",
      "id": "1242"
    },
    {
      "names": [
        "Integer Set_drainage_pit_base_height(Element e, Integer p, Real pit_base_height)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the base height for the pth pit topit_base_height. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3971"
    },
    {
      "names": [
        "Integer Get_drainage_pit_riser_width(Element e, Integer p, Real &pit_riser_width)"
      ],
      "description": "For the Element drain, which must of type Drainage, return the width for the riser for the pth pit inpit_riser_width. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "3986"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_type(Integer i, Text &type)"
      ],
      "description": "Get the name of the i'th manhole type from the drainage. 4d file and return the name in type. A function return value of zero indicates the data was successfully returned.",
      "id": "2078"
    },
    {
      "names": [
        "Integer Get_drainage_manhole_capacities(Text type, Real &multi, Real &fixed, Real &percent, Real &coeff, Real &power)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type return the values for the generic InletDrainage String Element capacities from the file for:cap_multicap_fixedcap_percentcap_coeffcap_power// if undefined the default is 1// if undefined the default is 0// if undefined the default is 0// if undefined the default is 0// if undefined the default is 1A function return value of zero indicates the data was successfully returned.",
      "id": "2084"
    },
    {
      "names": [
        "Integer Get_drainage_grade_curve_name(Text type, Integer i, Text &name)"
      ],
      "description": "From the drainage. 4d file, for the manhole of type type, return the name of the i'th grade curve(cap_curve_grade) in name. A function return value of zero indicates the name was successfully returned.",
      "id": "2091"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute_type(Element drain, Integer pit, Text att_name, Integer &att_type)"
      ],
      "description": "For pit number pit of the Element drain, get the type of the attribute with name att_name.  Theattribute type is returned in att_type. A function return value of zero indicates the attribute type was successfully returned. Drainage String Element ",
      "id": "1002"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Text &txt)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in txt.  The attribute must be of type Text. If the Element is not of type Drainage or the attribute is not of type Text then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "998"
    },
    {
      "names": [
        "Integer Set_data(Choice_Box box, Integer nc, Text choices[])"
      ],
      "description": "Set the values available in the choice list.  There are nc items in the choices list for theChoice_Box box. For exampleText choices[3];choices[1] = \"top\";choices[2] = \"middle\";choices[3] = \"bottom\";Choice_Box choice_box = Create_choice_box(\"Pick from list\",message);Set_data(choice_box,3,choices);Note: To be valid, any data typed into the Choice_Box information area must be from thechoices list. A function return value of zero indicates the nc'th data in the choices list was successfully set.",
      "id": "997"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Text &txt)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pit number pit and return theattribute value in txt.  The attribute must be of type Text. If the Element is not of type Drainage or the attribute is not of type Text then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_drainage_pit_attribute_type call can be used to get the type of the attribute calledatt_name. Drainage String Element ",
      "id": "995"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Text att_name, Uid &uid)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pit number pit and return theattribute value in uid.  The attribute must be of type Uid. If the Element is not of type Drainage or the attribute is not of type Uid then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2024"
    },
    {
      "names": [
        "Integer Get_drainage_pit_attribute(Element drain, Integer pit, Integer att_no, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute with number att_no for the pit number pit and return theattribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute with attributeDrainage String Element number att_no.",
      "id": "2027"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_name(Element drain, Integer p, Text &name)"
      ],
      "description": "Drainage String Element Get the pipe name for the pth pipe of the string Element drain. The pipe name is returned in Text name. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully returned.",
      "id": "497"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_top_width(Element drain, Integer pipe, Real &top_width)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and pipe number pipe, set the top widthof the pipe to the value top_width. If a top width is not to be used then set a null value for top_width. See Drainage Pipe Cross Sections. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the top width was successfully set. Drainage String Element ",
      "id": "2858"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_intersects_pit(Element drain, Integer pipe, Real offset, Real &lx, Real &ly, Real &lch, Real &rx, Real &ry, Real &rch)"
      ],
      "description": "For the Element drain, which must be of type Drainage, and for pipe number pipe, get the (x,y)coordinates and chainage of the intersection of the pipe offset (in the (x,y) pane) by the distanceoffset, with the pits at either end of the offset pipe. If offset is positive then the pipe is offset to the right of the original pipe, and to the left when theoffset is negative.  Left and right are defined with respect to the direction of the pipe. The coordinates of the intersection of the pipe with the left hand pit are returned as (lx,ly) and theDrainage String Element chainage of the intersection point as lch. The coordinates of the intersection of the pipe with the right hand pit are returned as (rx,ry) andthe chainage of the intersection point as rch. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the values were successfully returned.",
      "id": "2851"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_shape(Element element, Integer pipe, Integer mode, Dynamic_Element &super_inside, Dynamic_Element &super_outside)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return as super strings, the shape of theinsides of the pipes in the Dynamic_Element super_inside and the shape of the outsides of thepipes in the Dynamic_Element super_outside.  The number of pipes, separation and thicknesssettings are used in generating all the shapes. So this function returns a list of the super strings that \"cdraw\"d the plan view of the inside andoutside of the pipes. For a circular pipe with wall thickness, the super_inside string is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + 2*thickness). For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + left_thickness + right_thickness)mode controls the z values assigned to the super strings. If mode = 0, the shapes are given the z-value of the invert levels of the pipes. If mode = 1, the shapes are given the z-value of the centre levels of the pipes. If mode = 2, the shapes are given the z-value of the obvert levels of the pipes. A function return value of 2 indicates the super strings could not be created. A function return value of zero indicates the shapes were successfully returned.",
      "id": "2854"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_shape(Element drain, Integer pipe, Integer mode, Real offset, Element &super_inside, Element &super_outside)"
      ],
      "description": "For the Element drain, which must be of type Drainage, return the shape of the inside of pipenumber pipe as the super string super_inside and the shape of the outside of the pipe assuper_outside, and the shapes are offset in the (x,y) plane from the pipe by the distance offset. If offset is positive then the shapes are offset to the right of the pipe and to the left when theoffset is negative.  Left and right is defined with respect to the direction of the pipe. So this function returns a list of the super strings that \"cdraw\"d the plan view of the inside andoutside of the pipe offset by the given value offset. For for a circular pipe with a wall thickness, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + 2*thickness). For a rectangular pipe with a wall thicknesses, the super_inside is a super string with a plan boxshape with a width of the diameter of the pipe and a length equal to the length of the pipe.  Andsuper_outside has a width equal to (diameter + left_thickness + right_thickness)If mode = 0, the shapes are given the z-value of the invert levels of the pipe. If mode = 1, the shapes are given the z-value of the centre levels of the pipe. If mode = 2, the shapes are given the z-value of the obvert levels of the pipe. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the shapes were successfully returned. Note: the number of pipes and separation are not used for generating the shapes and offset isuse instead.  For generating shapes using number of pipes and separation, seeGet_drainage_pipe_shape(Element element,Integer pipe,Integer mode,Dynamic_Element&super_inside,Dynamic_Element &super_outside)",
      "id": "2850"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_type(Integer i, Text &type)"
      ],
      "description": "Get the name of the i'th pipe type (class) from the drainage. 4d file and return the name in type. A function return value of zero indicates the data was successfully returned.",
      "id": "2272"
    },
    {
      "names": [
        "Integer Get_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Attributes &att)"
      ],
      "description": "For the Element drain, get the attribute called att_name for the pipe number pipe and return theattribute value in att.  The attribute must be of type Attributes. If the Element is not of type Drainage or the attribute is not of type Attributes then a non-zeroreturn value is returned. Drainage String Element A function return value of zero indicates the attribute value is successfully returned. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2035"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Uid uid)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2038"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Attributes att)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "2039"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Text att_name, Real real)"
      ],
      "description": "Drainage String Element For the Element drain and on the pipe number pipe, if the attribute called att_name does not exist then create it as type Real and give it the valuereal.  if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributecalled att_name.",
      "id": "1033"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Integer int)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute with number att_no does not exist then create it as type Integer and give it thevalue int.  if the attribute with number att_no does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1035"
    },
    {
      "names": [
        "Integer Set_drainage_pipe_attribute(Element drain, Integer pipe, Integer att_no, Real real)"
      ],
      "description": "For the Element drain and on the pipe number pipe, if the attribute with number att_no does not exist then create it as type Real and give it thevalue real.  if the attribute with number att_no does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_drainage_pipe_attribute_type call can be used to get the type of the attributenumber att_no.",
      "id": "1036"
    },
    {
      "names": [
        "Integer Set_drainage_hc_adopted_level(Element drain, Integer hc, Real level)"
      ],
      "description": "For the drainage string drain, set the adopted level for the h'th house connection to level. A function return value of zero indicates the data was successfully set.",
      "id": "1302"
    },
    {
      "names": [
        "Integer Get_drainage_hc_adopted_level(Element drain, Integer h, Real &level)"
      ],
      "description": "Get the adopted level for the h'th house connection of the string Element drain. The adopted level of the house connection is returned in Real level. A function return value of zero indicates the data was successfully returned.",
      "id": "598"
    },
    {
      "names": [
        "Integer Set_drainage_hc_bush(Element drain, Integer hc, Text bush)"
      ],
      "description": "For the drainage string drain, set the bush type for the h'th house connection to bush. A function return value of zero indicates the data was successfully set.",
      "id": "1310"
    },
    {
      "names": [
        "Integer Get_drainage_hc_bush(Element drain, Integer h, Text &bush)"
      ],
      "description": "Get the bush type for the h'th house connection of the string Element drain. The bush type of the house connection is returned in Text bush. A function return value of zero indicates the data was successfully returned.",
      "id": "606"
    },
    {
      "names": [
        "Integer Set_drainage_hc_colour(Element drain, Integer hc, Integer colour)"
      ],
      "description": "For the drainage string drain, set the colour number for the h'th house connection to colour. A function return value of zero indicates the data was successfully set.",
      "id": "1307"
    },
    {
      "names": [
        "Integer Get_drainage_hc_colour(Element drain, Integer h, Integer &colour)"
      ],
      "description": "Get the colour for the h'th house connection of the string Element drain. The colour of the house connection is returned in Integer colour. A function return value of zero indicates the data was successfully returned.",
      "id": "603"
    },
    {
      "names": [
        "Integer Set_drainage_hc_depth(Element drain, Integer hc, Real depth)"
      ],
      "description": "For the drainage string drain, set the depth for the h'th house connection to depth. Drainage String Element A function return value of zero indicates the data was successfully set.",
      "id": "1305"
    },
    {
      "names": [
        "Integer Get_drainage_hc_depth(Element drain, Integer h, Real &depth)"
      ],
      "description": "Get the depth for the h'th house connection of the string Element drain. The depth of the house connection is returned in Real depth. A function return value of zero indicates the data was successfully returned.",
      "id": "601"
    },
    {
      "names": [
        "Integer Set_drainage_hc_diameter(Element drain, Integer hc, Real diameter)"
      ],
      "description": "For the drainage string drain, set the diameter for the h'th house connection to diameter. A function return value of zero indicates the data was successfully set.",
      "id": "1306"
    },
    {
      "names": [
        "Integer Get_drainage_hc_diameter(Element drain, Integer h, Real &diameter)"
      ],
      "description": "Get the diameter for the h'th house connection of the string Element drain. The diameter of the house connection is returned in Real diameter. A function return value of zero indicates the data was successfully returned.",
      "id": "602"
    },
    {
      "names": [
        "Integer Set_drainage_hc_grade(Element drain, Integer hc, Real grade)"
      ],
      "description": "For the drainage string drain, set the grade for the h'th house connection to grade. A function return value of zero indicates the data was successfully set.",
      "id": "1304"
    },
    {
      "names": [
        "Integer Get_drainage_hc_grade(Element drain, Integer h, Real &grade)"
      ],
      "description": "Get the grade for the h'th house connection of the string Element drain. The grade of the house connection is returned in Real grade. A function return value of zero indicates the data was successfully returned.",
      "id": "600"
    },
    {
      "names": [
        "Integer Set_drainage_hc_hcb(Element drain, Integer hc, Integer hcb)"
      ],
      "description": "For the drainage string drain, set the hcb for the h'th house connection to hcb. A function return value of zero indicates the data was successfully set.",
      "id": "1300"
    },
    {
      "names": [
        "Integer Get_drainage_hc_hcb(Element drain, Integer h, Integer &hcb)"
      ],
      "description": "Get the hcb for the h'th house connection of the string Element drain. The hcb of the house connection is returned in Integer hcb. A function return value of zero indicates the data was successfully returned.",
      "id": "596"
    },
    {
      "names": [
        "Integer Set_drainage_hc_length(Element drain, Integer hc, Real length)"
      ],
      "description": "For the drainage string drain, set the length for the h'th house connection to length. A function return value of zero indicates the data was successfully set.",
      "id": "1303"
    },
    {
      "names": [
        "Integer Get_drainage_hc_length(Element drain, Integer h, Real &length)"
      ],
      "description": "Get the length for the h'th house connection of the string Element drain. The length of the house connection is returned in Real length. A function return value of zero indicates the data was successfully returned. Drainage String Element ",
      "id": "599"
    },
    {
      "names": [
        "Integer Set_drainage_hc_level(Element drain, Integer hc, Real level)"
      ],
      "description": "For the drainage string drain, set the level for the h'th house connection to level. A function return value of zero indicates the data was successfully set.",
      "id": "1301"
    },
    {
      "names": [
        "Integer Get_drainage_hc_level(Element drain, Integer h, Real &level)"
      ],
      "description": "Get the level for the h'th house connection of the string Element drain. The level of the house connection is returned in Real level. A function return value of zero indicates the data was successfully returned.",
      "id": "597"
    },
    {
      "names": [
        "Integer Set_drainage_hc_material(Element drain, Integer hc, Text material)"
      ],
      "description": "For the drainage string drain, set the material for the h'th house connection to material. A function return value of zero indicates the data was successfully set.",
      "id": "1309"
    },
    {
      "names": [
        "Integer Get_drainage_hc_material(Element drain, Integer h, Text &material)"
      ],
      "description": "Get the material for the h'th house connection of the string Element drain. The material of the house connection is returned in Text material. A function return value of zero indicates the data was successfully returned.",
      "id": "605"
    },
    {
      "names": [
        "Integer Set_drainage_hc_name(Element drain, Integer hc, Text name)"
      ],
      "description": "For the drainage string drain, set the name for the h'th house connection to name. A function return value of zero indicates the data was successfully set.",
      "id": "1299"
    },
    {
      "names": [
        "Integer Get_drainage_hc_name(Element drain, Integer h, Text &name)"
      ],
      "description": "Get the name for the h'th house connection of the string Element drain. The name of the house connection is returned in Text name. A function return value of zero indicates the data was successfully returned.",
      "id": "595"
    },
    {
      "names": [
        "Integer Set_drainage_hc_side(Element drain, Integer hc, Integer side)"
      ],
      "description": "For the drainage string drain, set the side for the h'th house connection by the value of side. when side = -1, the house connection is on the left side of the string. when side = 1, the house connection is on the right side of the string. A function return value of zero indicates the data was successfully set.",
      "id": "1298"
    },
    {
      "names": [
        "Integer Get_drainage_hc_side(Element drain, Integer h, Integer &side)"
      ],
      "description": "Get the side for the h'th house connection of the string Element drain. The side of the house connection is returned in Integer side. If side = -1, the house connection is on the left side of the string. If side = 1, the house connection is on the right side of the string. A function return value of zero indicates the data was successfully returned.",
      "id": "594"
    },
    {
      "names": [
        "Integer Set_drainage_hc_type(Element drain, Integer hc, Text type)"
      ],
      "description": "For the drainage string drain, set the hc type for the h'th house connection to type. Drainage String Element A function return value of zero indicates the data was successfully set.",
      "id": "1308"
    },
    {
      "names": [
        "Integer Get_drainage_hc_type(Element drain, Integer h, Text &type)"
      ],
      "description": "Get the type for the h'th house connection of the string Element drain. The type of the house connection is returned in Text type. A function return value of zero indicates the data was successfully returned.",
      "id": "604"
    },
    {
      "names": [
        "Integer Get_drainage_hc_chainage(Element drain, Integer h, Real &chainage)"
      ],
      "description": "Get the chainage for the h'th house connection of the string Element drain. The chainage of the house connection is returned in Real chainage. A function return value of zero indicates the data was successfully returned.",
      "id": "592"
    },
    {
      "names": [
        "Integer Get_drainage_hc_ip(Element drain, Integer h, Integer &ip)"
      ],
      "description": "Get the intersect point for the h'th house connection of the string Element drain. The intersection point of the house connection is returned in Integer ip. ip is zero based (i. e.  the first ip = 0)A function return value of zero indicates the data was successfully returned.",
      "id": "593"
    },
    {
      "names": [
        "Integer Set_drainage_pc_name(Element element, Integer pc, Text name)"
      ],
      "description": "For the drainage string drain, set the name for the pc'th property control to Text name. A function return value of zero indicates the data was successfully set.",
      "id": "7688"
    },
    {
      "names": [
        "Integer Set_drainage_pc_colour(Element element, Integer pc, Integer colour)"
      ],
      "description": "For the drainage string drain, set the colour for the pc'th property control to Integer colour. A function return value of zero indicates the data was successfully set.",
      "id": "7689"
    },
    {
      "names": [
        "Integer Set_drainage_pc_grade(Element element, Integer pc, Real grade)"
      ],
      "description": "For the drainage string drain, set the grade for the pc'th property control to Real grade. A function return value of zero indicates the data was successfully set.",
      "id": "7690"
    },
    {
      "names": [
        "Integer Set_drainage_pc_cover(Element element, Integer pc, Real cover)"
      ],
      "description": "For the drainage string drain, set the cover for the pc'th property control to Real cover. A function return value of zero indicates the data was successfully set.",
      "id": "7691"
    },
    {
      "names": [
        "Integer Set_drainage_pc_start_level(Element element, Integer pc, Real start_level)"
      ],
      "description": "For the drainage string drain, set the start level for the pc'th property control to Real start_level. A function return value of zero indicates the data was successfully set.",
      "id": "7692"
    },
    {
      "names": [
        "Integer Set_drainage_pc_diameter(Element element, Integer pc, Real diameter)"
      ],
      "description": "For the drainage string drain, set the diameter for the pc'th property control to Real diameter. A function return value of zero indicates the data was successfully set. ",
      "id": "7693"
    },
    {
      "names": [
        "Integer Set_drainage_pc_boundary(Element element, Integer pc, Real boundary)"
      ],
      "description": "For the drainage string drain, set the boundary for the pc'th property control to Real boundary. A function return value of zero indicates the data was successfully set.",
      "id": "7694"
    },
    {
      "names": [
        "Integer Get_feature_centre(Element elt, Real &xc, Real &yc, Real &zc)"
      ],
      "description": "Get the centre point for Feature string given by Element elt. The centre of the Feature is (xc,yc,zc). A function return value of zero indicates the centre was successfully returned.",
      "id": "876"
    },
    {
      "names": [
        "Integer Get_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "For a Interface Element elt, get the (x,y,z,flag) data for max_pts points starting at the pointnumber start_pt. This routine allows the user to return the data from a Interface string in user specified chunks. This is necessary if the number of points in the string is greater than the size of the arraysavailable to contain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z,text) values at each string point are returned in the Real arrays x[], y[], z[] and Integerarray f[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Interface, then num_pts is returned as zero and the functionreturn value is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function. Interface String Element ",
      "id": "183"
    },
    {
      "names": [
        "Integer Set_interface_data(Element elt, Real x[], Real y[], Real z[], Integer f[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the Interface Element elt, set the (x,y,z,flag) data for num_pts points starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_ptrather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z,flag) values for the string points are given in the Real arrays x[], y[], z[] and Integerarray f[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type Interface, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new Interface Elements but only modify existing InterfaceElements.",
      "id": "186"
    },
    {
      "names": [
        "Integer Get_grid_range(Element elt, Integer &xmin, Integer &ymin, Integer &xmax, Integer &ymax)"
      ],
      "description": "Get the geometry the grid data of the Element elt with the origin point (origin_x,origin_y),spacing space_x, space_y in the x, y direction and with angle angle. Grid String and Grid Tin Element A return value of 10 indicates the Element elt does not have valid grid data. A return value of 0 indicates the grid data was set successfully.",
      "id": "2914"
    },
    {
      "names": [
        "Integer Grid_get_y_range(Element elt, Integer &count)"
      ],
      "description": "Get the number of cells in y-range of the grid data of the Element elt as Integer count. If the result is valid, it should be 1 less than the result of get points call. A return value of 10 indicates the Element elt does not have valid grid data. A return value of zero indicates the function call was successful. Grid String and Grid Tin Element ",
      "id": "2918"
    },
    {
      "names": [
        "Integer Grid_world_to_cell(Element elt, Real world_x, Real world_y, Real &cell_x, Real &cell_y)"
      ],
      "description": "Transform world coordinate (world_x, world_y) to cell coordinate (cell_x, cell_y) of the griddata of the Element elt. A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2920"
    },
    {
      "names": [
        "Integer Grid_cell_to_grid(Element elt, Real cell_x, Real cell_y, Real &grid_x, Real &grid_y)"
      ],
      "description": "Transform cell coordinate (cell_x, cell_y) of the grid data of the Element elt to grid coordinate(grid_x, grid_y). A return value of 10 indicates the Element elt does not have valid grid data. A return value of 11 indicates the transform failed. A return value of zero indicates the function call was successful.",
      "id": "2927"
    },
    {
      "names": [
        "Integer Get_face_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts)"
      ],
      "description": "Get the (x,y,z) data for the first max_pts vertices of the face Element elt. Face String Element The (x,y,z) values at each string vertex are returned in the Real arrays x[], y[] and z[]. The maximum number of vertices that can be returned is given by max_pts (usually the size ofthe arrays).  The vertex data returned starts at the first vertex and goes up to the minimum ofmax_pts and the number of vertices in the string. The actual number of vertices returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type face, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned.",
      "id": "78"
    },
    {
      "names": [
        "Integer Get_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts)",
        "Integer Set_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer num_pts)"
      ],
      "description": "Strings Replaced by Super Strings Get the (x,y,z) data for the first max_pts points of the pipe Element elt. The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[]. The maximum number of points that can be returned is given by max_pts (usually the size of thearrays).  The point data returned starts at the first point and goes up to the minimum of max_ptsand the number of points in the string. The actual number of points returned is returned by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type pipe, then num_pts is returned as zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned. Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts)Set the (x,y,z) data for the first num_pts points of the pipe Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z) values for each string point are given in the Real arrays x[], y[] and z[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type pipe, then nothing is modified and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new pipe Elements but only modify existing pipe Elements.",
      "id": "80"
    },
    {
      "names": [
        "Integer Get_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer max_pts, Integer &num_pts, Integer start_pt)",
        "Integer Set_pipe_data(Element elt, Real x[], Real y[], Real z[], Integer num_pts, Integer start_pt)",
        "Integer Get_pipe_data(Element elt, Integer i, Real &x, Real &y, Real &z)",
        "Integer Set_pipe_data(Element elt, Integer i, Real x, Real y, Real z)"
      ],
      "description": "For a pipe Element elt, get the (x,y,z) data for max_pts points starting at point number start_pt. This routine allows the user to return the data from a pipe string in user specified chunks. This is necessary if the number of points in the string is greater than the size of the arraysavailable to contain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z) values at each string point are returned in the Real arrays x[], y[] and z[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type pipe, then num_pts is set to zero and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function. Set_pipe_data(Element elt,Real x[],Real y[],Real z[],Integer num_pts,Integerstart_pt)For the pipe Element elt, set the (x,y,z) data for num_pts points, starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z) values for the string points are given in the Real arrays x[], y[] and z[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type pipe, then nothing is modified and the function return value is setto a non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new pipe Elements but only modify existing pipe Elements. Get_pipe_data(Element elt,Integer i, Real &x,Real &y,Real &z)Get the (x,y,z) data for the ith point of the string. The x value is returned in Real x. The y value is returned in Real y. The z value is returned in Real z. A function return value of zero indicates the data was successfully returned. Set_pipe_data(Element elt,Integer i,Real x,Real y,Real z)Strings Replaced by Super Strings Set the (x,y,z) data for the ith point of the string. The x value is given in Real x. The y value is given in Real y. The z value is given in Real z. A function return value of zero indicates the data was successfully set.",
      "id": "83"
    },
    {
      "names": [
        "Integer DRF_dimension_vertical_points_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring vertical distance between the start and endpoints of a Segment base_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dyA return value of zero indicates the function call was successful.",
      "id": "2962"
    },
    {
      "names": [
        "Integer DRF_dimension_rotated_segment_create(Text style_name, Text format_text, Segment base_segment, Real dx, Real dy, Real rotation_angle, Model &model, Element &out)"
      ],
      "description": "Create a new dimension as Element out measuring rotated distance between the start and endpoints of a Segment base_segment (and add to Model model if the model is valid). Drafting Elements Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and rotation angle rotation_angleA return value of zero indicates the function call was successful.",
      "id": "2965"
    },
    {
      "names": [
        "Integer DRF_dimension_length_fixoffset_create(Text style_name, Text format_text, Segment base_seg, Real dx, Real dy, Real fix_offset, Model &model, Element &out)"
      ],
      "description": "Create a new dimension with fixed offset as Element out measuring the length of a Segmentbase_segment (and add to Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionpoint dx dy; and fixed offset fix_offsetA return value of zero indicates the function call was successful.",
      "id": "2968"
    },
    {
      "names": [
        "Integer DRF_dimension_radial_create(Text style_name, Text format_text, Segment base_arc, Real dx, Real dy, Integer float_dim, Model &model, Element &out)"
      ],
      "description": "Create a dimension s Element out measuring the radius of an arc Segment base_arc (and addto Model model if the model is valid). Other input parameters: Text style_name; Text format_text; Real x-y coordinate of dimensionDrafting Elements point dx dyInteger float_dim indicating if the dimension if floating, 0 is no, 1 is yesA return value of zero indicates the function call was successful.",
      "id": "2971"
    },
    {
      "names": [
        "Integer DRF_dimension_edit_set_end(Element ref_string, Integer ref_ip, Real ref_ext, Element &drf_dim)"
      ],
      "description": "Set the end point of a dimension Element drf_dim with the associative point defined by thereference string ref_string, vertex index (or IP index) ref_ip and distance to the vertex ref_ext. A return value of zero indicates the function call was successful. Drafting Elements ",
      "id": "3900"
    },
    {
      "names": [
        "Integer DRF_dimension_style_property(Text style_name, Text property_name, Text &value)"
      ],
      "description": "Get the Text value of the property property_name of a dimension style with given namestyle_name. If there is no dimension style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3475"
    },
    {
      "names": [
        "Integer DRF_get_leader_arrow(Element leader, Real &arrow_x, Real &arrow_y)"
      ],
      "description": "Get the arrow point xy-coordinate arrow_x arrow_y of a leader Element leaderA return value of zero indicates the function call was successful.",
      "id": "3088"
    },
    {
      "names": [
        "Integer DRF_get_leader_styles(Dynamic_Text &styles)"
      ],
      "description": "Set the list of texts styles with the names of all leader styles in the current project. A return value of zero indicates the function call was successful.",
      "id": "3379"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative_segment(Text style_name, Text format_text, Integer type, Text ref_ele_name, Uid ref_ele_id, Text ref_mod_name, Uid ref_mod_id, Text ref_part_name, Integer ref_ip, Real ref_ext, Integer ref_method, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association segment belongs to a string with name and id ref_ele_name ref_ele_id withinthe containing models ref_mod_name ref_mod_id - the looking up method for the element isdetermined by Integer ref_method - not yet used. Within the given string, the segment is located using ref_part_name (only when the string is asuper alignment with named parts), or segment number ref_ip, the distance of the arrow to thestart of the segment ref_ext. The list of valid association (Integer) type is4Segment_Length_Type,5Segment_Length_3d_Type6Segment_Bearing_Type7Segment_Length_Bearing_Type,8Segment_Radius_Type11Segment_Text_Type,,,, segment text or segment attributes of a super stringOther input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3880"
    },
    {
      "names": [
        "Integer DRF_leader_create_associative(Text style_name, Text format_text, Integer type, Text ref_tin, Real ax, Real ay, Real hx, Real hy, Element &out_leader)"
      ],
      "description": "Create a new accociative leader as Element out_leader . The association is defined by the arrow point coordinate ax ay and reference tin ref_tin (if thetype involves tin). The location of the arrow is automatically set at the centroid or centre of the selected elementThe list of valid association (Integer) type is17Tin_Level_Type,25Tin_Aspect_Type,26Tin_Colour_Type,27Tin_Slope_1_In_Type28Tin_Slope_Percent_Type29XYZ_Type30XY_Type,,,,Other input parameters: Text style_name; Text format_text; Real x-y coordinate for hook pointhx hyA return value of zero indicates the function call was successful.",
      "id": "3894"
    },
    {
      "names": [
        "Integer DRF_table_edit_cell(Integer row, Integer column, Real value, Element &table)"
      ],
      "description": "Edit a cell of a drafting Element table at given row number row, column number column with thenew value Real valueA return value of one indicates the number row or column is out of bound. A return value of zero indicates the function call was successful.",
      "id": "3061"
    },
    {
      "names": [
        "Integer DRF_table_get_number_row_column(Element table, Integer &nr, Integer &nc)"
      ],
      "description": "Get the number of rows nr and the number of columns nc of a drafting Element table.  Note thatthe header and title row (if used) are not counted in nr. A return value of zero indicates the function call was successful. Drafting Elements ",
      "id": "3095"
    },
    {
      "names": [
        "Integer DRF_table_get_rotation(Element table, Real &rotation)"
      ],
      "description": "Get the rotation angle of a drafting Element table. A return value of zero indicates the function call was successful.",
      "id": "3207"
    },
    {
      "names": [
        "Integer DRF_table_style_property(Text style_name, Text property_name, Text &value)"
      ],
      "description": "Get the Text value of the property property_name of a table style with given name style_name. If there is no table style of given name, the return value is 1. This function is under on going development process. A return value of zero indicates the function call was successful.",
      "id": "3472"
    },
    {
      "names": [
        "Integer DRF_set_override_value(Element &drf, Text name, Text value)"
      ],
      "description": "Set the Text value of the override of given name in a drafting element drf. If the input is not a drafting element, the return value is 1. If name is not a valid override field name, the return value is 9 for leader; 10 for table; 11 fordimension. If the override of the given name is not of Text type, the return value is 16. A return value of zero indicates the function call was successful.",
      "id": "3469"
    },
    {
      "names": [
        "Integer Trimesh_number_of_edges(Element e, Integer &number_edges)"
      ],
      "description": "Get the number of edges number_edges of a trimesh Element trimesh. A return value of zero indicates the function call was successful.",
      "id": "3525"
    },
    {
      "names": [
        "Integer Trimesh_get_triangle_points_coords(Element trimesh, Integer triangle_index, Integer &p1_index, Integer &p2_index, Integer &p3_index, Real &x1, Real &y1, Real &z1, Real &x2, Real &y2, Real &z2, Real &x3, Real &y3, Real &z3)"
      ],
      "description": "Get three point indices p1_index p2_index p3_index of the triangle with index triangle_indexof a trimesh Element trimesh; and also the xyz-coordinate of the three point x1 y1 z1, x2 y2 z2,Trimesh Element x3, y3, z3. The points p1_index, p2_index and p3_index are in a counter clockwise order around thetriangle.  See 5. 51 Trimesh ElementPlan Viewp1_indexp2_indexnormal pointingoutp3_indexA return value of zero indicates the function call was successful.",
      "id": "3009"
    },
    {
      "names": [
        "Integer Trimesh_get_face_colour(Element trimesh, Integer face_index, Integer &colour)"
      ],
      "description": "Get the colour of a face with index face_index of a trimesh Element trimesh. Trimesh Element A return value of zero indicates the function call was successful.",
      "id": "3032"
    },
    {
      "names": [
        "Integer Trimesh_section(Element trimesh, Real point_x, Real point_y, Real point_z, Real point_direction, Real point_grade, Real width, Real height, Integer &internal_return, Integer &result_closed, Integer &size_section_points, Dynamic_Real &section_xs, Dynamic_Real &section_ys, Dynamic_Real &section_world_xs, Dynamic_Real &section_world_ys, Dynamic_Real &section_world_zs, Dynamic_Integer &section_edge_indexes, Dynamic_Text &section_edge_names, Dynamic_Integer &section_edge_colours, Dynamic_Integer &section_vertex_indexes, Dynamic_Text &section_vertex_names, Dynamic_Integer &section_vertex_colours)"
      ],
      "description": "Section through the trimesh using a given 3D rectangle. The centre of the rectangle is given by the X-Y-Z coordinate (point_x, point_y, point_z).  Therotation angle of the rectangle in the X-Y plane (in radian anticlockwise from the X-axis) is givenby point_direction.  The tilt angle of the rectangle in relative to the Z-axis (in radian) is given bypoint_grade.  The sizes of the rectangle are given by width and height. Integer internal_return might give some indication why the sectioning failed, the list of valuesare given bellow. Trimesh Element If the sectioning is a closed cut, then result_closed is 1; and 0 otherwise. The number of points of the result sectioning is given in size_section_points. The last 11 parameters are details about those sectioning points.  All of them should be list withexactly size_section_points items in each.  The first items on those list are information about thefirst point of the sectioning; and the second items on those list are information about the secondpoint of the sectioning; and so forth. section_xs, section_ys: x-y-coordinate of the section points on the section plane (where theorigin is of the world coordinate (point_x, point_y, point_z)). section_world_xs, section_world_ys, section_world_zs: world x-y-z-coordinate of thesection pointssection_edge_indexes: if none zero, then it is the edge index of the trimesh edge that thesection point is in; and then the names and colours of those edge are given insection_edge_names and section_edge_colours. section_vertex_indexes: if none zero, then it is the vertex index of the trimesh vertex that thesection point is in; and then the names and colours of those vertices are given insection_vertex_names and section_vertex_colours. A return value of 0 indicates the function call was successful. A return value of 1 indicates Element trimesh is not a trimesh nor a trimesh reference. A return value of 2 indicates Element trimesh is not valid. A return value of -1, -2, -3, or -4 indicates there are internal error with the Element trimesh. A return value of 12 indicates the sectioning was not successful.  The Integer internal_returncoming from the list might indicate the reason. 0 Ok,1 Not A Vertical Section,2 Null Data,3 Non Manifold,4 Not Closed,5 Not Connected,6 No Intersection,7 Partial Intersection,8 Multiple Intersection,9 Unknown,",
      "id": "3208"
    },
    {
      "names": [
        "Integer Trimesh_set_face_infos_flags(Element e, Dynamic_Integer colours, Dynamic_Text names, Dynamic_Integer flags)"
      ],
      "description": "Replace all the face information in a trimesh e with new details from two lists colours, names. The two list must be of the same sizes or the function returns 5. Also set all the infomation index of all faces to the values in the list flags, if the size of flags isdifferent from the number of faces in the trimesh, the function returns 6. If any index in the list flags is not valid, the function returns 7; a valid index can be 0 (meaning noinformation used for that face) or any value in the range 1 to the size of colours. A return value of zero indicates the function call was successful.",
      "id": "3495"
    },
    {
      "names": [
        "Integer Trimesh_append_vertex_info(Element e, Integer colour, Text name)"
      ],
      "description": "Append a new information item with given colour and name to the end of the vertex informationlist of a trimesh e. A return value of zero indicates the function call was successful. Trimesh Element ",
      "id": "3767"
    },
    {
      "names": [
        "Integer Trimesh_edit_move_edge(Element e, Integer i, Real x, Real y, Real z, Text &error)"
      ],
      "description": "Move the xyz coordinates of the two ends of the edge with index i of a trimesh element e by(dx,dy,dz)The Text error would be set to the corresponding error message if the function failed. Trimesh Element A return value of zero indicates the function call was successful.",
      "id": "3506"
    },
    {
      "names": [
        "Integer Trimesh_edit_hide_vertex(Element e, Integer i, Text &error)"
      ],
      "description": "Hide the vertex with index i of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. ",
      "id": "3510"
    },
    {
      "names": [
        "Integer Trimesh_edit_remove_vertices(Element e, Dynamic_Integer is, Text &error)"
      ],
      "description": "Remove the vertices with indices given by the list is of a trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3519"
    },
    {
      "names": [
        "Integer Trimesh_edit_add_face(Element e, Integer i, Integer j, Integer k, Text &error)"
      ],
      "description": "Add a new the face with the three corners as vertices with indices i,j,k to the trimesh element e. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. Trimesh Element ",
      "id": "3523"
    },
    {
      "names": [
        "Integer Trimesh_boolean_difference(Element trimesh1, Element trimesh2, Integer keep_vertex_info, Integer keep_edge_info, Integer keep_face_info, Text output_trimesh_name, Integer output_trimesh_colour, Element &trimesh_out, Text &error)"
      ],
      "description": "Find the boolean difference between trimesh1 and trimesh2 and assign the result to (trimesh)Element trimesh_out.  The name output_trimesh_name and the colouroutput_trimesh_colour will be used for the result.  The result trimesh will also keep the vertices,edges, faces information of the original trimeshes if the respective values of keep_vertex_info,keep_edge_info, keep_face_info are non zero. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3804"
    },
    {
      "names": [
        "Integer Get_trimesh_collapsing_faces(Element trimesh, Integer faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "A face of a trimesh is called collapsing if its area is zero, in another word the normal vector of acollapsing face is undefined. Get all the collapsing faces of a simple trimesh Element trimesh and assign the total number toInteger faces_count and the list of face indices to Dynamic_Integer face_indices. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful. ",
      "id": "3810"
    },
    {
      "names": [
        "Integer Get_trimesh_surrounding_faces(Element trimesh, Real tolerance, Integer &patches_count, Dynamic_Integer &patch_sizes, Integer &faces_count, Dynamic_Integer &face_indices, Text &error)"
      ],
      "description": "Get all the surrounding faces of a simple trimesh Element trimesh based on given toleranceand assign the total number to Integer faces_count and the list of face indices toDynamic_Integer face_indices.  These indices are grouped into continuous patches, the numberof patches is returned in patches_count, and the sizes for indivisual patches are returned inpatch_sizes. For example: faces_count = 8 and face_indices = { 1,3, 5,9,6, 12,13,7 }patches_count = 3 and patch_sizes = {3, 2, 3}. There are 8 surrounding faces which are grouped into 3 patches, the first patch contains threetriangles {1,3,5}, the second patch contains two triangles {9,6}, and the third patch contain threetriangles {13,7}. The Text error would be set to the corresponding error message if the function failed. A return value of zero indicates the function call was successful.",
      "id": "3829"
    },
    {
      "names": [
        "Integer Trimesh_get_furthest_point(Element trimesh, Real xp, Real yp, Real zp, Real &x, Real &y, Real &z, Real &off, Integer &face, Integer &edge, Integer &vertex)"
      ],
      "description": "Get the furthest drop point from given 3d point (xp,yp,zp) to a given trimesh.  The coordinate ofthe result is returned as Real numbers (x,y,z); the offset distance is returned in Real off; the facenumber, edge number and vertex number of the drop point are returned in Integer face, edgeand vertex. A return value of zero indicates the function call was successful.",
      "id": "7709"
    },
    {
      "names": [
        "Integer Get_plot_frame_margins(Element elt, Real &l, Real &b, Real &r, Real &t)"
      ],
      "description": "Get the sheet margins of the plot frame in Element elt. The left margin value is returned in Real l. The bottom margin value is returned in Real b. The right margin value is returned in Real r. The top margin value is returned in Real t. Plot Frame Element A function return value of zero indicates the data was successfully returned.",
      "id": "614"
    },
    {
      "names": [
        "Integer Set_plot_frame_name(Element elt, Text name)"
      ],
      "description": "Set the name of the plot frame in Element elt. The name value is defined in Text name. A function return value of zero indicates the data was successfully set.",
      "id": "626"
    },
    {
      "names": [
        "Integer Set_plot_frame_sheet_size(Element elt, Real w, Real h)"
      ],
      "description": "Set the sheet size of the plot frame in Element elt. The width value is defined in Real w. The height value is defined in Real h. A function return value of zero indicates the data was successfully set. Plot Frame Element ",
      "id": "630"
    },
    {
      "names": [
        "Integer Set_plot_frame_draw_border(Element elt, Integer draw_border)"
      ],
      "description": "Set the draw border of the plot frame in Element elt. The draw border flag is defined in Integer draw_border. A function return value of zero indicates the data was successfully set. ",
      "id": "634"
    },
    {
      "names": [
        "Integer Set_plot_frame_title_2(Element elt, Text title_2)"
      ],
      "description": "Set the second title line of the plot frame in Element elt. The title line value is defined in Text title_2. A function return value of zero indicates the data was successfully set.",
      "id": "642"
    },
    {
      "names": [
        "Integer Set_2d_data(Element elt, Real x[], Real y[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the 2d Element elt, set the (x,y) data for num_pts points starting at point number start_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. Strings Replaced by Super Strings The (x,y) values for the string points are given in the Real arrays x[] and y[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type 2d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new 2d Elements but only modify existing 2d Elements.  ",
      "id": "72"
    },
    {
      "names": [
        "Element Create_3d(Integer num_pts, Element seed)"
      ],
      "description": "Strings Replaced by Super Strings Create an Element of type 3d with room for num_pts (x,y) points, and set the colour, name, styleetc.  of the new string to be the same as those from the Element seed. The actual x, y and z values of the 3d string are set after the string is created. If the 3d string could not be created, then the returned Element will be null.",
      "id": "666"
    },
    {
      "names": [
        "Element Create_4d(Integer num_pts)"
      ],
      "description": "Create an Element of type 4d with room for num_pts (x,y,z,text) points. The actual x, y, z and text values of the 4d string are set after the string is created. If the 4d string could not be created, then the returned Element will be null. Strings Replaced by Super Strings ",
      "id": "450"
    },
    {
      "names": [
        "Integer Set_4d_data(Element elt, Real x[], Real y[], Real z[], Text t[], Integer num_pts, Integer start_pt)"
      ],
      "description": "For the 4d Element elt, set the (x,y,z,text) data for num_pts points, starting at point numberstart_pt. This function allows the user to modify a large number of points of the string in one call starting atpoint number start_pt rather than point one. The maximum number of points that can be set is given by the difference between the number ofpoints in the string and the value of start_pt. The (x,y,z,text) values for the string points are given in the Real arrays x[], y[], z[] and Text arrayt[]. The number of the first string point to be modified is start_pt. The total number of points to be set is given by Integer num_ptsIf the Element elt is not of type 4d, then nothing is modified and the function return value is set toa non-zero value. A function return value of zero indicates the data was successfully set. Notes(a) A start_pt of one gives the same result as the previous function. (b) This function can not create new 4d Elements but only modify existing 4d Elements.",
      "id": "88"
    },
    {
      "names": [
        "Integer Set_4d_textstyle_data(Element elt, Textstyle_Data d)"
      ],
      "description": "For the Element elt of type 4d, set the Textstyle_Data to be d. Setting a Textstyle_Data means that all the individual values that are contained in theTextstyle_Data are set rather than having to set each one individually. If the value is blank in the Textstyle_Data d then the value in the 4d string would be leftunchanged. A non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates the Textstyle_Data was successfully set.",
      "id": "1667"
    },
    {
      "names": [
        "Integer Set_4d_size(Element elt, Real size)"
      ],
      "description": "Set the size of the characters of the 4d text of the Element elt. Strings Replaced by Super Strings The text size is given as Real size. A function return value of zero indicates the data was successfully set.",
      "id": "442"
    },
    {
      "names": [
        "Integer Set_4d_angle(Element elt, Real angle)"
      ],
      "description": "Set the angle of rotation (in radians) about each 4d point (x,y) of the text of the 4d Element elt. The angle is given as Real angle. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "445"
    },
    {
      "names": [
        "Integer Set_4d_angle3(Element elt, Real angle3)"
      ],
      "description": "Set the 3D gamma angle of rotation (in radians) about each 4d point (x,y) of the text of the 4dElement elt. Strings Replaced by Super Strings The angle is given as Real angle3. A function return value of zero indicates the data was successfully set.",
      "id": "3574"
    },
    {
      "names": [
        "Integer Set_4d_rise(Element elt, Real rise)"
      ],
      "description": "Set the rise distance of the text to be used for each 4d point (x,y) for the 4d Element elt. The rise is given as Real rise. For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the data was successfully set.",
      "id": "444"
    },
    {
      "names": [
        "Integer Set_4d_ttf_strikeout(Element elt, Integer strikeout)"
      ],
      "description": "For the Element elt of type 4d, set the strikeout state to strikeout. If strikeout = 1, then for a true type font the text will be strikeout. If strikeout = 0, then text will not be strikeout. For a diagram, see 5. 9 Textstyle Data. A non-zero function return value is returned if elt is not of type 4d. Strings Replaced by Super Strings A function return value of zero indicates strikeout was successfully set.",
      "id": "2589"
    },
    {
      "names": [
        "Integer Get_4d_ttf_weight(Element elt, Integer &weight)"
      ],
      "description": "For the Element elt of type 4d, get the font weight and return it in weight. Allowable WeightsThe allowable numbers for weight are:0 = FW_DONTCARE100 = FW_THIN200 = FW_EXTRALIGHT300 = FW_LIGHT400 = FW_NORMAL500 = FW_MEDIUM600 = FW_SEMIBOLD700 = FW_BOLD800 = FW_EXTRABOLD900 = FW_HEAVYNote that in the distributed file set_ups. h these are defined as:#define FW_DONTCARE#define FW_THIN#define FW_EXTRALIGHT#define FW_LIGHT#define FW_NORMAL#define FW_MEDIUM#define FW_SEMIBOLD#define FW_BOLD#define FW_EXTRABOLD#define FW_HEAVY#define FW_ULTRALIGHT#define FW_REGULAR#define FW_DEMIBOLD#define FW_ULTRABOLD#define FW_BLACK0100200300400500600700800900FW_EXTRALIGHTFW_NORMALFW_SEMIBOLDFW_EXTRABOLDFW_HEAVYA non-zero function return value is returned if elt is not of type 4d. A function return value of zero indicates weight was successfully returned.",
      "id": "2587"
    },
    {
      "names": [
        "Integer Get_4d_whiteout(Element element, Integer &colour)"
      ],
      "description": "For the 4d Element elt, get the colour number that is used for the whiteout box around vertextext.  The whiteout colour is returned as Integer colour. NO_COLOUR is the returned as the colour number if whiteout is not being used. Note: The colour number for \"view colour\" is VIEW_COLOUR (or 2147483647 - that is 0x7fffffff). For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully returned.",
      "id": "2749"
    },
    {
      "names": [
        "Integer Set_4d_border_style(Element element, Integer style)"
      ],
      "description": "For the 4d Element elt, set the border style of the whiteout box around vertex text, according toInteger style. 12345for rectanglefor circlefor capsulefor bevelfor triangle 1 (pointed at top)Strings Replaced by Super Strings 6789101112for triangle 2 (flat line on top)for pentagon 1 (pointed at top)for pentagon 2 (flat line on top)for hexagon 1 (pointed at top)for hexagon 2 (flat line on top)for octagon 1 (pointed at top)for octagon 2 (flat line on top)For a diagram, see 5. 9 Textstyle Data. A function return value of zero indicates the colour number was successfully set.",
      "id": "3575"
    },
    {
      "names": [
        "Integer Set_pipe_justify(Element elt, Integer justify)"
      ],
      "description": "Set the justification used for the text parameter of the pipe Element elt. The justification is given as Integer justify. A function return value of zero indicates the data was successfully set.",
      "id": "680"
    },
    {
      "names": [
        "Integer Get_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer max_pts, Integer &num_pts, Integer start_pt)"
      ],
      "description": "Strings Replaced by Super Strings For a polyline Element elt, get the (x,y,z,r,f) data for max_pts points starting at point numberstart_pt. This routine allows the user to return the data from a polyline string in user specified chunks.  Thisis necessary if the number of points in the string is greater than the size of the arrays available tocontain the information. As in the previous function, the maximum number of points that can be returned is given bymax_pts (usually the size of the arrays). However, for this function, the point data returned starts at point number start_pt rather thanpoint one. The (x,y,z,r,f) values at each string point are returned in the Real arrays x[], y[], z[], r[] and f[]. The actual number of points returned is given by Integer num_ptsnum_pts <= max_ptsIf the Element elt is not of type Polyline, then num_pts is set to zero and the function returnvalue is set to a non-zero value. A function return value of zero indicates the data was successfully returned. NoteA start_pt of one gives the same result as for the previous function.",
      "id": "484"
    },
    {
      "names": [
        "Integer Set_polyline_data(Element elt, Real x[], Real y[], Real z[], Real r[], Integer f[], Integer num_pts)"
      ],
      "description": "Set the (x,y,z,r,f) data for the first num_pts points of the polyline Element elt. This function allows the user to modify a large number of points of the string in one call. The maximum number of points that can be set is given by the number of points in the string. The (x,y,z,r,f) values for each string point are given in the Real arrays x[], y[], z[], r[] and f[]. The number of points to be set is given by Integer num_ptsIf the Element elt is not of type Polyline, then nothing is modified and the function return value isset to a non-zero value. A function return value of zero indicates the data was successfully set. NoteThis function can not create new Polyline Elements but only modify existing Polyline Elements.",
      "id": "486"
    },
    {
      "names": [
        "Integer Append_hip(Element elt, Real x, Real y)"
      ],
      "description": "Append a horizontal intersection point (hip) with plan co-ordinates (x,y) to the Element eltAlignment String Element .  The radius and spiral lengths are set to zero. The order in which the hips are appended is taken as the order of the hips in the Alignmentstring. The hips must be appended in order of increasing chainage along the Alignment string. Append_hip is used to place the first hip as well as the subsequent hips. A function return value of zero indicates that the hip was successfully appended.",
      "id": "93"
    },
    {
      "names": [
        "Integer Set_hip_data(Element elt, Integer i, Real x, Real y)"
      ],
      "description": "Modify the plan co-ordinates (x,y) of the ith hip point of the Alignment string elt.  The existingcurve radius and spiral lengths are not altered. The ith hip point must already exist. A function return value of zero indicates the hip was successfully set. Alignment String Element ",
      "id": "104"
    },
    {
      "names": [
        "Integer Insert_hip(Element elt, Integer i, Real x, Real y, Real rad)"
      ],
      "description": "Insert a new hip with plan co-ordinates (x,y) and curve radius rad before the existing ith hippoint. The spiral lengths are set to zero. The inserted hip becomes the ith hip and the position of all subsequent hip's increases by one. If i is greater than number of hips, then the new hip is appended to the string. If i is less than one, then the new hip is prepended to the string. A function return value of zero indicates the hip was inserted successfully.",
      "id": "108"
    },
    {
      "names": [
        "Integer Set_vip_data(Element elt, Integer i, Real ch, Real ht, Real value, Integer mode)"
      ],
      "description": "Modify the chainage-height co-ordinates (ch,ht) and the curve length value, for the i'th vip pointof the Alignment string elt. If mode = 0 or 1, the curve is set to be a parabolic vertical curveIf mode = 2, the curve is set to be a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates the vip data was successfully returned.",
      "id": "117"
    },
    {
      "names": [
        "Integer Insert_vip(Element elt, Integer i, Real ch, Real ht)"
      ],
      "description": "Insert a new vip with chainage-height co-ordinates (ch,ht) before the existing i'th vip point. The parabolic curve length is set to zero. The inserted vip becomes the ith vip and the position of all subsequent vips increases by one. If i is greater than number of vips, then the new vip is appended to the string. If i is less than one, then the new vip is prepended to the string. A function return value of zero indicates that the vip was successfully inserted.",
      "id": "118"
    },
    {
      "names": [
        "Integer Insert_vip(Element elt, Integer i, Real ch, Real ht, Real value, Integer mode)"
      ],
      "description": "Insert a new vip with chainage-height co-ordinates (ch,ht) and curve length value before theexisting i'th vip point. The inserted vip becomes the ith vip and the position of all subsequent vips increases by one. If i is greater than number of vips, then the new vip is appended to the string. If i is less than one, then the new vip is prepended to the string. If mode = 0 or 1, the curve is set to be a parabolic vertical curveIf mode = 2, the curve is set to be a circular vertical curveA curve length of zero indicates no curve is present. A function return value of zero indicates that the vip was successfully inserted.",
      "id": "120"
    },
    {
      "names": [
        "Integer Get_vip_geom(Element elt, Integer vip_no, Integer mode, Real &chainage, Real &height)"
      ],
      "description": "Return the chainage and height co-ordinates of the critical points (tangent points, curve centre)for vertical intersection point number vip_no of the Alignment string elt. The type of critical point (chainage,height) returned is given by mode and depends on the type ofthe vip. The following table gives the description of the returned co-ordinates (chainage,height) andstates whether the mode is applicable or not for the given VIP type (Y means applicable, Nmeans not applicable). VIP TypeModeReturned co-ordinateVIPVCCurve0VIP co-ordsYYY1start tangentNY TCY TC2end tangentNY CTY CT3curve centreNNYA function return value of zero indicates that the vip information was successfully returned andthat the mode was appropriate for the VIP type of the vip number vip_no.",
      "id": "396"
    },
    {
      "names": [
        "Integer Get_length(Element string, Real &length)"
      ],
      "description": "Get the plan length of the Element string (which equals the end chainage minus the startchainage) and return the plan length in length. A function return value of zero indicates the plan length was successfully returned.",
      "id": "122"
    },
    {
      "names": [
        "Integer Loop_clean(Element elt, Point ok_pt, Element &new_elt)"
      ],
      "description": "This routine tries to remove any plan loops in the Element elt. If elt is closed, then the function assumes that the Point ok_pt is near a segment of the stringthat will also be in the cleaned string. If elt is open, then the function starts cleaning from the end of the string closest to the Pointok_pt. The cleaned Element is returned as Element new_elt. A function return value of zero indicates the clean was successful. NoteLoop_clean is not defined for the Elements of type Alignment, Arc, Circle and Text",
      "id": "329"
    },
    {
      "names": [
        "Integer Valid_attribute_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid attribute name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingCreating Valid Names spaces being removed.",
      "id": "2280"
    },
    {
      "names": [
        "Integer Valid_symbol_name(Text old_name, Text &valid_name)"
      ],
      "description": "Convert the Text old_name to a valid symbol name by substituting spaces for any illegalcharacters in old_name; leading and trailing spaces in the new name also being removed.  Thenew name is returned in valid_name. A function return the number of characters being substitued if there is no leading nor trailingspaces being removed.",
      "id": "2282"
    },
    {
      "names": [
        "Integer Get_number_of_nodes(XML_Node node)"
      ],
      "description": "XML This call returns the number of children nodes for the given nodes.  A node may contain 0 or morechildren.",
      "id": "2423"
    },
    {
      "names": [
        "Integer Get_node_name(XML_Node node, Text &name)"
      ],
      "description": "This call will retrieve the name of a supplied node and store it in the name argument. The name of a node is the value within the brackets or tags.  In the following example, MyNode isthe name of the node. <MyNode>1234</MyNode>This call will return 0 if successful. XML ",
      "id": "2433"
    },
    {
      "names": [
        "Integer Get_node_attributes(XML_Node node, Integer &attributes_count, Dynamic_Text &names, Dynamic_Text &values)"
      ],
      "description": "XML Count the number of attributes attributes_count of an XML_Node nodeOutput the list of attribute names to namesOutput the list of attribute values to valuesA return value of zero indicates the function call was successful.",
      "id": "3057"
    },
    {
      "names": [
        "Integer Write_XML(Model model, Text filename, Integer precision, Integer output_model_name, Integer bool_flags, Real null_value)"
      ],
      "description": "Open the file called filename, and write the 12d XML of all the Elements in the Model model tothe file.  Any coordinates and Reals are written out to precision decimal places. If output_model_name = 1 then write the name of model out to the file before the Elements. If output_model_name = 0 then don't write out the Model name. For Integer bool_flags see 5. 17. 4. 2 Write_Panel_Flags. Just for this macro call, there is an extra bit in the bool_flags of value 1048576.  When this bit ison, then a valid 12D XML header and the corresponding closing tag will also be added to theoutput file to form a valid 12D XML file. Null values will be written as Real null_value. A function return value of zero indicates the data was successfully written.",
      "id": "3199"
    },
    {
      "names": [
        "Integer XSD_get_type_enumerations(Text xsd, Text schema, Text frag_path, Dynamic_Text &enums, Text &elem_type)"
      ],
      "description": "XML Get the enumerations for a simple or primitive type in the Text schema of file named Text xsd. The list of enumerations is returned to Dynamic_Text enums. The type of the enumeration list is returned to Text elem_types. A return value of zero indicates the function call was successful. The list of values for XSF primitive typeTextBooleanIntegerDoubleFloatDurationDate_TimeTimeDate",
      "id": "2953"
    },
    {
      "names": [
        "Integer Map_file_open(Text file_name, Text prefix, Integer use_ptline, Map_File &file)"
      ],
      "description": "Open up a mapping file to read. The file unit is returned as Map_file file. The prefix of models is given as Text prefix. The string type is given as Integer use_ptline,0 \"3 point string1 \"3 line sting. A function return value of zero indicates the file was opened successfully.",
      "id": "865"
    },
    {
      "names": [
        "Integer Map_file_get_key(Map_File file, Integer n, Text &key, Text &name, Text &model, Integer &colour, Integer &ptln, Text &style)"
      ],
      "description": "Get nth key's data from a mapping file. The file is given in Map_file file. The key is returned in Text key. The string name is returned in Text name. The model name is returned in Text model. The string colour is returned in Integer colour. The string type is returned in Integer ptln. The string style is returned in Text style. A function return value of zero indicates the key was returned successfully.",
      "id": "870"
    },
    {
      "names": [
        "Integer Map_file_find_key(Map_File file, Text key, Integer &number)"
      ],
      "description": "Find the record number from a mapping file that contains the given key. The file unit is given in Map_file file. The record number is returned in Integer number. A function return value of zero indicates the key was find successfully.",
      "id": "871"
    },
    {
      "names": [
        "Integer Read_project_settings_file(Text project_settings_filename)"
      ],
      "description": "Read a project settings file (.12dsettings) into the current project. A function return value of zero indicates the file was read successfully.",
      "id": "3731"
    },
    {
      "names": [
        "Integer Colour_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area of the Macro Console and then read backtext from the user reply area of the Macro Console as the name of a 12d Model colour. If LB is clicked on the colour choice icon at the right hand end of the user reply area, a list of allexisting colours is placed in a pop-up.  If a colour is selected from the pop -up (using LB), thecolour name is written to the user reply area. The reply, either typed or selected from the colour pop-up, is then terminated by pressing<Enter>. information/error message areaprompt message areacolour choice iconuser reply areacolour choice pop upIf the text is a valid colour then a function return value of zero is returned and the colour name isreturned in ret. If the text is not a valid colour name, then the message Error - invalid colour is written to theinformation message area and a non-zero function return value is returned. information/error message areaA function return value of zero indicates the Text ret is a valid colour name and is successfullyChapterreturned.",
      "id": "404"
    },
    {
      "names": [
        "Integer File_prompt(Text msg, Text wild_card_key, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the folder icon at the right hand end of the user reply area, a list of all files inMacro Console the current area which match the wild_card_key (for example, *. dat) is placed in a pop-up.  If afile is selected from the pop-up (using LB), the file name is placed in the user reply area. If a name is entered without a dot ending (e. g.  fred and not fred. csv say) then the ending after thedot in the wild_card_key is automatically added to the name. For example, if wild_card_key = \"*. rpt\" and \"fred\" is type in as the file name, then ret will bereturned as ret = \"fred. rpt\". The reply, either typed or selected from the file pop-up, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "405"
    },
    {
      "names": [
        "Integer Template_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. ChapterIf LB is pressed on the icon at the right hand end of the user reply area, a list of all existingtemplates is placed in a pop-up.  If a template is selected from the pop-up (using LB), thetemplate name is placed in the user reply area. The reply, either typed or selected from the template popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the text is returned successfully.",
      "id": "403"
    },
    {
      "names": [
        "Integer Tin_prompt(Text msg, Integer mode, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the tin icon at the right hand end of the user reply area, a list of all existing tinsis placed in a pop-up.  If a tin is selected from the pop-up (using LB), the Tin name is placed in theuser reply area. The value of mode determines whether Super Tins are listed in the pop-up. Mode0Don't list SuperTin. 1List SuperTin. The reply, either typed or selected from the Tin pop-up, must be terminated by pressing <Enter>for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "684"
    },
    {
      "names": [
        "Integer Textstyle_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the textstyle icon at the right hand end of the user reply area, a list of allexisting textstyles is placed in a pop-up.  If a textstyle is selected from the pop-up (using LB), thetextstyle name is placed in the user reply area. The reply, either typed or selected from the textstyle popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. Macro Console A function return value of zero indicates the Text ret is returned successfully.",
      "id": "820"
    },
    {
      "names": [
        "Integer Function_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the function icon at the right hand end of the user reply area, a list of allexisting 12d Model Functions is placed in a pop-up.  If a Function is selected from the pop-up(using LB), the Function name is placed in the user reply area. The reply, either typed or selected from the Function popup, must be terminated by pressingChapter<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "823"
    },
    {
      "names": [
        "Integer Text_units_prompt(Text msg, Text &ret)"
      ],
      "description": "Print the message msg to the prompt message area and then read back a Text from the userreply area of the Macro Console. If LB is clicked on the choice icon at the right hand end of the user reply area, a list of all existingText units is placed in a pop-up.  If a Text_units is selected from the pop-up (using LB), the TextMacro Console units name is placed in the user reply area. The reply, either typed or selected from the Text_units popup, must be terminated by pressing<Enter> for the macro to continue. The reply is returned in Text ret. A function return value of zero indicates the Text ret is returned successfully.",
      "id": "826"
    },
    {
      "names": [
        "Integer Panel_prompt(Text panel_name, Integer interactive, Integer no_field, Text field_name[], Text field_value[])"
      ],
      "description": "ChapterPop up a panel of the name panel_name. No_field specifies how many fields you wish to fill in for the panel. The name of each field is specified in Field_name array. The value of each field is specified in field_value array. If interactive is 1, the panel is displayed and remains until the finish button is selected. If interactive is 0, the panel is displayed, runs the option and then closes. A function return value of zero indicates success. See example Defining and Using Panel_prompt",
      "id": "685"
    },
    {
      "names": [
        "Integer Panel_prompt(Text panel_name, Integer interactive, Text data)"
      ],
      "description": "Pop up a panel of the name panel_name. Data specifies the SLF or SLX content.  Note, SLF content is deprecated and only for compatibiltypurposes.  Where a panel has been changed, the SLF content may no longer work.  See exampleMacro Console below:For SLF based dataIf interactive is 1, the panel is displayed and remains until the finish button is selected. If interactive is 0, the panel is displayed, runs the option and then closes. For SLX based dataIf interactive is 0xff01, the panel is displayed and remains until the finish button is selected. If interactive is 0xff00, the panel is displayed, runs the option and then closes. A function return value of zero indicates success. See example Defining and Using Panel_prompt",
      "id": "2068"
    },
    {
      "names": [
        "Panel Create_panel(Text title_text, Integer sizing_enable)"
      ],
      "description": "Panels and Widgets Same as the above function, this function also creates a panel with the title title_text, but with anextra parameter sizing_enable to control the user resizing.  The resulting panel is resizable onlyif sizing_enable is not zero. The function return value is the created Panel.",
      "id": "3791"
    },
    {
      "names": [
        "Integer Set_border(Horizontal_Group group, Integer bx, Integer by)"
      ],
      "description": "Set a gap around the border of the Horizontal_Group group. bx sets the left and right side gap around the border. by sets the top and bottom side gap around of the border. The units of bx and by are screen units (pixels). A function return value of zero indicates the border gap was successfully set. ChapterHorizontal_Group of two Buttonswith default border gapsand text \"Buttons\"Horizontal_Group of two Buttonswith border gaps bx =10 and by = 20and text \"Buttons\"",
      "id": "858"
    },
    {
      "names": [
        "Integer Set_border(Vertical_Group group, Text text)"
      ],
      "description": "Set a border of the Vertical_Group group with Text text. on the top left side of the border.  If text isblank, the border is removed. ChapterA function return value of zero indicates the border was successfully set. The tins are a Vertical_Group of4 Widgets with no borderThe same Vertical_Group of 4 Widgetswith border and text \"Tins\"Note that for the left and right gaps thatthe width of the panel doesn't changebut the gap from the sides of the panelto the box is increased",
      "id": "1099"
    },
    {
      "names": [
        "Integer Set_border(Vertical_Group group, Integer bx, Integer by)"
      ],
      "description": "Set a gap around the border of the Vertical_Group group. bx sets the left and right side gap around the border. by sets the top and bottom side gap around of the border. The units of bx and by are screen units (pixels). A function return value of zero indicates the border gap was successfully set. Vertical_Group of 4 Widgetswith default border gapsand text \"Tins\"Vertical_Group of 4 Widgetswith border gaps bx =10 and by = 20and text \"Tins\"Note that for the left and right gaps thatthe width of the panel doesn't changebut the gap from the sides of the panelto the box is increasedPanels and Widgets ",
      "id": "859"
    },
    {
      "names": [
        "Integer Set_sizing_constraints(Widget widget, Integer horizontal_mode, Integer vertical_mode)"
      ],
      "description": "Set the horizontal_mode and vertical_mode of the sizing constraints for given Widget widget. Meaning of the sizing constraint modes0 Sizing_Balance_Resize balance the widgets over the available space (and set them to be thesame size)1 Sizing_Balance_No_Resize balance the widgets over the available space (and keep themtheir original size)2 Sizing_Fill fill the widgets to entirely fill the available spaceChapter3 Sizing_Fill_No_Resize size to fill the available space, but don't resize after that4 Sizing_Original keep the widgets in their original size and location5 Sizing_Default do whatever the container wants to doA function return value of zero indicates the sizing constraints was successfully set.",
      "id": "3823"
    },
    {
      "names": [
        "Integer Use_browse_button(Widget widget, Integer mode)"
      ],
      "description": "Set whether the browse button is available for Widget widget. If mode = 1 use the browse buttonif mode = 0 don't use the browse button. The default value for a Widget is mode = 1. If the browse button is not used, the space where the button would be, is removed. Note: This call must be made before the Panel that contains the widget is shown. A function return value of zero indicates the value was valid. Browse button of a WidgetUse_browse_button mode = 1Use_browse_button mode = 0",
      "id": "1095"
    },
    {
      "names": [
        "Integer Show_browse_button(Widget widget, Integer mode)"
      ],
      "description": "This calls you to show or hide the browse button for the Widget widget. If mode = 1 show the browse buttonif mode = 0 don't show the browse button. The default value for a Widget is mode = 1. This call can be made after the Widget has been added to a panel and allows the Browse buttonof the Widget to be turned on and off under the programmers control. Note if Use_browse_button was called with a mode of 0 then this call is ineffective.  SeeUse_browse_button(Widget widget,Integer mode)A function return value of zero indicates the mode was successfully set. Browse Button ofthe Tin_Box WidgetShow_browse_button mode = 1Show_browse_button mode = 0",
      "id": "1096"
    },
    {
      "names": [
        "Integer Set_visible(Widget widget, Integer mode)"
      ],
      "description": "Set the visible mode for the Widget widget. Ifmode = 1mode = 0the widget is visible, and not displayed on the panelthe widget is not visible and not displayed. Even if the widget is invisible, it still takes the same space on a panel. The default value for a Widget is visible.  That is, mode = 1. A function return value of zero indicates the visibility was successfully set. Panels and Widgets Widget is visibleSet_visible mode = 1Widget is invisibleSet_visible mode = 0Space is still left wherethe Widget is even thoughit is invisible",
      "id": "1614"
    },
    {
      "names": [
        "Integer Get_name(Widget widget, Text &text)"
      ],
      "description": "Get the title text from the Widget widget. ChapterA function return value of zero indicates the text was returned successfully.",
      "id": "1327"
    },
    {
      "names": [
        "Integer Show_widget(Widget widget)"
      ],
      "description": "Show the Widget widget at the cursor's current position. Note: The call Show_widget(Widget widget,Integer x,Integer y) allows you to give the screencoordinates to position the Widget.  See Show_widget(Widget widget,Integer x,Integer y). A function return value of zero indicates the widget was shown successfully.",
      "id": "855"
    },
    {
      "names": [
        "Integer Hide_widget(Widget widget)"
      ],
      "description": "Hide the Widget widget.  That is, don't display the Widget on the screen. Note the Widget still exists but it is not visible on the screen.  The Widget will appear again bycalling Show_widget.  See Show_widget(Widget widget). A function return value of zero indicates the widget was hidden successfully.",
      "id": "856"
    },
    {
      "names": [
        "Integer Set_size(Widget widget, Integer x, Integer y)"
      ],
      "description": "ChapterSet the size in screen units (pixels) of the Widget widget with the width x and height y. The type of x and y must be Integer. A function return value of zero indicates the size was successfully set.",
      "id": "1365"
    },
    {
      "names": [
        "Integer Get_help(Widget widget, Integer &help_num)"
      ],
      "description": "Get the help number for Widget widget and return it in help_num. Panels and Widgets The type of help must be integer. A function return value of zero indicates the help number was successfully returned. Note: See 5. 61. 13. 4 Help Button for creating a Help button that allows the macro to access the12d Model Extra Help system.",
      "id": "1313"
    },
    {
      "names": [
        "Integer Set_help(Widget widget, Text help_message)"
      ],
      "description": "For the Widget widget, the help message for widget is set to help_message. This help message will be sent back to 12d Model via Wait_on_widgets(Integer &id,Text&cmd,Text &msg) with command cmd equal to \"cHelp\"d, and msg equal to help_message. So a sample bit of code to handle help isWait_on_widgets(id,cmd,msg);if (cmd == \"cHelp\"d) {;Winhelp(panel,\"12d. hlp\",'a',msg);// in the Winhelp file 12d. hlp,// find and display the a table entry msgcontinue;}A function return value of zero indicates the text was successfully set.",
      "id": "1314"
    },
    {
      "names": [
        "Integer Winhelp(Widget widget, Text help_file, Integer table, Text key)"
      ],
      "description": "Calls the Windows help system to display the key from the named table of the help file help_file. table takes the form \"8a', \"8k' etc.  The Windows help file help_file must exist and be in a locationthat can be found. A function return value of zero indicates the function was successful.",
      "id": "1317"
    },
    {
      "names": [
        "Widget_Pages Create_widget_pages()"
      ],
      "description": "A Widget_Pages object allows a number of controls to exist in the same physical location on adialog.  This is very handy if you want a field to change between a Model_Box, View_Box or the like. The function return value is the created Widget_pages.",
      "id": "1243"
    },
    {
      "names": [
        "Integer Set_page(Widget_Pages pages, Integer n)"
      ],
      "description": "Show (display on the screen) the n'th page of the Widget_Pages pages. Note the \"n'th page\" is the n'th widget appended to the Widget_Pages pages. All the controls associated with the n'th page_no are shown. A function return value of zero indicates the page was successfully set. Chapter",
      "id": "1245"
    },
    {
      "names": [
        "Integer Get_page(Widget_Pages pages, Widget widget, Integer &page_no)"
      ],
      "description": "For the Widget_Pages pages, get the page number of the page containing the Widget widget. Note the \"n'th page\" of a Widget_Pages is the n'th widget appended to the Widget_Pages. The page n umber is returned as page_no. A function return value of zero indicates the page number was successfully returned.",
      "id": "1607"
    },
    {
      "names": [
        "Integer Validate(Billboard_Box box, Text &result)"
      ],
      "description": "Validate the contents of Billboard_Box box and return the name of the billboard in Text result. The function returns the value of:NO_NAME if the Widget Billboard_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and result is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return valuesChapter",
      "id": "1872"
    },
    {
      "names": [
        "Integer Get_data(Bitmap_Fill_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Bitmap_Fill_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Chapter",
      "id": "1882"
    },
    {
      "names": [
        "Integer Get_data(Chainage_Box box, Text &text_data)"
      ],
      "description": "Panels and Widgets Get the data of type Text from the Chainage_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned.",
      "id": "2205"
    },
    {
      "names": [
        "Integer Set_data(Choice_Box box, Text text_data)"
      ],
      "description": "ChapterSet the data of type Text for the Choice_Box box to text_data. A function return value of zero indicates the data was successfully set.",
      "id": "892"
    },
    {
      "names": [
        "Colour_Box Create_colour_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type Colour_Box.  See 5. 61. 10. 8 Colour_Box. The Colour_Box is created with the title title_text. Panels and Widgets The Message_Box message is normally the message box for the panel and is used to displayColour_Box validation messages. The function return value is the created Colour_Box.",
      "id": "894"
    },
    {
      "names": [
        "Integer Validate(Date_Time_Box box, Real &data)"
      ],
      "description": "Validate the contents of Date_Time_Box box and return the time in Real data as the number ofseconds elapsed since midnight (00:00:00), January 1, 1601, Coordinated Universal Time(UTC). The function returns the value of:NO_NAME if the Widget Date_Time_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and data is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Panels and Widgets Warning this is the opposite of most 12dPL function return values",
      "id": "2288"
    },
    {
      "names": [
        "Integer Get_data(Date_Time_Box box, Integer &integer_data)"
      ],
      "description": "Get the data of type Integer from the Date_Time_Box box and return it in integer_data as thenumber of seconds elapsed since midnight (00:00:00), January 1, 1970, Coordinated UniversalTime (UTC). A function return value of zero indicates the data was successfully returned. Chapter",
      "id": "2284"
    },
    {
      "names": [
        "Integer Set_colour(Draw_Box box, Integer r, Integer g, Integer b)"
      ],
      "description": "For the Draw_Box box, set the drawing colour for following line work to have the an rgb colour. ChapterThe colour is given in rgb which requires three Integers with values between 0 and 255, oneeach for red, green and blue. The red, green and blue values are given in r, g and b respectively. A function return value of zero indicates the set was successful.",
      "id": "1343"
    },
    {
      "names": [
        "Integer Draw_text(Draw_Box box, Real x, Real y, Real size, Real angle, Text txt)"
      ],
      "description": "ChapterIn the Draw_Box box, draw the text txt at the position (x,y) where the coordinates (x,y) are in theDraw_Box's coordinate system. The text has size size (in pixels), and the rotation angle of angle radians. If Draw_text is called before a Start_batch_draw (box) call is made, then the Draw_text fails anda non-zero function return value is returned. A function return value of zero indicates the text was successfully drawn.",
      "id": "1345"
    },
    {
      "names": [
        "File_Box Create_file_box(Text title_text, Message_Box message, Integer mode, Text wild)"
      ],
      "description": "Create an input Widget of type File_Box for inputting and validating files. The File_Box is created with the title title_text (see File_Box ). The Message_Box message is normally the message box for the panel and is used to displayFile_Box validation messages. If <enter> is typed into the File_Box, automatic validation is performed by the File_Box according tomode.  What the validation is, what messages are written to Message_Box, and what actionsautomatically occur, depend on the value of mode. For example,CHECK_FILE_NEW20 // if the file doesn't exists, the message says \"will be created\"// if it exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see File Mode ). If LB is clicked on the icon at the right hand end of the File_Box, a list of the files in the current areawhich match the wild card text wild (for example, *. dat) Is placed in a pop-up.  If a file is selectedfrom the pop-up (using LB), the file name is placed in the information area of the File_Box andvalidation performed according to mode. The function return value is the created File_Box. Special Note:#include \"set_ups. h\" must be in the macro code to define CHECK_FILE_NEW etc.",
      "id": "906"
    },
    {
      "names": [
        "Integer Set_many(File_Box box, Integer mode)"
      ],
      "description": "Set the Text_Edit_Box box to support many files if mode is non-zero, disable it otherwise. Panels and Widgets A function return value of zero indicates that the function call was successful.",
      "id": "1547"
    },
    {
      "names": [
        "Integer Get_encoding(File_Box box, Integer &encoding)"
      ],
      "description": "Get file encoding for File_Box box to Integer encoding. A return value of zero indicates the function call was successful. List of value for file encoding0 Native1 Ansi2 Unicode3 Unicode Little EndianChapter4 Unicode Big Endian5 UTF_86 UTF-16_Little_Endian",
      "id": "2948"
    },
    {
      "names": [
        "Integer Set_data(Linestyle_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Linestyle_Box box to text_data. ChapterA function return value of zero indicates the data was successfully set.",
      "id": "924"
    },
    {
      "names": [
        "Integer Set_selection_list(List_Box box, Integer maxc, Integer list[], Integer do_select)"
      ],
      "description": "For the items of the List_Box box of indices from the first maxc number in the list:If do_select is zero, unselect those item. Panels and Widgets If do_select is non-zero, select those item. If the List_Box box does not allow multiple selection, the function fails with return code one. A return value of zero indicates the function call was successful.",
      "id": "1292"
    },
    {
      "names": [
        "Model_Box Create_model_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Model_Box for inputting and validating Models. The Model_Box is created with the title title_text (see Model_Box ). The Message_Box message is normally the message box for the panel and is used to displayModel_Box validation messages. If <enter> is typed into the Model_Box automatic validation is performed by the Model_Box accordingto mode.  What the validation is, what messages are written to Message_Box, and what actionsautomatically occur, depend on the value of mode. For example,CHECK_MODEL_MUST_EXIST7 // if the model exists, the message says \"exists\".  // if it doesn't exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see Model Mode ). If LB is clicked on the icon at the right hand end of the Model_Box, a list of all existing models is placedin a pop-up.  If a model is selected from the pop-up (using LB), the model name is placed in theinformation area of the Model_Box and validation performed according to mode. MB for \"Same As\" also applies.  That is, If MB is clicked in the information area and then a string froma model on a view is selected, then the name of the model containing the selected string is written tothe information area and validation performed according to mode. The function return value is the created Model_Box. Special Note:#include \"set_ups. h\" must be in the macro code to define CHECK_MODEL_MUST_EXIST etc.",
      "id": "848"
    },
    {
      "names": [
        "Integer Validate(Model_Box box, Integer mode, Model &result)"
      ],
      "description": "Validate the contents of the Model_Box box and return the Model result. ChapterThe value of mode will determine what validation occurs, what messages are written to theMessage_Box, what actions are taken and what the function return value is. The values for mode and the actions are listed in Appendix A (see Model Mode). The function return value depends on mode and are given in Appendix A (see Model Mode). A function return value of zero indicates that there is a drastic error. Warning this is the opposite of most 12dPL function return valuesDouble Warning: most times the function return code is not zero even when you think it shouldbe.  The actual value of the function return code must be checked to see what is going on.  Forexample, when mode = CHECK_MODEL_MUST_EXIST will return NO_MODEL if the modelname is not blank and no model of that name exist (NO_MODEL does not equal zero).",
      "id": "880"
    },
    {
      "names": [
        "Named_Tick_Box Create_named_tick_box(Text title_text, Integer state, Text response)"
      ],
      "description": "Create an input Widget of type Named_Tick_Box.  See 5. 61. 10. 23 Named_Tick_Box. The Named_Tick_Box is created with the Text title_text. The Integer state specifies the ticked/unticked state of the box:state = 0set the box as untickedPanels and Widgets state = 1set the box as tickedThe Text response returns the msg when calling the Wait_on_widgets function. The function return value is the created Named_Tick_Box.",
      "id": "849"
    },
    {
      "names": [
        "Integer Set_data(Named_Tick_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Named_Tick_Box box to text_data. A function return value of zero indicates the data was successfully set. Chapter",
      "id": "975"
    },
    {
      "names": [
        "Integer Validate(New_Select_Box select, Element &string)"
      ],
      "description": "Validate the contents of New_Select_Box select and return the selected Element in string. The function returns the value of:NO_NAME if the Widget New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return valuesPanels and Widgets ",
      "id": "2241"
    },
    {
      "names": [
        "Integer Get_data(New_Select_Box select, Text &model_string)"
      ],
      "description": "ChapterGet the model and string name of the Element in the New_Select_Box box and return it in Textmodel_string. Note: the model and string name is in the form \"model_name model_id string_name string_id\"with tab separating so only one Text is required. A function return value of zero indicates the data was successfully returned.",
      "id": "2245"
    },
    {
      "names": [
        "Integer Set_select_type(New_Select_Box select, Text type)"
      ],
      "description": "Set the string selection type type for the New_Select_Box select.  For example \"cAlignment\"d, \"c3d\"d. A function return value of zero indicates the type was successfully set.",
      "id": "3776"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(New_Select_Box select, Integer snap_control)"
      ],
      "description": "Set the snap control for the New_Select_Box select to snap_control. snap_controlcontrol valueIgnore_SnapUser_Snap=0=1Panels and Widgets Program_Snap=2A function return value of zero indicates the snap control was successfully set.",
      "id": "3777"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(New_Select_Box select, Integer snap_mode, Integer snap_control, Text snap_text)"
      ],
      "description": "Set the snap mode snap_mode and snap control snap_control for the New_Select_Boxselect. Where snap_mode is:Failed_Snap = -1No_Snap=0Point_Snap=1Line_Snap=2Grid_Snap=3Intersection_Snap = 4Cursor_Snap=5Name_Snap=6Tin_Snap=7Model_Snap=8Height_Snap=9Segment_Snap= 11Text_Snap= 12Fast_Snap= 13Fast_Accept= 14and snap_control isIgnore_Snap=0User_Snap=1Program_Snap = 2The snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\"c\"d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "3778"
    },
    {
      "names": [
        "Integer Set_select_direction(New_Select_Box select, Integer dir)"
      ],
      "description": "Set the selection direction dir for the New_Select_Box select. Dir ValuePick direction1-1the direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully set. Chapter",
      "id": "3779"
    },
    {
      "names": [
        "New_XYZ_Box Create_new_xyz_box(Text title_text, Message_Box message)"
      ],
      "description": "Create an input Widget of type New_XYZ_Box.  See 5. 61. 10. 25 New_XYZ_Box. The New_XYZ_Box is created with the title title_text. The Message_Box message is normally the message box for the panel and is used to displayNew_XYZ_Box validation messages. The function return value is the created New_XYZ_Box. Panels and Widgets ",
      "id": "2252"
    },
    {
      "names": [
        "Integer Set_data(New_XYZ_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the New_XYZ_Box box to text_data. A function return value of zero indicates the data was successfully set. Chapter",
      "id": "2256"
    },
    {
      "names": [
        "Integer Set_data(Plotter_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Plotter_Box box to text_data. A function return value of zero indicates the data was successfully set. Chapter",
      "id": "936"
    },
    {
      "names": [
        "Integer Validate(Polygon_Box select, Element &string, Integer silent)"
      ],
      "description": "Validate the contents of Polygon_Box select and return the selected Element in string. If silent = 0, and there is an error, a message is written and the cursor goes back to thePolygon_Box. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:NO_NAME if the Widget Polygon_Box is optional and the box is left emptyChapterTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "2248"
    },
    {
      "names": [
        "Integer Set_allow_holes(Polygon_Box select, Integer allow)"
      ],
      "description": "Panels and Widgets Set the property of allowing polygon with holes for Polygon_Box select with the value of allow. A function return value of zero indicates the property was successfully changes.",
      "id": "3801"
    },
    {
      "names": [
        "Integer Set_data(Real_Box box, Real real_data)"
      ],
      "description": "Set the data of type Real for the Real_Box box to real_data. A function return value of zero indicates the data was successfully set. Chapter",
      "id": "904"
    },
    {
      "names": [
        "Integer Validate(Select_Box select, Element &string, Integer silent)"
      ],
      "description": "Validate the Element string in the Select_Box select. If silent = 0, and there is an error, a message is written and the cursor goes back to the box. If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of SELECT_STRING indicates the string is selected successfully. Panels and Widgets ",
      "id": "1376"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Box select, Text type)"
      ],
      "description": "Set the string selection type type for the Select_Box select.  For example \"cAlignment\"d, \"c3d\"d. A function return value of zero indicates the type was successfully set.",
      "id": "1048"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Box select, Integer snap_mode, Integer snap_control, Text snap_text)"
      ],
      "description": "Set the snap mode snap_mode and snap control snap_control for the Select_Box select. Where snap_mode is:Failed_Snap = -1No_Snap=0Point_Snap=1Line_Snap=2Grid_Snap=3Intersection_Snap = 4Cursor_Snap=5Name_Snap=6Panels and Widgets Tin_SnapModel_SnapHeight_SnapSegment_SnapText_SnapFast_SnapFast_Accept=7=8=9= 11= 12= 13= 14and snap_control isIgnore_Snap=0User_Snap=1Program_Snap = 2The snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\"c\"d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "1045"
    },
    {
      "names": [
        "Integer Validate(Select_Boxes select, Integer n, Element &string)"
      ],
      "description": "Validate the nth Element string in the Select_Boxes select. The function returns the value of:NO_NAME if the n'th box of the New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "984"
    },
    {
      "names": [
        "Integer Validate(Select_Boxes select, Integer n, Element &string, Integer silent)"
      ],
      "description": "Validate the nth Element string in the Select_Boxes select. If silent = 0, and there is an error, a message is written and the cursor goes back to the box. Panels and Widgets If silent = 1 and there is an error, no message or movement of cursor is done. The function returns the value of:NO_NAME if the n'th box of the New_Select_Box is optional and the box is left emptyTRUE (1) if no other return code is needed and string is valid. FALSE (zero) if there is an error. So a function return value of zero indicates that there is an error. Warning this is the opposite of most 12dPL function return values",
      "id": "1377"
    },
    {
      "names": [
        "Integer Set_data(Select_Boxes select, Integer n, Text model_string)"
      ],
      "description": "Set the Element of the n'th box in the Select_Boxes select by giving the model name and stringname as a Text model_string in the form \"model_name->string_name\". A function return value of zero indicates the data was successfully set.",
      "id": "985"
    },
    {
      "names": [
        "Integer Set_data(Select_Boxes select, Integer n, Element string)"
      ],
      "description": "Set the data of type Element for the n'th box in the Select_Boxes select to string. A function return value of zero indicates the data was successfully set.",
      "id": "1175"
    },
    {
      "names": [
        "Integer Get_data(Select_Boxes select, Integer n, Text &model_string)"
      ],
      "description": "Get the model and string name of the Element in the n'th box of the Select_Boxes select.  andreturn it in the Text model_string,Note: the model and string name is in the form \"model_name->string_name\" so only one Text isrequired. A function return value of zero indicates the data was successfully returned.",
      "id": "986"
    },
    {
      "names": [
        "Integer Select_start(Select_Boxes select, Integer n)"
      ],
      "description": "Starts the string selection for the n'th box of the Select_Boxes select.  This is the same as if thebutton on the n'th box of Select_Boxes had been clicked. A function return value of zero indicates the start was successful.",
      "id": "1171"
    },
    {
      "names": [
        "Integer Select_end(Select_Boxes select, Integer n)"
      ],
      "description": "Cancels the string selection that is running for the n'th box of the Select_Boxes n'th box of theSelect_Boxes select.  This is the same as if Cancel had been selected from the Pick Ops menu. A function return value of zero indicates the end was successful.",
      "id": "1172"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Boxes select, Integer n, Text type)"
      ],
      "description": "Set the string selection for the n'th box of the Select_Boxes select to type.  For example\"cAlignment\"d, \"c3d\"d. A function return value of zero indicates the type was successfully set.",
      "id": "1053"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Boxes select, Integer n, Integer control)"
      ],
      "description": "Set the snap control for n'th box of the Select_Boxes select to control. snap controlIgnore_SnapUser_SnapProgram_Snapcontrol value02A function return value of zero indicates the snap control was successfully set.",
      "id": "1054"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Boxes select, Integer n, Integer snap_mode, Integer snap_control, Text Panels and Widgets  snap_text)"
      ],
      "description": "Set the snap mode mode and snap control snap_control for the nth box of the Select_Boxesselect. When snap mode is:Name_SnapTin_SnapModel_Snap678the snap_text must be string name; tin name, model name respectively, otherwise, leave thesnap_text blank (\"c\"d). A function return value of zero indicates the snap mode was successfully set.",
      "id": "1055"
    },
    {
      "names": [
        "Integer Set_select_direction(Select_Boxes select, Integer n, Integer dir)"
      ],
      "description": "Set the selection direction dir of the string selected for the n'th box of the Select_Boxes select. The input dir type must be Integer. Dir Value1-1Pick directionthe direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully set.",
      "id": "1449"
    },
    {
      "names": [
        "Integer Get_select_direction(Select_Boxes select, Integer n, Integer &dir)"
      ],
      "description": "Get the selection direction dir of the string selected for the n'th box of the Select_Boxes select. The returned dir type must be Integer. If select without direction, the returned dir is 1, otherwise, the returned dir is:Dir Value1-1Pick directionthe direction of the stringagainst the direction of the stringA function return value of zero indicates the direction was successfully returned.",
      "id": "1056"
    },
    {
      "names": [
        "Integer Set_select_coordinate(Select_Boxes select, Integer n, Real x, Real y, Real z, Real ch, Real ht)"
      ],
      "description": "Get the coordinate, chainage and height of the snap point of the string selected for the n'th boxof the Select_Boxes select. The input value of x, y, z, ch, and ht are of type of Real. A function return value of zero indicates the coordinate was successfully set.",
      "id": "1450"
    },
    {
      "names": [
        "Integer Get_select_coordinate(Select_Boxes select, Integer n, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Get the coordinate, chainage and height of the snap point of the string selected for the n'th boxof the Select_Boxes select. The return value of x, y, z, ch, and ht are of type of Real. A function return value of zero indicates the coordinate was successfully returned.",
      "id": "1057"
    },
    {
      "names": [
        "Integer Set_data(Sheet_Size_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Sheet_Size_Box box to text_data. A function return value of zero indicates the data was successfully set. Chapter",
      "id": "948"
    },
    {
      "names": [
        "Slider_Box Create_slider_box(Text name, Integer width, Integer height, Integer min_value, Integer max_value, Integer tick_interval, Integer horizontal)"
      ],
      "description": "Create an input Widget of type Slider_Box.  See 5. 61. 10. 34 Slider_Box. The Slider_Box can be horizontal or vertical. Panels and Widgets If horizontal = 1 then the Slider_Box is horizontal. If horizontal = 0 then the Slider_Box is vertical. The range of values returned by the Slider_Box are specified by a minimum value (min_val)which is when the slider is at the left of a horizontal Slider_Box, or the top for a verticalSlider_Box, and a maximum value (max_range) which is reached when the slider is at the rightof a horizontal Slider_Box, or at the bottom of a vertical Slider_Box. min_value must be less than max_val. Tick marks are drawn at the interval given by tick_interval on the bottom of a horizontal slider, ofto the right of a vertical slider. The slider box is created with a width width and height height where the width and height aregiven in screen units (pixels). The function return value is the created Slider_Box. Note: the height for a horizontal Slider_Box or the width for a vertical Slider_Box should be atleast 30 or there will be no room to display the slider and tick marks.",
      "id": "2706"
    },
    {
      "names": [
        "Source_Box Create_source_box(Text title_text, Message_Box box, Integer flags)"
      ],
      "description": "Create an input Widget of type Source_Box which is used to define how to select data.  See5. 61. 10. 35 Source_Box. The Source_Box is created with the title \"Data \" followed by title_text. What Data Source Choices are displayed and hence available to select, is controlled by flags.  iIf flags = 0, then all the choices are displayed. ModelViewStringRectangleTrapezoidPolygonLassoFilterModelsFavouritesAllFence insideFence crossFence outsideFence stringFence pointsFence allSource_Box_Model =Source_Box_View =Source_Box_String =Source_Box_Rectangle =Source_Box_Trapezoid =Source_Box_Polygon =Source_Box_Lasso =Source_Box_Filter =Source_Box_Models =Source_Box_Favorites =Source_Box_All =Source_Box_Fence_Inside =Source_Box_Fence_Cross =Source_Box_Fence_Outside =Source_Box_Fence_String =Source_Box_Fence_Points =Source_Box_Fence_All =0x001 = 10x002 = 20x004 = 40x008 = 80x010 = 160x0200x0400x0800x1000x2000xfff0x010000x020000x040000x080000x100000xff000Source_Box_All | Source_Box_Fence_Inside |  Source_Box_Fence_Outside | Source_Box_Fence_Cross |Source_Box_Fence_StringYou can have just some of them by combining the ones you want with |. For exampleSource_Box_Model | Source_Box_ViewSource_Box_Standard =The Message_Box message is used to display information. The function return value is the created Source_Box.",
      "id": "1675"
    },
    {
      "names": [
        "Integer Read_favorite(Source_Box box, Text filename)"
      ],
      "description": "For the Source_Box box, read in and set the Source_Box selection from the file namedfilename. Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to besaved, and passed around between different Source_Box's. A function return value of zero indicates filename was read and the Source_Box wassuccessfully set.",
      "id": "2158"
    },
    {
      "names": [
        "Integer Write_favorite(Source_Box box, Text filename)"
      ],
      "description": "For the Source_Box box, write out the Source_Box selection information to the file namedfilename. Note: the Read_favourite and Write_favourite calls allow Source_Box selection settings to besaved, and passed around between different Source_Box's. A function return value of zero indicates the file was successfully written.",
      "id": "2159"
    },
    {
      "names": [
        "Integer Get_data(Symbol_Box box, Text &text_data)"
      ],
      "description": "Get the data of type Text from the Symbol_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Panels and Widgets ",
      "id": "2172"
    },
    {
      "names": [
        "Integer Get_data(Template_Box box, Text &text_data)"
      ],
      "description": "A function return value of zero indicates the data was successfully returned. Get the data of type Text from the Template_Box box and return it in text_data. A function return value of zero indicates the data was successfully returned. Chapter",
      "id": "945"
    },
    {
      "names": [
        "Integer Get_read_only(Text_Edit_Box widget, Integer &mode)"
      ],
      "description": "Set the value of Integer mode to:1 if the Text_Edit_Box box is read-only. 0 otherwise. A function return value of zero indicates that the function call was successful. Chapter",
      "id": "1599"
    },
    {
      "names": [
        "Tin_Box Create_tin_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type Tin_Box for inputting and validating Tins. The Tin_Box is created with the title title_text (see 5. 61. 10. 45 Tin_Box). The Message_Box message is normally the message box for the panel and is used to displayModel_Box validation messages. If <enter> is typed into the Tin_Box or a tin selected from the tin pop-up list, automatic validationis performed by the Tin_Box according to mode.  What the validation is, what messages arewritten to Message_Box, and what actions automatically occur, depend on the value of mode. For example,CHECK_TIN_MUST_EXIST// if the tins exists, the message says \"exists\" // if it doesn't exist, the messages says \"ERROR\"The values for mode and their actions are listed in Appendix A (see Tin Mode). The function return value is the created Tin_Box.",
      "id": "962"
    },
    {
      "names": [
        "Integer Set_tin_mode(Tin_Box box, Integer mode, Integer mode2)"
      ],
      "description": "Set the mode the Tin_Box box to mode, mode2. The valid modes for tin are: 1 section, 2 exact. ChapterA return value of zero indicates the function call was successful.",
      "id": "2899"
    },
    {
      "names": [
        "View_Box Create_view_box(Text title_text, Message_Box message, Integer mode)"
      ],
      "description": "Create an input Widget of type View_Box for inputting and validating Views. The View_Box is created with the title title_text (see 5. 61. 10. 46 View_Box). The Message_Box message is normally the message box of the panel and is used to display theView_Box validation messages. If an <enter> is typed in the View_Box or a view selected from the view pop-up list, automaticvalidation is performed by the View_Box according to mode - what the validation is, whatmessages are written to Message_Box, and what actions automatically occur, depend on thevalue of mode. For example,CHECK_TIN_MUST_EXIST// if the model exists, the message says \"exists\" and // if it doesn't exist, the messages says \"ERROR\"The value of mode and their actions are listed in Appendix A (see View Mode). The function return value is the created View_Box.",
      "id": "966"
    },
    {
      "names": [
        "Integer Set_data(Colour_Message_Box box, Text text_data, Integer level)"
      ],
      "description": "ChapterSet the data of type Text for the Colour_Message_Box box as the Text text_data. If the Colour_Message_Box box is on a panel then the message text_data will be displayed inthe information area of box with the background colour of the box set by level. A function return value of zero indicates the data was successfully set.",
      "id": "2632"
    },
    {
      "names": [
        "Integer Set_data(Message_Box box, Text text_data)"
      ],
      "description": "Set the data of type Text for the Message_Box box as the Text text_data. If the Message_Box box is on a panel then the message text_data will be displayed in theChapterinformation area of box. A function return value of zero indicates the data was successfully set.",
      "id": "1038"
    },
    {
      "names": [
        "Log_Line Create_text_log_line(Text message, Integer log_level)"
      ],
      "description": "Create a Text Log_Line with the message message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. icons for log_level'sWARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2663"
    },
    {
      "names": [
        "Log_Line Create_highlight_string_log_line(Text message, Integer log_level, Uid model_id, Uid string_id, Real x, Real y, Real z)"
      ],
      "description": "Create a Highlight String Log_Line giving a string by its model Uid model_id and string Uidstring_id, a coordinate (x,y,z) on the string, a text message and a log level log_level. ChapterThe text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. If LB is clicked on the log line, the coordinate (x,y,z) on the string, and the string, will behighlighted. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. highlight string (with xyz) log line and log level 2Clicking LB on the highlight string (with xyz) log line highlights the string at the given position(x,y,z) in each view the string is on, and autopans to the string. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2665"
    },
    {
      "names": [
        "Log_Line Create_highlight_point_log_line(Text message, Integer log_level, Real x, Real y, Real z)"
      ],
      "description": "Create a Log_Line giving a coordinate (x,y,z). If LB is clicked on the log line, the coordinate (x,y,z) will be highlighted. LJG? on which views?It also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for WarningPanels and Widgets 3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2666"
    },
    {
      "names": [
        "Log_Line Create_edit_string_log_line(Text message, Integer log_level, Uid model_id, Uid string_id)"
      ],
      "description": "Create an Edit Log_Line giving a string by its model Uid model_id and string Uid string_id, atext message and a log level log_level. The text message is displayed in a Log_Box with the log level log_level when the Log_Line isadded to the Log_Box. If LB is clicked on the log line, the string will be highlighted. If LB is double clicked on the log line, the string is edited. If RB is clicked on the log line then an Options menu is displayed with the choices:Edit the stringDelete the stringShow the string propertiesNot applicableIt also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. Chapteredit string log line with log level 1Clicking LB on the edit string log line highlights the string in each view the string is on, andautopans to the string. Double clicking LB on the edit string log line highlights and edits the string.  That is, ithighlights the string and also brings the string up in its editorClicking RB on the edit string log line brings up the Options for the stringWARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. The function return code is the created Log_Line.",
      "id": "2667"
    },
    {
      "names": [
        "Log_Line Create_macro_log_line(Text message, Integer log_level, Text macro, Text select_cmd_line, Dynamic_Text menu_names, Dynamic_Text menu_command_lines)"
      ],
      "description": "This call creates a log line that will allow the user to run a macro when the log line is doubleclicked.  The macro is specified by the parameter macro and any optional arguments to bepassed to it are specified by cmd_line. This log line also provides options in a context menu when the user right clicks it.  There are twoparameters required; a list of all the names to be displayed in the menu, stored in aDynamic_Text object called menu_names and the list of arguments to be passed down to themacro when the menu item is selected, stored in menu_command_lines. It also displays the text message message and has a log level log_level. Available log levels are0 for none,1 for General,2 for Warning3 for Error. Log levels other than 0 will display a small icon to indicate their status. WARNINGTo be visible, the created Log_Line is added to a Log_Box using the call Add_log_line(Log_Boxbox,Log_Line line) BUT this call can only be made after the Log_Box is displayed in a panel usingthe Show_panel call. ChapterThe function return code is the created Log_Line.",
      "id": "2669"
    },
    {
      "names": [
        "Integer Set_finish_button(Widget panel, Integer move_cursor)"
      ],
      "description": "If move_cursor = 1 then the cursor is moved onto the finish button. Panels and Widgets ",
      "id": "1368"
    },
    {
      "names": [
        "Select_Button Create_select_button(Text title_text, Integer mode, Message_Box box)"
      ],
      "description": "Create a button of type Select_Button. This is a special Button that when clicked, allows the user to select a string. The button is created with the label text title_text. The Message_Box box is selected to display the select information. The value of mode is:modevalueSELECT_STRING5509Panels and Widgets SELECT_STRINGS5510not implemented!Refer to the list in the Appendix A. The function return value is the created Select_Button. Note The Select_Button is now rarely used and has been replaced by the New_Select_Box orthe Select_Box.  See 5. 61. 10. 24 New_Select_Box and 5. 61. 10. 31 Select_Box",
      "id": "881"
    },
    {
      "names": [
        "Integer Set_select_type(Select_Button select, Text type)"
      ],
      "description": "Set the type of the string that can be selected to type for Select_Botton select.  For example\"cAlignment\"d, \"c3d\"d. A function return value of zero indicates the type was successfully set.",
      "id": "1043"
    },
    {
      "names": [
        "Integer Set_select_snap_mode(Select_Button select, Integer mode, Integer control, Text text)",
        "Integer Get_select_coordinate(Select_Button select, Real &x, Real &y, Real &z, Real &ch, Real &ht)"
      ],
      "description": "Set the snap mode mode and snap control controlfor the Select_Button select. When snap mode is:Name_SnapTin_SnapModel_Snap678the snap_text must be string name; tin name, model name accordingly, otherwise, leave thesnap_text blank \"c\"d. A function return value of zero indicates the type was successfully set. Get_select_coordinate(Select_Button select,Real &x,Real &y,Real &z,Real&ch,Real &ht)Get the coordinate of the selected snap point. The return value of x, y, z, ch and ht must be type of Real. A function return value of zero indicates the coordinate was successfully returned.",
      "id": "1047"
    },
    {
      "names": [
        "GridCtrl_Box Create_gridctrl_box(Text name, Integer num_rows, Integer num_columns, Widget column_widgets[], Integer show_nav, Message_Box messages, Integer width, Integer height)"
      ],
      "description": "This call creates a new GridCtrl_Box object which can be added to Panels. name is the name of the GridCtrl_Box and the number of rows that the grid initially has isnum_rows and the number of columns is num_columns (rows can also be added or deletedafter the GridCtrl_Box has been displayed). column_widgets[] is an array of Widgets in column order, and each Widget is of the type for thatcolumn.  For an example see 5. 61. 14 GridCtrl_Box. If show_nav is 1 then there are navigation boxes on the side of the GridCtrl_Box. If show_nav is 0 then there are no navigation boxes. The width of the grid cell is width and the height of the grid cell is height, The units for width andheight are screen units (pixels). Important note: All Boxes, even through they have names like Real_Box and Input_Box,derived from Widgets and can be used in many options that take a Widget.  For exampleShow_widget.  However for the array of widgets column_widgets[ ] defining the GridCtrl_Boxcolumns, the array values need to be Widget and so the other types derived from Widget have tobe cast to a Widget before they can be used to fill the column_widgets[] array.  The cast is easilydone by simply having the following cast function defined and in your macro code. Widget cast(Widget w){return w;}See 5. 61. 14 GridCtrl_Boxfor an example of using cast when defining values forcolumn_widgets[]. GridCtrl_Box with two row and three columns with column types Real_Box, Input_Box, Tick_BoxThe titles of the Widgets are the headings for the columnsshow_nav = 1so navigation boxesGrid navigationboxesshow_nav = 0so navigation boxesIf the rows and columns are too large to fit inside the area defined by width and height, scroll barsare automatically created so that all cells can be reached. Panels and Widgets A vertical scroll bar is automatically addedwhen the rows are wider than thegiven heightA horizontal scroll bar is automatically added whenthe columns are wider than the given widthThe created GridCtrl_Box is returned as the function return value.",
      "id": "2393"
    },
    {
      "names": [
        "GridCtrl_Box Create_gridctrl_box(Text name, Integer num_rows, Integer num_columns, Widget column_widgets[], Integer column_readonly[], Integer show_nav, Message_Box messages, Integer width, Integer height)"
      ],
      "description": "This call creates a new GridCtrl_Box object which can be added to Panels. This is the same as the previous GridCtrl_Box function except that there is also the arraycolumn_readonly[] wherecolumn_readonly[] is an Integer array of size num_columns where a value of 1 means that thecell is read only, and 0 means that the cell can be edited. To set only the middle columnto be read only Integer column_readonly[3];column_readonly[1] = 0;column_readonly[2] = 1;column_readonly[3] = 0;Second column is read onlySee Create_gridctrl_box(Text name,Integer num_rows,Integer num_columns,Widgetcolumn_widgets[],Integer show_nav,Message_Box messages,Integer width,Integer height) formore documentation for this function. ChapterThe created GridCtrl_Box is returned as the function return value.",
      "id": "2654"
    },
    {
      "names": [
        "Integer Insert_row(GridCtrl_Box grid, Integer row_num, Integer is_before)"
      ],
      "description": "This call inserts a blank row into the GridCtrl_Box grid. If is_before = 1, a blank row is inserted before row_num, so that the blank row becomes thenew row_num'th row.  The old rows from row row_num onwards are all pushed down one row. If is_before = 0, a blank row is after row row_num, so that the blank row becomes a new(num_row+1)'th row.  The old rows from row (num_row+1) onwards are pushed down one row. t row number row_num of the GridCtrl_Box grid. If you wish it to be inserted before the specified row, set is_before to 1, otherwise the row will beinserted after. Note: a GridCtrl_Box(grid) call should be done after the Insert_row(GridCtrl_Box grid,Integerrow_num,Integer is_before) call.  See Format_grid(GridCtrl_Box grid). A function return value of a positive number indicates the insertion was successful; and thenumber should equal the number of rows after the insertion.",
      "id": "2397"
    },
    {
      "names": [
        "Tree_Box Create_tree_box(Text name, Text root_item_text, Integer tree_width, Integer tree_height)"
      ],
      "description": "This call creates a Tree_Box with the name name and with width tree_width and heighttree_height.  The units for width and height are screen units (pixels). An empty node/page at the root of the tree is created with the title root_item_text.  This is calledthe root page. Panels and Widgets An example of a section of the code required to create a Tree_Box with its root page is:Tree_Box tree_box = Create_tree_box(\"Tree\", \"Tree Root\", 200, 200);The created Tree_Box is returned as the function return value.",
      "id": "2571"
    },
    {
      "names": [
        "Tree_Page Get_root_page(Tree_Box tree_box)"
      ],
      "description": "Get the root page of the Tree_Box tree_box and return it as the function return value. All Tree_Box's automatically have a root page.",
      "id": "2572"
    },
    {
      "names": [
        "Tree_Page Create_tree_page(Tree_Page parent_page, Text name, Integer show_border, Integer use_name_for_border)"
      ],
      "description": "This call creates a new Tree_Page with the name name, as a child of the Tree_Pageparent_page. When the right hand side of the created page exists and there is none or more than one Group(either Horizontal_Group's and/or Vertical_Group's), then the right hand side can have anoptional border and be given the name of the Tree_Page as a title for the border. If show_border = 1, a border is drawn around the right had side of the created Tree_Page. If show_border = 0, no border is drawn around the right had side of the created Tree_Page. If use_name_for_border = 1, name is used as the title when the border is drawn around the righthad side of the created Tree_Page. ChapterIf use_name_for_border = 0, there is no title when the border is drawn around the right had sideof the created Tree_Page. Title for borderBorder aroundright hand sideof \"Page1\"Right hand side ofTree_Page \"Page 1\"The right hand side comes up when youclick on \"Page 1\" in the Tree on the leftA parent page must exist before a child page can be created.  The parent page may be the rootpage that is automatically created for a Tree_Box and the Get_root_page call is used to get theroot page of a Tree_Box.  See Get_root_page(Tree_Box tree_box)A Tree_Page can contain any number of children pages. An example of a section of the code required to create a Tree_Box with its root page, and then onechild page of the root page is:Tree_Box tree_box = Create_tree_box(\"Tree\", \"Tree Root\", 200, 200);// get the root page to add a child page called \"Page 1\" toTree_Page root_page = Get_root_page(tree_box);Tree_Page page_1 = Create_tree_page(root_page, \"Page 1\", 1, 1);The created Tree_Box is returned as the function return value. Panels and Widgets ",
      "id": "2577"
    },
    {
      "names": [
        "Integer Get_page(Tree_Page parent, Integer page_index, Tree_Page &child_page)"
      ],
      "description": "For the Tree_Page parent, find the n'th child page of parent and return the page as child_page. A function return value of zero indicates a child page was successfully returned.",
      "id": "2579"
    },
    {
      "names": [
        "Integer Face_drape(Tin tin, Model model, Dynamic_Element &face_draped_elts)",
        "Integer Face_drape(Tin tin, Dynamic_Element de, Dynamic_Element &face_draped_strings)"
      ],
      "description": "Face drape all the Elements in the Model model onto the Tin tin. The draped Elements are returned in the Dynamic_Element face_draped_elts. A function return value of zero indicates the face drape was successful. ChapterFace_drape(Tin tin,Dynamic_Element de,Dynamic_Element&face_draped_strings)Face drape all the Elements in the Dynamic_Element de onto the Tin tin. The face draped Elements are returned in the Dynamic_Element face_draped_elts. A function return value of zero indicates the face drape was successful.",
      "id": "145"
    },
    {
      "names": [
        "Integer Get_drainage_intensity(Text rainfall_filename, Integer rainfall_method, Real frequency, Real duration, Real &intensity)"
      ],
      "description": "The Rainfall Intensity information is part of a 12d Model Rainfall File (that ends in \". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The Get_drainage_intensity call returns the intensity for a given rainfall method, frequency stormduration. The image below are the rainfall Intensity Methods from the \"AUS ACT Canberra. 12dhydro\" fileloaded into the Rainfall File Editor. 12d hydrofile namedurationsintensitiesIFD Table Intensity Method in the Rainfall FileChapter12d hydrofile nameARR 1987 Intensity Method in the Rainfall File12d hydrofile nameARR 1977 Intensity Method in the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the Intensity from. rainfall_method is one of:\"IFD Table\"\"ARR 1987\"\"ARR 1977\"frequency is the frequency (ARI) in yearsduration is the duration in minutesGeneral intensity is returned and is the intensity calculated from the table given by the rainfall_method,frequency and the duration. A function return value of zero indicates that the intensity was successfully returned. A non zero function return indicates that there was an error getting the intensity. The value of the non-zero function value indicates the type of error:-999-99-9-8-4-3-2-1Error Codes= no Drainage Analysis license= error reading file= no valid data found for specified method= frequency outside valid range= unsupported rainfall method= error building ARR1977 storm data= error building ARR1987 storm data= error building IFD storm data",
      "id": "2209"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_patterns_enabled(Text file, Real min_freq, Real max_freq, Dynamic_Integer &storms, Integer &ret_num)"
      ],
      "description": "The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in\". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The rainfall Temporal Patterns transform the constant average rainfall to a time varied rainfall. The Get_rainfall_temporal_patterns_enabled call returns a Dynamic_Integer list of stormnumbers for all the enabled storm patterns in a Rainfall File.  These storm numbers are used toretrieve the full storm data via the call  Get_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integermax_num,Integer &ret_num)The image below table is the is of the rainfall Temporal Patterns from the \"AUS ACTCanberra. 12dhydro\" file loaded into the Rainfall File Editor. 12d hydrofile nameflag to sayrun stormZonefiltertotal lengthof stormAverage RecurrenceInterval (ARI)from toStorm numberStorm nameor Storm IDTemporal Patterns in the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the temporal pattern values from. General min_freq the From ARI value must match this argument. max_freq the To ARI value must match this argument. storms is a Dynamic_Integer list of storm numbers where the Run storm is selected.  Thesenumbers are used in the following call to retrieve the full storm data.   Get_rainfall_temporal_pattern(Text rainfall_filename,Integer storm_num,Integer &run,Text&zone_filter,Real &duration,Real &from_ari,Real &to_ari,Real &interval,Real pattern[],Integermax_num,Integer &ret_num)ret_num returns the actual number of storms returnedA function return value of zero indicates the data was successfully returned.",
      "id": "3187"
    },
    {
      "names": [
        "Integer Get_rainfall_temporal_pattern(Text rainfall_filename, Integer storm_num, Integer &run, Text &zone_filter, Real &duration, Real &from_ari, Real &to_ari, Real &interval, Real pattern[], Integer max_num, Integer &ret_num)"
      ],
      "description": "The Rainfall Temporal Pattern information is part of a 12d Model Rainfall File (that ends in\". 12dhdyro\"). The Rainfall Files can be created and/or edited by the 12d Model Rainfall File Editor:Water->Stormwater tools->Rainfall editor. 12d Model comes with some Rainfall Files and others can be created by users. The rainfall Temporal Patterns transform the constant average rainfall to a time varied rainfall. The Get_rainfall_temporal_pattern call returns the information for one storm from the rainfallTemporal Patterns in a Rainfall File. The image below table is the is of the rainfall Temporal Patterns from the \"AUS ACTCanberra. 12dhydro\" file loaded into the Rainfall File Editor. 12d hydrofile nameflag to sayrun stormZonefiltertotal lengthof stormAverage RecurrenceInterval (ARI)from toStorm numberStorm nameor Storm IDTemporal Patterns in the Rainfall FileGeneral intervalfile nametemporal pattern valuesTemporal Pattern Table from the Rainfall FileThe function arguments are:rainfall_filename is the local name of the \". 12dhydro\" file to get the temporal pattern values from. storm_num is the number of the storm in the file.  With the addition of the frequent, intermediateand rare temporal patterns all the storms are combined into one list in the order they appear inthe editor.  The storm number in the index on this list. The rest of the arguments of the call return values from the storm_num'th line of the TemporalPattern table. run returns 1 if \"Run Storm\" is ticked0 if \"Run Storm\" is not tickedzone_filter returns the value from \"Zone Filter\"duration returns the total length of the stormfrom_ari returns the \"from ARI\" (Average Recurrence Interval, also known as the Frequency orReturn Period)to_ari returns the \"to ARI\" (Average Recurrence Interval, also known as the Frequency or ReturnPeriod)interval returns the time interval for each of the values in the temporal patterns table (which givethe percentage of the total storm that occurs in that period)pattern[ ] is an array to return the values of the temporal patternmax_num is the maximum size of the array pattern[]ret_num returns the actual number of values returned in patternA function return value of zero indicates the data was successfully returned.",
      "id": "2405"
    },
    {
      "names": [
        "Integer Drainage_join_strings(Element string_us, Element string_ds, Integer mode, Element &joined_string)"
      ],
      "description": "Join a upstream drainage string string_us with a downstream drainage string string_ds and setthe result in a new drainage string joined_string. If mode is 0, then the joint starts with the downstream; if mode is 1, then the joint starts with theupstream. Return code-1 = ERROR: invalid drainage stringGeneral -2 = ERROR: cannot join string to itself-3 = ERROR: string has no MHs-4 = ERROR: no sewer license-5 = ERROR: opposing flow directions-6 = ERROR: try reversing pick order-7 = ERROR: cannot reset nodes (drop point failed)-11 = ERROR: string 1 not a drainage string-12 = ERROR: string 2 not a drainage string-13 = ERROR: mode is not 0 or 1A function return value of zero indicates the call was successfully returned.",
      "id": "5424"
    },
    {
      "names": [
        "Integer Clip_string(Element string, Real chainage1, Real chainage2, Element &left_string, Element &mid_string, Element &right_string)"
      ],
      "description": "Clip a string about 2 chainages for the Element string.  This will result in 3 new strings beingcreated. The part that exists before Real chainage1 is returned in Element left_string. The part that exists after Real chainage2 is returned in Element right_string. The part that exists between Real chainage1 and Real chainage2 is returned in Elementmid_string. A function return value of zero indicates the clip was successful. NoteIf the string is closed, right_string is not used. If chainage1 is on or before the start of the string, left_string is not used. General If chainage2 is on or after the end of the string, right_string is not used. If chainage1 is greater than chainage2, they are first swapped.",
      "id": "542"
    },
    {
      "names": [
        "Integer Split_string(Element string, Real chainage, Element &string1, Element &string2)"
      ],
      "description": "Split a string about a chainage for ELement stringThis will result in 2 new strings being created. The part that exists before Real chainage is returned in Element string1. ChapterThe part that exists after Real chainage is returned in Element string2. A function return value of zero indicates the split was successful.",
      "id": "543"
    },
    {
      "names": [
        "Integer Super_offset(Element super, Real offset, Integer mode, Element &super_offset)"
      ],
      "description": "Offset the super Element super by Real offset; assign the result to super Elementsuper_offset. A return value of zero indicates the function call was successful. The valid values for mode are:0: joins ends of resulting segments by lines1: intersects resulting segments2: fillets any pair of resulting segments with change of direction3: dual clippingGeneral 4: clips any crossing part",
      "id": "2861"
    },
    {
      "names": [
        "Integer Place_mesh(Real x, Real y, Real z, Integer source_type, Text source_name, Vector3 offset, Vector3 rotate, Vector3 scale, Element &mesh_string)"
      ],
      "description": "This call places a mesh on the vertex of a new super string, at the co-ordinate specified byparameters x, y, z. The source_type determines where the mesh will be loaded from:  source_type = 0 for the Mesh Library , 1 for from a fileThe source_name specifies the name of the mesh in the library or file, as defined by thesource_type parameter. You can also set any additional offset, rotation or scale parameters in the offset, rotate or scalevectors.  If you are not intending to set additional parameters, you must set them to at leastdefault values:offset(0. 0, 0. 0, 0. 0) rotate(0. 0, 0. 0, 0. 0) scale(1. 0, 1. 0, 1. 0);The created super string will be stored in the element mesh_string. This function returns 0 if it succeeds and non zero if it fails.",
      "id": "2803"
    },
    {
      "names": [
        "Integer Place_mesh(Real x, Real y, Real z, Text mesh_name, Vector3 offset, Vector3 rotate, Vector3 scale, Tin anchor_tin, Element &mesh_string)"
      ],
      "description": "This call places a mesh from the mesh library on the vertex of a new super string, at the coordinate specified by parameters x, y, z and anchors it to the tin anchor_tin. The Text mesh_name specifies the name of the mesh in the library. You can also set any additional offset, rotation or scale parameters in the offset, rotate or scalevectors.  If you are not intending to set additional parameters, you must set them to at leastdefault values:offset(0. 0, 0. 0, 0. 0) rotate(0. 0, 0. 0, 0. 0) scale(1. 0, 1. 0, 1. 0);The created super string will be stored in the Element mesh_string. This function returns 0 if it succeeds and non zero if it fails.",
      "id": "2804"
    },
    {
      "names": [
        "Integer Get_3d_length(Element super_alignment, Real &length_3d)"
      ],
      "description": "Get 3D length length_3d of a super alignment super_alignment. Note: the Enable_3d needed to be call for the super alignment before making this call. ChapterA return value of zero indicates the function call was successful.",
      "id": "3014"
    },
    {
      "names": [
        "Integer Helmert_2d_Transform(Real r, Real scale, Real tx, Real ty, Real tz, Real ox, Real oy, Integer call_inverse, Dynamic_Element &ele)"
      ],
      "description": "Utilities Apply to all the elements in the Dynamic_Element ele the Helmert 2d transformation withparameters:rotationr (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "7628"
    },
    {
      "names": [
        "Integer Get_carto_projection_datum_data(Text datum_name, Text carto_file_name, Text &datum_data)"
      ],
      "description": "Looking up the datum_data of a projection of given datum_name using a given carto filecarto_file_name. If carto_file_name is the string \"carto. 4d\" or the empty string \"\", then it will be the same file usingin all builtin 12D panels. ChapterA function return value of zero indicates the transformation was successful.",
      "id": "3724"
    },
    {
      "names": [
        "Integer Convert_long_lat(Text datum_data, Integer longlat_angle_mode, Integer from_long_lat, Real &x, Real &y)"
      ],
      "description": "Convert the value of two Real x,y between Easting-Northing and Longtitude-Latitude using:The datum_data being used.  Note: this is the actual data not the name. Utilities The direction of the conversion: from_long_lat from long-lat to Easting-Northing: zero beingfalse; one being true. The angle mode of the longtitude, latitude longlat_angle_mode :zero being radians; one beingdecimal degrees; two being DMS degrees minutes seconds. A function return value of zero indicates the transformation was successful.",
      "id": "3727"
    },
    {
      "names": [
        "Integer Cut_strings_with_nulls(Dynamic_Element seed, Dynamic_Element strings, Dynamic_Element &result)"
      ],
      "description": "Cut all the strings from the list Dynamic_Element seed with the strings from the listDynamic_Element strings and add to Dynamic_Element result. The strings created are 4d strings which have at each vertex the string cut. A function return value of zero indicates the cut calculations was successful. Chapter",
      "id": "548"
    },
    {
      "names": [
        "Integer Check_polygon_fence(Element polygon, Integer &good_polygon, Integer &good_fence)"
      ],
      "description": "This function check the input polygon and set. Integer good_polygon to 1 if the input is a simple polygon; 0 otherwise. Utilities Integer good_polygon to 1 if the input polygon can be used as the fence; 0 otherwise. A returned value of zero indicates there were no errors in the checking operation.",
      "id": "3543"
    },
    {
      "names": [
        "Integer Share_status(Tin tin, Integer &is_share_out, Integer &is_share_in, Text &share_in_location)"
      ],
      "description": "ChapterCheck share status of the Tin tinShare out status is_share_out: 0 not share out, 1 share outShare out status is_share_in: 0 not share in, 1 share inLocation for share return in share_in_locationA return value of zero indicates the function call was successful.",
      "id": "3065"
    },
    {
      "names": [
        "Integer Project_settings_profile_exists(Text profile_name)"
      ],
      "description": "Check if the project settings profile with given name profile_name exists. ChapterA function return value of zero indicates the style does not exist. A function return value of one indicates the style exists.",
      "id": "3934"
    },
    {
      "names": [
        "Integer Set_time_updated(Function func, Integer time)"
      ],
      "description": "Set the update time for the Function func to time. ChapterThe time time is given as seconds since January 1 1970. A function return value of zero indicates the time was successfully set.",
      "id": "2119"
    },
    {
      "names": [
        "Integer Get_dependancy_name(Macro_Function func, Integer i, Text &name)"
      ],
      "description": "For the Macro_Function func, return the name of the i'th dependencies in name. A function return value of zero indicates the name was successfully returned.",
      "id": "1149"
    },
    {
      "names": [
        "Integer Get_dependancy_type(Macro_Function func, Integer i, Text &type)"
      ],
      "description": "ChapterFor the Macro_Function func, return the type of the i'th dependencies as the Text type. The valid types are:unknownFileElementModelTemplateTinIntegerRealTextA function return value of zero indicates the type was successfully returned.",
      "id": "1150"
    },
    {
      "names": [
        "Integer Get_dependancy_file(Macro_Function func, Integer i, Text &file)"
      ],
      "description": "For the Macro_Function func, if the i'th dependency is a file then return the name of the file inname. If the i'th dependency is not a file then a non-zero function return value is returned. A function return value of zero indicates the file name was successfully returned.",
      "id": "1151"
    },
    {
      "names": [
        "Integer Get_dependancy_model(Macro_Function func, Integer i, Model &model)"
      ],
      "description": "For the Macro_Function func, if the i'th dependency is a Model then return the Model in model. If the i'th dependency is not a Model then a non-zero function return value is returned. A function return value of zero indicates the Model was successfully returned.",
      "id": "1152"
    },
    {
      "names": [
        "Integer Get_dependancy_tin(Macro_Function func, Integer i, Tin &tin)"
      ],
      "description": "For the Macro_Function func, if the i'th dependency is a Tin then return the Tin in tin. If the i'th dependency is not a Tin then a non-zero function return value is returned. A function return value of zero indicates the Tin was successfully returned.",
      "id": "1153"
    },
    {
      "names": [
        "Integer Get_dependancy_template(Macro_Function func, Integer i, Text &template)"
      ],
      "description": "For the Macro_Function func, if the i'th dependency is a Template then return the templatename in template. If the i'th dependency is not a Template then a non-zero function return value is returned. A function return value of zero indicates the Tin was successfully returned.",
      "id": "1154"
    },
    {
      "names": [
        "Integer Get_dependancy_element(Macro_Function func, Integer i, Element &element)"
      ],
      "description": "For the Macro_Function func, if the i'th dependency is an Element then return the Element in elt. If the i'th dependency is not an Element then a non-zero function return value is returned. A function return value of zero indicates the Element was successfully returned.",
      "id": "1155"
    },
    {
      "names": [
        "Integer Get_dependancy_data(Macro_Function func, Integer i, Text &text)"
      ],
      "description": "For the Macro_Function func, a text description of the i'th dependency is returned in text. For an Element, the text description is: model_name->element_name is return in text. For a File/Model/Template/Tin, the text description is the name of the File/Model/Template/Tin. For an Integer, the text description is the Integer converted to Text. For a Real, the text description is the Real converted to Text.  LJG? how many decimalsFor a Text, the text description is just the text. A function return value of zero indicates the Macro_Function description was successfullyreturned.",
      "id": "1156"
    },
    {
      "names": [
        "Integer Get_dependancy_type(Macro_Function func, Text name, Text &type)"
      ],
      "description": "For the Macro_Function func, return the type of the dependency with the name name as theText type. The valid types are:unknownChapterFileElementModelTemplateTinIntegerRealText// not implemented or accessible from macros// not implemented or accessible from macros// not implemented or accessible from macrosIf a dependency called name does not exist then a non-zero function return value is returned. A function return value of zero indicates the type was successfully returned.",
      "id": "1157"
    },
    {
      "names": [
        "Integer Delete_dependancy(Macro_Function func, Text name)"
      ],
      "description": "For the Macro_Function func, if the dependency called name exist then it is deleted from the listof dependencies for func. Warning: if a dependency is deleted then the dependency number of all dependencies after thedeleted one will be reduced by one. ChapterIf no dependency called name exists then a non-zero function return value is returned. A function return value of zero indicates the dependency was successfully deleted.",
      "id": "1164"
    },
    {
      "names": [
        "Integer Get_function_id(Element elt, Uid &id)"
      ],
      "description": "For an Element elt, check if it has a function Uid and if it has, return it in id. If the element doesn't have a function Uid, id will be set as null. A function return value of zero indicates the Uid was successfully returned.",
      "id": "1910"
    },
    {
      "names": [
        "Integer Get_function_id(Element elt, Integer &id)"
      ],
      "description": "For an Element elt, check if it has a function id and if it has, return it in id. If elt doesn't have a function id, id will be set to 0 and the return value is also zeroA function return value of zero indicates the id was successfully returned. Deprecation Warning - this function has now been deprecated and will no longer exist unlessspecial compile flags are used.  Use Get_function_id(Element elt,Uid &id) instead.",
      "id": "1178"
    },
    {
      "names": [
        "Integer Function_attribute_exists(Function fcn, Text name, Integer &no)",
        "Integer Function_attribute_exists(Macro_Function fcn, Text name, Integer &no)"
      ],
      "description": "12d Model Macro_Functions Checks to see if an attribute with the name att_name exists for the Macro_Function/Functionfcn. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. A non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "1110"
    },
    {
      "names": [
        "Integer Get_function_attribute(Macro_Function fcn, Text att_name, Text &att)",
        "Integer Get_function_attribute(Function fcn, Text att_name, Text &txt)"
      ],
      "description": "For the Macro_Function/Function fcn, get the attribute called att_name and return the attribute12d Model Macro_Functions value in txt.  The attribute must be of type Text. If the attribute is not of type Text then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully returned. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1117"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Text txt)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Text txt)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute called att_name does not exist then create it as type Text and give it the valuetxt. if the attribute called att_name does exist and it is type Text, then set its value to txt. If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero returnvalue is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1128"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Integer int)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Integer int)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute called att_name does not exist then create it as type Integer and give it the valueint.  if the attribute called att_name does exist and it is type Integer, then set its value to int. If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1129"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Real real)",
        "Integer Set_function_attribute(Function fcn, Text att_name, Real real)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute called att_name does not exist then create it as type Real and give it the valuereal.  if the attribute called att_name does exist and it is type Real, then set its value to real. If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute calledatt_name.",
      "id": "1130"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Text txt)",
        "Integer Set_function_attribute(Function fcn, Integer att_no, Text txt)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute with attribute number att_no does not exist then create it as type Text and give itthe value txt.  if the attribute with attribute number att_no does exist and it is type Text, then set its value totxt. If the attribute exists and is not of type Text, or the attribute does not exist, then a non-zero returnvalue is returned. ChapterA function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1131"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Integer att_no, Integer int)",
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Integer int)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute with attribute number att_no does not exist then create it as type Integer andgive it the value int.  if the attribute with attribute number att_no does exist and it is type Integer, then set its value toint. If the attribute exists and is not of type Integer, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1132"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Integer att_no, Real real)",
        "Integer Set_function_attribute(Function fcn, Integer att_no, Real real)"
      ],
      "description": "For the Macro_Function/Function fcn, if the attribute with attribute number att_no does not exist then create it as type Real and giveit the value real.  if the attribute with attribute number att_no does exist and it is type Real, then set its value toreal. If the attribute exists and is not of type Real, or the attribute does not exist, then a non-zeroreturn value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_function_attribute_type call can be used to get the type of the attribute withattribute number att_no.",
      "id": "1133"
    },
    {
      "names": [
        "Integer Set_function_attribute(Function fcn, Text att_name, Uid uid)",
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Uid uid)"
      ],
      "description": "For the Function/Macro_Function fcn, if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to att. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1998"
    },
    {
      "names": [
        "Integer Set_function_attribute(Macro_Function fcn, Text att_name, Attributes att)",
        "Integer Set_function_attribute(Function fcn, Text att_name, Attributes att)"
      ],
      "description": "For the Function/Macro_Function fcn, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "1999"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Uid start_model_id, Uid end_model_id, Uid start_element_id, Uid end_element_id, Integer skip_tins, Dynamic_Element &elements)"
      ],
      "description": "Clean all elements created by given function_id (limitted the search by start_model_id,end_model_id, start_element_id, end_element_id).  If skip_tins is non zero, then tins are notincluded in the list to clean.  The list of old elements also is returned in Dynamic_Elementelements. ChapterA function return value of zero all elements are cleaned successfully.",
      "id": "2800"
    },
    {
      "names": [
        "Integer Get_elements(Uid function_id, Integer skip_tins, Integer loaded_models, Dynamic_Element &elements)"
      ],
      "description": "12d Model Macro_Functions Get all the elements created by given function_id and set those to Dynamic_Element elements,If skip_tins is non zero, then tins are not included in the list of result.  The search will loadpreviously unloaded model into the project if loaded_models is non zero. A function return value of zero indicates the elements list is successfully set. .",
      "id": "7717"
    },
    {
      "names": [
        "Integer Clean_elements(Uid function_id, Integer skip_tins)"
      ],
      "description": "Clean all elements created by given function_id.  If skip_tins is non zero, then tins are notincluded in the list to clean. A function return value of zero all elements are cleaned successfully. Chapter",
      "id": "7721"
    },
    {
      "names": [
        "Function_Property_Collection Create_function_property_collection()"
      ],
      "description": "Create a Function_Property_Collection. Function_Property_Collection's are used to transfer information about a function such as theApply Many function instead of needing a large number of function calls which would need to beupdated every time a new parameter was added to the Apply Many,The function return value is the created Function_Property_Collection.",
      "id": "2726"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Integer int_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Integer property called nameto int_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Integer property. A function return value of zero indicates the value is successfully set.",
      "id": "2727"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Real real_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Real property called name toreal_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Real property. A function return value of zero indicates the value is successfully set.",
      "id": "2728"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Text txt_val)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Text property called name toChaptertxt_val. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Text property. A function return value of zero indicates the value is successfully set.",
      "id": "2729"
    },
    {
      "names": [
        "Integer Set_property_colour(Function_Property_Collection collection, Text name, Text colour_name)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Colour property called nameto the colour given by colour_name. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Text property. A function return value of zero indicates the value is successfully set.",
      "id": "2730"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Element element)"
      ],
      "description": "In the Function Property Collection collection, set the value of the Element property calledname to element. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Element property. A function return value of zero indicates the value is successfully set.",
      "id": "2731"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Tin tin)"
      ],
      "description": "In the Function Property Collection collection, set the tin of the Tin property called name to tin. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Tin property. A function return value of zero indicates the value is successfully set. 12d Model Macro_Functions ",
      "id": "2732"
    },
    {
      "names": [
        "Integer Set_property(Function_Property_Collection collection, Text name, Model model)"
      ],
      "description": "In the Function Property Collection collection, set the model of the Model property called nameto model. For more information on which properties are available for the function in question, please seethe section Function Properties. The return value is zero if name doesn't exist or it is not Model property. A function return value of zero indicates the value is successfully set.",
      "id": "2733"
    },
    {
      "names": [
        "Integer Get_property(Function_Property_Collection collection, Text name, Model &model)"
      ],
      "description": "12d Model Macro_Functions From the Function Property Collection collection, get the Model from the Tin property calledname and return it in model. For more information on which properties are available for the function in question, please seethe section Function Properties. The function return value is non zero if there is no property called name, or if it does exist, it isnot of type Model. A function return value of zero indicates the value was successfully returned.",
      "id": "2742"
    },
    {
      "names": [
        "Integer Create_parameter_file(Plot_Parameter_File ppf, Text ppf_type)"
      ],
      "description": "The tin to be used by the apply manyThe mtf used by the apply manyThe separation between sectionsThe optional start chainage for the applymanyRealThe optional end chainage for the applymanyTextThe optional left prefix for template namesTextThe optional right prefix for template namesElementThe centreline / reference string to run theapply many downElementThe optional hinge stringTextThe optional report fileModel/Text The road strings model to be created by theapply manyModel/Text The road sections model to be created by theapply manyTextThe name of the colour for the road surfacestrings and sectionsModel/Text The optional model or name of a model forboxing strings for layer N (1 to 8)Model/ Text The optional model or name of a model forboxing sections for layer N (1 to 8)TextThe optional name of the colour for thestrings created for boxing layer N (1 to 8)Model/Text The optional model or name of a model fordifference sectionsTextThe name of the colour for differencesectionsModel/Text The optional model or name of a model forapply many polygonsModel/Text The optional model or name of a model forthe road boundary12d Model Macro_Functions\fChaptercreate_arcsIntegerchord_arc_tolerancevolume_correctionRealIntegerpartial_interfacesIntegersections_as_4dIntegercopy_hingeIntegeruse_strippingshow_stripping_volumesIntegerIntegercalculate_natural_surface_to_design_volumescalculate_road_to_subgrade_volumecalculate_inter_boxing_layer_volumesmap_filecreate_road_tinroad_tinroad_tin_colourroad_tin_modelIntegerTextIntegerTin/TextTextModel/Textcreate_depth_range_polygonsIntegerdepth_range_fileTextdepth_range_polygons_modelModel/Textroad_tin_number_extra_modelsIntegerroad_tin_extra_model_NModel/Textcalculate_sight_distanceIntegersight_distance_minsight_distance_maxsight_distance_eye_heightsight_distance_eye_offsetRealRealRealRealWhat type of arcs to create 0 - no arcs1 - alignments 2 - polylines 3 - super stringsThe chord arc tolerance valueWhether or not to perform volume correction(0 or 1)Whether or not to create partial interfaces (0or 1)Whether or not to create sections as 4dstrings (0 or 1)Whether or not to copy the hinge string (0 or1)Whether or not to use stripping (0 or 1)Whether or not to show detailed strippingvolumes (0 or 1)Whether or not to calculate natural surface todesign volumes (0 or 1)Whether or not to calculate road to subgradevolumes (0 or 1)Whether or not to calculate inter boxinglayer volumes (0 or 1)The optional name of a map file to createWhether or not to create a tin (0 or 1)The tin or the name of the tin to createThe name of the colour for the created tinThe model or the name of the model tocreate the tin inWhether or not to create depth rangepolygons (0 or 1)The name of the depth range file to use whencreating depth range polygonsThe model or name of the model to createdepth range polygons inThe optional number of extra models for theroad tinThe model or name of the Nth model to beused as an extra model for the road tinWhether or not to calculate sight distances (0or 1)The minimum sight distanceThe maximum sight distanceThe eye height for the sight distance calcsThe eye offset for the sight distance calcssight_distance_target_heightsight_distance_target_offsetsight_distance_calc_intervalRealRealRealThe target height for the sight distance calcsThe target offset for the sight distance calcsThe calc interval for the sight distance calcsIntegerInteger12d Model Macro_Functions sight_distance_trial_intervalsight_distance_reportRealTextcreate_separation_barrier_linesIntegerbarrier_distancemin_barrier_road_lengthmin_barrier_line_lengthmin_barrier_betweenfilter_cross_sectionsRealRealRealRealIntegerfilter_sections_modelModel/Textfilter_sections_colourTextfilter_sections_intervalfilter_sections_toleranceRealRealfilter_sections_include_startIntegerfilter_sections_include_endIntegerfilter_sections_include_equalitiesfilter_sections_include_h_tangentfilter_sections_include_v_tangentfilter_sections_include_crest_sagfilter_sections_spc_fileIntegergenerate_long_section_plotIntegerlong_section_ppflong_section_plotter_typeTextTextlong_section_plot_stemlong_section_plot_cleanTextIntegergenerate_cross_section_plotIntegercross_section_ppfcross_section_plotter_typeTextTextcross_section_plot_stemcross_section_plot_cleanTextIntegercreate_tadpolesIntegerChaptertadpole_modeltadpole_intervaltadpole_search_widthtadpole_search_sideModel/TextRealRealIntegertadpole_counttadpole_N_string_1_nameIntegerTexttadpole_N_string_2_nameTexttadpole_N_start_chRealtadpole_N_end_chRealtadpole_N_symbol_1_nameTexttadpole_N_symbol_1_colourTexttadpole_N_symbol_1_sizeRealtadpole_N_symbol_1_rotationRealtadpole_N_symbol_1_offset_xRealtadpole_N_symbol_1_offset_yRealtadpole_N_symbol_1_percentRealtadpole_N_symbol_2_nameTexttadpole_N_symbol_2_colourTexttadpole_N_symbol_2_sizeRealtadpole_N_symbol_2_rotationRealtadpole_N_symbol_2_offset_xRealtadpole_N_symbol_2_offset_yRealtadpole_N_symbol_2_percentRealThe model or name of model for tadpolesThe interval at which to create tadpolesThe search width for creating tadpolesThe side on which to create tadpoles  0 - Left and Right1 - Left 2 - RightThe number of tadpole types to be createdThe name of string 1 for the Nth tadpoleentryThe name of string 2 for the Nth tadpoleentryThe start chainage for the Nth tadpole entry(optional)The end chainage for the Nth tadpole entry(optional)The name of the first tadpole symbol for theNth tadpole entryThe name of the colour of the first tadpolesymbol for the Nth tadpole entryThe size of the first tadpole symbol for theNth tadpole entry (optional)The rotation of the first tadpole symbol forthe Nth tadpole entry (optional)The x offset of the first tadpole symbol forthe Nth tadpole entry (optional)The y ofset of the first tadpole symbol for theNth tadpole entry (optional)The percentage modifier for the first symbolfor the Nth tadpole entry (optional)The name of the second tadpole symbol forthe Nth tadpole entryThe name of the colour of the second tadpolesymbol for the Nth tadpole entryThe size of the second tadpole symbol forthe Nth tadpole entry (optional)The rotation of the second tadpole symbolfor the Nth tadpole entry (optional)The x offset of the second tadpole symbolfor the Nth tadpole entry (optional)The y offset of the second tadpole symbolfor the Nth tadpole entry (optional)The percentage modifier for the secondsymbol for the Nth tadpole entry (optional)12d Model Macro_Functions 5. 65 Plot Parameters12d Model plot parameters control the look of the different plots that 12d Model can generate. The Plot_Parameter_File is a 12d Model Variable that can contain plot parameters and the plotparameter values for a given plot type. Plot_Parameter_File TypesThe valid Plot_Parameter_File types are:section_x_plotsection_long_plotmelb_water_sewer_long_plotpipeline_long_plotdrainage_long_plotdrainage_plan_plotplot_frame_plotrainfall_methodsdesign_parametersEach type of plot has its own set of valid plot parameters. When a Plot_Parameter_File, say ppf, is first defined, it starts as an empty structure until it hasits type defined using the Create_XX_parameter calls.  The ppf then knows what plot parametersare valid for that type of plot. The Plot_Parameter_File ppf is then loaded with particular plot parameters and their values bymaking Set_Parameter calls and/or reading in data from a plot parameter file stored already disk(Read_Parameter_File). When all the required plot parameters have been set, the Plot_Parameter_File ppf can be usedto create a plot (Plot_parameter_file). The Plot_Parameter_File ppf can also be written out as a disk file so that it can be used in thefuture (Write_parameter_file). Note: note all the available parameters for a particular plot type need to be set for aPlot_Parameter_File.  For most plot parameters, there is a default value used for plotting and thatis used if the parameter is not given a value by a Set_Parameter call. Create_parameter_file(Plot_Parameter_File ppf,Text ppf_type)Set the Plot_Parameter_File ppf to be of type ppf_type and clear out any information alreadycontained in ppf.  For the valid types, see Plot_Parameter_File Types. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2447"
    },
    {
      "names": [
        "Integer Create_drainage_long_plot_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Plot Parameters Set the Plot_Parameter_File ppf to be of type drainage_long_plot, and clear out any informationalready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2452"
    },
    {
      "names": [
        "Integer Create_design_parameters_parameter_file(Plot_Parameter_File ppf)"
      ],
      "description": "Set the Plot_Parameter_File ppf to be of type design_parameters, and clear out any informationChapteralready contained in ppf. Hence if ppf already contained plot information, then all that information will be lost. A function return value of zero indicates the type is successfully set.",
      "id": "2456"
    },
    {
      "names": [
        "Integer Read_parameter_file(Plot_Parameter_File ppf, Text filename, Integer expand_includes)"
      ],
      "description": "Reads from disk a binary plot parameter file of file name filename and load the data into thePlot Parameters Plot_Parameter_File ppf.  The type of the Plot_Parameter_File is determined by the file extensionof filename. If expand_includes is no-zero then any Includes listed in filename will be read in. Any information that is already in ppf is cleared before loading the data from filename. A function return value of zero indicates the file was successfully read and loaded into ppf.",
      "id": "2457"
    },
    {
      "names": [
        "Undo Add_undo_change(Text name, Element original, Element changed)"
      ],
      "description": "Create an Undo from a copy of the original Element original and the modified Elementchanged, and give it the name name. The Undo is automatically added to the 12d Model Undo system. Return the created Undo called name as the function return value. ChapterThe Element original should not exist in a Model.  The Element changed does exist in a Model. This is telling the Undo system that an Element original has been modified to create the Elementchanged.  If the Model for original is ever needed then the parent structure of original can beused to get it. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List. Example code// make a safe copy of the element before updating the contentElement_duplicate(changed, original);// set model of original to null modelNull(null_model);Set_model(original, null_model)// code for updating the content of changedundo_item = Add_undo_change(\"my reason for changing\", original, changed);",
      "id": "1565"
    },
    {
      "names": [
        "Undo Add_undo_range(Text name, Integer id1, Integer id2)"
      ],
      "description": "Create an Undo that consists of the id range form 1d1 to id2. The Undo is given the name name. The Undo is automatically added to the 12d Model Undo system. Undos Return the created Undo called name as the function return value. This is telling the Undo system that all the Elements in the id range from Id1 to Id2 have beencreated. Note: name is the text that appears when the Undo is displayed in the 12d Model Undo List. Important note - Id's are no longer used in 12d Model and have been replaced by Uids.  Thismacro has been deprecated (i. e.  won't exist) unless the macro is compiled with a special flag. This function has been replaced by Undo Add_undo_range(Text name,Uid id1,Uid id2).",
      "id": "1567"
    },
    {
      "names": [
        "Integer Get_item(Undo_List &undo_list, Integer n, Undo &undo)"
      ],
      "description": "Get the n'th item from the Undo_List undo_list and return the item (which is an Undo) as undo. A function return value of zero indicates the Undo was successfully returned.",
      "id": "1558"
    },
    {
      "names": [
        "Integer Set_item(Undo_List &undo_list, Integer n, Undo undo)"
      ],
      "description": "Set the n'th item in the Undo_List undo_list to be the Undo undo. A function return value of zero indicates the Undo was successfully set.",
      "id": "1559"
    },
    {
      "names": [
        "Integer Null(Undo_List &undo_list)"
      ],
      "description": "Removes and nulls all the Undo's from the Undo_list undo_list and sets the number of items inundo_list to zero. That is, all the items on the Undo_List are nulled and the number of items in the Undo_List is setback to zero. Undos A function return value of zero indicates the Undo_List was successfully nulled.",
      "id": "1562"
    },
    {
      "names": [
        "Undo Add_undo_list(Text name, Undo_List list)"
      ],
      "description": "Adds the Undo_List list to the 12d Model Undo system and gives it the name name. At the same time, it automatically removes each of the Undo's in list from the 12d Model Undosystem.  So all the items in list are removed from the 12d Model Undo system and replaced bythe one item called name.",
      "id": "1568"
    },
    {
      "names": [
        "Integer Connect(Connection connection, Text connection_string, Text user, Text password)"
      ],
      "description": "This call attempts to connect to an external data source, with a username and password.  Aconnection string must also be supplied.  This is data source specific and ODBC driver specific. For more information on connection strings, see the vendor of the data source or data sourcedriver. ODBC Macro Calls This call returns 0 if successful.",
      "id": "2502"
    },
    {
      "names": [
        "Integer Add_result_column(Select_Query query, Text table, Text column_name)"
      ],
      "description": "ODBC Macro Calls This call adds a result column that belongs to a given table to the query.  Note that the table mustalready be added for this to work.  The query will retrieve that column from the supplied tablewhen it runs. The call returns 0 if successful.",
      "id": "2531"
    },
    {
      "names": [
        "Integer Add_group_by(Select_Query query, Text table_name, Text column_name)"
      ],
      "description": "ChapterThis call will group results by a given table and column name.  This is useful if your data providerallows aggregate functions for your queries. This call returns 0 if successful.",
      "id": "2532"
    },
    {
      "names": [
        "Integer Get_result_column(Database_Result result, Integer column, Real &res)"
      ],
      "description": "This call will retrieve a Real value from a Database_Result, at the current index as given bycolumn.  The value will be stored in res. This call will return 0 if successful. Chapter",
      "id": "2518"
    },
    {
      "names": [
        "Update_Query Create_update_query(Text table)"
      ],
      "description": "This call creates and returns an Update_Query.  The update query will be applied against theODBC Macro Calls table given by the table argument.",
      "id": "2541"
    },
    {
      "names": [
        "Integer Add_time_parameter(Parameter_Collection parameters, Integer value)"
      ],
      "description": "ChapterThis call will add a new timestamp parameter, from an Integer value, to aParameter_Collection. This will return 0 if successful.",
      "id": "2554"
    },
    {
      "names": [
        "Integer Run_drainage_analysis_dynamic(Text model_name)"
      ],
      "description": "ChapterA function return value of zero indicates the get operation was successful.",
      "id": "3944"
    },
    {
      "names": [
        "Integer Check_unique_attributes_with_type(Attributes attr, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "Internal Macro Calls Check for unique name for each attribute type at the top level of Attributes attr. A function return value of zero indicates the get operation was successful.",
      "id": "5426"
    },
    {
      "names": [
        "Integer Check_unique_segment_attributes_with_type(Dynamic_Element els, Integer &are_unique_names, Integer &are_unique_names_case_insensitive)"
      ],
      "description": "ChapterCheck for unique name for each element type at the top level of super string segment attributesfrom a Dynamic_Element els. A function return value of zero indicates the get operation was successful.",
      "id": "5430"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Uid uid)"
      ],
      "description": "For the macro,if the attribute called att_name does not exist then create it as type Uid and give it the valueuid.  if the attribute called att_name does exist and it is type Uid, then set its value to uid. If the attribute exists and is not of type Uid then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7556"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Text att_name, Attributes att)"
      ],
      "description": "For the macro, if the attribute called att_name does not exist then create it as type Attributes and give it thevalue att.  if the attribute called att_name does exist and it is type Attributes, then set its value to att. If the attribute exists and is not of type Attributes then a non-zero return value is returned. A function return value of zero indicates the attribute value is successfully set. Note - the Get_attribute_type call can be used to get the type of the attribute called att_name.",
      "id": "7557"
    },
    {
      "names": [
        "Integer Macro_attribute_exists(Text name, Integer &no)"
      ],
      "description": "Checks to see if a macro attribute with the name name exists in current macro. If the attribute exists, its position is returned in Integer no. This position can be used in other Attribute functions described below. ChapterA non-zero function return value indicates the attribute does exist. A zero function return value indicates that no attribute of that name exists. Warning this is the opposite of most 12dPL function return values",
      "id": "3848"
    },
    {
      "names": [
        "Integer Get_macro_attribute(Text att_name, Integer &att)"
      ],
      "description": "Get macro attribute Integer att with attribute name Text att_name in macro macro. A function return value of zero indicates the name is successfully returned. Internal Macro Calls ",
      "id": "3854"
    },
    {
      "names": [
        "Integer Set_macro_attribute(Integer att_no, Integer att)"
      ],
      "description": "Set the macro attribute at position att_no to the Integer att. The macro attribute must be of type IntegerA function return value of zero indicates the attribute was successfully set.",
      "id": "7562"
    },
    {
      "names": [
        "Integer Get_number_of_command_arguments()"
      ],
      "description": "Get the number of tokens in the program command-line. The number of tokens is returned as the function return value. For some example code, see 5.4 Command Line-Arguments.",
      "id": "432"
    },
    {
      "names": [
        "void Exit(Integer exit_code)"
      ],
      "description": "Immediately exit the program and write the message macro exited with code exit_code to the information/error message area of the macro console panel.",
      "id": "417"
    },
    {
      "names": [
        "void Exit(Text msg)"
      ],
      "description": "Immediately exit the program and write the message macro exited with message msgto the information/error message area of the macro console panel.",
      "id": "418"
    },
    {
      "names": [
        "Integer Find_text(Text text, Text tofind)"
      ],
      "description": "Find the first occurrence of the Text tofind within the Text text. If tofind exists within text, the start position of tofind is returned as the function return value. If tofind does not exist within text, a start position of zero is returned as the function return value. Hence a function return value of zero indicates the Text tofind does not exist within the Text text.",
      "id": "380"
    },
    {
      "names": [
        "void Insert_text(Text &text, Integer start, Text sub)"
      ],
      "description": "Insert the Text sub into Text text starting at position start. The displaced characters of text areplaced after sub. The Text text is automatically extended to fit sub and no characters of text are lost. There is no function return value.",
      "id": "390"
    },
    {
      "names": [
        "Text Convert_escape_characters(Text text)"
      ],
      "description": "Convert all escape characters in the Text text; i.e a backslash character followed by thecharacter n, r, or t; to the equivalent embedded characters i. e new line, return, tab. The converted Text is the returned result of the function call.",
      "id": "2810"
    },
    {
      "names": [
        "Integer Set_drainage_pit_riser_thickness(Element e, Integer p, Real pit_riser_thickness, Real Drainage String Element  pit_riser_thickness_back, Real pit_riser_thickness_left, Real pit_riser_thickness_right)"
      ],
      "description": "For the Element drain, which must of type Drainage, set the riser thicknesses for the pth pit topit_riser_thickness, pit_riser_thickness_back, pit_riser_thickness_left,pit_riser_thickness_right. If drain is not an Element of type Drainage then a non zero function return code is returned. A function return value of zero indicates the data was successfully set.",
      "id": "3975"
    },
    {
      "names": [
        "Integer Tunnel_profile_3d(Element ref_str, Text tunnel_def, Element trimesh, Real inner_extent, Real outer_extent, Dynamic_Real point_x, Dynamic_Real point_y, Dynamic_Real point_z, Dynamic_Text &e_tun_ele_name, Dynamic_Integer &e_tun_ele_idx, Dynamic_Real &e_tun_ele_dist, Dynamic_Real &e_tun_ele_per, Dynamic_Real &e_tun_ele_dir, Dynamic_Real &e_tun_ele_prev_dir, Dynamic_Real &e_tun_ele_next_dir, Dynamic_Real &e_tun_ele_radius, Dynamic_Real &e_tun_ele_os, Dynamic_Real &e_tun_prf_ch, Dynamic_Real &e_ex, Dynamic_Real &e_ey, Dynamic_Real &e_ez, Dynamic_Integer &pd_status_3d, Dynamic_Integer &pd_status_2d, Dynamic_Real &pd_dist_3d, Dynamic_Real &pd_dist_2d, Dynamic_Real &pd_sqr_vt_ch, Dynamic_Real &pd_plm_vt_ch, Dynamic_Real &pd_sqr_hz_ch, Dynamic_Real &pd_plm_hz_ch, Dynamic_Real &pd_ref_ch, Dynamic_Real &pd_sqr_zd, Dynamic_Real &pd_sqr_di, Dynamic_Real &pd_plm_zd, Dynamic_Real &pd_ref_zd, Dynamic_Real &pd_plm_os, Dynamic_Real &pd_sqr_os, Dynamic_Real Utilities  &pd_ref_os, Dynamic_Real &pd_cl_grd, Dynamic_Real &trimesh_offset, Text &message)"
      ],
      "description": "Some warning and error message would be set to the Text message. A return value of zero indicates the function call was successful.",
      "id": "3533"
    },
    {
      "names": [
        "Integer Helmert_3d_Transform(Real rx, Real ry, Real rz, Real scale, Real tx, Real ty, Real tz, Real ox, Real Utilities  oy, Real oz, Integer call_inverse, Real &x, Real &y, Real &z)"
      ],
      "description": "Apply to the 3D point with xyz-coordinate (x,y,z), the Helmert 3d transformation with parameters:X axis rotation rx (in radians)Y axis rotation ry (in radians)Z axis rotation rz (in radians)scale factorscaleTranslation(tx,ty,tz)Origin(ox,oy,oz)If Integer call_inverse is not zero, then the reserve of the given transformation will be useinstead. A function return value of zero indicates the transformation was successful.",
      "id": "3487"
    },
    {
      "names": [
        "Integer Set_apply_many_function_properties(Apply_Many_Function function,  Function_Property_Collection properties, Text &msg)"
      ],
      "description": "For the Apply_Many_Function function, set the values of function to be those in theFunction_Property_Collection properties. For more information on which properties are available, please see Apply Many FunctionProperties. Any errors such as missing properties, or properties of an incorrect type, will be reported in theText msg. A non zero function return value indicates that there was a problem creating the Apply Manyfunction. A function return value of zero indicates the Apply Many was successfully created.",
      "id": "2735"
    }
  ]
}